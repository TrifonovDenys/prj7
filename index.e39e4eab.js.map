{"mappings":"C,A,W,IyDwFc,EEzEuB,EAAQ,EHuCjC,EsHGiB,ExKrCH,EgDZtB,EACA,EAkFA,EErCQ,EAwCU,EI5FlB,EACA,EhD+C+B,EEjBA,EyDiGmC,E,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,E,S,I,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,SpE1HhE,EAAqB,SAAS,aAAA,CAAc,4BAC5C,EAAS,SAAS,aAAA,CAAc,SAChC,EAAkB,SAAS,aAAA,CAAc,qBAE/C,SAAS,IACP,EAAO,SAAA,CAAU,MAAA,CAAO,UACxB,EAAgB,SAAA,CAAU,GAAA,CAAI,SAChC,CACA,SAAS,IACP,EAAO,SAAA,CAAU,GAAA,CAAI,UACrB,EAAgB,SAAA,CAAU,MAAA,CAAO,SACnC,CAEO,IAAM,EAAY,SAAS,aAAA,CAAc,kBAEjC,SAAA,IAAA,MAAA,AAAA,CAAA,EAAf,AAAA,CAAA,EAAA,EAAA,CAAA,AAAA,EAAA,WACQ,IAAA,E,M,A,C,E,E,W,A,E,I,C,S,C,E,O,E,K,E,K,EAAO,MAAA,C,EAAM,AAAA,CAAA,EAAA,EAAA,qBAAoB,AAApB,I,A,M,E,OAAb,EAAO,EAAP,IAAA,GACN,EAAmB,kBAAA,CAAmB,YAAa,G,C,E,A,C,EACrD,EAAA,EAHe,KAAA,CAAA,IAAA,CAAA,U,CAMA,SAAA,IAAA,OAAA,EAAA,KAAA,CAAA,IAAA,CAAA,U,CAAA,SAAA,IAAA,MAAA,AAAA,CAAA,EAAf,AAAA,CAAA,EAAA,EAAA,CAAA,AAAA,EAAA,WAGQ,IAAA,E,M,A,C,E,E,W,A,E,I,C,S,C,E,O,E,K,E,K,EAAO,OAFb,EAAU,SAAA,CAAY,GACtB,IACa,C,EAAM,AAAA,CAAA,EAAA,EAAA,kBAAiB,AAAj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I,CAAA,MAAA,AAAA,CAAA,EAAA,EAAA,CAAA,AAAA,EAAA,W,M,A,C,E,E,W,A,E,I,C,S,C,E,O,E,K,E,K,EACE,GAAI,EAAK,EAAA,CACP,MADF,C,EACS,EAAK,EAAL,C,CAEC,MAAA,C,EAAM,K,A,M,EAChB,OADA,EAAK,EAAA,CAAK,EAAV,IAAA,GACA,C,EAAO,EAAK,EAAL,C,A,C,EACR,I,C,E,CAEK,IAAA,eAAN,MAAA,SAAsB,CAAmC,E,I,E,I,CAAzD,MAAA,AAAA,CAAA,EAAA,EAAA,CAAA,AAAA,EAAA,WACM,IAAA,EAMO,E,M,A,C,E,E,W,A,E,I,C,S,C,E,O,E,K,E,K,EANP,EAAc,E,E,K,C,C,M,E,E,K,C,C,M,EAIH,O,E,I,C,I,C,C,E,G,E,EAAA,C,EAAM,EAAK,OAAL,G,A,M,EACV,MAAA,C,EAAM,EADF,EAAL,IAAA,I,A,M,EACN,MAAA,C,EAAO,EAAA,IAAA,G,A,M,EAEP,GADO,EAAA,EAAA,IAAA,GACH,IAhD4B,EAiD9B,MAAM,E,OAEJ,EAAK,EAAA,GACP,EAAK,EAAA,CAAG,KAAR,GACA,EAAK,EAAA,CAAK,KAAA,G,C,E,E,A,M,E,M,C,E,E,A,M,E,M,C,E,A,C,EAKjB,I,C,E,CAMa,IAAA,mCAAN,MAAA,W,I,E,I,CAAA,MAAA,AAAA,CAAA,EAAA,EAAA,CAAA,AAAA,EAAA,W,M,A,C,E,E,W,A,E,I,C,S,C,EACN,MAAA,C,EAAO,KAAc,EAAK,kBAAA,GAAuB,EAAK,gBAA/C,G,A,EACR,I,C,E,CAKa,IAAA,qBAAN,MAAA,W,I,E,I,CAAA,MAAA,AAAA,CAAA,EAAA,EAAA,CAAA,AAAA,EAAA,W,M,A,C,E,E,W,A,E,I,C,S,C,MAKJ,EAUA,E,OAdF,EAAK,QAAA,CAAW,GAAS,YAAA,CDtLpB,KAAe,KAAoC,MCwLxD,EAAK,QAAA,CAAS,UAAA,CAAU,cAEtB,EAAA,AAAA,CAAA,EAAA,EAAA,CAAA,AAAA,EAAA,SAAO,CAAA,CAAiB,CAAxB,E,M,A,C,E,E,W,A,E,I,C,S,C,E,O,E,K,E,K,EACe,MAAA,C,EAAM,EAAK,KAAL,G,A,M,EACnB,MAAA,C,EAAO,CACL,aAAc,AAFH,EAAP,IAAA,GAEe,QAAA,CAAS,EAAK,GAAjC,CACD,E,A,C,EACH,GALO,SAAA,CAAA,CAAiB,CAAjB,E,O,E,K,C,I,C,U,IAQT,EAAK,QAAA,CAAS,UAAA,CAAU,QAEtB,EAAA,AAAA,CAAA,EAAA,EAAA,CAAA,AAAA,EAAA,SAAO,CAAA,CAAiB,CAAxB,E,M,A,C,E,E,W,A,E,I,C,S,C,EACE,MAAA,C,E,CAAO,a,C,A,EACT,GAFO,SAAA,CAAA,CAAiB,CAAjB,E,O,E,K,C,I,C,U,I,C,E,A,EAIV,I,C,E,CASa,IAAA,mBAAN,MAAA,W,I,E,I,CAAA,MAAA,AAAA,CAAA,EAAA,EAAA,CAAA,AAAA,EAAA,W,I,E,EAQA,E,M,A,C,E,E,W,A,E,I,C,S,C,E,O,E,K,E,K,EANqB,MAAA,C,EAAM,ADpOf,WAAA,OAAA,GAAA,KAAA,CAAA,IAAA,CAAA,U,I,A,M,ECqOlB,GADA,EAAK,mBAAA,CAAsB,EAA3B,IAAA,GACI,CAAC,EAAK,mBAAA,CACR,MADF,C,E,CAKgB,OAFhB,EAAK,MAAA,CAAS,IAAI,GAAO,EAAK,mBAA9B,EAEgB,C,EAAM,EAAK,MAAA,CAAO,KAAA,CAAK,OAErC,CAAA,EAAE,K,A,M,EAGJ,GAAI,CALE,CAAA,EAAU,EAAV,IAAA,EAAA,EAMJ,MADF,C,E,C,MAIE,CAAA,AAAU,OAAV,CAAA,EAAA,CAAO,CAAC,EAAC,AAAD,GAAE,AAAA,KAAA,IAAA,EAAA,KAAA,EAAA,EAAE,SAAA,AAAA,GACZ,CAAA,AAAU,OAAV,CAAA,EAAA,CAAO,CAAC,EAAC,AAAD,GAAE,AAAA,KAAA,IAAA,EAAA,KAAA,EAAA,EAAE,KAAA,CAAM,QAAA,CAAgC,aAAA,GAElD,CAAA,EAAK,8BAAA,CAAiC,CAAA,CAJxC,E,C,E,A,C,EAMD,I,C,E,CAWa,IAAA,sBAAN,MAAA,SAA0B,CAAW,E,I,E,I,CAArC,MAAA,AAAA,CAAA,EAAA,EAAA,CAAA,AAAA,EAAA,W,M,A,C,E,E,W,A,E,I,C,S,C,E,O,E,K,E,K,E,I,EACN,GACE,CAAC,EAAK,MAAA,EACN,CAAC,EAAK,mBAAA,EACN,AD1PG,CAAA,AAAA,CAAA,AAAwB,OAAxB,CAAA,EAAA,MAAA,UAAS,KAAA,EAAT,UAAW,aAAA,AAAA,GAAa,AAAA,KAAA,IAAA,EAAA,KAAA,EAAA,EAAE,UAAA,AAAA,GAAc,IAA/C,IC0PsC,EAAK,mBAAA,CAEvC,MALF,C,E,A,C,E,K,C,C,M,EAQE,O,E,I,C,I,C,C,E,G,E,EAAA,C,EAAM,EAAK,MAAA,CAAO,KAAA,CAEhB,aAAA,CAAE,IAAA,CAAG,EAEL,EAAK,8BAAA,CACF,IACA,I,A,M,E,K,E,OANL,EAAA,IAAA,G,C,E,E,A,M,E,M,C,E,A,C,EAWH,I,C,E,CAEK,IAAA,eAAN,MAAA,WAAA,MAAA,AAAA,CAAA,EAAA,EAAA,CAAA,AAAA,EAAA,WAKU,IAAA,E,M,A,C,E,E,W,A,E,I,C,S,C,E,O,E,K,E,K,EAHN,G,E,I,C,I,C,C,E,G,E,EAAI,CAAC,UACH,MADF,C,EACS,CAAA,E,CAEE,MAAA,C,EAAM,K,A,M,EACjB,MAAA,C,EAAM,GADA,EAAK,EAAL,IAAA,GACe,GAAuB,K,A,M,EAC5C,OADA,EAAA,IAAA,GACA,C,EAAM,GAAc,EAAI,I,A,M,EACxB,OADA,EAAA,IAAA,GACA,C,EAAO,CAAA,E,A,M,E,OACP,EAAA,IAAA,G,C,E,E,A,M,EACF,MAAA,C,EAAO,CAAA,E,A,C,EACR,I,C,E,CAEa,IAAA,oBAAN,MAAA,SAAwB,CAA0B,E,I,E,I,CAAlD,MAAA,AAAA,CAAA,EAAA,EAAA,CAAA,AAAA,EAAA,W,M,A,C,E,E,W,A,E,I,C,S,C,E,O,E,K,E,K,EACN,EAAK,aAAL,G,E,K,C,C,M,EAEE,O,E,I,C,I,C,C,G,E,E,EAAA,C,EAAM,I,A,M,E,OAAN,EAAA,IAAA,G,C,E,E,A,M,E,OAEA,EAAK,aAAL,G,C,E,A,M,E,M,C,E,A,C,EAEH,I,C,E,CAEK,IAAA,OAAN,MAAA,SAAW,CAAW,CAAE,CAAuB,E,I,E,I,CAA/C,MAAA,AAAA,CAAA,EAAA,EAAA,CAAA,AAAA,EAAA,W,M,A,C,E,E,W,A,E,I,C,S,C,EACE,MAAA,C,EAAO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","sources":["<anon>","src/main.js","src/js/modals.js","src/js/sidebarmaincontent.js","src/js/firebase/addLocal.js","src/js/firebase/login-modal.js","src/js/firebase/firebaseApi.js","node_modules/firebase/app/dist/esm/index.esm.js","node_modules/firebase/app/index.ts","node_modules/@firebase/app/dist/esm/index.esm2017.js","node_modules/@firebase/app/src/platformLoggerService.ts","node_modules/@firebase/app/src/logger.ts","node_modules/@firebase/app/src/constants.ts","node_modules/@firebase/app/src/internal.ts","node_modules/@firebase/app/src/errors.ts","node_modules/@firebase/app/src/firebaseApp.ts","node_modules/@firebase/app/src/api.ts","node_modules/@firebase/app/src/indexeddb.ts","node_modules/@firebase/app/src/heartbeatService.ts","node_modules/@firebase/app/src/registerCoreComponents.ts","node_modules/@firebase/app/src/index.ts","node_modules/@swc/helpers/esm/_define_property.js","node_modules/@firebase/component/dist/esm/index.esm2017.js","node_modules/@firebase/component/src/component.ts","node_modules/@firebase/component/src/constants.ts","node_modules/@firebase/component/src/provider.ts","node_modules/@firebase/component/src/component_container.ts","node_modules/@firebase/util/dist/index.esm2017.js","node_modules/@firebase/util/src/constants.ts","node_modules/@firebase/util/src/assert.ts","node_modules/@firebase/util/src/crypt.ts","node_modules/@firebase/util/src/deepCopy.ts","node_modules/@firebase/util/src/global.ts","node_modules/@firebase/util/src/defaults.ts","node_modules/@firebase/util/src/deferred.ts","node_modules/@firebase/util/src/emulator.ts","node_modules/@firebase/util/src/environment.ts","node_modules/@firebase/util/src/errors.ts","node_modules/@firebase/util/src/json.ts","node_modules/@firebase/util/src/jwt.ts","node_modules/@firebase/util/src/obj.ts","node_modules/@firebase/util/src/promise.ts","node_modules/@firebase/util/src/query.ts","node_modules/@firebase/util/src/sha1.ts","node_modules/@firebase/util/src/subscribe.ts","node_modules/@firebase/util/src/validation.ts","node_modules/@firebase/util/src/utf8.ts","node_modules/@firebase/util/src/uuid.ts","node_modules/@firebase/util/src/exponential_backoff.ts","node_modules/@firebase/util/src/formatters.ts","node_modules/@firebase/util/src/compat.ts","node_modules/@swc/helpers/esm/_wrap_native_super.js","node_modules/@swc/helpers/esm/_construct.js","node_modules/@swc/helpers/esm/_is_native_function.js","node_modules/process/browser.js","node_modules/@firebase/logger/dist/esm/index.esm2017.js","node_modules/@firebase/logger/src/logger.ts","node_modules/idb/build/index.js","node_modules/@swc/helpers/esm/_object_spread.js","node_modules/@swc/helpers/esm/_object_spread_props.js","node_modules/idb/build/wrap-idb-value.js","node_modules/@firebase/auth/dist/esm2017/index-e3d5d3f4.js","node_modules/@firebase/auth/src/model/enum_maps.ts","node_modules/@firebase/auth/src/core/errors.ts","node_modules/@firebase/auth/src/core/util/log.ts","node_modules/@firebase/auth/src/core/util/assert.ts","node_modules/@firebase/auth/src/core/util/location.ts","node_modules/@firebase/auth/src/core/util/navigator.ts","node_modules/@firebase/auth/src/core/util/delay.ts","node_modules/@firebase/auth/src/core/util/emulator.ts","node_modules/@firebase/auth/src/core/util/fetch_provider.ts","node_modules/@firebase/auth/src/api/errors.ts","node_modules/@firebase/auth/src/api/index.ts","node_modules/@firebase/auth/src/api/account_management/account.ts","node_modules/@firebase/auth/src/core/util/time.ts","node_modules/@firebase/auth/src/core/user/id_token_result.ts","node_modules/@firebase/auth/src/core/user/invalidation.ts","node_modules/@firebase/auth/src/core/user/proactive_refresh.ts","node_modules/@firebase/auth/src/core/user/user_metadata.ts","node_modules/@firebase/auth/src/core/user/reload.ts","node_modules/@firebase/auth/src/api/authentication/token.ts","node_modules/@firebase/auth/src/core/user/token_manager.ts","node_modules/@firebase/auth/src/core/user/user_impl.ts","node_modules/@firebase/auth/src/core/util/instantiator.ts","node_modules/@firebase/auth/src/core/persistence/in_memory.ts","node_modules/@firebase/auth/src/core/persistence/persistence_user_manager.ts","node_modules/@firebase/auth/src/core/util/browser.ts","node_modules/@firebase/auth/src/core/util/version.ts","node_modules/@firebase/auth/src/api/authentication/recaptcha.ts","node_modules/@firebase/auth/src/platform_browser/recaptcha/recaptcha.ts","node_modules/@firebase/auth/src/platform_browser/load_js.ts","node_modules/@firebase/auth/src/platform_browser/recaptcha/recaptcha_enterprise_verifier.ts","node_modules/@firebase/auth/src/core/auth/middleware.ts","node_modules/@firebase/auth/src/core/auth/auth_impl.ts","node_modules/@firebase/auth/src/core/auth/initialize.ts","node_modules/@firebase/auth/src/core/auth/emulator.ts","node_modules/@firebase/auth/src/core/credentials/auth_credential.ts","node_modules/@firebase/auth/src/api/account_management/email_and_password.ts","node_modules/@firebase/auth/src/api/authentication/email_and_password.ts","node_modules/@firebase/auth/src/api/authentication/email_link.ts","node_modules/@firebase/auth/src/core/credentials/email.ts","node_modules/@firebase/auth/src/api/authentication/idp.ts","node_modules/@firebase/auth/src/core/credentials/oauth.ts","node_modules/@firebase/auth/src/api/authentication/sms.ts","node_modules/@firebase/auth/src/core/credentials/phone.ts","node_modules/@firebase/auth/src/core/action_code_url.ts","node_modules/@firebase/auth/src/core/providers/email.ts","node_modules/@firebase/auth/src/core/providers/federated.ts","node_modules/@firebase/auth/src/core/providers/oauth.ts","node_modules/@firebase/auth/src/core/providers/facebook.ts","node_modules/@firebase/auth/src/core/providers/google.ts","node_modules/@firebase/auth/src/core/providers/github.ts","node_modules/@firebase/auth/src/core/credentials/saml.ts","node_modules/@firebase/auth/src/core/providers/saml.ts","node_modules/@firebase/auth/src/core/providers/twitter.ts","node_modules/@firebase/auth/src/api/authentication/sign_up.ts","node_modules/@firebase/auth/src/core/user/user_credential_impl.ts","node_modules/@firebase/auth/src/core/strategies/anonymous.ts","node_modules/@firebase/auth/src/mfa/mfa_error.ts","node_modules/@firebase/auth/src/core/util/providers.ts","node_modules/@firebase/auth/src/core/user/link_unlink.ts","node_modules/@firebase/auth/src/core/user/reauthenticate.ts","node_modules/@firebase/auth/src/core/strategies/credential.ts","node_modules/@firebase/auth/src/api/authentication/custom_token.ts","node_modules/@firebase/auth/src/core/strategies/custom_token.ts","node_modules/@firebase/auth/src/mfa/mfa_info.ts","node_modules/@firebase/auth/src/core/strategies/action_code_settings.ts","node_modules/@firebase/auth/src/core/strategies/email_and_password.ts","node_modules/@firebase/auth/src/core/strategies/email_link.ts","node_modules/@firebase/auth/src/api/authentication/create_auth_uri.ts","node_modules/@firebase/auth/src/core/strategies/email.ts","node_modules/@firebase/auth/src/api/account_management/profile.ts","node_modules/@firebase/auth/src/core/user/account_info.ts","node_modules/@firebase/auth/src/core/user/additional_user_info.ts","node_modules/@firebase/auth/src/core/index.ts","node_modules/@firebase/auth/src/mfa/mfa_session.ts","node_modules/@firebase/auth/src/mfa/mfa_resolver.ts","node_modules/@firebase/auth/src/api/account_management/mfa.ts","node_modules/@firebase/auth/src/mfa/mfa_user.ts","node_modules/@firebase/auth/src/core/persistence/index.ts","node_modules/@firebase/auth/src/platform_browser/persistence/browser.ts","node_modules/@firebase/auth/src/platform_browser/persistence/local_storage.ts","node_modules/@firebase/auth/src/platform_browser/persistence/session_storage.ts","node_modules/@firebase/auth/src/platform_browser/messagechannel/promise.ts","node_modules/@firebase/auth/src/platform_browser/messagechannel/receiver.ts","node_modules/@firebase/auth/src/core/util/event_id.ts","node_modules/@firebase/auth/src/platform_browser/messagechannel/sender.ts","node_modules/@firebase/auth/src/platform_browser/auth_window.ts","node_modules/@firebase/auth/src/platform_browser/util/worker.ts","node_modules/@firebase/auth/src/platform_browser/persistence/indexed_db.ts","node_modules/@firebase/auth/src/api/authentication/mfa.ts","node_modules/@firebase/auth/src/platform_browser/recaptcha/recaptcha_mock.ts","node_modules/@firebase/auth/src/platform_browser/recaptcha/recaptcha_loader.ts","node_modules/@firebase/auth/src/platform_browser/recaptcha/recaptcha_verifier.ts","node_modules/@firebase/auth/src/platform_browser/strategies/phone.ts","node_modules/@firebase/auth/src/platform_browser/providers/phone.ts","node_modules/@firebase/auth/src/core/util/resolver.ts","node_modules/@firebase/auth/src/core/strategies/idp.ts","node_modules/@firebase/auth/src/core/strategies/abstract_popup_redirect_operation.ts","node_modules/@firebase/auth/src/platform_browser/strategies/popup.ts","node_modules/@firebase/auth/src/core/strategies/redirect.ts","node_modules/@firebase/auth/src/platform_browser/strategies/redirect.ts","node_modules/@firebase/auth/src/core/auth/auth_event_manager.ts","node_modules/@firebase/auth/src/api/project_config/get_project_config.ts","node_modules/@firebase/auth/src/core/util/validate_origin.ts","node_modules/@firebase/auth/src/platform_browser/iframe/gapi.ts","node_modules/@firebase/auth/src/platform_browser/iframe/iframe.ts","node_modules/@firebase/auth/src/platform_browser/util/popup.ts","node_modules/@firebase/auth/src/core/util/handler.ts","node_modules/@firebase/auth/src/platform_browser/popup_redirect.ts","node_modules/@firebase/auth/src/mfa/mfa_assertion.ts","node_modules/@firebase/auth/src/platform_browser/mfa/assertions/phone.ts","node_modules/@firebase/auth/src/mfa/assertions/totp.ts","node_modules/@firebase/auth/src/core/auth/firebase_internal.ts","node_modules/@firebase/auth/src/core/auth/register.ts","node_modules/@firebase/auth/src/platform_browser/index.ts","node_modules/@swc/helpers/esm/_get.js","node_modules/@swc/helpers/esm/_super_prop_base.js","src/js/firebase/session.js"],"sourcesContent":["(function () {\nvar $parcel$global =\ntypeof globalThis !== 'undefined'\n  ? globalThis\n  : typeof self !== 'undefined'\n  ? self\n  : typeof window !== 'undefined'\n  ? window\n  : typeof global !== 'undefined'\n  ? global\n  : {};\nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequired7c6\"];\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequired7c6\"] = parcelRequire;\n}\n// Modals\nparcelRequire(\"aah0R\");\n\nvar $i7mVp = parcelRequire(\"i7mVp\");\n\nvar $4tSb9 = parcelRequire(\"4tSb9\");\n\nvar $ccCAN = parcelRequire(\"ccCAN\");\n\nvar $i7mVp = parcelRequire(\"i7mVp\");\n\nvar $aYXpI = parcelRequire(\"aYXpI\");\n\nvar $4tSb9 = parcelRequire(\"4tSb9\");\n\nvar $ccCAN = parcelRequire(\"ccCAN\");\nvar $3941a62c5600c9b7$var$sideCategoriesList = document.querySelector(\".js_side_categories_list\");\nvar $3941a62c5600c9b7$var$loader = document.querySelector(\".wrap\");\nvar $3941a62c5600c9b7$var$categoriesTitle = document.querySelector(\".title_categories\");\nfunction $3941a62c5600c9b7$var$addLoader() {\n    $3941a62c5600c9b7$var$loader.classList.remove(\"hidden\");\n    $3941a62c5600c9b7$var$categoriesTitle.classList.add(\"hidden\");\n}\nfunction $3941a62c5600c9b7$var$removeLoader() {\n    $3941a62c5600c9b7$var$loader.classList.add(\"hidden\");\n    $3941a62c5600c9b7$var$categoriesTitle.classList.remove(\"hidden\");\n}\nvar $3941a62c5600c9b7$export$e48a6d30edcb68e4 = document.querySelector(\".js_books_view\");\nfunction $3941a62c5600c9b7$var$createMarckUpSideCategories() {\n    return $3941a62c5600c9b7$var$_createMarckUpSideCategories.apply(this, arguments);\n}\nfunction $3941a62c5600c9b7$var$_createMarckUpSideCategories() {\n    $3941a62c5600c9b7$var$_createMarckUpSideCategories = (0, $i7mVp._)(function() {\n        var mark;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    return [\n                        4,\n                        (0, $ccCAN.marckUpSideCategories)()\n                    ];\n                case 1:\n                    mark = _state.sent();\n                    $3941a62c5600c9b7$var$sideCategoriesList.insertAdjacentHTML(\"beforeend\", mark);\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return $3941a62c5600c9b7$var$_createMarckUpSideCategories.apply(this, arguments);\n}\n$3941a62c5600c9b7$var$createMarckUpSideCategories();\nfunction $3941a62c5600c9b7$var$createMarckAllCategories() {\n    return $3941a62c5600c9b7$var$_createMarckAllCategories.apply(this, arguments);\n}\nfunction $3941a62c5600c9b7$var$_createMarckAllCategories() {\n    $3941a62c5600c9b7$var$_createMarckAllCategories = (0, $i7mVp._)(function() {\n        var mark;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    $3941a62c5600c9b7$export$e48a6d30edcb68e4.innerHTML = \"\";\n                    $3941a62c5600c9b7$var$addLoader();\n                    return [\n                        4,\n                        (0, $ccCAN.marckAllCategories)()\n                    ];\n                case 1:\n                    mark = _state.sent();\n                    $3941a62c5600c9b7$export$e48a6d30edcb68e4.innerHTML = mark;\n                    $3941a62c5600c9b7$var$removeLoader();\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return $3941a62c5600c9b7$var$_createMarckAllCategories.apply(this, arguments);\n}\n$3941a62c5600c9b7$var$createMarckAllCategories();\nfunction $3941a62c5600c9b7$var$createMarckCategorieItem(target) {\n    return $3941a62c5600c9b7$var$_createMarckCategorieItem.apply(this, arguments);\n}\nfunction $3941a62c5600c9b7$var$_createMarckCategorieItem() {\n    $3941a62c5600c9b7$var$_createMarckCategorieItem = (0, $i7mVp._)(function(target) {\n        var mark;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    $3941a62c5600c9b7$export$e48a6d30edcb68e4.innerHTML = \"\";\n                    $3941a62c5600c9b7$var$addLoader();\n                    return [\n                        4,\n                        (0, $ccCAN.marckCategorieItem)(target)\n                    ];\n                case 1:\n                    mark = _state.sent();\n                    $3941a62c5600c9b7$export$e48a6d30edcb68e4.innerHTML = mark;\n                    $3941a62c5600c9b7$var$removeLoader();\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return $3941a62c5600c9b7$var$_createMarckCategorieItem.apply(this, arguments);\n}\nfunction $3941a62c5600c9b7$var$createModal(bookId) {\n    var mark = (0, $ccCAN.marckModal)(bookId);\n    return mark;\n}\n$3941a62c5600c9b7$var$sideCategoriesList.addEventListener(\"click\", $3941a62c5600c9b7$var$onClick);\nfunction $3941a62c5600c9b7$var$onClick(e) {\n    return $3941a62c5600c9b7$var$_onClick.apply(this, arguments);\n}\nfunction $3941a62c5600c9b7$var$_onClick() {\n    $3941a62c5600c9b7$var$_onClick = (0, $i7mVp._)(function(e) {\n        var target;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            e.preventDefault();\n            target = e.target.textContent;\n            if (!(e.target.tagName === \"A\")) return [\n                2\n            ];\n            if (target === \"All categories\") $3941a62c5600c9b7$var$createMarckAllCategories();\n            else $3941a62c5600c9b7$var$createMarckCategorieItem(target);\n            (0, $aYXpI._)(e.currentTarget.children).map(function(el) {\n                return el.classList.remove(\"selected-category\");\n            });\n            e.target.parentNode.classList.add(\"selected-category\");\n            return [\n                2\n            ];\n        });\n    });\n    return $3941a62c5600c9b7$var$_onClick.apply(this, arguments);\n}\n// Отрисовка на кнопку See More\n$3941a62c5600c9b7$export$e48a6d30edcb68e4.addEventListener(\"click\", $3941a62c5600c9b7$var$onSeeMore);\nfunction $3941a62c5600c9b7$var$onSeeMore(e) {\n    return $3941a62c5600c9b7$var$_onSeeMore.apply(this, arguments);\n}\nfunction $3941a62c5600c9b7$var$_onSeeMore() {\n    $3941a62c5600c9b7$var$_onSeeMore = (0, $i7mVp._)(function(e) {\n        var targetBtn, fetchtitle;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    targetBtn = e.target.classList.contains(\"load-more-books\");\n                    if (!targetBtn) return [\n                        2\n                    ];\n                    fetchtitle = e.target.closest(\".category-books\").firstChild.textContent;\n                    return [\n                        4,\n                        $3941a62c5600c9b7$var$createMarckCategorieItemMore(fetchtitle)\n                    ];\n                case 1:\n                    _state.sent();\n                    e.target.classList.add(\"no-btn\");\n                    (0, $aYXpI._)(e.target.previousSibling.children).map(function(el) {\n                        return el.classList.remove(\"hidden\");\n                    });\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return $3941a62c5600c9b7$var$_onSeeMore.apply(this, arguments);\n}\nfunction $3941a62c5600c9b7$var$createMarckCategorieItemMore(target) {\n    return $3941a62c5600c9b7$var$_createMarckCategorieItemMore.apply(this, arguments);\n}\nfunction $3941a62c5600c9b7$var$_createMarckCategorieItemMore() {\n    $3941a62c5600c9b7$var$_createMarckCategorieItemMore = (0, $i7mVp._)(function(target) {\n        var listBooks, a, mark;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    listBooks = document.querySelectorAll(\".list-books\");\n                    a = (0, $aYXpI._)(listBooks).filter(function(el) {\n                        return el.dataset.category === target;\n                    });\n                    return [\n                        4,\n                        (0, $ccCAN.marckCategorieItemMore)(target)\n                    ];\n                case 1:\n                    mark = _state.sent();\n                    a[0].innerHTML = mark;\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return $3941a62c5600c9b7$var$_createMarckCategorieItemMore.apply(this, arguments);\n}\n\n\n\nvar $cBnKf = parcelRequire(\"cBnKf\");\nfunction $cac35e8b19abf9fb$export$b4aebac53294aa19(bookCard) {\n    var all = $cac35e8b19abf9fb$export$b570aaf3666b7d46();\n    all.push(bookCard);\n    localStorage.setItem(\"bookCard\", JSON.stringify(all));\n}\nfunction $cac35e8b19abf9fb$export$b570aaf3666b7d46() {\n    return JSON.parse(localStorage.getItem(\"bookCard\") || \"[]\");\n}\n\n\nvar $df97da459fafe592$var$modalCardBtn = document.querySelector(\".add-book-button\");\nvar $df97da459fafe592$var$overlay = document.querySelector(\"#overlay-modal\");\nvar $df97da459fafe592$var$closeButton = document.querySelector(\".js-modal-close\");\nvar $df97da459fafe592$var$modal = document.querySelector(\".modal\");\nvar $df97da459fafe592$var$modalContent = document.querySelector(\".modal-content\");\nvar $df97da459fafe592$var$bookId = \"\";\nfunction $df97da459fafe592$var$closeModal() {\n    $df97da459fafe592$var$modal.classList.remove(\"active\");\n    $df97da459fafe592$var$overlay.classList.remove(\"active\");\n    document.body.style.overflow = \"\";\n    $df97da459fafe592$var$closeButton.removeEventListener(\"click\", $df97da459fafe592$var$closeModal);\n    $df97da459fafe592$var$overlay.removeEventListener(\"click\", $df97da459fafe592$var$closeModal);\n    document.removeEventListener(\"keydown\", $df97da459fafe592$var$handleKeyPress);\n}\nfunction $df97da459fafe592$var$handleKeyPress(event) {\n    if (event.key === \"Escape\") $df97da459fafe592$var$closeModal();\n}\nfunction $df97da459fafe592$var$createMarckModal(bookId) {\n    return $df97da459fafe592$var$_createMarckModal.apply(this, arguments);\n}\nfunction $df97da459fafe592$var$_createMarckModal() {\n    $df97da459fafe592$var$_createMarckModal = (0, $i7mVp._)(function(bookId) {\n        var mark;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    return [\n                        4,\n                        (0, $ccCAN.marckModal)(bookId)\n                    ];\n                case 1:\n                    mark = _state.sent();\n                    $df97da459fafe592$var$modalContent.innerHTML = mark;\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return $df97da459fafe592$var$_createMarckModal.apply(this, arguments);\n}\n(0, $3941a62c5600c9b7$export$e48a6d30edcb68e4).addEventListener(\"click\", $df97da459fafe592$var$onBook);\nfunction $df97da459fafe592$var$onBook(e) {\n    return $df97da459fafe592$var$_onBook.apply(this, arguments);\n}\nfunction $df97da459fafe592$var$_onBook() {\n    $df97da459fafe592$var$_onBook = (0, $i7mVp._)(function(e) {\n        function addClass() {\n            return _addClass.apply(this, arguments);\n        }\n        function _addClass() {\n            _addClass = // const addButton = document.querySelector('.add-book-button');\n            // addButton.addEventListener('click', changeBtnText);\n            // function changeBtnText() {\n            //     if (this.textContent === 'add to shopping list') {\n            //       this.textContent = 'remove from the shopping list';\n            //     } else {\n            //       this.textContent = 'Add to shopping list';\n            //     } return\n            //   };\n            (0, $i7mVp._)(function() {\n                return (0, $4tSb9.__generator)(this, function(_state) {\n                    $df97da459fafe592$var$modal.classList.add(\"active\");\n                    $df97da459fafe592$var$overlay.classList.add(\"active\");\n                    document.body.style.overflow = \"hidden\";\n                    $df97da459fafe592$var$closeButton.addEventListener(\"click\", $df97da459fafe592$var$closeModal);\n                    $df97da459fafe592$var$overlay.addEventListener(\"click\", $df97da459fafe592$var$closeModal);\n                    document.addEventListener(\"keydown\", $df97da459fafe592$var$handleKeyPress);\n                    $df97da459fafe592$var$closeButton.removeEventListener(\"click\", $df97da459fafe592$var$onBook);\n                    $df97da459fafe592$var$overlay.removeEventListener(\"click\", $df97da459fafe592$var$onBook);\n                    return [\n                        2\n                    ];\n                });\n            });\n            return _addClass.apply(this, arguments);\n        }\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    try {\n                        $df97da459fafe592$var$bookId = e.target.closest(\".outlineli\").dataset.id;\n                    } catch (error) {\n                        return [\n                            2\n                        ];\n                    }\n                    if (!$df97da459fafe592$var$bookId) return [\n                        2\n                    ];\n                    return [\n                        4,\n                        $df97da459fafe592$var$createMarckModal($df97da459fafe592$var$bookId)\n                    ];\n                case 1:\n                    _state.sent();\n                    addClass();\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return $df97da459fafe592$var$_onBook.apply(this, arguments);\n}\n$df97da459fafe592$var$modalCardBtn.addEventListener(\"click\", $df97da459fafe592$var$onClickBtnAddCard);\nfunction $df97da459fafe592$var$onClickBtnAddCard() {\n    var booksId = document.querySelector(\".book\");\n    var id = booksId.getAttribute(\"data-book-id\");\n    (0, $cBnKf.fetchBook)(id).then(function(param) {\n        var book_image = param.book_image, title = param.title, author = param.author, description = param.description, _id = param._id, list_name = param.list_name, buy_links = param.buy_links;\n        var bookCard = {\n            book_image: book_image,\n            title: title,\n            author: author,\n            description: description,\n            _id: _id,\n            list_name: list_name,\n            buy_links: buy_links\n        };\n        (0, $cac35e8b19abf9fb$export$b4aebac53294aa19)(bookCard);\n    // modalCardBtn.textContent = 'remove from the shopping list'\n    });\n}\n\n\n\nvar $i7mVp = parcelRequire(\"i7mVp\");\n\nvar $4tSb9 = parcelRequire(\"4tSb9\");\n\nvar $i7mVp = parcelRequire(\"i7mVp\");\n\nvar $4tSb9 = parcelRequire(\"4tSb9\");\n\nvar $i7mVp = parcelRequire(\"i7mVp\");\n\nvar $juqrk = parcelRequire(\"juqrk\");\n\nvar $bNI6E = parcelRequire(\"bNI6E\");\nfunction $a568c0d5880c90ba$export$1e71eb4bef00f6b0(obj, key, value) {\n    if (key in obj) Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n    });\n    else obj[key] = value;\n    return obj;\n}\n\n\n\nvar $aYXpI = parcelRequire(\"aYXpI\");\n\nvar $4tSb9 = parcelRequire(\"4tSb9\");\n\nvar $i7mVp = parcelRequire(\"i7mVp\");\n\nvar $juqrk = parcelRequire(\"juqrk\");\n\nvar $bNI6E = parcelRequire(\"bNI6E\");\n\nvar $fGQt0 = parcelRequire(\"fGQt0\");\n\nvar $aYXpI = parcelRequire(\"aYXpI\");\n\nvar $4tSb9 = parcelRequire(\"4tSb9\");\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\r\n */ \nvar $cquyX = parcelRequire(\"cquyX\");\n\nvar $juqrk = parcelRequire(\"juqrk\");\n\nvar $bNI6E = parcelRequire(\"bNI6E\");\n\nvar $jqfyu = parcelRequire(\"jqfyu\");\n\nvar $fGQt0 = parcelRequire(\"fGQt0\");\n\nvar $aYXpI = parcelRequire(\"aYXpI\");\n\nvar $8ZYwq = parcelRequire(\"8ZYwq\");\n\nvar $3A6Ss = parcelRequire(\"3A6Ss\");\nfunction $2537243cab6b0016$export$2d841144c5f8c4ab(Parent, args, Class) {\n    if ((0, $8ZYwq._is_native_reflect_construct)()) $2537243cab6b0016$export$2d841144c5f8c4ab = Reflect.construct;\n    else $2537243cab6b0016$export$2d841144c5f8c4ab = function construct(Parent, args, Class) {\n        var a = [\n            null\n        ];\n        a.push.apply(a, args);\n        var Constructor = Function.bind.apply(Parent, a);\n        var instance = new Constructor();\n        if (Class) (0, $3A6Ss._set_prototype_of)(instance, Class.prototype);\n        return instance;\n    };\n    return $2537243cab6b0016$export$2d841144c5f8c4ab.apply(null, arguments);\n}\n\n\n\nvar $5yT7U = parcelRequire(\"5yT7U\");\nfunction $e28541d141bc916c$export$514eda94019f4334(fn) {\n    return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\n\n\nvar $3A6Ss = parcelRequire(\"3A6Ss\");\nfunction $c96ca6cb05cc1798$export$2466d533fda16e33(Class) {\n    var _cache = typeof Map === \"function\" ? new Map() : undefined;\n    $c96ca6cb05cc1798$export$2466d533fda16e33 = function(Class) {\n        if (Class === null || !(0, $e28541d141bc916c$export$514eda94019f4334)(Class)) return Class;\n        if (typeof Class !== \"function\") throw new TypeError(\"Super expression must either be null or a function\");\n        if (typeof _cache !== \"undefined\") {\n            if (_cache.has(Class)) return _cache.get(Class);\n            _cache.set(Class, Wrapper);\n        }\n        function Wrapper() {\n            return (0, $2537243cab6b0016$export$2d841144c5f8c4ab)(Class, arguments, (0, $5yT7U._get_prototype_of)(this).constructor);\n        }\n        Wrapper.prototype = Object.create(Class.prototype, {\n            constructor: {\n                value: Wrapper,\n                enumerable: false,\n                writable: true,\n                configurable: true\n            }\n        });\n        return (0, $3A6Ss._set_prototype_of)(Wrapper, Class);\n    };\n    return $c96ca6cb05cc1798$export$2466d533fda16e33(Class);\n}\n\n\n\nvar $50zho = parcelRequire(\"50zho\");\nvar $4acf49f6c3e67aec$exports = {};\n// shim for using process in browser\nvar $4acf49f6c3e67aec$var$process = $4acf49f6c3e67aec$exports = {};\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\nvar $4acf49f6c3e67aec$var$cachedSetTimeout;\nvar $4acf49f6c3e67aec$var$cachedClearTimeout;\nfunction $4acf49f6c3e67aec$var$defaultSetTimout() {\n    throw new Error(\"setTimeout has not been defined\");\n}\nfunction $4acf49f6c3e67aec$var$defaultClearTimeout() {\n    throw new Error(\"clearTimeout has not been defined\");\n}\n(function() {\n    try {\n        if (typeof setTimeout === \"function\") $4acf49f6c3e67aec$var$cachedSetTimeout = setTimeout;\n        else $4acf49f6c3e67aec$var$cachedSetTimeout = $4acf49f6c3e67aec$var$defaultSetTimout;\n    } catch (e) {\n        $4acf49f6c3e67aec$var$cachedSetTimeout = $4acf49f6c3e67aec$var$defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === \"function\") $4acf49f6c3e67aec$var$cachedClearTimeout = clearTimeout;\n        else $4acf49f6c3e67aec$var$cachedClearTimeout = $4acf49f6c3e67aec$var$defaultClearTimeout;\n    } catch (e) {\n        $4acf49f6c3e67aec$var$cachedClearTimeout = $4acf49f6c3e67aec$var$defaultClearTimeout;\n    }\n})();\nfunction $4acf49f6c3e67aec$var$runTimeout(fun) {\n    if ($4acf49f6c3e67aec$var$cachedSetTimeout === setTimeout) //normal enviroments in sane situations\n    return setTimeout(fun, 0);\n    // if setTimeout wasn't available but was latter defined\n    if (($4acf49f6c3e67aec$var$cachedSetTimeout === $4acf49f6c3e67aec$var$defaultSetTimout || !$4acf49f6c3e67aec$var$cachedSetTimeout) && setTimeout) {\n        $4acf49f6c3e67aec$var$cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return $4acf49f6c3e67aec$var$cachedSetTimeout(fun, 0);\n    } catch (e) {\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return $4acf49f6c3e67aec$var$cachedSetTimeout.call(null, fun, 0);\n        } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return $4acf49f6c3e67aec$var$cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n}\nfunction $4acf49f6c3e67aec$var$runClearTimeout(marker) {\n    if ($4acf49f6c3e67aec$var$cachedClearTimeout === clearTimeout) //normal enviroments in sane situations\n    return clearTimeout(marker);\n    // if clearTimeout wasn't available but was latter defined\n    if (($4acf49f6c3e67aec$var$cachedClearTimeout === $4acf49f6c3e67aec$var$defaultClearTimeout || !$4acf49f6c3e67aec$var$cachedClearTimeout) && clearTimeout) {\n        $4acf49f6c3e67aec$var$cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return $4acf49f6c3e67aec$var$cachedClearTimeout(marker);\n    } catch (e) {\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return $4acf49f6c3e67aec$var$cachedClearTimeout.call(null, marker);\n        } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return $4acf49f6c3e67aec$var$cachedClearTimeout.call(this, marker);\n        }\n    }\n}\nvar $4acf49f6c3e67aec$var$queue = [];\nvar $4acf49f6c3e67aec$var$draining = false;\nvar $4acf49f6c3e67aec$var$currentQueue;\nvar $4acf49f6c3e67aec$var$queueIndex = -1;\nfunction $4acf49f6c3e67aec$var$cleanUpNextTick() {\n    if (!$4acf49f6c3e67aec$var$draining || !$4acf49f6c3e67aec$var$currentQueue) return;\n    $4acf49f6c3e67aec$var$draining = false;\n    if ($4acf49f6c3e67aec$var$currentQueue.length) $4acf49f6c3e67aec$var$queue = $4acf49f6c3e67aec$var$currentQueue.concat($4acf49f6c3e67aec$var$queue);\n    else $4acf49f6c3e67aec$var$queueIndex = -1;\n    if ($4acf49f6c3e67aec$var$queue.length) $4acf49f6c3e67aec$var$drainQueue();\n}\nfunction $4acf49f6c3e67aec$var$drainQueue() {\n    if ($4acf49f6c3e67aec$var$draining) return;\n    var timeout = $4acf49f6c3e67aec$var$runTimeout($4acf49f6c3e67aec$var$cleanUpNextTick);\n    $4acf49f6c3e67aec$var$draining = true;\n    var len = $4acf49f6c3e67aec$var$queue.length;\n    while(len){\n        $4acf49f6c3e67aec$var$currentQueue = $4acf49f6c3e67aec$var$queue;\n        $4acf49f6c3e67aec$var$queue = [];\n        while(++$4acf49f6c3e67aec$var$queueIndex < len)if ($4acf49f6c3e67aec$var$currentQueue) $4acf49f6c3e67aec$var$currentQueue[$4acf49f6c3e67aec$var$queueIndex].run();\n        $4acf49f6c3e67aec$var$queueIndex = -1;\n        len = $4acf49f6c3e67aec$var$queue.length;\n    }\n    $4acf49f6c3e67aec$var$currentQueue = null;\n    $4acf49f6c3e67aec$var$draining = false;\n    $4acf49f6c3e67aec$var$runClearTimeout(timeout);\n}\n$4acf49f6c3e67aec$var$process.nextTick = function(fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];\n    $4acf49f6c3e67aec$var$queue.push(new $4acf49f6c3e67aec$var$Item(fun, args));\n    if ($4acf49f6c3e67aec$var$queue.length === 1 && !$4acf49f6c3e67aec$var$draining) $4acf49f6c3e67aec$var$runTimeout($4acf49f6c3e67aec$var$drainQueue);\n};\n// v8 likes predictible objects\nfunction $4acf49f6c3e67aec$var$Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\n$4acf49f6c3e67aec$var$Item.prototype.run = function() {\n    this.fun.apply(null, this.array);\n};\n$4acf49f6c3e67aec$var$process.title = \"browser\";\n$4acf49f6c3e67aec$var$process.browser = true;\n$4acf49f6c3e67aec$var$process.env = {};\n$4acf49f6c3e67aec$var$process.argv = [];\n$4acf49f6c3e67aec$var$process.version = \"\"; // empty string to avoid regexp issues\n$4acf49f6c3e67aec$var$process.versions = {};\nfunction $4acf49f6c3e67aec$var$noop() {}\n$4acf49f6c3e67aec$var$process.on = $4acf49f6c3e67aec$var$noop;\n$4acf49f6c3e67aec$var$process.addListener = $4acf49f6c3e67aec$var$noop;\n$4acf49f6c3e67aec$var$process.once = $4acf49f6c3e67aec$var$noop;\n$4acf49f6c3e67aec$var$process.off = $4acf49f6c3e67aec$var$noop;\n$4acf49f6c3e67aec$var$process.removeListener = $4acf49f6c3e67aec$var$noop;\n$4acf49f6c3e67aec$var$process.removeAllListeners = $4acf49f6c3e67aec$var$noop;\n$4acf49f6c3e67aec$var$process.emit = $4acf49f6c3e67aec$var$noop;\n$4acf49f6c3e67aec$var$process.prependListener = $4acf49f6c3e67aec$var$noop;\n$4acf49f6c3e67aec$var$process.prependOnceListener = $4acf49f6c3e67aec$var$noop;\n$4acf49f6c3e67aec$var$process.listeners = function(name) {\n    return [];\n};\n$4acf49f6c3e67aec$var$process.binding = function(name) {\n    throw new Error(\"process.binding is not supported\");\n};\n$4acf49f6c3e67aec$var$process.cwd = function() {\n    return \"/\";\n};\n$4acf49f6c3e67aec$var$process.chdir = function(dir) {\n    throw new Error(\"process.chdir is not supported\");\n};\n$4acf49f6c3e67aec$var$process.umask = function() {\n    return 0;\n};\n\n\nvar $1d9d263a787f8021$export$588c7fdda06fbb0a = {\n    /**\r\n     * @define {boolean} Whether this is the client Node.js SDK.\r\n     */ NODE_CLIENT: false,\n    /**\r\n     * @define {boolean} Whether this is the Admin Node.js SDK.\r\n     */ NODE_ADMIN: false,\n    /**\r\n     * Firebase SDK Version\r\n     */ SDK_VERSION: \"${JSCORE_VERSION}\"\n};\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Throws an error if the provided assertion is falsy\r\n */ var $1d9d263a787f8021$export$a7a9523472993e97 = function assert(assertion, message) {\n    if (!assertion) throw $1d9d263a787f8021$export$a39cad550e7ab28a(message);\n};\n/**\r\n * Returns an Error object suitable for throwing.\r\n */ var $1d9d263a787f8021$export$a39cad550e7ab28a = function assertionError(message) {\n    return new Error(\"Firebase Database (\" + $1d9d263a787f8021$export$588c7fdda06fbb0a.SDK_VERSION + \") INTERNAL ASSERT FAILED: \" + message);\n};\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ var $1d9d263a787f8021$var$stringToByteArray$1 = function stringToByteArray$1(str) {\n    // TODO(user): Use native implementations if/when available\n    var out = [];\n    var p = 0;\n    for(var i = 0; i < str.length; i++){\n        var c = str.charCodeAt(i);\n        if (c < 128) out[p++] = c;\n        else if (c < 2048) {\n            out[p++] = c >> 6 | 192;\n            out[p++] = c & 63 | 128;\n        } else if ((c & 0xfc00) === 0xd800 && i + 1 < str.length && (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\n            // Surrogate Pair\n            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\n            out[p++] = c >> 18 | 240;\n            out[p++] = c >> 12 & 63 | 128;\n            out[p++] = c >> 6 & 63 | 128;\n            out[p++] = c & 63 | 128;\n        } else {\n            out[p++] = c >> 12 | 224;\n            out[p++] = c >> 6 & 63 | 128;\n            out[p++] = c & 63 | 128;\n        }\n    }\n    return out;\n};\n/**\r\n * Turns an array of numbers into the string given by the concatenation of the\r\n * characters to which the numbers correspond.\r\n * @param bytes Array of numbers representing characters.\r\n * @return Stringification of the array.\r\n */ var $1d9d263a787f8021$var$byteArrayToString = function byteArrayToString(bytes) {\n    // TODO(user): Use native implementations if/when available\n    var out = [];\n    var pos = 0, c = 0;\n    while(pos < bytes.length){\n        var c1 = bytes[pos++];\n        if (c1 < 128) out[c++] = String.fromCharCode(c1);\n        else if (c1 > 191 && c1 < 224) {\n            var c2 = bytes[pos++];\n            out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);\n        } else if (c1 > 239 && c1 < 365) {\n            // Surrogate Pair\n            var c21 = bytes[pos++];\n            var c3 = bytes[pos++];\n            var c4 = bytes[pos++];\n            var u = ((c1 & 7) << 18 | (c21 & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 0x10000;\n            out[c++] = String.fromCharCode(0xd800 + (u >> 10));\n            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\n        } else {\n            var c22 = bytes[pos++];\n            var c31 = bytes[pos++];\n            out[c++] = String.fromCharCode((c1 & 15) << 12 | (c22 & 63) << 6 | c31 & 63);\n        }\n    }\n    return out.join(\"\");\n};\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\n// Static lookup maps, lazily populated by init_()\nvar $1d9d263a787f8021$export$b3b2de96497acc47 = {\n    /**\r\n     * Maps bytes to characters.\r\n     */ byteToCharMap_: null,\n    /**\r\n     * Maps characters to bytes.\r\n     */ charToByteMap_: null,\n    /**\r\n     * Maps bytes to websafe characters.\r\n     * @private\r\n     */ byteToCharMapWebSafe_: null,\n    /**\r\n     * Maps websafe characters to bytes.\r\n     * @private\r\n     */ charToByteMapWebSafe_: null,\n    /**\r\n     * Our default alphabet, shared between\r\n     * ENCODED_VALS and ENCODED_VALS_WEBSAFE\r\n     */ ENCODED_VALS_BASE: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n    /**\r\n     * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\r\n     */ get ENCODED_VALS () {\n        return this.ENCODED_VALS_BASE + \"+/=\";\n    },\n    /**\r\n     * Our websafe alphabet.\r\n     */ get ENCODED_VALS_WEBSAFE () {\n        return this.ENCODED_VALS_BASE + \"-_.\";\n    },\n    /**\r\n     * Whether this browser supports the atob and btoa functions. This extension\r\n     * started at Mozilla but is now implemented by many browsers. We use the\r\n     * ASSUME_* variables to avoid pulling in the full useragent detection library\r\n     * but still allowing the standard per-browser compilations.\r\n     *\r\n     */ HAS_NATIVE_SUPPORT: typeof atob === \"function\",\n    /**\r\n     * Base64-encode an array of bytes.\r\n     *\r\n     * @param input An array of bytes (numbers with\r\n     *     value in [0, 255]) to encode.\r\n     * @param webSafe Boolean indicating we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */ encodeByteArray: function(input, webSafe) {\n        if (!Array.isArray(input)) throw Error(\"encodeByteArray takes an array as a parameter\");\n        this.init_();\n        var byteToCharMap = webSafe ? this.byteToCharMapWebSafe_ : this.byteToCharMap_;\n        var output = [];\n        for(var i = 0; i < input.length; i += 3){\n            var byte1 = input[i];\n            var haveByte2 = i + 1 < input.length;\n            var byte2 = haveByte2 ? input[i + 1] : 0;\n            var haveByte3 = i + 2 < input.length;\n            var byte3 = haveByte3 ? input[i + 2] : 0;\n            var outByte1 = byte1 >> 2;\n            var outByte2 = (byte1 & 0x03) << 4 | byte2 >> 4;\n            var outByte3 = (byte2 & 0x0f) << 2 | byte3 >> 6;\n            var outByte4 = byte3 & 0x3f;\n            if (!haveByte3) {\n                outByte4 = 64;\n                if (!haveByte2) outByte3 = 64;\n            }\n            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);\n        }\n        return output.join(\"\");\n    },\n    /**\r\n     * Base64-encode a string.\r\n     *\r\n     * @param input A string to encode.\r\n     * @param webSafe If true, we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */ encodeString: function(input, webSafe) {\n        // Shortcut for Mozilla browsers that implement\n        // a native base64 encoder in the form of \"btoa/atob\"\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) return btoa(input);\n        return this.encodeByteArray($1d9d263a787f8021$var$stringToByteArray$1(input), webSafe);\n    },\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * @param input to decode.\r\n     * @param webSafe True if we should use the\r\n     *     alternative alphabet.\r\n     * @return string representing the decoded value.\r\n     */ decodeString: function(input, webSafe) {\n        // Shortcut for Mozilla browsers that implement\n        // a native base64 encoder in the form of \"btoa/atob\"\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) return atob(input);\n        return $1d9d263a787f8021$var$byteArrayToString(this.decodeStringToByteArray(input, webSafe));\n    },\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * In base-64 decoding, groups of four characters are converted into three\r\n     * bytes.  If the encoder did not apply padding, the input length may not\r\n     * be a multiple of 4.\r\n     *\r\n     * In this case, the last group will have fewer than 4 characters, and\r\n     * padding will be inferred.  If the group has one or two characters, it decodes\r\n     * to one byte.  If the group has three characters, it decodes to two bytes.\r\n     *\r\n     * @param input Input to decode.\r\n     * @param webSafe True if we should use the web-safe alphabet.\r\n     * @return bytes representing the decoded value.\r\n     */ decodeStringToByteArray: function(input, webSafe) {\n        this.init_();\n        var charToByteMap = webSafe ? this.charToByteMapWebSafe_ : this.charToByteMap_;\n        var output = [];\n        for(var i = 0; i < input.length;){\n            var byte1 = charToByteMap[input.charAt(i++)];\n            var haveByte2 = i < input.length;\n            var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\n            ++i;\n            var haveByte3 = i < input.length;\n            var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\n            ++i;\n            var haveByte4 = i < input.length;\n            var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\n            ++i;\n            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) throw new $1d9d263a787f8021$export$55ca9d4bee46aeb3();\n            var outByte1 = byte1 << 2 | byte2 >> 4;\n            output.push(outByte1);\n            if (byte3 !== 64) {\n                var outByte2 = byte2 << 4 & 0xf0 | byte3 >> 2;\n                output.push(outByte2);\n                if (byte4 !== 64) {\n                    var outByte3 = byte3 << 6 & 0xc0 | byte4;\n                    output.push(outByte3);\n                }\n            }\n        }\n        return output;\n    },\n    /**\r\n     * Lazy static initialization function. Called before\r\n     * accessing any of the static map variables.\r\n     * @private\r\n     */ init_: function() {\n        if (!this.byteToCharMap_) {\n            this.byteToCharMap_ = {};\n            this.charToByteMap_ = {};\n            this.byteToCharMapWebSafe_ = {};\n            this.charToByteMapWebSafe_ = {};\n            // We want quick mappings back and forth, so we precompute two maps.\n            for(var i = 0; i < this.ENCODED_VALS.length; i++){\n                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\n                this.charToByteMap_[this.byteToCharMap_[i]] = i;\n                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\n                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\n                // Be forgiving when decoding and correctly decode both encodings.\n                if (i >= this.ENCODED_VALS_BASE.length) {\n                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\n                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\n                }\n            }\n        }\n    }\n};\n/**\r\n * An error encountered while decoding base64 string.\r\n */ var $1d9d263a787f8021$export$55ca9d4bee46aeb3 = /*#__PURE__*/ function(Error1) {\n    \"use strict\";\n    (0, $jqfyu._)(DecodeBase64StringError, Error1);\n    var _super = (0, $50zho._)(DecodeBase64StringError);\n    function DecodeBase64StringError() {\n        (0, $juqrk._)(this, DecodeBase64StringError);\n        var _this;\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(Array.prototype.slice.call(arguments)));\n        _this.name = \"DecodeBase64StringError\";\n        return _this;\n    }\n    return DecodeBase64StringError;\n}((0, $c96ca6cb05cc1798$export$2466d533fda16e33)(Error));\n/**\r\n * URL-safe base64 encoding\r\n */ var $1d9d263a787f8021$export$e510a73ee562749 = function base64Encode(str) {\n    var utf8Bytes = $1d9d263a787f8021$var$stringToByteArray$1(str);\n    return $1d9d263a787f8021$export$b3b2de96497acc47.encodeByteArray(utf8Bytes, true);\n};\n/**\r\n * URL-safe base64 encoding (without \".\" padding in the end).\r\n * e.g. Used in JSON Web Token (JWT) parts.\r\n */ var $1d9d263a787f8021$export$4b5284a3025a455 = function base64urlEncodeWithoutPadding(str) {\n    // Use base64url encoding and remove padding in the end (dot characters).\n    return $1d9d263a787f8021$export$e510a73ee562749(str).replace(/\\./g, \"\");\n};\n/**\r\n * URL-safe base64 decoding\r\n *\r\n * NOTE: DO NOT use the global atob() function - it does NOT support the\r\n * base64Url variant encoding.\r\n *\r\n * @param str To be decoded\r\n * @return Decoded result, if possible\r\n */ var $1d9d263a787f8021$export$c62426fdd000a97e = function base64Decode(str) {\n    try {\n        return $1d9d263a787f8021$export$b3b2de96497acc47.decodeString(str, true);\n    } catch (e) {\n        console.error(\"base64Decode failed: \", e);\n    }\n    return null;\n};\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Do a deep-copy of basic JavaScript Objects or Arrays.\r\n */ function $1d9d263a787f8021$export$6c40052bed430212(value) {\n    return $1d9d263a787f8021$export$54e9fb29908872fa(undefined, value);\n}\n/**\r\n * Copy properties from source to target (recursively allows extension\r\n * of Objects and Arrays).  Scalar values in the target are over-written.\r\n * If target is undefined, an object of the appropriate type will be created\r\n * (and returned).\r\n *\r\n * We recursively copy all child properties of plain Objects in the source- so\r\n * that namespace- like dictionaries are merged.\r\n *\r\n * Note that the target can be a function, in which case the properties in\r\n * the source Object are copied onto it as static properties of the Function.\r\n *\r\n * Note: we don't merge __proto__ to prevent prototype pollution\r\n */ function $1d9d263a787f8021$export$54e9fb29908872fa(target, source) {\n    if (!(source instanceof Object)) return source;\n    switch(source.constructor){\n        case Date:\n            // Treat Dates like scalars; if the target date object had any child\n            // properties - they will be lost!\n            var dateValue = source;\n            return new Date(dateValue.getTime());\n        case Object:\n            if (target === undefined) target = {};\n            break;\n        case Array:\n            // Always copy the array source and overwrite the target.\n            target = [];\n            break;\n        default:\n            // Not a plain Object - treat it as a scalar.\n            return source;\n    }\n    for(var prop in source){\n        // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\n        if (!source.hasOwnProperty(prop) || !$1d9d263a787f8021$var$isValidKey(prop)) continue;\n        target[prop] = $1d9d263a787f8021$export$54e9fb29908872fa(target[prop], source[prop]);\n    }\n    return target;\n}\nfunction $1d9d263a787f8021$var$isValidKey(key) {\n    return key !== \"__proto__\";\n}\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Polyfill for `globalThis` object.\r\n * @returns the `globalThis` object for the given environment.\r\n * @public\r\n */ function $1d9d263a787f8021$export$a4e55266d2135a7f() {\n    if (typeof self !== \"undefined\") return self;\n    if (typeof window !== \"undefined\") return window;\n    if (typeof $parcel$global !== \"undefined\") return $parcel$global;\n    throw new Error(\"Unable to locate global object.\");\n}\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ var $1d9d263a787f8021$var$getDefaultsFromGlobal = function() {\n    return $1d9d263a787f8021$export$a4e55266d2135a7f().__FIREBASE_DEFAULTS__;\n};\n/**\r\n * Attempt to read defaults from a JSON string provided to\r\n * process(.)env(.)__FIREBASE_DEFAULTS__ or a JSON file whose path is in\r\n * process(.)env(.)__FIREBASE_DEFAULTS_PATH__\r\n * The dots are in parens because certain compilers (Vite?) cannot\r\n * handle seeing that variable in comments.\r\n * See https://github.com/firebase/firebase-js-sdk/issues/6838\r\n */ var $1d9d263a787f8021$var$getDefaultsFromEnvVariable = function() {\n    if (typeof $4acf49f6c3e67aec$exports === \"undefined\" || typeof $4acf49f6c3e67aec$exports.env === \"undefined\") return;\n    var defaultsJsonString = undefined;\n    if (defaultsJsonString) return JSON.parse(defaultsJsonString);\n};\nvar $1d9d263a787f8021$var$getDefaultsFromCookie = function() {\n    if (typeof document === \"undefined\") return;\n    var match;\n    try {\n        match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);\n    } catch (e) {\n        // Some environments such as Angular Universal SSR have a\n        // `document` object but error on accessing `document.cookie`.\n        return;\n    }\n    var decoded = match && $1d9d263a787f8021$export$c62426fdd000a97e(match[1]);\n    return decoded && JSON.parse(decoded);\n};\n/**\r\n * Get the __FIREBASE_DEFAULTS__ object. It checks in order:\r\n * (1) if such an object exists as a property of `globalThis`\r\n * (2) if such an object was provided on a shell environment variable\r\n * (3) if such an object exists in a cookie\r\n * @public\r\n */ var $1d9d263a787f8021$export$212bb2fc580a90a8 = function() {\n    try {\n        return $1d9d263a787f8021$var$getDefaultsFromGlobal() || $1d9d263a787f8021$var$getDefaultsFromEnvVariable() || $1d9d263a787f8021$var$getDefaultsFromCookie();\n    } catch (e) {\n        /**\r\n         * Catch-all for being unable to get __FIREBASE_DEFAULTS__ due\r\n         * to any environment case we have not accounted for. Log to\r\n         * info instead of swallowing so we can find these unknown cases\r\n         * and add paths for them if needed.\r\n         */ console.info(\"Unable to get __FIREBASE_DEFAULTS__ due to: \".concat(e));\n        return;\n    }\n};\n/**\r\n * Returns emulator host stored in the __FIREBASE_DEFAULTS__ object\r\n * for the given product.\r\n * @returns a URL host formatted like `127.0.0.1:9999` or `[::1]:4000` if available\r\n * @public\r\n */ var $1d9d263a787f8021$export$9c11895284c8adad = function(productName) {\n    var _a, _b;\n    return (_b = (_a = $1d9d263a787f8021$export$212bb2fc580a90a8()) === null || _a === void 0 ? void 0 : _a.emulatorHosts) === null || _b === void 0 ? void 0 : _b[productName];\n};\n/**\r\n * Returns emulator hostname and port stored in the __FIREBASE_DEFAULTS__ object\r\n * for the given product.\r\n * @returns a pair of hostname and port like `[\"::1\", 4000]` if available\r\n * @public\r\n */ var $1d9d263a787f8021$export$a3febcf1f14a3a0c = function(productName) {\n    var host = $1d9d263a787f8021$export$9c11895284c8adad(productName);\n    if (!host) return undefined;\n    var separatorIndex = host.lastIndexOf(\":\"); // Finding the last since IPv6 addr also has colons.\n    if (separatorIndex <= 0 || separatorIndex + 1 === host.length) throw new Error(\"Invalid host \".concat(host, \" with no separate hostname and port!\"));\n    // eslint-disable-next-line no-restricted-globals\n    var port = parseInt(host.substring(separatorIndex + 1), 10);\n    if (host[0] === \"[\") // Bracket-quoted `[ipv6addr]:port` => return \"ipv6addr\" (without brackets).\n    return [\n        host.substring(1, separatorIndex - 1),\n        port\n    ];\n    else return [\n        host.substring(0, separatorIndex),\n        port\n    ];\n};\n/**\r\n * Returns Firebase app config stored in the __FIREBASE_DEFAULTS__ object.\r\n * @public\r\n */ var $1d9d263a787f8021$export$3dfb6827a9f89756 = function() {\n    var _a;\n    return (_a = $1d9d263a787f8021$export$212bb2fc580a90a8()) === null || _a === void 0 ? void 0 : _a.config;\n};\n/**\r\n * Returns an experimental setting on the __FIREBASE_DEFAULTS__ object (properties\r\n * prefixed by \"_\")\r\n * @public\r\n */ var $1d9d263a787f8021$export$5539a1a3afe87d6 = function(name) {\n    var _a;\n    return (_a = $1d9d263a787f8021$export$212bb2fc580a90a8()) === null || _a === void 0 ? void 0 : _a[\"_\".concat(name)];\n};\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ var $1d9d263a787f8021$export$85f6557964517f1a = /*#__PURE__*/ function() {\n    \"use strict\";\n    function Deferred() {\n        var _this = this;\n        (0, $juqrk._)(this, Deferred);\n        this.reject = function() {};\n        this.resolve = function() {};\n        this.promise = new Promise(function(resolve, reject) {\n            _this.resolve = resolve;\n            _this.reject = reject;\n        });\n    }\n    (0, $bNI6E._)(Deferred, [\n        {\n            /**\r\n     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\r\n     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\r\n     * and returns a node-style callback which will resolve or reject the Deferred's promise.\r\n     */ key: \"wrapCallback\",\n            value: function wrapCallback(callback) {\n                var _this = this;\n                return function(error, value) {\n                    if (error) _this.reject(error);\n                    else _this.resolve(value);\n                    if (typeof callback === \"function\") {\n                        // Attaching noop handler just in case developer wasn't expecting\n                        // promises\n                        _this.promise.catch(function() {});\n                        // Some of our callbacks don't expect a value and our own tests\n                        // assert that the parameter length is 1\n                        if (callback.length === 1) callback(error);\n                        else callback(error, value);\n                    }\n                };\n            }\n        }\n    ]);\n    return Deferred;\n}();\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ function $1d9d263a787f8021$export$367bf224123348f1(token, projectId) {\n    if (token.uid) throw new Error('The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.');\n    // Unsecured JWTs use \"none\" as the algorithm.\n    var header = {\n        alg: \"none\",\n        type: \"JWT\"\n    };\n    var project = projectId || \"demo-project\";\n    var iat = token.iat || 0;\n    var sub = token.sub || token.user_id;\n    if (!sub) throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\n    var payload = Object.assign({\n        // Set all required fields to decent defaults\n        iss: \"https://securetoken.google.com/\".concat(project),\n        aud: project,\n        iat: iat,\n        exp: iat + 3600,\n        auth_time: iat,\n        sub: sub,\n        user_id: sub,\n        firebase: {\n            sign_in_provider: \"custom\",\n            identities: {}\n        }\n    }, token);\n    // Unsecured JWTs use the empty string as a signature.\n    var signature = \"\";\n    return [\n        $1d9d263a787f8021$export$4b5284a3025a455(JSON.stringify(header)),\n        $1d9d263a787f8021$export$4b5284a3025a455(JSON.stringify(payload)),\n        signature\n    ].join(\".\");\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Returns navigator.userAgent string or '' if it's not defined.\r\n * @return user agent string\r\n */ function $1d9d263a787f8021$export$c36915b22ce77c19() {\n    if (typeof navigator !== \"undefined\" && typeof navigator[\"userAgent\"] === \"string\") return navigator[\"userAgent\"];\n    else return \"\";\n}\n/**\r\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\r\n *\r\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\r\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\r\n * wait for a callback.\r\n */ function $1d9d263a787f8021$export$872f8323f01d7ae0() {\n    return typeof window !== \"undefined\" && // @ts-ignore Setting up an broadly applicable index signature for Window\n    // just to deal with this case would probably be a bad idea.\n    !!(window[\"cordova\"] || window[\"phonegap\"] || window[\"PhoneGap\"]) && /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test($1d9d263a787f8021$export$c36915b22ce77c19());\n}\n/**\r\n * Detect Node.js.\r\n *\r\n * @return true if Node.js environment is detected or specified.\r\n */ // Node detection logic from: https://github.com/iliakan/detect-node/\nfunction $1d9d263a787f8021$export$8ee0fc9ee280b4ee() {\n    var _a;\n    var forceEnvironment = (_a = $1d9d263a787f8021$export$212bb2fc580a90a8()) === null || _a === void 0 ? void 0 : _a.forceEnvironment;\n    if (forceEnvironment === \"node\") return true;\n    else if (forceEnvironment === \"browser\") return false;\n    try {\n        return Object.prototype.toString.call($parcel$global.process) === \"[object process]\";\n    } catch (e) {\n        return false;\n    }\n}\n/**\r\n * Detect Browser Environment\r\n */ function $1d9d263a787f8021$export$4e09c449d6c407f7() {\n    return typeof self === \"object\" && self.self === self;\n}\nfunction $1d9d263a787f8021$export$caa8774a9107a58e() {\n    var runtime = typeof chrome === \"object\" ? chrome.runtime : typeof browser === \"object\" ? browser.runtime : undefined;\n    return typeof runtime === \"object\" && runtime.id !== undefined;\n}\n/**\r\n * Detect React Native.\r\n *\r\n * @return true if ReactNative environment is detected.\r\n */ function $1d9d263a787f8021$export$f7a1e23e542d38e3() {\n    return typeof navigator === \"object\" && navigator[\"product\"] === \"ReactNative\";\n}\n/** Detects Electron apps. */ function $1d9d263a787f8021$export$f2f6a8999f8ebd30() {\n    return $1d9d263a787f8021$export$c36915b22ce77c19().indexOf(\"Electron/\") >= 0;\n}\n/** Detects Internet Explorer. */ function $1d9d263a787f8021$export$7e7b1a9668aaed8() {\n    var ua = $1d9d263a787f8021$export$c36915b22ce77c19();\n    return ua.indexOf(\"MSIE \") >= 0 || ua.indexOf(\"Trident/\") >= 0;\n}\n/** Detects Universal Windows Platform apps. */ function $1d9d263a787f8021$export$202944b2d2824246() {\n    return $1d9d263a787f8021$export$c36915b22ce77c19().indexOf(\"MSAppHost/\") >= 0;\n}\n/**\r\n * Detect whether the current SDK build is the Node version.\r\n *\r\n * @return true if it's the Node SDK build.\r\n */ function $1d9d263a787f8021$export$5d1d834fbbf8bab7() {\n    return $1d9d263a787f8021$export$588c7fdda06fbb0a.NODE_CLIENT === true || $1d9d263a787f8021$export$588c7fdda06fbb0a.NODE_ADMIN === true;\n}\n/** Returns true if we are running in Safari. */ function $1d9d263a787f8021$export$95df08bae54cb4df() {\n    return !$1d9d263a787f8021$export$8ee0fc9ee280b4ee() && navigator.userAgent.includes(\"Safari\") && !navigator.userAgent.includes(\"Chrome\");\n}\n/**\r\n * This method checks if indexedDB is supported by current browser/service worker context\r\n * @return true if indexedDB is supported by current browser/service worker context\r\n */ function $1d9d263a787f8021$export$3865db50535c2055() {\n    try {\n        return typeof indexedDB === \"object\";\n    } catch (e) {\n        return false;\n    }\n}\n/**\r\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\r\n * if errors occur during the database open operation.\r\n *\r\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\r\n * private browsing)\r\n */ function $1d9d263a787f8021$export$a8a3018f3d187a4d() {\n    return new Promise(function(resolve, reject) {\n        try {\n            var preExist = true;\n            var DB_CHECK_NAME = \"validate-browser-context-for-indexeddb-analytics-module\";\n            var request = self.indexedDB.open(DB_CHECK_NAME);\n            request.onsuccess = function() {\n                request.result.close();\n                // delete database only when it doesn't pre-exist\n                if (!preExist) self.indexedDB.deleteDatabase(DB_CHECK_NAME);\n                resolve(true);\n            };\n            request.onupgradeneeded = function() {\n                preExist = false;\n            };\n            request.onerror = function() {\n                var _a;\n                reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || \"\");\n            };\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n/**\r\n *\r\n * This method checks whether cookie is enabled within current browser\r\n * @return true if cookie is enabled within current browser\r\n */ function $1d9d263a787f8021$export$f172b7eb6cf60599() {\n    if (typeof navigator === \"undefined\" || !navigator.cookieEnabled) return false;\n    return true;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * @fileoverview Standardized Firebase Error.\r\n *\r\n * Usage:\r\n *\r\n *   // Typescript string literals for type-safe codes\r\n *   type Err =\r\n *     'unknown' |\r\n *     'object-not-found'\r\n *     ;\r\n *\r\n *   // Closure enum for type-safe error codes\r\n *   // at-enum {string}\r\n *   var Err = {\r\n *     UNKNOWN: 'unknown',\r\n *     OBJECT_NOT_FOUND: 'object-not-found',\r\n *   }\r\n *\r\n *   let errors: Map<Err, string> = {\r\n *     'generic-error': \"Unknown error\",\r\n *     'file-not-found': \"Could not find file: {$file}\",\r\n *   };\r\n *\r\n *   // Type-safe function - must pass a valid error code as param.\r\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\r\n *\r\n *   ...\r\n *   throw error.create(Err.GENERIC);\r\n *   ...\r\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\r\n *   ...\r\n *   // Service: Could not file file: foo.txt (service/file-not-found).\r\n *\r\n *   catch (e) {\r\n *     assert(e.message === \"Could not find file: foo.txt.\");\r\n *     if ((e as FirebaseError)?.code === 'service/file-not-found') {\r\n *       console.log(\"Could not read file: \" + e['file']);\r\n *     }\r\n *   }\r\n */ var $1d9d263a787f8021$var$ERROR_NAME = \"FirebaseError\";\n// Based on code from:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\nvar $1d9d263a787f8021$export$dd24e9cd51226c56 = /*#__PURE__*/ function(Error1) {\n    \"use strict\";\n    (0, $jqfyu._)(FirebaseError, Error1);\n    var _super = (0, $50zho._)(FirebaseError);\n    function FirebaseError(/** The error code for this error. */ code, message, /** Custom data for this error. */ customData) {\n        (0, $juqrk._)(this, FirebaseError);\n        var _this;\n        _this = _super.call(this, message);\n        _this.code = code;\n        _this.customData = customData;\n        /** The custom name for all FirebaseErrors. */ _this.name = $1d9d263a787f8021$var$ERROR_NAME;\n        // Fix For ES5\n        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        Object.setPrototypeOf((0, $cquyX._)(_this), FirebaseError.prototype);\n        // Maintains proper stack trace for where our error was thrown.\n        // Only available on V8.\n        if (Error.captureStackTrace) Error.captureStackTrace((0, $cquyX._)(_this), $1d9d263a787f8021$export$3fa6e1b18a3b2d40.prototype.create);\n        return _this;\n    }\n    return FirebaseError;\n}((0, $c96ca6cb05cc1798$export$2466d533fda16e33)(Error));\nvar $1d9d263a787f8021$export$3fa6e1b18a3b2d40 = /*#__PURE__*/ function() {\n    \"use strict\";\n    function ErrorFactory(service, serviceName, errors) {\n        (0, $juqrk._)(this, ErrorFactory);\n        this.service = service;\n        this.serviceName = serviceName;\n        this.errors = errors;\n    }\n    (0, $bNI6E._)(ErrorFactory, [\n        {\n            key: \"create\",\n            value: function create(code) {\n                for(var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                    data[_key - 1] = arguments[_key];\n                }\n                var customData = data[0] || {};\n                var fullCode = \"\".concat(this.service, \"/\").concat(code);\n                var template = this.errors[code];\n                var message = template ? $1d9d263a787f8021$var$replaceTemplate(template, customData) : \"Error\";\n                // Service Name: Error message (service/code).\n                var fullMessage = \"\".concat(this.serviceName, \": \").concat(message, \" (\").concat(fullCode, \").\");\n                var error = new $1d9d263a787f8021$export$dd24e9cd51226c56(fullCode, fullMessage, customData);\n                return error;\n            }\n        }\n    ]);\n    return ErrorFactory;\n}();\nfunction $1d9d263a787f8021$var$replaceTemplate(template, data) {\n    return template.replace($1d9d263a787f8021$var$PATTERN, function(_, key) {\n        var value = data[key];\n        return value != null ? String(value) : \"<\".concat(key, \"?>\");\n    });\n}\nvar $1d9d263a787f8021$var$PATTERN = /\\{\\$([^}]+)}/g;\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Evaluates a JSON string into a javascript object.\r\n *\r\n * @param {string} str A string containing JSON.\r\n * @return {*} The javascript object representing the specified JSON.\r\n */ function $1d9d263a787f8021$export$c5a53ce6a17cf18d(str) {\n    return JSON.parse(str);\n}\n/**\r\n * Returns JSON representing a javascript object.\r\n * @param {*} data Javascript object to be stringified.\r\n * @return {string} The JSON contents of the object.\r\n */ function $1d9d263a787f8021$export$fac44ee5b035f737(data) {\n    return JSON.stringify(data);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Decodes a Firebase auth. token into constituent parts.\r\n *\r\n * Notes:\r\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */ var $1d9d263a787f8021$export$2f872c0f2117be69 = function decode(token) {\n    var header = {}, claims = {}, data = {}, signature = \"\";\n    try {\n        var parts = token.split(\".\");\n        header = $1d9d263a787f8021$export$c5a53ce6a17cf18d($1d9d263a787f8021$export$c62426fdd000a97e(parts[0]) || \"\");\n        claims = $1d9d263a787f8021$export$c5a53ce6a17cf18d($1d9d263a787f8021$export$c62426fdd000a97e(parts[1]) || \"\");\n        signature = parts[2];\n        data = claims[\"d\"] || {};\n        delete claims[\"d\"];\n    } catch (e) {}\n    return {\n        header: header,\n        claims: claims,\n        data: data,\n        signature: signature\n    };\n};\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\r\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */ var $1d9d263a787f8021$export$5f870fcca7ae6a88 = function isValidTimestamp(token) {\n    var claims = $1d9d263a787f8021$export$2f872c0f2117be69(token).claims;\n    var now = Math.floor(new Date().getTime() / 1000);\n    var validSince = 0, validUntil = 0;\n    if (typeof claims === \"object\") {\n        if (claims.hasOwnProperty(\"nbf\")) validSince = claims[\"nbf\"];\n        else if (claims.hasOwnProperty(\"iat\")) validSince = claims[\"iat\"];\n        if (claims.hasOwnProperty(\"exp\")) validUntil = claims[\"exp\"];\n        else // token will expire after 24h by default\n        validUntil = validSince + 86400;\n    }\n    return !!now && !!validSince && !!validUntil && now >= validSince && now <= validUntil;\n};\n/**\r\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\r\n *\r\n * Notes:\r\n * - May return null if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */ var $1d9d263a787f8021$export$701c661ec91095f2 = function issuedAtTime(token) {\n    var claims = $1d9d263a787f8021$export$2f872c0f2117be69(token).claims;\n    if (typeof claims === \"object\" && claims.hasOwnProperty(\"iat\")) return claims[\"iat\"];\n    return null;\n};\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */ var $1d9d263a787f8021$export$9565ca3d387f8aa0 = function isValidFormat(token) {\n    var decoded = $1d9d263a787f8021$export$2f872c0f2117be69(token), claims = decoded.claims;\n    return !!claims && typeof claims === \"object\" && claims.hasOwnProperty(\"iat\");\n};\n/**\r\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */ var $1d9d263a787f8021$export$fc970ed23da99565 = function isAdmin(token) {\n    var claims = $1d9d263a787f8021$export$2f872c0f2117be69(token).claims;\n    return typeof claims === \"object\" && claims[\"admin\"] === true;\n};\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ function $1d9d263a787f8021$export$2344b14b097df817(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\nfunction $1d9d263a787f8021$export$e51ae4db7b428f67(obj, key) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) return obj[key];\n    else return undefined;\n}\nfunction $1d9d263a787f8021$export$dd1bc94b04021eeb(obj) {\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) return false;\n    }\n    return true;\n}\nfunction $1d9d263a787f8021$export$871de8747c9eaa88(obj, fn, contextObj) {\n    var res = {};\n    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) res[key] = fn.call(contextObj, obj[key], key, obj);\n    return res;\n}\n/**\r\n * Deep equal two objects. Support Arrays and Objects.\r\n */ function $1d9d263a787f8021$export$9cb4719e2e525b7a(a, b) {\n    if (a === b) return true;\n    var aKeys = Object.keys(a);\n    var bKeys = Object.keys(b);\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = aKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var k = _step.value;\n            if (!bKeys.includes(k)) return false;\n            var aProp = a[k];\n            var bProp = b[k];\n            if ($1d9d263a787f8021$var$isObject(aProp) && $1d9d263a787f8021$var$isObject(bProp)) {\n                if (!$1d9d263a787f8021$export$9cb4719e2e525b7a(aProp, bProp)) return false;\n            } else if (aProp !== bProp) return false;\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n    try {\n        for(var _iterator1 = bKeys[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){\n            var k1 = _step1.value;\n            if (!aKeys.includes(k1)) return false;\n        }\n    } catch (err) {\n        _didIteratorError1 = true;\n        _iteratorError1 = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion1 && _iterator1.return != null) {\n                _iterator1.return();\n            }\n        } finally{\n            if (_didIteratorError1) {\n                throw _iteratorError1;\n            }\n        }\n    }\n    return true;\n}\nfunction $1d9d263a787f8021$var$isObject(thing) {\n    return thing !== null && typeof thing === \"object\";\n}\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Rejects if the given promise doesn't resolve in timeInMS milliseconds.\r\n * @internal\r\n */ function $1d9d263a787f8021$export$a9cd205a244d9f54(promise) {\n    var timeInMS = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 2000;\n    var deferredPromise = new $1d9d263a787f8021$export$85f6557964517f1a();\n    setTimeout(function() {\n        return deferredPromise.reject(\"timeout!\");\n    }, timeInMS);\n    promise.then(deferredPromise.resolve, deferredPromise.reject);\n    return deferredPromise.promise;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\r\n * params object (e.g. {arg: 'val', arg2: 'val2'})\r\n * Note: You must prepend it with ? when adding it to a URL.\r\n */ function $1d9d263a787f8021$export$ac4103b836844853(querystringParams) {\n    var params = [];\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        var _loop = function() {\n            var _step_value = (0, $fGQt0._)(_step.value, 2), key = _step_value[0], value = _step_value[1];\n            if (Array.isArray(value)) value.forEach(function(arrayVal) {\n                params.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(arrayVal));\n            });\n            else params.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(value));\n        };\n        for(var _iterator = Object.entries(querystringParams)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    return params.length ? \"&\" + params.join(\"&\") : \"\";\n}\n/**\r\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\r\n * (e.g. {arg: 'val', arg2: 'val2'})\r\n */ function $1d9d263a787f8021$export$c1271ca4c8a70741(querystring) {\n    var obj = {};\n    var tokens = querystring.replace(/^\\?/, \"\").split(\"&\");\n    tokens.forEach(function(token) {\n        if (token) {\n            var _token_split = (0, $fGQt0._)(token.split(\"=\"), 2), key = _token_split[0], value = _token_split[1];\n            obj[decodeURIComponent(key)] = decodeURIComponent(value);\n        }\n    });\n    return obj;\n}\n/**\r\n * Extract the query string part of a URL, including the leading question mark (if present).\r\n */ function $1d9d263a787f8021$export$1a8408415472d8ed(url) {\n    var queryStart = url.indexOf(\"?\");\n    if (!queryStart) return \"\";\n    var fragmentStart = url.indexOf(\"#\", queryStart);\n    return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : undefined);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * @fileoverview SHA-1 cryptographic hash.\r\n * Variable names follow the notation in FIPS PUB 180-3:\r\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\r\n *\r\n * Usage:\r\n *   var sha1 = new sha1();\r\n *   sha1.update(bytes);\r\n *   var hash = sha1.digest();\r\n *\r\n * Performance:\r\n *   Chrome 23:   ~400 Mbit/s\r\n *   Firefox 16:  ~250 Mbit/s\r\n *\r\n */ /**\r\n * SHA-1 cryptographic hash constructor.\r\n *\r\n * The properties declared here are discussed in the above algorithm document.\r\n * @constructor\r\n * @final\r\n * @struct\r\n */ var $1d9d263a787f8021$export$c85d589bf4e25fef = /*#__PURE__*/ function() {\n    \"use strict\";\n    function Sha1() {\n        (0, $juqrk._)(this, Sha1);\n        /**\r\n         * Holds the previous values of accumulated variables a-e in the compress_\r\n         * function.\r\n         * @private\r\n         */ this.chain_ = [];\n        /**\r\n         * A buffer holding the partially computed hash result.\r\n         * @private\r\n         */ this.buf_ = [];\n        /**\r\n         * An array of 80 bytes, each a part of the message to be hashed.  Referred to\r\n         * as the message schedule in the docs.\r\n         * @private\r\n         */ this.W_ = [];\n        /**\r\n         * Contains data needed to pad messages less than 64 bytes.\r\n         * @private\r\n         */ this.pad_ = [];\n        /**\r\n         * @private {number}\r\n         */ this.inbuf_ = 0;\n        /**\r\n         * @private {number}\r\n         */ this.total_ = 0;\n        this.blockSize = 64;\n        this.pad_[0] = 128;\n        for(var i = 1; i < this.blockSize; ++i)this.pad_[i] = 0;\n        this.reset();\n    }\n    (0, $bNI6E._)(Sha1, [\n        {\n            key: \"reset\",\n            value: function reset() {\n                this.chain_[0] = 0x67452301;\n                this.chain_[1] = 0xefcdab89;\n                this.chain_[2] = 0x98badcfe;\n                this.chain_[3] = 0x10325476;\n                this.chain_[4] = 0xc3d2e1f0;\n                this.inbuf_ = 0;\n                this.total_ = 0;\n            }\n        },\n        {\n            /**\r\n     * Internal compress helper function.\r\n     * @param buf Block to compress.\r\n     * @param offset Offset of the block in the buffer.\r\n     * @private\r\n     */ key: \"compress_\",\n            value: function compress_(buf, offset) {\n                if (!offset) offset = 0;\n                var W = this.W_;\n                // get 16 big endian words\n                if (typeof buf === \"string\") for(var i = 0; i < 16; i++){\n                    // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\n                    // have a bug that turns the post-increment ++ operator into pre-increment\n                    // during JIT compilation.  We have code that depends heavily on SHA-1 for\n                    // correctness and which is affected by this bug, so I've removed all uses\n                    // of post-increment ++ in which the result value is used.  We can revert\n                    // this change once the Safari bug\n                    // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\n                    // most clients have been updated.\n                    W[i] = buf.charCodeAt(offset) << 24 | buf.charCodeAt(offset + 1) << 16 | buf.charCodeAt(offset + 2) << 8 | buf.charCodeAt(offset + 3);\n                    offset += 4;\n                }\n                else for(var i1 = 0; i1 < 16; i1++){\n                    W[i1] = buf[offset] << 24 | buf[offset + 1] << 16 | buf[offset + 2] << 8 | buf[offset + 3];\n                    offset += 4;\n                }\n                // expand to 80 words\n                for(var i2 = 16; i2 < 80; i2++){\n                    var t = W[i2 - 3] ^ W[i2 - 8] ^ W[i2 - 14] ^ W[i2 - 16];\n                    W[i2] = (t << 1 | t >>> 31) & 0xffffffff;\n                }\n                var a = this.chain_[0];\n                var b = this.chain_[1];\n                var c = this.chain_[2];\n                var d = this.chain_[3];\n                var e = this.chain_[4];\n                var f, k;\n                // TODO(user): Try to unroll this loop to speed up the computation.\n                for(var i3 = 0; i3 < 80; i3++){\n                    if (i3 < 40) {\n                        if (i3 < 20) {\n                            f = d ^ b & (c ^ d);\n                            k = 0x5a827999;\n                        } else {\n                            f = b ^ c ^ d;\n                            k = 0x6ed9eba1;\n                        }\n                    } else if (i3 < 60) {\n                        f = b & c | d & (b | c);\n                        k = 0x8f1bbcdc;\n                    } else {\n                        f = b ^ c ^ d;\n                        k = 0xca62c1d6;\n                    }\n                    var t1 = (a << 5 | a >>> 27) + f + e + k + W[i3] & 0xffffffff;\n                    e = d;\n                    d = c;\n                    c = (b << 30 | b >>> 2) & 0xffffffff;\n                    b = a;\n                    a = t1;\n                }\n                this.chain_[0] = this.chain_[0] + a & 0xffffffff;\n                this.chain_[1] = this.chain_[1] + b & 0xffffffff;\n                this.chain_[2] = this.chain_[2] + c & 0xffffffff;\n                this.chain_[3] = this.chain_[3] + d & 0xffffffff;\n                this.chain_[4] = this.chain_[4] + e & 0xffffffff;\n            }\n        },\n        {\n            key: \"update\",\n            value: function update(bytes, length) {\n                // TODO(johnlenz): tighten the function signature and remove this check\n                if (bytes == null) return;\n                if (length === undefined) length = bytes.length;\n                var lengthMinusBlock = length - this.blockSize;\n                var n = 0;\n                // Using local instead of member variables gives ~5% speedup on Firefox 16.\n                var buf = this.buf_;\n                var inbuf = this.inbuf_;\n                // The outer while loop should execute at most twice.\n                while(n < length){\n                    // When we have no data in the block to top up, we can directly process the\n                    // input buffer (assuming it contains sufficient data). This gives ~25%\n                    // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\n                    // the data is provided in large chunks (or in multiples of 64 bytes).\n                    if (inbuf === 0) while(n <= lengthMinusBlock){\n                        this.compress_(bytes, n);\n                        n += this.blockSize;\n                    }\n                    if (typeof bytes === \"string\") while(n < length){\n                        buf[inbuf] = bytes.charCodeAt(n);\n                        ++inbuf;\n                        ++n;\n                        if (inbuf === this.blockSize) {\n                            this.compress_(buf);\n                            inbuf = 0;\n                            break;\n                        }\n                    }\n                    else while(n < length){\n                        buf[inbuf] = bytes[n];\n                        ++inbuf;\n                        ++n;\n                        if (inbuf === this.blockSize) {\n                            this.compress_(buf);\n                            inbuf = 0;\n                            break;\n                        }\n                    }\n                }\n                this.inbuf_ = inbuf;\n                this.total_ += length;\n            }\n        },\n        {\n            /** @override */ key: \"digest\",\n            value: function digest() {\n                var digest = [];\n                var totalBits = this.total_ * 8;\n                // Add pad 0x80 0x00*.\n                if (this.inbuf_ < 56) this.update(this.pad_, 56 - this.inbuf_);\n                else this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\n                // Add # bits.\n                for(var i = this.blockSize - 1; i >= 56; i--){\n                    this.buf_[i] = totalBits & 255;\n                    totalBits /= 256; // Don't use bit-shifting here!\n                }\n                this.compress_(this.buf_);\n                var n = 0;\n                for(var i1 = 0; i1 < 5; i1++)for(var j = 24; j >= 0; j -= 8){\n                    digest[n] = this.chain_[i1] >> j & 255;\n                    ++n;\n                }\n                return digest;\n            }\n        }\n    ]);\n    return Sha1;\n}();\n/**\r\n * Helper to make a Subscribe function (just like Promise helps make a\r\n * Thenable).\r\n *\r\n * @param executor Function which can make calls to a single Observer\r\n *     as a proxy.\r\n * @param onNoObservers Callback when count of Observers goes to zero.\r\n */ function $1d9d263a787f8021$export$364097d812234b3f(executor, onNoObservers) {\n    var proxy = new $1d9d263a787f8021$var$ObserverProxy(executor, onNoObservers);\n    return proxy.subscribe.bind(proxy);\n}\n/**\r\n * Implement fan-out for any number of Observers attached via a subscribe\r\n * function.\r\n */ var $1d9d263a787f8021$var$ObserverProxy = /*#__PURE__*/ function() {\n    \"use strict\";\n    function ObserverProxy(executor, onNoObservers) {\n        var _this = this;\n        (0, $juqrk._)(this, ObserverProxy);\n        this.observers = [];\n        this.unsubscribes = [];\n        this.observerCount = 0;\n        // Micro-task scheduling by calling task.then().\n        this.task = Promise.resolve();\n        this.finalized = false;\n        this.onNoObservers = onNoObservers;\n        // Call the executor asynchronously so subscribers that are called\n        // synchronously after the creation of the subscribe function\n        // can still receive the very first value generated in the executor.\n        this.task.then(function() {\n            executor(_this);\n        }).catch(function(e) {\n            _this.error(e);\n        });\n    }\n    (0, $bNI6E._)(ObserverProxy, [\n        {\n            key: \"next\",\n            value: function next(value) {\n                this.forEachObserver(function(observer) {\n                    observer.next(value);\n                });\n            }\n        },\n        {\n            key: \"error\",\n            value: function error(error) {\n                this.forEachObserver(function(observer) {\n                    observer.error(error);\n                });\n                this.close(error);\n            }\n        },\n        {\n            key: \"complete\",\n            value: function complete() {\n                this.forEachObserver(function(observer) {\n                    observer.complete();\n                });\n                this.close();\n            }\n        },\n        {\n            /**\r\n     * Subscribe function that can be used to add an Observer to the fan-out list.\r\n     *\r\n     * - We require that no event is sent to a subscriber sychronously to their\r\n     *   call to subscribe().\r\n     */ key: \"subscribe\",\n            value: function subscribe(nextOrObserver, error, complete) {\n                var _this = this;\n                var observer;\n                if (nextOrObserver === undefined && error === undefined && complete === undefined) throw new Error(\"Missing Observer.\");\n                // Assemble an Observer object when passed as callback functions.\n                if ($1d9d263a787f8021$var$implementsAnyMethods(nextOrObserver, [\n                    \"next\",\n                    \"error\",\n                    \"complete\"\n                ])) observer = nextOrObserver;\n                else observer = {\n                    next: nextOrObserver,\n                    error: error,\n                    complete: complete\n                };\n                if (observer.next === undefined) observer.next = $1d9d263a787f8021$var$noop;\n                if (observer.error === undefined) observer.error = $1d9d263a787f8021$var$noop;\n                if (observer.complete === undefined) observer.complete = $1d9d263a787f8021$var$noop;\n                var unsub = this.unsubscribeOne.bind(this, this.observers.length);\n                // Attempt to subscribe to a terminated Observable - we\n                // just respond to the Observer with the final error or complete\n                // event.\n                if (this.finalized) // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                this.task.then(function() {\n                    try {\n                        if (_this.finalError) observer.error(_this.finalError);\n                        else observer.complete();\n                    } catch (e) {\n                    // nothing\n                    }\n                    return;\n                });\n                this.observers.push(observer);\n                return unsub;\n            }\n        },\n        {\n            // Unsubscribe is synchronous - we guarantee that no events are sent to\n            // any unsubscribed Observer.\n            key: \"unsubscribeOne\",\n            value: function unsubscribeOne(i) {\n                if (this.observers === undefined || this.observers[i] === undefined) return;\n                delete this.observers[i];\n                this.observerCount -= 1;\n                if (this.observerCount === 0 && this.onNoObservers !== undefined) this.onNoObservers(this);\n            }\n        },\n        {\n            key: \"forEachObserver\",\n            value: function forEachObserver(fn) {\n                if (this.finalized) // Already closed by previous event....just eat the additional values.\n                return;\n                // Since sendOne calls asynchronously - there is no chance that\n                // this.observers will become undefined.\n                for(var i = 0; i < this.observers.length; i++)this.sendOne(i, fn);\n            }\n        },\n        {\n            // Call the Observer via one of it's callback function. We are careful to\n            // confirm that the observe has not been unsubscribed since this asynchronous\n            // function had been queued.\n            key: \"sendOne\",\n            value: function sendOne(i, fn) {\n                var _this = this;\n                // Execute the callback asynchronously\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                this.task.then(function() {\n                    if (_this.observers !== undefined && _this.observers[i] !== undefined) try {\n                        fn(_this.observers[i]);\n                    } catch (e) {\n                        // Ignore exceptions raised in Observers or missing methods of an\n                        // Observer.\n                        // Log error to console. b/31404806\n                        if (typeof console !== \"undefined\" && console.error) console.error(e);\n                    }\n                });\n            }\n        },\n        {\n            key: \"close\",\n            value: function close(err) {\n                var _this = this;\n                if (this.finalized) return;\n                this.finalized = true;\n                if (err !== undefined) this.finalError = err;\n                // Proxy is no longer needed - garbage collect references\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                this.task.then(function() {\n                    _this.observers = undefined;\n                    _this.onNoObservers = undefined;\n                });\n            }\n        }\n    ]);\n    return ObserverProxy;\n}();\n/** Turn synchronous function into one called asynchronously. */ // eslint-disable-next-line @typescript-eslint/ban-types\nfunction $1d9d263a787f8021$export$12af436354f1a4f7(fn, onError) {\n    return function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        Promise.resolve(true).then(function() {\n            fn.apply(void 0, (0, $aYXpI._)(args));\n        }).catch(function(error) {\n            if (onError) onError(error);\n        });\n    };\n}\n/**\r\n * Return true if the object passed in implements any of the named methods.\r\n */ function $1d9d263a787f8021$var$implementsAnyMethods(obj, methods) {\n    if (typeof obj !== \"object\" || obj === null) return false;\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = methods[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var method = _step.value;\n            if (method in obj && typeof obj[method] === \"function\") return true;\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    return false;\n}\nfunction $1d9d263a787f8021$var$noop() {\n// do nothing\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Check to make sure the appropriate number of arguments are provided for a public function.\r\n * Throws an error if it fails.\r\n *\r\n * @param fnName The function name\r\n * @param minCount The minimum number of arguments to allow for the function call\r\n * @param maxCount The maximum number of argument to allow for the function call\r\n * @param argCount The actual number of arguments provided.\r\n */ var $1d9d263a787f8021$export$20164226a0ed35c3 = function validateArgCount(fnName, minCount, maxCount, argCount) {\n    var argError;\n    if (argCount < minCount) argError = \"at least \" + minCount;\n    else if (argCount > maxCount) argError = maxCount === 0 ? \"none\" : \"no more than \" + maxCount;\n    if (argError) {\n        var error = fnName + \" failed: Was called with \" + argCount + (argCount === 1 ? \" argument.\" : \" arguments.\") + \" Expects \" + argError + \".\";\n        throw new Error(error);\n    }\n};\n/**\r\n * Generates a string to prefix an error message about failed argument validation\r\n *\r\n * @param fnName The function name\r\n * @param argName The name of the argument\r\n * @return The prefix to add to the error thrown for validation.\r\n */ function $1d9d263a787f8021$export$adea4917e02d93dc(fnName, argName) {\n    return \"\".concat(fnName, \" failed: \").concat(argName, \" argument \");\n}\n/**\r\n * @param fnName\r\n * @param argumentNumber\r\n * @param namespace\r\n * @param optional\r\n */ function $1d9d263a787f8021$export$8eef22622e725943(fnName, namespace, optional) {\n    if (optional && !namespace) return;\n    if (typeof namespace !== \"string\") //TODO: I should do more validation here. We only allow certain chars in namespaces.\n    throw new Error($1d9d263a787f8021$export$adea4917e02d93dc(fnName, \"namespace\") + \"must be a valid firebase namespace.\");\n}\nfunction $1d9d263a787f8021$export$5bcd2a2eb6640dfa(fnName, argumentName, // eslint-disable-next-line @typescript-eslint/ban-types\ncallback, optional) {\n    if (optional && !callback) return;\n    if (typeof callback !== \"function\") throw new Error($1d9d263a787f8021$export$adea4917e02d93dc(fnName, argumentName) + \"must be a valid function.\");\n}\nfunction $1d9d263a787f8021$export$df77539402cfb523(fnName, argumentName, context, optional) {\n    if (optional && !context) return;\n    if (typeof context !== \"object\" || context === null) throw new Error($1d9d263a787f8021$export$adea4917e02d93dc(fnName, argumentName) + \"must be a valid context object.\");\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ // Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\n// so it's been modified.\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\n// pair).\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\n/**\r\n * @param {string} str\r\n * @return {Array}\r\n */ var $1d9d263a787f8021$export$655666783217a925 = function stringToByteArray(str) {\n    var out = [];\n    var p = 0;\n    for(var i = 0; i < str.length; i++){\n        var c = str.charCodeAt(i);\n        // Is this the lead surrogate in a surrogate pair?\n        if (c >= 0xd800 && c <= 0xdbff) {\n            var high = c - 0xd800; // the high 10 bits.\n            i++;\n            $1d9d263a787f8021$export$a7a9523472993e97(i < str.length, \"Surrogate pair missing trail surrogate.\");\n            var low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\n            c = 0x10000 + (high << 10) + low;\n        }\n        if (c < 128) out[p++] = c;\n        else if (c < 2048) {\n            out[p++] = c >> 6 | 192;\n            out[p++] = c & 63 | 128;\n        } else if (c < 65536) {\n            out[p++] = c >> 12 | 224;\n            out[p++] = c >> 6 & 63 | 128;\n            out[p++] = c & 63 | 128;\n        } else {\n            out[p++] = c >> 18 | 240;\n            out[p++] = c >> 12 & 63 | 128;\n            out[p++] = c >> 6 & 63 | 128;\n            out[p++] = c & 63 | 128;\n        }\n    }\n    return out;\n};\n/**\r\n * Calculate length without actually converting; useful for doing cheaper validation.\r\n * @param {string} str\r\n * @return {number}\r\n */ var $1d9d263a787f8021$export$9536dc0a75b20bf9 = function stringLength(str) {\n    var p = 0;\n    for(var i = 0; i < str.length; i++){\n        var c = str.charCodeAt(i);\n        if (c < 128) p++;\n        else if (c < 2048) p += 2;\n        else if (c >= 0xd800 && c <= 0xdbff) {\n            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\n            p += 4;\n            i++; // skip trail surrogate.\n        } else p += 3;\n    }\n    return p;\n};\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Copied from https://stackoverflow.com/a/2117523\r\n * Generates a new uuid.\r\n * @public\r\n */ var $1d9d263a787f8021$export$abe4376e1bf796d6 = function uuidv4() {\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n        var r = Math.random() * 16 | 0, v = c === \"x\" ? r : r & 0x3 | 0x8;\n        return v.toString(16);\n    });\n};\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * The amount of milliseconds to exponentially increase.\r\n */ var $1d9d263a787f8021$var$DEFAULT_INTERVAL_MILLIS = 1000;\n/**\r\n * The factor to backoff by.\r\n * Should be a number greater than 1.\r\n */ var $1d9d263a787f8021$var$DEFAULT_BACKOFF_FACTOR = 2;\n/**\r\n * The maximum milliseconds to increase to.\r\n *\r\n * <p>Visible for testing\r\n */ var $1d9d263a787f8021$export$bdf1213ffbdb096e = 14400000; // Four hours, like iOS and Android.\n/**\r\n * The percentage of backoff time to randomize by.\r\n * See\r\n * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic\r\n * for context.\r\n *\r\n * <p>Visible for testing\r\n */ var $1d9d263a787f8021$export$3518ed2cfe61fa30 = 0.5;\n/**\r\n * Based on the backoff method from\r\n * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.\r\n * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.\r\n */ function $1d9d263a787f8021$export$4d810c0ca64ed8e9(backoffCount) {\n    var intervalMillis = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : $1d9d263a787f8021$var$DEFAULT_INTERVAL_MILLIS, backoffFactor = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : $1d9d263a787f8021$var$DEFAULT_BACKOFF_FACTOR;\n    // Calculates an exponentially increasing value.\n    // Deviation: calculates value from count and a constant interval, so we only need to save value\n    // and count to restore state.\n    var currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);\n    // A random \"fuzz\" to avoid waves of retries.\n    // Deviation: randomFactor is required.\n    var randomWait = Math.round(// A fraction of the backoff value to add/subtract.\n    // Deviation: changes multiplication order to improve readability.\n    $1d9d263a787f8021$export$3518ed2cfe61fa30 * currBaseValue * // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines\n    // if we add or subtract.\n    (Math.random() - 0.5) * 2);\n    // Limits backoff to max to avoid effectively permanent backoff.\n    return Math.min($1d9d263a787f8021$export$bdf1213ffbdb096e, currBaseValue + randomWait);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Provide English ordinal letters after a number\r\n */ function $1d9d263a787f8021$export$7bb39f879164e4ac(i) {\n    if (!Number.isFinite(i)) return \"\".concat(i);\n    return i + $1d9d263a787f8021$var$indicator(i);\n}\nfunction $1d9d263a787f8021$var$indicator(i) {\n    i = Math.abs(i);\n    var cent = i % 100;\n    if (cent >= 10 && cent <= 20) return \"th\";\n    var dec = i % 10;\n    if (dec === 1) return \"st\";\n    if (dec === 2) return \"nd\";\n    if (dec === 3) return \"rd\";\n    return \"th\";\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ function $1d9d263a787f8021$export$4befe9b5fa509a1b(service) {\n    if (service && service._delegate) return service._delegate;\n    else return service;\n}\n\n\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */ var $4d80d01579d5bd6a$export$16fa2f45be04daa8 = /*#__PURE__*/ function() {\n    \"use strict\";\n    function Component(name, instanceFactory, type) {\n        (0, $juqrk._)(this, Component);\n        this.name = name;\n        this.instanceFactory = instanceFactory;\n        this.type = type;\n        this.multipleInstances = false;\n        /**\r\n         * Properties to be added to the service namespace\r\n         */ this.serviceProps = {};\n        this.instantiationMode = \"LAZY\" /* InstantiationMode.LAZY */ ;\n        this.onInstanceCreated = null;\n    }\n    (0, $bNI6E._)(Component, [\n        {\n            key: \"setInstantiationMode\",\n            value: function setInstantiationMode(mode) {\n                this.instantiationMode = mode;\n                return this;\n            }\n        },\n        {\n            key: \"setMultipleInstances\",\n            value: function setMultipleInstances(multipleInstances) {\n                this.multipleInstances = multipleInstances;\n                return this;\n            }\n        },\n        {\n            key: \"setServiceProps\",\n            value: function setServiceProps(props) {\n                this.serviceProps = props;\n                return this;\n            }\n        },\n        {\n            key: \"setInstanceCreatedCallback\",\n            value: function setInstanceCreatedCallback(callback) {\n                this.onInstanceCreated = callback;\n                return this;\n            }\n        }\n    ]);\n    return Component;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ var $4d80d01579d5bd6a$var$DEFAULT_ENTRY_NAME = \"[DEFAULT]\";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */ var $4d80d01579d5bd6a$export$2881499e37b75b9a = /*#__PURE__*/ function() {\n    \"use strict\";\n    function Provider(name, container) {\n        (0, $juqrk._)(this, Provider);\n        this.name = name;\n        this.container = container;\n        this.component = null;\n        this.instances = new Map();\n        this.instancesDeferred = new Map();\n        this.instancesOptions = new Map();\n        this.onInitCallbacks = new Map();\n    }\n    (0, $bNI6E._)(Provider, [\n        {\n            /**\r\n     * @param identifier A provider can provide mulitple instances of a service\r\n     * if this.component.multipleInstances is true.\r\n     */ key: \"get\",\n            value: function get(identifier) {\n                // if multipleInstances is not supported, use the default name\n                var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n                if (!this.instancesDeferred.has(normalizedIdentifier)) {\n                    var deferred = new (0, $1d9d263a787f8021$export$85f6557964517f1a)();\n                    this.instancesDeferred.set(normalizedIdentifier, deferred);\n                    if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) // initialize the service if it can be auto-initialized\n                    try {\n                        var instance = this.getOrInitializeService({\n                            instanceIdentifier: normalizedIdentifier\n                        });\n                        if (instance) deferred.resolve(instance);\n                    } catch (e) {\n                    // when the instance factory throws an exception during get(), it should not cause\n                    // a fatal error. We just return the unresolved promise in this case.\n                    }\n                }\n                return this.instancesDeferred.get(normalizedIdentifier).promise;\n            }\n        },\n        {\n            key: \"getImmediate\",\n            value: function getImmediate(options) {\n                var _a;\n                // if multipleInstances is not supported, use the default name\n                var normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);\n                var optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;\n                if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) try {\n                    return this.getOrInitializeService({\n                        instanceIdentifier: normalizedIdentifier\n                    });\n                } catch (e) {\n                    if (optional) return null;\n                    else throw e;\n                }\n                else {\n                    // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\n                    if (optional) return null;\n                    else throw Error(\"Service \".concat(this.name, \" is not available\"));\n                }\n            }\n        },\n        {\n            key: \"getComponent\",\n            value: function getComponent() {\n                return this.component;\n            }\n        },\n        {\n            key: \"setComponent\",\n            value: function setComponent(component) {\n                if (component.name !== this.name) throw Error(\"Mismatching Component \".concat(component.name, \" for Provider \").concat(this.name, \".\"));\n                if (this.component) throw Error(\"Component for \".concat(this.name, \" has already been provided\"));\n                this.component = component;\n                // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n                if (!this.shouldAutoInitialize()) return;\n                // if the service is eager, initialize the default instance\n                if ($4d80d01579d5bd6a$var$isComponentEager(component)) try {\n                    this.getOrInitializeService({\n                        instanceIdentifier: $4d80d01579d5bd6a$var$DEFAULT_ENTRY_NAME\n                    });\n                } catch (e) {\n                // when the instance factory for an eager Component throws an exception during the eager\n                // initialization, it should not cause a fatal error.\n                // TODO: Investigate if we need to make it configurable, because some component may want to cause\n                // a fatal error in this case?\n                }\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    // Create service instances for the pending promises and resolve them\n                    // NOTE: if this.multipleInstances is false, only the default instance will be created\n                    // and all promises with resolve with it regardless of the identifier.\n                    for(var _iterator = this.instancesDeferred.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var _step_value = (0, $fGQt0._)(_step.value, 2), instanceIdentifier = _step_value[0], instanceDeferred = _step_value[1];\n                        var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\n                        try {\n                            // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n                            var instance = this.getOrInitializeService({\n                                instanceIdentifier: normalizedIdentifier\n                            });\n                            instanceDeferred.resolve(instance);\n                        } catch (e) {\n                        // when the instance factory throws an exception, it should not cause\n                        // a fatal error. We just leave the promise unresolved.\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n            }\n        },\n        {\n            key: \"clearInstance\",\n            value: function clearInstance() {\n                var identifier = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : $4d80d01579d5bd6a$var$DEFAULT_ENTRY_NAME;\n                this.instancesDeferred.delete(identifier);\n                this.instancesOptions.delete(identifier);\n                this.instances.delete(identifier);\n            }\n        },\n        {\n            key: \"delete\",\n            value: // app.delete() will call this method on every provider to delete the services\n            // TODO: should we mark the provider as deleted?\n            function _delete() {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var services;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                services = Array.from(_this.instances.values());\n                                return [\n                                    4,\n                                    Promise.all((0, $aYXpI._)(services.filter(function(service) {\n                                        return \"INTERNAL\" in service;\n                                    }) // legacy services\n                                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                                    .map(function(service) {\n                                        return service.INTERNAL.delete();\n                                    })).concat((0, $aYXpI._)(services.filter(function(service) {\n                                        return \"_delete\" in service;\n                                    }) // modularized services\n                                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                                    .map(function(service) {\n                                        return service._delete();\n                                    }))))\n                                ];\n                            case 1:\n                                _state.sent();\n                                return [\n                                    2\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"isComponentSet\",\n            value: function isComponentSet() {\n                return this.component != null;\n            }\n        },\n        {\n            key: \"isInitialized\",\n            value: function isInitialized() {\n                var identifier = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : $4d80d01579d5bd6a$var$DEFAULT_ENTRY_NAME;\n                return this.instances.has(identifier);\n            }\n        },\n        {\n            key: \"getOptions\",\n            value: function getOptions() {\n                var identifier = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : $4d80d01579d5bd6a$var$DEFAULT_ENTRY_NAME;\n                return this.instancesOptions.get(identifier) || {};\n            }\n        },\n        {\n            key: \"initialize\",\n            value: function initialize() {\n                var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n                var _opts_options = opts.options, options = _opts_options === void 0 ? {} : _opts_options;\n                var normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);\n                if (this.isInitialized(normalizedIdentifier)) throw Error(\"\".concat(this.name, \"(\").concat(normalizedIdentifier, \") has already been initialized\"));\n                if (!this.isComponentSet()) throw Error(\"Component \".concat(this.name, \" has not been registered yet\"));\n                var instance = this.getOrInitializeService({\n                    instanceIdentifier: normalizedIdentifier,\n                    options: options\n                });\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    // resolve any pending promise waiting for the service instance\n                    for(var _iterator = this.instancesDeferred.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var _step_value = (0, $fGQt0._)(_step.value, 2), instanceIdentifier = _step_value[0], instanceDeferred = _step_value[1];\n                        var normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\n                        if (normalizedIdentifier === normalizedDeferredIdentifier) instanceDeferred.resolve(instance);\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                return instance;\n            }\n        },\n        {\n            /**\r\n     *\r\n     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\r\n     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\r\n     *\r\n     * @param identifier An optional instance identifier\r\n     * @returns a function to unregister the callback\r\n     */ key: \"onInit\",\n            value: function onInit(callback, identifier) {\n                var _a;\n                var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n                var existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();\n                existingCallbacks.add(callback);\n                this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n                var existingInstance = this.instances.get(normalizedIdentifier);\n                if (existingInstance) callback(existingInstance, normalizedIdentifier);\n                return function() {\n                    existingCallbacks.delete(callback);\n                };\n            }\n        },\n        {\n            /**\r\n     * Invoke onInit callbacks synchronously\r\n     * @param instance the service instance`\r\n     */ key: \"invokeOnInitCallbacks\",\n            value: function invokeOnInitCallbacks(instance, identifier) {\n                var callbacks = this.onInitCallbacks.get(identifier);\n                if (!callbacks) return;\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = callbacks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var callback = _step.value;\n                        try {\n                            callback(instance, identifier);\n                        } catch (_a) {\n                        // ignore errors in the onInit callback\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n            }\n        },\n        {\n            key: \"getOrInitializeService\",\n            value: function getOrInitializeService(param) {\n                var instanceIdentifier = param.instanceIdentifier, _param_options = param.options, options = _param_options === void 0 ? {} : _param_options;\n                var instance = this.instances.get(instanceIdentifier);\n                if (!instance && this.component) {\n                    instance = this.component.instanceFactory(this.container, {\n                        instanceIdentifier: $4d80d01579d5bd6a$var$normalizeIdentifierForFactory(instanceIdentifier),\n                        options: options\n                    });\n                    this.instances.set(instanceIdentifier, instance);\n                    this.instancesOptions.set(instanceIdentifier, options);\n                    /**\r\n             * Invoke onInit listeners.\r\n             * Note this.component.onInstanceCreated is different, which is used by the component creator,\r\n             * while onInit listeners are registered by consumers of the provider.\r\n             */ this.invokeOnInitCallbacks(instance, instanceIdentifier);\n                    /**\r\n             * Order is important\r\n             * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\r\n             * makes `isInitialized()` return true.\r\n             */ if (this.component.onInstanceCreated) try {\n                        this.component.onInstanceCreated(this.container, instanceIdentifier, instance);\n                    } catch (_a) {\n                    // ignore errors in the onInstanceCreatedCallback\n                    }\n                }\n                return instance || null;\n            }\n        },\n        {\n            key: \"normalizeInstanceIdentifier\",\n            value: function normalizeInstanceIdentifier() {\n                var identifier = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : $4d80d01579d5bd6a$var$DEFAULT_ENTRY_NAME;\n                if (this.component) return this.component.multipleInstances ? identifier : $4d80d01579d5bd6a$var$DEFAULT_ENTRY_NAME;\n                else return identifier; // assume multiple instances are supported before the component is provided.\n            }\n        },\n        {\n            key: \"shouldAutoInitialize\",\n            value: function shouldAutoInitialize() {\n                return !!this.component && this.component.instantiationMode !== \"EXPLICIT\" /* InstantiationMode.EXPLICIT */ ;\n            }\n        }\n    ]);\n    return Provider;\n}();\n// undefined should be passed to the service factory for the default instance\nfunction $4d80d01579d5bd6a$var$normalizeIdentifierForFactory(identifier) {\n    return identifier === $4d80d01579d5bd6a$var$DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\nfunction $4d80d01579d5bd6a$var$isComponentEager(component) {\n    return component.instantiationMode === \"EAGER\" /* InstantiationMode.EAGER */ ;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */ var $4d80d01579d5bd6a$export$436a80eea5d5c0c5 = /*#__PURE__*/ function() {\n    \"use strict\";\n    function ComponentContainer(name) {\n        (0, $juqrk._)(this, ComponentContainer);\n        this.name = name;\n        this.providers = new Map();\n    }\n    (0, $bNI6E._)(ComponentContainer, [\n        {\n            /**\r\n     *\r\n     * @param component Component being added\r\n     * @param overwrite When a component with the same name has already been registered,\r\n     * if overwrite is true: overwrite the existing component with the new component and create a new\r\n     * provider with the new component. It can be useful in tests where you want to use different mocks\r\n     * for different tests.\r\n     * if overwrite is false: throw an exception\r\n     */ key: \"addComponent\",\n            value: function addComponent(component) {\n                var provider = this.getProvider(component.name);\n                if (provider.isComponentSet()) throw new Error(\"Component \".concat(component.name, \" has already been registered with \").concat(this.name));\n                provider.setComponent(component);\n            }\n        },\n        {\n            key: \"addOrOverwriteComponent\",\n            value: function addOrOverwriteComponent(component) {\n                var provider = this.getProvider(component.name);\n                if (provider.isComponentSet()) // delete the existing provider from the container, so we can register the new component\n                this.providers.delete(component.name);\n                this.addComponent(component);\n            }\n        },\n        {\n            /**\r\n     * getProvider provides a type safe interface where it can only be called with a field name\r\n     * present in NameServiceMapping interface.\r\n     *\r\n     * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n     * themselves.\r\n     */ key: \"getProvider\",\n            value: function getProvider(name) {\n                if (this.providers.has(name)) return this.providers.get(name);\n                // create a Provider for a service that hasn't registered with Firebase\n                var provider = new $4d80d01579d5bd6a$export$2881499e37b75b9a(name, this);\n                this.providers.set(name, provider);\n                return provider;\n            }\n        },\n        {\n            key: \"getProviders\",\n            value: function getProviders() {\n                return Array.from(this.providers.values());\n            }\n        }\n    ]);\n    return ComponentContainer;\n}();\n\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * A container for all of the Logger instances\r\n */ \nvar $juqrk = parcelRequire(\"juqrk\");\n\nvar $bNI6E = parcelRequire(\"bNI6E\");\n\n\nvar $aYXpI = parcelRequire(\"aYXpI\");\nvar $f4758df7279d6c6a$var$instances = [];\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */ var $f4758df7279d6c6a$export$243e62d78d3b544d;\n(function(LogLevel) {\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\n    LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\n    LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\n    LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\n    LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\n})($f4758df7279d6c6a$export$243e62d78d3b544d || ($f4758df7279d6c6a$export$243e62d78d3b544d = {}));\nvar $f4758df7279d6c6a$var$levelStringToEnum = {\n    \"debug\": $f4758df7279d6c6a$export$243e62d78d3b544d.DEBUG,\n    \"verbose\": $f4758df7279d6c6a$export$243e62d78d3b544d.VERBOSE,\n    \"info\": $f4758df7279d6c6a$export$243e62d78d3b544d.INFO,\n    \"warn\": $f4758df7279d6c6a$export$243e62d78d3b544d.WARN,\n    \"error\": $f4758df7279d6c6a$export$243e62d78d3b544d.ERROR,\n    \"silent\": $f4758df7279d6c6a$export$243e62d78d3b544d.SILENT\n};\n/**\r\n * The default log level\r\n */ var $f4758df7279d6c6a$var$defaultLogLevel = $f4758df7279d6c6a$export$243e62d78d3b544d.INFO;\nvar $f4758df7279d6c6a$var$_obj;\n/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */ var $f4758df7279d6c6a$var$ConsoleMethod = ($f4758df7279d6c6a$var$_obj = {}, (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($f4758df7279d6c6a$var$_obj, $f4758df7279d6c6a$export$243e62d78d3b544d.DEBUG, \"log\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($f4758df7279d6c6a$var$_obj, $f4758df7279d6c6a$export$243e62d78d3b544d.VERBOSE, \"log\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($f4758df7279d6c6a$var$_obj, $f4758df7279d6c6a$export$243e62d78d3b544d.INFO, \"info\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($f4758df7279d6c6a$var$_obj, $f4758df7279d6c6a$export$243e62d78d3b544d.WARN, \"warn\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($f4758df7279d6c6a$var$_obj, $f4758df7279d6c6a$export$243e62d78d3b544d.ERROR, \"error\"), $f4758df7279d6c6a$var$_obj);\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */ var $f4758df7279d6c6a$var$defaultLogHandler = function(instance, logType) {\n    for(var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){\n        args[_key - 2] = arguments[_key];\n    }\n    var _console;\n    if (logType < instance.logLevel) return;\n    var now = new Date().toISOString();\n    var method = $f4758df7279d6c6a$var$ConsoleMethod[logType];\n    if (method) (_console = console)[method].apply(_console, [\n        \"[\".concat(now, \"]  \").concat(instance.name, \":\")\n    ].concat((0, $aYXpI._)(args)));\n    else throw new Error(\"Attempted to log a message with an invalid logType (value: \".concat(logType, \")\"));\n};\nvar $f4758df7279d6c6a$export$efa9a398d6368992 = /*#__PURE__*/ function() {\n    \"use strict\";\n    function Logger(name) {\n        (0, $juqrk._)(this, Logger);\n        this.name = name;\n        /**\r\n         * The log level of the given Logger instance.\r\n         */ this._logLevel = $f4758df7279d6c6a$var$defaultLogLevel;\n        /**\r\n         * The main (internal) log handler for the Logger instance.\r\n         * Can be set to a new function in internal package code but not by user.\r\n         */ this._logHandler = $f4758df7279d6c6a$var$defaultLogHandler;\n        /**\r\n         * The optional, additional, user-defined log handler for the Logger instance.\r\n         */ this._userLogHandler = null;\n        /**\r\n         * Capture the current instance for later use\r\n         */ $f4758df7279d6c6a$var$instances.push(this);\n    }\n    (0, $bNI6E._)(Logger, [\n        {\n            key: \"logLevel\",\n            get: function get() {\n                return this._logLevel;\n            },\n            set: function set(val) {\n                if (!(val in $f4758df7279d6c6a$export$243e62d78d3b544d)) throw new TypeError('Invalid value \"'.concat(val, '\" assigned to `logLevel`'));\n                this._logLevel = val;\n            }\n        },\n        {\n            // Workaround for setter/getter having to be the same type.\n            key: \"setLogLevel\",\n            value: function setLogLevel(val) {\n                this._logLevel = typeof val === \"string\" ? $f4758df7279d6c6a$var$levelStringToEnum[val] : val;\n            }\n        },\n        {\n            key: \"logHandler\",\n            get: function get() {\n                return this._logHandler;\n            },\n            set: function set(val) {\n                if (typeof val !== \"function\") throw new TypeError(\"Value assigned to `logHandler` must be a function\");\n                this._logHandler = val;\n            }\n        },\n        {\n            key: \"userLogHandler\",\n            get: function get() {\n                return this._userLogHandler;\n            },\n            set: function set(val) {\n                this._userLogHandler = val;\n            }\n        },\n        {\n            /**\r\n     * The functions below are all based on the `console` interface\r\n     */ key: \"debug\",\n            value: function debug() {\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                this._userLogHandler && this._userLogHandler.apply(this, [\n                    this,\n                    $f4758df7279d6c6a$export$243e62d78d3b544d.DEBUG\n                ].concat((0, $aYXpI._)(args)));\n                this._logHandler.apply(this, [\n                    this,\n                    $f4758df7279d6c6a$export$243e62d78d3b544d.DEBUG\n                ].concat((0, $aYXpI._)(args)));\n            }\n        },\n        {\n            key: \"log\",\n            value: function log() {\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                this._userLogHandler && this._userLogHandler.apply(this, [\n                    this,\n                    $f4758df7279d6c6a$export$243e62d78d3b544d.VERBOSE\n                ].concat((0, $aYXpI._)(args)));\n                this._logHandler.apply(this, [\n                    this,\n                    $f4758df7279d6c6a$export$243e62d78d3b544d.VERBOSE\n                ].concat((0, $aYXpI._)(args)));\n            }\n        },\n        {\n            key: \"info\",\n            value: function info() {\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                this._userLogHandler && this._userLogHandler.apply(this, [\n                    this,\n                    $f4758df7279d6c6a$export$243e62d78d3b544d.INFO\n                ].concat((0, $aYXpI._)(args)));\n                this._logHandler.apply(this, [\n                    this,\n                    $f4758df7279d6c6a$export$243e62d78d3b544d.INFO\n                ].concat((0, $aYXpI._)(args)));\n            }\n        },\n        {\n            key: \"warn\",\n            value: function warn() {\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                this._userLogHandler && this._userLogHandler.apply(this, [\n                    this,\n                    $f4758df7279d6c6a$export$243e62d78d3b544d.WARN\n                ].concat((0, $aYXpI._)(args)));\n                this._logHandler.apply(this, [\n                    this,\n                    $f4758df7279d6c6a$export$243e62d78d3b544d.WARN\n                ].concat((0, $aYXpI._)(args)));\n            }\n        },\n        {\n            key: \"error\",\n            value: function error() {\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                this._userLogHandler && this._userLogHandler.apply(this, [\n                    this,\n                    $f4758df7279d6c6a$export$243e62d78d3b544d.ERROR\n                ].concat((0, $aYXpI._)(args)));\n                this._logHandler.apply(this, [\n                    this,\n                    $f4758df7279d6c6a$export$243e62d78d3b544d.ERROR\n                ].concat((0, $aYXpI._)(args)));\n            }\n        }\n    ]);\n    return Logger;\n}();\nfunction $f4758df7279d6c6a$export$c622e99c0ce7b1c9(level) {\n    $f4758df7279d6c6a$var$instances.forEach(function(inst) {\n        inst.setLogLevel(level);\n    });\n}\nfunction $f4758df7279d6c6a$export$29577d29c84db5f6(logCallback, options) {\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        var _loop = function() {\n            var instance = _step.value;\n            var customLogLevel = null;\n            if (options && options.level) customLogLevel = $f4758df7279d6c6a$var$levelStringToEnum[options.level];\n            if (logCallback === null) instance.userLogHandler = null;\n            else instance.userLogHandler = function(instance, level) {\n                for(var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){\n                    args[_key - 2] = arguments[_key];\n                }\n                var message = args.map(function(arg) {\n                    if (arg == null) return null;\n                    else if (typeof arg === \"string\") return arg;\n                    else if (typeof arg === \"number\" || typeof arg === \"boolean\") return arg.toString();\n                    else if (arg instanceof Error) return arg.message;\n                    else try {\n                        return JSON.stringify(arg);\n                    } catch (ignored) {\n                        return null;\n                    }\n                }).filter(function(arg) {\n                    return arg;\n                }).join(\" \");\n                if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) logCallback({\n                    level: $f4758df7279d6c6a$export$243e62d78d3b544d[level].toLowerCase(),\n                    message: message,\n                    args: args,\n                    type: instance.name\n                });\n            };\n        };\n        for(var _iterator = $f4758df7279d6c6a$var$instances[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n}\n\n\n\n\nvar $i7mVp = parcelRequire(\"i7mVp\");\n\nfunction $1928e6784807450d$export$581ff339ea0ba762(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n        }));\n        ownKeys.forEach(function(key) {\n            (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(target, key, source[key]);\n        });\n    }\n    return target;\n}\n\n\nfunction $e9c86d2b5cf5c1d2$var$ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction $e9c86d2b5cf5c1d2$export$4fa2f4023c9cbda5(target, source) {\n    source = source != null ? source : {};\n    if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    else $e9c86d2b5cf5c1d2$var$ownKeys(Object(source)).forEach(function(key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n    return target;\n}\n\n\n\nvar $aYXpI = parcelRequire(\"aYXpI\");\n\nvar $4tSb9 = parcelRequire(\"4tSb9\");\n\nvar $aYXpI = parcelRequire(\"aYXpI\");\nvar $f1bf9542bc9ee5ed$export$23f2a1d2818174ef = function(object, constructors) {\n    return constructors.some(function(c) {\n        return object instanceof c;\n    });\n};\nvar $f1bf9542bc9ee5ed$var$idbProxyableTypes;\nvar $f1bf9542bc9ee5ed$var$cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction $f1bf9542bc9ee5ed$var$getIdbProxyableTypes() {\n    return $f1bf9542bc9ee5ed$var$idbProxyableTypes || ($f1bf9542bc9ee5ed$var$idbProxyableTypes = [\n        IDBDatabase,\n        IDBObjectStore,\n        IDBIndex,\n        IDBCursor,\n        IDBTransaction\n    ]);\n}\n// This is a function to prevent it throwing up in node environments.\nfunction $f1bf9542bc9ee5ed$var$getCursorAdvanceMethods() {\n    return $f1bf9542bc9ee5ed$var$cursorAdvanceMethods || ($f1bf9542bc9ee5ed$var$cursorAdvanceMethods = [\n        IDBCursor.prototype.advance,\n        IDBCursor.prototype.continue,\n        IDBCursor.prototype.continuePrimaryKey\n    ]);\n}\nvar $f1bf9542bc9ee5ed$var$cursorRequestMap = new WeakMap();\nvar $f1bf9542bc9ee5ed$var$transactionDoneMap = new WeakMap();\nvar $f1bf9542bc9ee5ed$var$transactionStoreNamesMap = new WeakMap();\nvar $f1bf9542bc9ee5ed$var$transformCache = new WeakMap();\nvar $f1bf9542bc9ee5ed$export$407448d2b89b1813 = new WeakMap();\nfunction $f1bf9542bc9ee5ed$var$promisifyRequest(request) {\n    var promise = new Promise(function(resolve, reject) {\n        var unlisten = function() {\n            request.removeEventListener(\"success\", success);\n            request.removeEventListener(\"error\", error);\n        };\n        var success = function() {\n            resolve($f1bf9542bc9ee5ed$export$efccba1c4a2ef57b(request.result));\n            unlisten();\n        };\n        var error = function() {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener(\"success\", success);\n        request.addEventListener(\"error\", error);\n    });\n    promise.then(function(value) {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) $f1bf9542bc9ee5ed$var$cursorRequestMap.set(value, request);\n    // Catching to avoid \"Uncaught Promise exceptions\"\n    }).catch(function() {});\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    $f1bf9542bc9ee5ed$export$407448d2b89b1813.set(promise, request);\n    return promise;\n}\nfunction $f1bf9542bc9ee5ed$var$cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if ($f1bf9542bc9ee5ed$var$transactionDoneMap.has(tx)) return;\n    var done = new Promise(function(resolve, reject) {\n        var unlisten = function() {\n            tx.removeEventListener(\"complete\", complete);\n            tx.removeEventListener(\"error\", error);\n            tx.removeEventListener(\"abort\", error);\n        };\n        var complete = function() {\n            resolve();\n            unlisten();\n        };\n        var error = function() {\n            reject(tx.error || new DOMException(\"AbortError\", \"AbortError\"));\n            unlisten();\n        };\n        tx.addEventListener(\"complete\", complete);\n        tx.addEventListener(\"error\", error);\n        tx.addEventListener(\"abort\", error);\n    });\n    // Cache it for later retrieval.\n    $f1bf9542bc9ee5ed$var$transactionDoneMap.set(tx, done);\n}\nvar $f1bf9542bc9ee5ed$var$idbProxyTraps = {\n    get: function(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === \"done\") return $f1bf9542bc9ee5ed$var$transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === \"objectStoreNames\") return target.objectStoreNames || $f1bf9542bc9ee5ed$var$transactionStoreNamesMap.get(target);\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === \"store\") return receiver.objectStoreNames[1] ? undefined : receiver.objectStore(receiver.objectStoreNames[0]);\n        }\n        // Else transform whatever we get back.\n        return $f1bf9542bc9ee5ed$export$efccba1c4a2ef57b(target[prop]);\n    },\n    set: function(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has: function(target, prop) {\n        if (target instanceof IDBTransaction && (prop === \"done\" || prop === \"store\")) return true;\n        return prop in target;\n    }\n};\nfunction $f1bf9542bc9ee5ed$export$43caf9889c228507(callback) {\n    $f1bf9542bc9ee5ed$var$idbProxyTraps = callback($f1bf9542bc9ee5ed$var$idbProxyTraps);\n}\nfunction $f1bf9542bc9ee5ed$var$wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction && !(\"objectStoreNames\" in IDBTransaction.prototype)) return function(storeNames) {\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        var _func;\n        var tx = (_func = func).call.apply(_func, [\n            $f1bf9542bc9ee5ed$export$3b14a55fb2447963(this),\n            storeNames\n        ].concat((0, $aYXpI._)(args)));\n        $f1bf9542bc9ee5ed$var$transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [\n            storeNames\n        ]);\n        return $f1bf9542bc9ee5ed$export$efccba1c4a2ef57b(tx);\n    };\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if ($f1bf9542bc9ee5ed$var$getCursorAdvanceMethods().includes(func)) return function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        func.apply($f1bf9542bc9ee5ed$export$3b14a55fb2447963(this), args);\n        return $f1bf9542bc9ee5ed$export$efccba1c4a2ef57b($f1bf9542bc9ee5ed$var$cursorRequestMap.get(this));\n    };\n    return function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return $f1bf9542bc9ee5ed$export$efccba1c4a2ef57b(func.apply($f1bf9542bc9ee5ed$export$3b14a55fb2447963(this), args));\n    };\n}\nfunction $f1bf9542bc9ee5ed$var$transformCachableValue(value) {\n    if (typeof value === \"function\") return $f1bf9542bc9ee5ed$var$wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction) $f1bf9542bc9ee5ed$var$cacheDonePromiseForTransaction(value);\n    if ($f1bf9542bc9ee5ed$export$23f2a1d2818174ef(value, $f1bf9542bc9ee5ed$var$getIdbProxyableTypes())) return new Proxy(value, $f1bf9542bc9ee5ed$var$idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction $f1bf9542bc9ee5ed$export$efccba1c4a2ef57b(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest) return $f1bf9542bc9ee5ed$var$promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if ($f1bf9542bc9ee5ed$var$transformCache.has(value)) return $f1bf9542bc9ee5ed$var$transformCache.get(value);\n    var newValue = $f1bf9542bc9ee5ed$var$transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        $f1bf9542bc9ee5ed$var$transformCache.set(value, newValue);\n        $f1bf9542bc9ee5ed$export$407448d2b89b1813.set(newValue, value);\n    }\n    return newValue;\n}\nvar $f1bf9542bc9ee5ed$export$3b14a55fb2447963 = function(value) {\n    return $f1bf9542bc9ee5ed$export$407448d2b89b1813.get(value);\n};\n\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */ function $7818c326be87ea84$export$ca0ed41b1a2af7e(name, version) {\n    var _ref = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, blocked = _ref.blocked, upgrade = _ref.upgrade, blocking = _ref.blocking, terminated = _ref.terminated;\n    var request = indexedDB.open(name, version);\n    var openPromise = (0, $f1bf9542bc9ee5ed$export$efccba1c4a2ef57b)(request);\n    if (upgrade) request.addEventListener(\"upgradeneeded\", function(event) {\n        upgrade((0, $f1bf9542bc9ee5ed$export$efccba1c4a2ef57b)(request.result), event.oldVersion, event.newVersion, (0, $f1bf9542bc9ee5ed$export$efccba1c4a2ef57b)(request.transaction), event);\n    });\n    if (blocked) request.addEventListener(\"blocked\", function(event) {\n        return blocked(// Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event);\n    });\n    openPromise.then(function(db) {\n        if (terminated) db.addEventListener(\"close\", function() {\n            return terminated();\n        });\n        if (blocking) db.addEventListener(\"versionchange\", function(event) {\n            return blocking(event.oldVersion, event.newVersion, event);\n        });\n    }).catch(function() {});\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */ function $7818c326be87ea84$export$9d6df0ac66a98bb2(name) {\n    var blocked = (arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}).blocked;\n    var request = indexedDB.deleteDatabase(name);\n    if (blocked) request.addEventListener(\"blocked\", function(event) {\n        return blocked(// Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event);\n    });\n    return (0, $f1bf9542bc9ee5ed$export$efccba1c4a2ef57b)(request).then(function() {\n        return undefined;\n    });\n}\nvar $7818c326be87ea84$var$readMethods = [\n    \"get\",\n    \"getKey\",\n    \"getAll\",\n    \"getAllKeys\",\n    \"count\"\n];\nvar $7818c326be87ea84$var$writeMethods = [\n    \"put\",\n    \"add\",\n    \"delete\",\n    \"clear\"\n];\nvar $7818c326be87ea84$var$cachedMethods = new Map();\nfunction $7818c326be87ea84$var$getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase && !(prop in target) && typeof prop === \"string\")) return;\n    if ($7818c326be87ea84$var$cachedMethods.get(prop)) return $7818c326be87ea84$var$cachedMethods.get(prop);\n    var targetFuncName = prop.replace(/FromIndex$/, \"\");\n    var useIndex = prop !== targetFuncName;\n    var isWrite = $7818c326be87ea84$var$writeMethods.includes(targetFuncName);\n    if (// Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) || !(isWrite || $7818c326be87ea84$var$readMethods.includes(targetFuncName))) return;\n    var method = function() {\n        var _ref = (0, $i7mVp._)(function(storeName) {\n            var _len, args, _key, _target, tx, _$target;\n            var _arguments = arguments;\n            return (0, $4tSb9.__generator)(this, function(_state) {\n                switch(_state.label){\n                    case 0:\n                        for(_len = _arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                            args[_key - 1] = _arguments[_key];\n                        }\n                        tx = this.transaction(storeName, isWrite ? \"readwrite\" : \"readonly\");\n                        _$target = tx.store;\n                        if (useIndex) _$target = _$target.index(args.shift());\n                        return [\n                            4,\n                            Promise.all([\n                                (_target = _$target)[targetFuncName].apply(_target, (0, $aYXpI._)(args)),\n                                isWrite && tx.done\n                            ])\n                        ];\n                    case 1:\n                        // Must reject if op rejects.\n                        // If it's a write operation, must reject if tx.done rejects.\n                        // Must reject with op rejection first.\n                        // Must resolve with op value.\n                        // Must handle both promises (no unhandled rejections)\n                        return [\n                            2,\n                            _state.sent()[0]\n                        ];\n                }\n            });\n        });\n        return function method(storeName) {\n            return _ref.apply(this, arguments);\n        };\n    }();\n    $7818c326be87ea84$var$cachedMethods.set(prop, method);\n    return method;\n}\n(0, $f1bf9542bc9ee5ed$export$43caf9889c228507)(function(oldTraps) {\n    return (0, $e9c86d2b5cf5c1d2$export$4fa2f4023c9cbda5)((0, $1928e6784807450d$export$581ff339ea0ba762)({}, oldTraps), {\n        get: function(target, prop, receiver) {\n            return $7818c326be87ea84$var$getMethod(target, prop) || oldTraps.get(target, prop, receiver);\n        },\n        has: function(target, prop) {\n            return !!$7818c326be87ea84$var$getMethod(target, prop) || oldTraps.has(target, prop);\n        }\n    });\n});\n\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ var $0913f93b5b3c9bac$var$PlatformLoggerServiceImpl = /*#__PURE__*/ function() {\n    \"use strict\";\n    function PlatformLoggerServiceImpl(container) {\n        (0, $juqrk._)(this, PlatformLoggerServiceImpl);\n        this.container = container;\n    }\n    (0, $bNI6E._)(PlatformLoggerServiceImpl, [\n        {\n            // In initial implementation, this will be called by installations on\n            // auth token refresh, and installations will send this string.\n            key: \"getPlatformInfoString\",\n            value: function getPlatformInfoString() {\n                var providers = this.container.getProviders();\n                // Loop through providers and get library/version pairs from any that are\n                // version components.\n                return providers.map(function(provider) {\n                    if ($0913f93b5b3c9bac$var$isVersionServiceProvider(provider)) {\n                        var service = provider.getImmediate();\n                        return \"\".concat(service.library, \"/\").concat(service.version);\n                    } else return null;\n                }).filter(function(logString) {\n                    return logString;\n                }).join(\" \");\n            }\n        }\n    ]);\n    return PlatformLoggerServiceImpl;\n}();\n/**\r\n *\r\n * @param provider check if this provider provides a VersionService\r\n *\r\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\r\n * provides VersionService. The provider is not necessarily a 'app-version'\r\n * provider.\r\n */ function $0913f93b5b3c9bac$var$isVersionServiceProvider(provider) {\n    var component = provider.getComponent();\n    return (component === null || component === void 0 ? void 0 : component.type) === \"VERSION\" /* ComponentType.VERSION */ ;\n}\nvar $0913f93b5b3c9bac$var$name$o = \"@firebase/app\";\nvar $0913f93b5b3c9bac$var$version$1 = \"0.9.13\";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ var $0913f93b5b3c9bac$var$logger = new (0, $f4758df7279d6c6a$export$efa9a398d6368992)(\"@firebase/app\");\nvar $0913f93b5b3c9bac$var$name$n = \"@firebase/app-compat\";\nvar $0913f93b5b3c9bac$var$name$m = \"@firebase/analytics-compat\";\nvar $0913f93b5b3c9bac$var$name$l = \"@firebase/analytics\";\nvar $0913f93b5b3c9bac$var$name$k = \"@firebase/app-check-compat\";\nvar $0913f93b5b3c9bac$var$name$j = \"@firebase/app-check\";\nvar $0913f93b5b3c9bac$var$name$i = \"@firebase/auth\";\nvar $0913f93b5b3c9bac$var$name$h = \"@firebase/auth-compat\";\nvar $0913f93b5b3c9bac$var$name$g = \"@firebase/database\";\nvar $0913f93b5b3c9bac$var$name$f = \"@firebase/database-compat\";\nvar $0913f93b5b3c9bac$var$name$e = \"@firebase/functions\";\nvar $0913f93b5b3c9bac$var$name$d = \"@firebase/functions-compat\";\nvar $0913f93b5b3c9bac$var$name$c = \"@firebase/installations\";\nvar $0913f93b5b3c9bac$var$name$b = \"@firebase/installations-compat\";\nvar $0913f93b5b3c9bac$var$name$a = \"@firebase/messaging\";\nvar $0913f93b5b3c9bac$var$name$9 = \"@firebase/messaging-compat\";\nvar $0913f93b5b3c9bac$var$name$8 = \"@firebase/performance\";\nvar $0913f93b5b3c9bac$var$name$7 = \"@firebase/performance-compat\";\nvar $0913f93b5b3c9bac$var$name$6 = \"@firebase/remote-config\";\nvar $0913f93b5b3c9bac$var$name$5 = \"@firebase/remote-config-compat\";\nvar $0913f93b5b3c9bac$var$name$4 = \"@firebase/storage\";\nvar $0913f93b5b3c9bac$var$name$3 = \"@firebase/storage-compat\";\nvar $0913f93b5b3c9bac$var$name$2 = \"@firebase/firestore\";\nvar $0913f93b5b3c9bac$var$name$1 = \"@firebase/firestore-compat\";\nvar $0913f93b5b3c9bac$var$name = \"firebase\";\nvar $0913f93b5b3c9bac$var$version = \"9.23.0\";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * The default app name\r\n *\r\n * @internal\r\n */ var $0913f93b5b3c9bac$export$9f30fa0c10967f7f = \"[DEFAULT]\";\nvar $0913f93b5b3c9bac$var$_obj;\nvar $0913f93b5b3c9bac$var$PLATFORM_LOG_STRING = ($0913f93b5b3c9bac$var$_obj = {}, (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($0913f93b5b3c9bac$var$_obj, $0913f93b5b3c9bac$var$name$o, \"fire-core\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($0913f93b5b3c9bac$var$_obj, $0913f93b5b3c9bac$var$name$n, \"fire-core-compat\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($0913f93b5b3c9bac$var$_obj, $0913f93b5b3c9bac$var$name$l, \"fire-analytics\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($0913f93b5b3c9bac$var$_obj, $0913f93b5b3c9bac$var$name$m, \"fire-analytics-compat\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($0913f93b5b3c9bac$var$_obj, $0913f93b5b3c9bac$var$name$j, \"fire-app-check\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($0913f93b5b3c9bac$var$_obj, $0913f93b5b3c9bac$var$name$k, \"fire-app-check-compat\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($0913f93b5b3c9bac$var$_obj, $0913f93b5b3c9bac$var$name$i, \"fire-auth\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($0913f93b5b3c9bac$var$_obj, $0913f93b5b3c9bac$var$name$h, \"fire-auth-compat\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($0913f93b5b3c9bac$var$_obj, $0913f93b5b3c9bac$var$name$g, \"fire-rtdb\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($0913f93b5b3c9bac$var$_obj, $0913f93b5b3c9bac$var$name$f, \"fire-rtdb-compat\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($0913f93b5b3c9bac$var$_obj, $0913f93b5b3c9bac$var$name$e, \"fire-fn\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($0913f93b5b3c9bac$var$_obj, $0913f93b5b3c9bac$var$name$d, \"fire-fn-compat\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($0913f93b5b3c9bac$var$_obj, $0913f93b5b3c9bac$var$name$c, \"fire-iid\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($0913f93b5b3c9bac$var$_obj, $0913f93b5b3c9bac$var$name$b, \"fire-iid-compat\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($0913f93b5b3c9bac$var$_obj, $0913f93b5b3c9bac$var$name$a, \"fire-fcm\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($0913f93b5b3c9bac$var$_obj, $0913f93b5b3c9bac$var$name$9, \"fire-fcm-compat\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($0913f93b5b3c9bac$var$_obj, $0913f93b5b3c9bac$var$name$8, \"fire-perf\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($0913f93b5b3c9bac$var$_obj, $0913f93b5b3c9bac$var$name$7, \"fire-perf-compat\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($0913f93b5b3c9bac$var$_obj, $0913f93b5b3c9bac$var$name$6, \"fire-rc\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($0913f93b5b3c9bac$var$_obj, $0913f93b5b3c9bac$var$name$5, \"fire-rc-compat\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($0913f93b5b3c9bac$var$_obj, $0913f93b5b3c9bac$var$name$4, \"fire-gcs\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($0913f93b5b3c9bac$var$_obj, $0913f93b5b3c9bac$var$name$3, \"fire-gcs-compat\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($0913f93b5b3c9bac$var$_obj, $0913f93b5b3c9bac$var$name$2, \"fire-fst\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($0913f93b5b3c9bac$var$_obj, $0913f93b5b3c9bac$var$name$1, \"fire-fst-compat\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($0913f93b5b3c9bac$var$_obj, \"fire-js\", \"fire-js\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($0913f93b5b3c9bac$var$_obj, $0913f93b5b3c9bac$var$name, \"fire-js-all\"), $0913f93b5b3c9bac$var$_obj);\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * @internal\r\n */ var $0913f93b5b3c9bac$export$b4e3c36c855b14b5 = new Map();\n/**\r\n * Registered components.\r\n *\r\n * @internal\r\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nvar $0913f93b5b3c9bac$export$9566bce3835c0f28 = new Map();\n/**\r\n * @param component - the component being added to this app's container\r\n *\r\n * @internal\r\n */ function $0913f93b5b3c9bac$export$fa5244b94c62d36a(app, component) {\n    try {\n        app.container.addComponent(component);\n    } catch (e) {\n        $0913f93b5b3c9bac$var$logger.debug(\"Component \".concat(component.name, \" failed to register with FirebaseApp \").concat(app.name), e);\n    }\n}\n/**\r\n *\r\n * @internal\r\n */ function $0913f93b5b3c9bac$export$4393112b42e2b41d(app, component) {\n    app.container.addOrOverwriteComponent(component);\n}\n/**\r\n *\r\n * @param component - the component to register\r\n * @returns whether or not the component is registered successfully\r\n *\r\n * @internal\r\n */ function $0913f93b5b3c9bac$export$c930050e7bb63965(component) {\n    var componentName = component.name;\n    if ($0913f93b5b3c9bac$export$9566bce3835c0f28.has(componentName)) {\n        $0913f93b5b3c9bac$var$logger.debug(\"There were multiple attempts to register component \".concat(componentName, \".\"));\n        return false;\n    }\n    $0913f93b5b3c9bac$export$9566bce3835c0f28.set(componentName, component);\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        // add the component to existing app instances\n        for(var _iterator = $0913f93b5b3c9bac$export$b4e3c36c855b14b5.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var app = _step.value;\n            $0913f93b5b3c9bac$export$fa5244b94c62d36a(app, component);\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    return true;\n}\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n *\r\n * @returns the provider for the service with the matching name\r\n *\r\n * @internal\r\n */ function $0913f93b5b3c9bac$export$fa0d6da0f5838f50(app, name) {\n    var heartbeatController = app.container.getProvider(\"heartbeat\").getImmediate({\n        optional: true\n    });\n    if (heartbeatController) heartbeatController.triggerHeartbeat();\n    return app.container.getProvider(name);\n}\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\r\n *\r\n * @internal\r\n */ function $0913f93b5b3c9bac$export$48d18de2ff1c45a5(app, name) {\n    var instanceIdentifier = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : $0913f93b5b3c9bac$export$9f30fa0c10967f7f;\n    $0913f93b5b3c9bac$export$fa0d6da0f5838f50(app, name).clearInstance(instanceIdentifier);\n}\n/**\r\n * Test only\r\n *\r\n * @internal\r\n */ function $0913f93b5b3c9bac$export$3685d89b9c3cdfaf() {\n    $0913f93b5b3c9bac$export$9566bce3835c0f28.clear();\n}\nvar $0913f93b5b3c9bac$var$_obj1;\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ var $0913f93b5b3c9bac$var$ERRORS = ($0913f93b5b3c9bac$var$_obj1 = {}, (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($0913f93b5b3c9bac$var$_obj1, \"no-app\" /* AppError.NO_APP */ , \"No Firebase App '{$appName}' has been created - call initializeApp() first\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($0913f93b5b3c9bac$var$_obj1, \"bad-app-name\" /* AppError.BAD_APP_NAME */ , \"Illegal App name: '{$appName}\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($0913f93b5b3c9bac$var$_obj1, \"duplicate-app\" /* AppError.DUPLICATE_APP */ , \"Firebase App named '{$appName}' already exists with different options or config\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($0913f93b5b3c9bac$var$_obj1, \"app-deleted\" /* AppError.APP_DELETED */ , \"Firebase App named '{$appName}' already deleted\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($0913f93b5b3c9bac$var$_obj1, \"no-options\" /* AppError.NO_OPTIONS */ , \"Need to provide options, when not being deployed to hosting via source.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($0913f93b5b3c9bac$var$_obj1, \"invalid-app-argument\" /* AppError.INVALID_APP_ARGUMENT */ , \"firebase.{$appName}() takes either no argument or a Firebase App instance.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($0913f93b5b3c9bac$var$_obj1, \"invalid-log-argument\" /* AppError.INVALID_LOG_ARGUMENT */ , \"First argument to `onLog` must be null or a function.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($0913f93b5b3c9bac$var$_obj1, \"idb-open\" /* AppError.IDB_OPEN */ , \"Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($0913f93b5b3c9bac$var$_obj1, \"idb-get\" /* AppError.IDB_GET */ , \"Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($0913f93b5b3c9bac$var$_obj1, \"idb-set\" /* AppError.IDB_WRITE */ , \"Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($0913f93b5b3c9bac$var$_obj1, \"idb-delete\" /* AppError.IDB_DELETE */ , \"Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.\"), $0913f93b5b3c9bac$var$_obj1);\nvar $0913f93b5b3c9bac$var$ERROR_FACTORY = new (0, $1d9d263a787f8021$export$3fa6e1b18a3b2d40)(\"app\", \"Firebase\", $0913f93b5b3c9bac$var$ERRORS);\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ var $0913f93b5b3c9bac$var$FirebaseAppImpl = /*#__PURE__*/ function() {\n    \"use strict\";\n    function FirebaseAppImpl(options, config, container) {\n        var _this = this;\n        (0, $juqrk._)(this, FirebaseAppImpl);\n        this._isDeleted = false;\n        this._options = Object.assign({}, options);\n        this._config = Object.assign({}, config);\n        this._name = config.name;\n        this._automaticDataCollectionEnabled = config.automaticDataCollectionEnabled;\n        this._container = container;\n        this.container.addComponent(new (0, $4d80d01579d5bd6a$export$16fa2f45be04daa8)(\"app\", function() {\n            return _this;\n        }, \"PUBLIC\" /* ComponentType.PUBLIC */ ));\n    }\n    (0, $bNI6E._)(FirebaseAppImpl, [\n        {\n            key: \"automaticDataCollectionEnabled\",\n            get: function get() {\n                this.checkDestroyed();\n                return this._automaticDataCollectionEnabled;\n            },\n            set: function set(val) {\n                this.checkDestroyed();\n                this._automaticDataCollectionEnabled = val;\n            }\n        },\n        {\n            key: \"name\",\n            get: function get() {\n                this.checkDestroyed();\n                return this._name;\n            }\n        },\n        {\n            key: \"options\",\n            get: function get() {\n                this.checkDestroyed();\n                return this._options;\n            }\n        },\n        {\n            key: \"config\",\n            get: function get() {\n                this.checkDestroyed();\n                return this._config;\n            }\n        },\n        {\n            key: \"container\",\n            get: function get() {\n                return this._container;\n            }\n        },\n        {\n            key: \"isDeleted\",\n            get: function get() {\n                return this._isDeleted;\n            },\n            set: function set(val) {\n                this._isDeleted = val;\n            }\n        },\n        {\n            /**\r\n     * This function will throw an Error if the App has already been deleted -\r\n     * use before performing API actions on the App.\r\n     */ key: \"checkDestroyed\",\n            value: function checkDestroyed() {\n                if (this.isDeleted) throw $0913f93b5b3c9bac$var$ERROR_FACTORY.create(\"app-deleted\" /* AppError.APP_DELETED */ , {\n                    appName: this._name\n                });\n            }\n        }\n    ]);\n    return FirebaseAppImpl;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * The current SDK version.\r\n *\r\n * @public\r\n */ var $0913f93b5b3c9bac$export$31499a9cd224b78c = $0913f93b5b3c9bac$var$version;\nfunction $0913f93b5b3c9bac$export$c55cfd413944906d(_options) {\n    var rawConfig = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    var options = _options;\n    if (typeof rawConfig !== \"object\") {\n        var name = rawConfig;\n        rawConfig = {\n            name: name\n        };\n    }\n    var config = Object.assign({\n        name: $0913f93b5b3c9bac$export$9f30fa0c10967f7f,\n        automaticDataCollectionEnabled: false\n    }, rawConfig);\n    var name1 = config.name;\n    if (typeof name1 !== \"string\" || !name1) throw $0913f93b5b3c9bac$var$ERROR_FACTORY.create(\"bad-app-name\" /* AppError.BAD_APP_NAME */ , {\n        appName: String(name1)\n    });\n    options || (options = (0, $1d9d263a787f8021$export$3dfb6827a9f89756)());\n    if (!options) throw $0913f93b5b3c9bac$var$ERROR_FACTORY.create(\"no-options\" /* AppError.NO_OPTIONS */ );\n    var existingApp = $0913f93b5b3c9bac$export$b4e3c36c855b14b5.get(name1);\n    if (existingApp) {\n        // return the existing app if options and config deep equal the ones in the existing app.\n        if ((0, $1d9d263a787f8021$export$9cb4719e2e525b7a)(options, existingApp.options) && (0, $1d9d263a787f8021$export$9cb4719e2e525b7a)(config, existingApp.config)) return existingApp;\n        else throw $0913f93b5b3c9bac$var$ERROR_FACTORY.create(\"duplicate-app\" /* AppError.DUPLICATE_APP */ , {\n            appName: name1\n        });\n    }\n    var container = new (0, $4d80d01579d5bd6a$export$436a80eea5d5c0c5)(name1);\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = $0913f93b5b3c9bac$export$9566bce3835c0f28.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var component = _step.value;\n            container.addComponent(component);\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    var newApp = new $0913f93b5b3c9bac$var$FirebaseAppImpl(options, config, container);\n    $0913f93b5b3c9bac$export$b4e3c36c855b14b5.set(name1, newApp);\n    return newApp;\n}\n/**\r\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * When called with no arguments, the default app is returned. When an app name\r\n * is provided, the app corresponding to that name is returned.\r\n *\r\n * An exception is thrown if the app being retrieved has not yet been\r\n * initialized.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return the default app\r\n * const app = getApp();\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return a named app\r\n * const otherApp = getApp(\"otherApp\");\r\n * ```\r\n *\r\n * @param name - Optional name of the app to return. If no name is\r\n *   provided, the default is `\"[DEFAULT]\"`.\r\n *\r\n * @returns The app corresponding to the provided app name.\r\n *   If no app name is provided, the default app is returned.\r\n *\r\n * @public\r\n */ function $0913f93b5b3c9bac$export$f9962582c9e66d99() {\n    var name = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : $0913f93b5b3c9bac$export$9f30fa0c10967f7f;\n    var app = $0913f93b5b3c9bac$export$b4e3c36c855b14b5.get(name);\n    if (!app && name === $0913f93b5b3c9bac$export$9f30fa0c10967f7f && (0, $1d9d263a787f8021$export$3dfb6827a9f89756)()) return $0913f93b5b3c9bac$export$c55cfd413944906d();\n    if (!app) throw $0913f93b5b3c9bac$var$ERROR_FACTORY.create(\"no-app\" /* AppError.NO_APP */ , {\n        appName: name\n    });\n    return app;\n}\n/**\r\n * A (read-only) array of all initialized apps.\r\n * @public\r\n */ function $0913f93b5b3c9bac$export$68ddedf7d44b3bdf() {\n    return Array.from($0913f93b5b3c9bac$export$b4e3c36c855b14b5.values());\n}\nfunction $0913f93b5b3c9bac$export$6eec44aa53d5ea34(app) {\n    return $0913f93b5b3c9bac$var$_deleteApp.apply(this, arguments);\n}\nfunction $0913f93b5b3c9bac$var$_deleteApp() {\n    $0913f93b5b3c9bac$var$_deleteApp = /**\r\n * Renders this app unusable and frees the resources of all associated\r\n * services.\r\n *\r\n * @example\r\n * ```javascript\r\n * deleteApp(app)\r\n *   .then(function() {\r\n *     console.log(\"App deleted successfully\");\r\n *   })\r\n *   .catch(function(error) {\r\n *     console.log(\"Error deleting app:\", error);\r\n *   });\r\n * ```\r\n *\r\n * @public\r\n */ (0, $i7mVp._)(function(app) {\n        var name;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    name = app.name;\n                    if (!$0913f93b5b3c9bac$export$b4e3c36c855b14b5.has(name)) return [\n                        3,\n                        2\n                    ];\n                    $0913f93b5b3c9bac$export$b4e3c36c855b14b5.delete(name);\n                    return [\n                        4,\n                        Promise.all(app.container.getProviders().map(function(provider) {\n                            return provider.delete();\n                        }))\n                    ];\n                case 1:\n                    _state.sent();\n                    app.isDeleted = true;\n                    _state.label = 2;\n                case 2:\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return $0913f93b5b3c9bac$var$_deleteApp.apply(this, arguments);\n}\n/**\r\n * Registers a library's name and version for platform logging purposes.\r\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\r\n * @param version - Current version of that library.\r\n * @param variant - Bundle variant, e.g., node, rn, etc.\r\n *\r\n * @public\r\n */ function $0913f93b5b3c9bac$export$d29d5299a7137abc(libraryKeyOrName, version, variant) {\n    var _a;\n    // TODO: We can use this check to whitelist strings when/if we set up\n    // a good whitelist system.\n    var library = (_a = $0913f93b5b3c9bac$var$PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;\n    if (variant) library += \"-\".concat(variant);\n    var libraryMismatch = library.match(/\\s|\\//);\n    var versionMismatch = version.match(/\\s|\\//);\n    if (libraryMismatch || versionMismatch) {\n        var warning = [\n            'Unable to register library \"'.concat(library, '\" with version \"').concat(version, '\":')\n        ];\n        if (libraryMismatch) warning.push('library name \"'.concat(library, '\" contains illegal characters (whitespace or \"/\")'));\n        if (libraryMismatch && versionMismatch) warning.push(\"and\");\n        if (versionMismatch) warning.push('version name \"'.concat(version, '\" contains illegal characters (whitespace or \"/\")'));\n        $0913f93b5b3c9bac$var$logger.warn(warning.join(\" \"));\n        return;\n    }\n    $0913f93b5b3c9bac$export$c930050e7bb63965(new (0, $4d80d01579d5bd6a$export$16fa2f45be04daa8)(\"\".concat(library, \"-version\"), function() {\n        return {\n            library: library,\n            version: version\n        };\n    }, \"VERSION\" /* ComponentType.VERSION */ ));\n}\n/**\r\n * Sets log handler for all Firebase SDKs.\r\n * @param logCallback - An optional custom log handler that executes user code whenever\r\n * the Firebase SDK makes a logging call.\r\n *\r\n * @public\r\n */ function $0913f93b5b3c9bac$export$a82ad227dc8163dc(logCallback, options) {\n    if (logCallback !== null && typeof logCallback !== \"function\") throw $0913f93b5b3c9bac$var$ERROR_FACTORY.create(\"invalid-log-argument\" /* AppError.INVALID_LOG_ARGUMENT */ );\n    (0, $f4758df7279d6c6a$export$29577d29c84db5f6)(logCallback, options);\n}\n/**\r\n * Sets log level for all Firebase SDKs.\r\n *\r\n * All of the log types above the current log level are captured (i.e. if\r\n * you set the log level to `info`, errors are logged, but `debug` and\r\n * `verbose` logs are not).\r\n *\r\n * @public\r\n */ function $0913f93b5b3c9bac$export$c622e99c0ce7b1c9(logLevel) {\n    (0, $f4758df7279d6c6a$export$c622e99c0ce7b1c9)(logLevel);\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ var $0913f93b5b3c9bac$var$DB_NAME = \"firebase-heartbeat-database\";\nvar $0913f93b5b3c9bac$var$DB_VERSION = 1;\nvar $0913f93b5b3c9bac$var$STORE_NAME = \"firebase-heartbeat-store\";\nvar $0913f93b5b3c9bac$var$dbPromise = null;\nfunction $0913f93b5b3c9bac$var$getDbPromise() {\n    if (!$0913f93b5b3c9bac$var$dbPromise) $0913f93b5b3c9bac$var$dbPromise = (0, $7818c326be87ea84$export$ca0ed41b1a2af7e)($0913f93b5b3c9bac$var$DB_NAME, $0913f93b5b3c9bac$var$DB_VERSION, {\n        upgrade: function(db, oldVersion) {\n            // We don't use 'break' in this switch statement, the fall-through\n            // behavior is what we want, because if there are multiple versions between\n            // the old version and the current version, we want ALL the migrations\n            // that correspond to those versions to run, not only the last one.\n            // eslint-disable-next-line default-case\n            switch(oldVersion){\n                case 0:\n                    db.createObjectStore($0913f93b5b3c9bac$var$STORE_NAME);\n            }\n        }\n    }).catch(function(e) {\n        throw $0913f93b5b3c9bac$var$ERROR_FACTORY.create(\"idb-open\" /* AppError.IDB_OPEN */ , {\n            originalErrorMessage: e.message\n        });\n    });\n    return $0913f93b5b3c9bac$var$dbPromise;\n}\nfunction $0913f93b5b3c9bac$var$readHeartbeatsFromIndexedDB(app) {\n    return $0913f93b5b3c9bac$var$_readHeartbeatsFromIndexedDB.apply(this, arguments);\n}\nfunction $0913f93b5b3c9bac$var$_readHeartbeatsFromIndexedDB() {\n    $0913f93b5b3c9bac$var$_readHeartbeatsFromIndexedDB = (0, $i7mVp._)(function(app) {\n        var db, result, e, idbGetError;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    _state.trys.push([\n                        0,\n                        3,\n                        ,\n                        4\n                    ]);\n                    return [\n                        4,\n                        $0913f93b5b3c9bac$var$getDbPromise()\n                    ];\n                case 1:\n                    db = _state.sent();\n                    return [\n                        4,\n                        db.transaction($0913f93b5b3c9bac$var$STORE_NAME).objectStore($0913f93b5b3c9bac$var$STORE_NAME).get($0913f93b5b3c9bac$var$computeKey(app))\n                    ];\n                case 2:\n                    result = _state.sent();\n                    return [\n                        2,\n                        result\n                    ];\n                case 3:\n                    e = _state.sent();\n                    if (e instanceof (0, $1d9d263a787f8021$export$dd24e9cd51226c56)) $0913f93b5b3c9bac$var$logger.warn(e.message);\n                    else {\n                        idbGetError = $0913f93b5b3c9bac$var$ERROR_FACTORY.create(\"idb-get\" /* AppError.IDB_GET */ , {\n                            originalErrorMessage: e === null || e === void 0 ? void 0 : e.message\n                        });\n                        $0913f93b5b3c9bac$var$logger.warn(idbGetError.message);\n                    }\n                    return [\n                        3,\n                        4\n                    ];\n                case 4:\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return $0913f93b5b3c9bac$var$_readHeartbeatsFromIndexedDB.apply(this, arguments);\n}\nfunction $0913f93b5b3c9bac$var$writeHeartbeatsToIndexedDB(app, heartbeatObject) {\n    return $0913f93b5b3c9bac$var$_writeHeartbeatsToIndexedDB.apply(this, arguments);\n}\nfunction $0913f93b5b3c9bac$var$_writeHeartbeatsToIndexedDB() {\n    $0913f93b5b3c9bac$var$_writeHeartbeatsToIndexedDB = (0, $i7mVp._)(function(app, heartbeatObject) {\n        var db, tx, objectStore, e, idbGetError;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    _state.trys.push([\n                        0,\n                        4,\n                        ,\n                        5\n                    ]);\n                    return [\n                        4,\n                        $0913f93b5b3c9bac$var$getDbPromise()\n                    ];\n                case 1:\n                    db = _state.sent();\n                    tx = db.transaction($0913f93b5b3c9bac$var$STORE_NAME, \"readwrite\");\n                    objectStore = tx.objectStore($0913f93b5b3c9bac$var$STORE_NAME);\n                    return [\n                        4,\n                        objectStore.put(heartbeatObject, $0913f93b5b3c9bac$var$computeKey(app))\n                    ];\n                case 2:\n                    _state.sent();\n                    return [\n                        4,\n                        tx.done\n                    ];\n                case 3:\n                    _state.sent();\n                    return [\n                        3,\n                        5\n                    ];\n                case 4:\n                    e = _state.sent();\n                    if (e instanceof (0, $1d9d263a787f8021$export$dd24e9cd51226c56)) $0913f93b5b3c9bac$var$logger.warn(e.message);\n                    else {\n                        idbGetError = $0913f93b5b3c9bac$var$ERROR_FACTORY.create(\"idb-set\" /* AppError.IDB_WRITE */ , {\n                            originalErrorMessage: e === null || e === void 0 ? void 0 : e.message\n                        });\n                        $0913f93b5b3c9bac$var$logger.warn(idbGetError.message);\n                    }\n                    return [\n                        3,\n                        5\n                    ];\n                case 5:\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return $0913f93b5b3c9bac$var$_writeHeartbeatsToIndexedDB.apply(this, arguments);\n}\nfunction $0913f93b5b3c9bac$var$computeKey(app) {\n    return \"\".concat(app.name, \"!\").concat(app.options.appId);\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ var $0913f93b5b3c9bac$var$MAX_HEADER_BYTES = 1024;\n// 30 days\nvar $0913f93b5b3c9bac$var$STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 2592000000;\nvar $0913f93b5b3c9bac$var$HeartbeatServiceImpl = /*#__PURE__*/ function() {\n    \"use strict\";\n    function HeartbeatServiceImpl(container) {\n        var _this = this;\n        (0, $juqrk._)(this, HeartbeatServiceImpl);\n        this.container = container;\n        /**\r\n         * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\r\n         * the header string.\r\n         * Stores one record per date. This will be consolidated into the standard\r\n         * format of one record per user agent string before being sent as a header.\r\n         * Populated from indexedDB when the controller is instantiated and should\r\n         * be kept in sync with indexedDB.\r\n         * Leave public for easier testing.\r\n         */ this._heartbeatsCache = null;\n        var app = this.container.getProvider(\"app\").getImmediate();\n        this._storage = new $0913f93b5b3c9bac$var$HeartbeatStorageImpl(app);\n        this._heartbeatsCachePromise = this._storage.read().then(function(result) {\n            _this._heartbeatsCache = result;\n            return result;\n        });\n    }\n    (0, $bNI6E._)(HeartbeatServiceImpl, [\n        {\n            key: \"triggerHeartbeat\",\n            value: /**\r\n     * Called to report a heartbeat. The function will generate\r\n     * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\r\n     * to IndexedDB.\r\n     * Note that we only store one heartbeat per day. So if a heartbeat for today is\r\n     * already logged, subsequent calls to this function in the same day will be ignored.\r\n     */ function triggerHeartbeat() {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var platformLogger, agent, date;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                platformLogger = _this.container.getProvider(\"platform-logger\").getImmediate();\n                                agent = platformLogger.getPlatformInfoString();\n                                date = $0913f93b5b3c9bac$var$getUTCDateString();\n                                if (!(_this._heartbeatsCache === null)) return [\n                                    3,\n                                    2\n                                ];\n                                return [\n                                    4,\n                                    _this._heartbeatsCachePromise\n                                ];\n                            case 1:\n                                _this._heartbeatsCache = _state.sent();\n                                _state.label = 2;\n                            case 2:\n                                // Do not store a heartbeat if one is already stored for this day\n                                // or if a header has already been sent today.\n                                if (_this._heartbeatsCache.lastSentHeartbeatDate === date || _this._heartbeatsCache.heartbeats.some(function(singleDateHeartbeat) {\n                                    return singleDateHeartbeat.date === date;\n                                })) return [\n                                    2\n                                ];\n                                else // There is no entry for this date. Create one.\n                                _this._heartbeatsCache.heartbeats.push({\n                                    date: date,\n                                    agent: agent\n                                });\n                                // Remove entries older than 30 days.\n                                _this._heartbeatsCache.heartbeats = _this._heartbeatsCache.heartbeats.filter(function(singleDateHeartbeat) {\n                                    var hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\n                                    var now = Date.now();\n                                    return now - hbTimestamp <= $0913f93b5b3c9bac$var$STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\n                                });\n                                return [\n                                    2,\n                                    _this._storage.overwrite(_this._heartbeatsCache)\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"getHeartbeatsHeader\",\n            value: /**\r\n     * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\r\n     * It also clears all heartbeats from memory as well as in IndexedDB.\r\n     *\r\n     * NOTE: Consuming product SDKs should not send the header if this method\r\n     * returns an empty string.\r\n     */ function getHeartbeatsHeader() {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var date, _extractHeartbeatsForHeader, heartbeatsToSend, unsentEntries, headerString;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                if (!(_this._heartbeatsCache === null)) return [\n                                    3,\n                                    2\n                                ];\n                                return [\n                                    4,\n                                    _this._heartbeatsCachePromise\n                                ];\n                            case 1:\n                                _state.sent();\n                                _state.label = 2;\n                            case 2:\n                                // If it's still null or the array is empty, there is no data to send.\n                                if (_this._heartbeatsCache === null || _this._heartbeatsCache.heartbeats.length === 0) return [\n                                    2,\n                                    \"\"\n                                ];\n                                date = $0913f93b5b3c9bac$var$getUTCDateString();\n                                _extractHeartbeatsForHeader = $0913f93b5b3c9bac$var$extractHeartbeatsForHeader(_this._heartbeatsCache.heartbeats), heartbeatsToSend = _extractHeartbeatsForHeader.heartbeatsToSend, unsentEntries = _extractHeartbeatsForHeader.unsentEntries;\n                                headerString = (0, $1d9d263a787f8021$export$4b5284a3025a455)(JSON.stringify({\n                                    version: 2,\n                                    heartbeats: heartbeatsToSend\n                                }));\n                                // Store last sent date to prevent another being logged/sent for the same day.\n                                _this._heartbeatsCache.lastSentHeartbeatDate = date;\n                                if (!(unsentEntries.length > 0)) return [\n                                    3,\n                                    4\n                                ];\n                                // Store any unsent entries if they exist.\n                                _this._heartbeatsCache.heartbeats = unsentEntries;\n                                // This seems more likely than emptying the array (below) to lead to some odd state\n                                // since the cache isn't empty and this will be called again on the next request,\n                                // and is probably safest if we await it.\n                                return [\n                                    4,\n                                    _this._storage.overwrite(_this._heartbeatsCache)\n                                ];\n                            case 3:\n                                _state.sent();\n                                return [\n                                    3,\n                                    5\n                                ];\n                            case 4:\n                                _this._heartbeatsCache.heartbeats = [];\n                                _this._storage.overwrite(_this._heartbeatsCache);\n                                _state.label = 5;\n                            case 5:\n                                return [\n                                    2,\n                                    headerString\n                                ];\n                        }\n                    });\n                })();\n            }\n        }\n    ]);\n    return HeartbeatServiceImpl;\n}();\nfunction $0913f93b5b3c9bac$var$getUTCDateString() {\n    var today = new Date();\n    // Returns date format 'YYYY-MM-DD'\n    return today.toISOString().substring(0, 10);\n}\nfunction $0913f93b5b3c9bac$var$extractHeartbeatsForHeader(heartbeatsCache) {\n    var maxSize = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : $0913f93b5b3c9bac$var$MAX_HEADER_BYTES;\n    // Heartbeats grouped by user agent in the standard format to be sent in\n    // the header.\n    var heartbeatsToSend = [];\n    // Single date format heartbeats that are not sent.\n    var unsentEntries = heartbeatsCache.slice();\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        var _loop = function() {\n            var singleDateHeartbeat = _step.value;\n            // Look for an existing entry with the same user agent.\n            var heartbeatEntry = heartbeatsToSend.find(function(hb) {\n                return hb.agent === singleDateHeartbeat.agent;\n            });\n            if (!heartbeatEntry) {\n                // If no entry for this user agent exists, create one.\n                heartbeatsToSend.push({\n                    agent: singleDateHeartbeat.agent,\n                    dates: [\n                        singleDateHeartbeat.date\n                    ]\n                });\n                if ($0913f93b5b3c9bac$var$countBytes(heartbeatsToSend) > maxSize) {\n                    // If the header would exceed max size, remove the added heartbeat\n                    // entry and stop adding to the header.\n                    heartbeatsToSend.pop();\n                    return \"break\";\n                }\n            } else {\n                heartbeatEntry.dates.push(singleDateHeartbeat.date);\n                // If the header would exceed max size, remove the added date\n                // and stop adding to the header.\n                if ($0913f93b5b3c9bac$var$countBytes(heartbeatsToSend) > maxSize) {\n                    heartbeatEntry.dates.pop();\n                    return \"break\";\n                }\n            }\n            // Pop unsent entry from queue. (Skipped if adding the entry exceeded\n            // quota and the loop breaks early.)\n            unsentEntries = unsentEntries.slice(1);\n        };\n        for(var _iterator = heartbeatsCache[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var _ret = _loop();\n            if (_ret === \"break\") break;\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    return {\n        heartbeatsToSend: heartbeatsToSend,\n        unsentEntries: unsentEntries\n    };\n}\nvar $0913f93b5b3c9bac$var$HeartbeatStorageImpl = /*#__PURE__*/ function() {\n    \"use strict\";\n    function HeartbeatStorageImpl(app) {\n        (0, $juqrk._)(this, HeartbeatStorageImpl);\n        this.app = app;\n        this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\n    }\n    (0, $bNI6E._)(HeartbeatStorageImpl, [\n        {\n            key: \"runIndexedDBEnvironmentCheck\",\n            value: function runIndexedDBEnvironmentCheck() {\n                return (0, $i7mVp._)(function() {\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        if (!(0, $1d9d263a787f8021$export$3865db50535c2055)()) return [\n                            2,\n                            false\n                        ];\n                        else return [\n                            2,\n                            (0, $1d9d263a787f8021$export$a8a3018f3d187a4d)().then(function() {\n                                return true;\n                            }).catch(function() {\n                                return false;\n                            })\n                        ];\n                        return [\n                            2\n                        ];\n                    });\n                })();\n            }\n        },\n        {\n            key: \"read\",\n            value: /**\r\n     * Read all heartbeats.\r\n     */ function read() {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var canUseIndexedDB, idbHeartbeatObject;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                return [\n                                    4,\n                                    _this._canUseIndexedDBPromise\n                                ];\n                            case 1:\n                                canUseIndexedDB = _state.sent();\n                                if (!!canUseIndexedDB) return [\n                                    3,\n                                    2\n                                ];\n                                return [\n                                    2,\n                                    {\n                                        heartbeats: []\n                                    }\n                                ];\n                            case 2:\n                                return [\n                                    4,\n                                    $0913f93b5b3c9bac$var$readHeartbeatsFromIndexedDB(_this.app)\n                                ];\n                            case 3:\n                                idbHeartbeatObject = _state.sent();\n                                return [\n                                    2,\n                                    idbHeartbeatObject || {\n                                        heartbeats: []\n                                    }\n                                ];\n                            case 4:\n                                return [\n                                    2\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"overwrite\",\n            value: // overwrite the storage with the provided heartbeats\n            function overwrite(heartbeatsObject) {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var _a, canUseIndexedDB, existingHeartbeatsObject;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                return [\n                                    4,\n                                    _this._canUseIndexedDBPromise\n                                ];\n                            case 1:\n                                canUseIndexedDB = _state.sent();\n                                if (!!canUseIndexedDB) return [\n                                    3,\n                                    2\n                                ];\n                                return [\n                                    2\n                                ];\n                            case 2:\n                                return [\n                                    4,\n                                    _this.read()\n                                ];\n                            case 3:\n                                existingHeartbeatsObject = _state.sent();\n                                return [\n                                    2,\n                                    $0913f93b5b3c9bac$var$writeHeartbeatsToIndexedDB(_this.app, {\n                                        lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\n                                        heartbeats: heartbeatsObject.heartbeats\n                                    })\n                                ];\n                            case 4:\n                                return [\n                                    2\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"add\",\n            value: // add heartbeats\n            function add(heartbeatsObject) {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var _a, canUseIndexedDB, existingHeartbeatsObject;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                return [\n                                    4,\n                                    _this._canUseIndexedDBPromise\n                                ];\n                            case 1:\n                                canUseIndexedDB = _state.sent();\n                                if (!!canUseIndexedDB) return [\n                                    3,\n                                    2\n                                ];\n                                return [\n                                    2\n                                ];\n                            case 2:\n                                return [\n                                    4,\n                                    _this.read()\n                                ];\n                            case 3:\n                                existingHeartbeatsObject = _state.sent();\n                                return [\n                                    2,\n                                    $0913f93b5b3c9bac$var$writeHeartbeatsToIndexedDB(_this.app, {\n                                        lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\n                                        heartbeats: (0, $aYXpI._)(existingHeartbeatsObject.heartbeats).concat((0, $aYXpI._)(heartbeatsObject.heartbeats))\n                                    })\n                                ];\n                            case 4:\n                                return [\n                                    2\n                                ];\n                        }\n                    });\n                })();\n            }\n        }\n    ]);\n    return HeartbeatStorageImpl;\n}();\n/**\r\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\r\n * in a platform logging header JSON object, stringified, and converted\r\n * to base 64.\r\n */ function $0913f93b5b3c9bac$var$countBytes(heartbeatsCache) {\n    // base64 has a restricted set of characters, all of which should be 1 byte.\n    return (0, $1d9d263a787f8021$export$4b5284a3025a455)(// heartbeatsCache wrapper properties\n    JSON.stringify({\n        version: 2,\n        heartbeats: heartbeatsCache\n    })).length;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ function $0913f93b5b3c9bac$var$registerCoreComponents(variant) {\n    $0913f93b5b3c9bac$export$c930050e7bb63965(new (0, $4d80d01579d5bd6a$export$16fa2f45be04daa8)(\"platform-logger\", function(container) {\n        return new $0913f93b5b3c9bac$var$PlatformLoggerServiceImpl(container);\n    }, \"PRIVATE\" /* ComponentType.PRIVATE */ ));\n    $0913f93b5b3c9bac$export$c930050e7bb63965(new (0, $4d80d01579d5bd6a$export$16fa2f45be04daa8)(\"heartbeat\", function(container) {\n        return new $0913f93b5b3c9bac$var$HeartbeatServiceImpl(container);\n    }, \"PRIVATE\" /* ComponentType.PRIVATE */ ));\n    // Register `app` package.\n    $0913f93b5b3c9bac$export$d29d5299a7137abc($0913f93b5b3c9bac$var$name$o, $0913f93b5b3c9bac$var$version$1, variant);\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n    $0913f93b5b3c9bac$export$d29d5299a7137abc($0913f93b5b3c9bac$var$name$o, $0913f93b5b3c9bac$var$version$1, \"esm2017\");\n    // Register platform SDK identifier (no version).\n    $0913f93b5b3c9bac$export$d29d5299a7137abc(\"fire-js\", \"\");\n}\n/**\r\n * Firebase App\r\n *\r\n * @remarks This package coordinates the communication between the different Firebase components\r\n * @packageDocumentation\r\n */ $0913f93b5b3c9bac$var$registerCoreComponents(\"\");\n\n\nvar $b29ef28f0d58131e$var$name = \"firebase\";\nvar $b29ef28f0d58131e$var$version = \"9.23.0\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ (0, $0913f93b5b3c9bac$export$d29d5299a7137abc)($b29ef28f0d58131e$var$name, $b29ef28f0d58131e$var$version, \"app\");\n\n\n\nvar $cquyX = parcelRequire(\"cquyX\");\n\nvar $i7mVp = parcelRequire(\"i7mVp\");\n\nvar $juqrk = parcelRequire(\"juqrk\");\n\nvar $bNI6E = parcelRequire(\"bNI6E\");\n\n\nvar $5yT7U = parcelRequire(\"5yT7U\");\nfunction $1e30adf2ee06b636$export$e4187255aefbc259(object, property) {\n    while(!Object.prototype.hasOwnProperty.call(object, property)){\n        object = (0, $5yT7U._get_prototype_of)(object);\n        if (object === null) break;\n    }\n    return object;\n}\n\n\nfunction $e6962c1d2fca547a$export$afb3516d9d608401(target, property, receiver) {\n    if (typeof Reflect !== \"undefined\" && Reflect.get) $e6962c1d2fca547a$export$afb3516d9d608401 = Reflect.get;\n    else $e6962c1d2fca547a$export$afb3516d9d608401 = function get(target, property, receiver) {\n        var base = (0, $1e30adf2ee06b636$export$e4187255aefbc259)(target, property);\n        if (!base) return;\n        var desc = Object.getOwnPropertyDescriptor(base, property);\n        if (desc.get) return desc.get.call(receiver || target);\n        return desc.value;\n    };\n    return $e6962c1d2fca547a$export$afb3516d9d608401(target, property, receiver || target);\n}\n\n\n\nvar $5yT7U = parcelRequire(\"5yT7U\");\n\nvar $jqfyu = parcelRequire(\"jqfyu\");\n\nvar $fGQt0 = parcelRequire(\"fGQt0\");\n\nvar $aYXpI = parcelRequire(\"aYXpI\");\n\nvar $50zho = parcelRequire(\"50zho\");\n\nvar $4tSb9 = parcelRequire(\"4tSb9\");\n\n\n\nvar $4tSb9 = parcelRequire(\"4tSb9\");\n\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * An enum of factors that may be used for multifactor authentication.\r\n *\r\n * @public\r\n */ var $07e48e70fcf53a6e$export$d66501df72047452 = {\n    /** Phone as second factor */ PHONE: \"phone\",\n    TOTP: \"totp\"\n};\n/**\r\n * Enumeration of supported providers.\r\n *\r\n * @public\r\n */ var $07e48e70fcf53a6e$export$ffb5f4729a158638 = {\n    /** Facebook provider ID */ FACEBOOK: \"facebook.com\",\n    /** GitHub provider ID */ GITHUB: \"github.com\",\n    /** Google provider ID */ GOOGLE: \"google.com\",\n    /** Password provider */ PASSWORD: \"password\",\n    /** Phone provider */ PHONE: \"phone\",\n    /** Twitter provider ID */ TWITTER: \"twitter.com\"\n};\n/**\r\n * Enumeration of supported sign-in methods.\r\n *\r\n * @public\r\n */ var $07e48e70fcf53a6e$export$25ce5a424b770e84 = {\n    /** Email link sign in method */ EMAIL_LINK: \"emailLink\",\n    /** Email/password sign in method */ EMAIL_PASSWORD: \"password\",\n    /** Facebook sign in method */ FACEBOOK: \"facebook.com\",\n    /** GitHub sign in method */ GITHUB: \"github.com\",\n    /** Google sign in method */ GOOGLE: \"google.com\",\n    /** Phone sign in method */ PHONE: \"phone\",\n    /** Twitter sign in method */ TWITTER: \"twitter.com\"\n};\n/**\r\n * Enumeration of supported operation types.\r\n *\r\n * @public\r\n */ var $07e48e70fcf53a6e$export$c4ce752e73470fba = {\n    /** Operation involving linking an additional provider to an already signed-in user. */ LINK: \"link\",\n    /** Operation involving using a provider to reauthenticate an already signed-in user. */ REAUTHENTICATE: \"reauthenticate\",\n    /** Operation involving signing in a user. */ SIGN_IN: \"signIn\"\n};\n/**\r\n * An enumeration of the possible email action types.\r\n *\r\n * @public\r\n */ var $07e48e70fcf53a6e$export$ebd11618f299a286 = {\n    /** The email link sign-in action. */ EMAIL_SIGNIN: \"EMAIL_SIGNIN\",\n    /** The password reset action. */ PASSWORD_RESET: \"PASSWORD_RESET\",\n    /** The email revocation action. */ RECOVER_EMAIL: \"RECOVER_EMAIL\",\n    /** The revert second factor addition email action. */ REVERT_SECOND_FACTOR_ADDITION: \"REVERT_SECOND_FACTOR_ADDITION\",\n    /** The revert second factor addition email action. */ VERIFY_AND_CHANGE_EMAIL: \"VERIFY_AND_CHANGE_EMAIL\",\n    /** The email verification action. */ VERIFY_EMAIL: \"VERIFY_EMAIL\"\n};\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ function $07e48e70fcf53a6e$var$_debugErrorMap() {\n    var _obj;\n    return(_obj = {}, (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"admin-restricted-operation\" /* AuthErrorCode.ADMIN_ONLY_OPERATION */ , \"This operation is restricted to administrators only.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */ , \"\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"app-not-authorized\" /* AuthErrorCode.APP_NOT_AUTHORIZED */ , \"This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"app-not-installed\" /* AuthErrorCode.APP_NOT_INSTALLED */ , \"The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"captcha-check-failed\" /* AuthErrorCode.CAPTCHA_CHECK_FAILED */ , \"The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"code-expired\" /* AuthErrorCode.CODE_EXPIRED */ , \"The SMS code has expired. Please re-send the verification code to try again.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"cordova-not-ready\" /* AuthErrorCode.CORDOVA_NOT_READY */ , \"Cordova framework is not ready.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"cors-unsupported\" /* AuthErrorCode.CORS_UNSUPPORTED */ , \"This browser is not supported.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */ , \"This credential is already associated with a different user account.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"custom-token-mismatch\" /* AuthErrorCode.CREDENTIAL_MISMATCH */ , \"The custom token corresponds to a different audience.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"requires-recent-login\" /* AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */ , \"This operation is sensitive and requires recent authentication. Log in again before retrying this request.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */ , \"Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"dynamic-link-not-activated\" /* AuthErrorCode.DYNAMIC_LINK_NOT_ACTIVATED */ , \"Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"email-change-needs-verification\" /* AuthErrorCode.EMAIL_CHANGE_NEEDS_VERIFICATION */ , \"Multi-factor users must always have a verified email.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */ , \"The email address is already in use by another account.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"emulator-config-failed\" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */ , 'Auth instance has already been used to make a network call. Auth can no longer be configured to use the emulator. Try calling \"connectAuthEmulator()\" sooner.'), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"expired-action-code\" /* AuthErrorCode.EXPIRED_OOB_CODE */ , \"The action code has expired.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"cancelled-popup-request\" /* AuthErrorCode.EXPIRED_POPUP_REQUEST */ , \"This operation has been cancelled due to another conflicting popup being opened.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ , \"An internal AuthError has occurred.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"invalid-app-credential\" /* AuthErrorCode.INVALID_APP_CREDENTIAL */ , \"The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"invalid-app-id\" /* AuthErrorCode.INVALID_APP_ID */ , \"The mobile app identifier is not registed for the current project.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */ , \"This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"invalid-auth-event\" /* AuthErrorCode.INVALID_AUTH_EVENT */ , \"An internal AuthError has occurred.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"invalid-verification-code\" /* AuthErrorCode.INVALID_CODE */ , \"The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure to use the verification code provided by the user.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"invalid-continue-uri\" /* AuthErrorCode.INVALID_CONTINUE_URI */ , \"The continue URL provided in the request is invalid.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"invalid-cordova-configuration\" /* AuthErrorCode.INVALID_CORDOVA_CONFIGURATION */ , \"The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"invalid-custom-token\" /* AuthErrorCode.INVALID_CUSTOM_TOKEN */ , \"The custom token format is incorrect. Please check the documentation.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"invalid-dynamic-link-domain\" /* AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN */ , \"The provided dynamic link domain is not configured or authorized for the current project.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"invalid-email\" /* AuthErrorCode.INVALID_EMAIL */ , \"The email address is badly formatted.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"invalid-emulator-scheme\" /* AuthErrorCode.INVALID_EMULATOR_SCHEME */ , \"Emulator URL must start with a valid scheme (http:// or https://).\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"invalid-api-key\" /* AuthErrorCode.INVALID_API_KEY */ , \"Your API key is invalid, please check you have copied it correctly.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"invalid-cert-hash\" /* AuthErrorCode.INVALID_CERT_HASH */ , \"The SHA-1 certificate hash provided is invalid.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"invalid-credential\" /* AuthErrorCode.INVALID_IDP_RESPONSE */ , \"The supplied auth credential is malformed or has expired.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"invalid-message-payload\" /* AuthErrorCode.INVALID_MESSAGE_PAYLOAD */ , \"The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"invalid-multi-factor-session\" /* AuthErrorCode.INVALID_MFA_SESSION */ , \"The request does not contain a valid proof of first factor successful sign-in.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"invalid-oauth-provider\" /* AuthErrorCode.INVALID_OAUTH_PROVIDER */ , \"EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"invalid-oauth-client-id\" /* AuthErrorCode.INVALID_OAUTH_CLIENT_ID */ , \"The OAuth client ID provided is either invalid or does not match the specified API key.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"unauthorized-domain\" /* AuthErrorCode.INVALID_ORIGIN */ , \"This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"invalid-action-code\" /* AuthErrorCode.INVALID_OOB_CODE */ , \"The action code is invalid. This can happen if the code is malformed, expired, or has already been used.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"wrong-password\" /* AuthErrorCode.INVALID_PASSWORD */ , \"The password is invalid or the user does not have a password.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"invalid-persistence-type\" /* AuthErrorCode.INVALID_PERSISTENCE */ , \"The specified persistence type is invalid. It can only be local, session or none.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"invalid-phone-number\" /* AuthErrorCode.INVALID_PHONE_NUMBER */ , \"The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"invalid-provider-id\" /* AuthErrorCode.INVALID_PROVIDER_ID */ , \"The specified provider ID is invalid.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"invalid-recipient-email\" /* AuthErrorCode.INVALID_RECIPIENT_EMAIL */ , \"The email corresponding to this action failed to send as the provided recipient email address is invalid.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"invalid-sender\" /* AuthErrorCode.INVALID_SENDER */ , \"The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"invalid-verification-id\" /* AuthErrorCode.INVALID_SESSION_INFO */ , \"The verification ID used to create the phone auth credential is invalid.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"invalid-tenant-id\" /* AuthErrorCode.INVALID_TENANT_ID */ , \"The Auth instance's tenant ID is invalid.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"login-blocked\" /* AuthErrorCode.LOGIN_BLOCKED */ , \"Login blocked by user-provided method: {$originalMessage}\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */ , \"An Android Package Name must be provided if the Android App is required to be installed.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"auth-domain-config-required\" /* AuthErrorCode.MISSING_AUTH_DOMAIN */ , \"Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"missing-app-credential\" /* AuthErrorCode.MISSING_APP_CREDENTIAL */ , \"The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"missing-verification-code\" /* AuthErrorCode.MISSING_CODE */ , \"The phone auth credential was created with an empty SMS verification code.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"missing-continue-uri\" /* AuthErrorCode.MISSING_CONTINUE_URI */ , \"A continue URL must be provided in the request.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"missing-iframe-start\" /* AuthErrorCode.MISSING_IFRAME_START */ , \"An internal AuthError has occurred.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"missing-ios-bundle-id\" /* AuthErrorCode.MISSING_IOS_BUNDLE_ID */ , \"An iOS Bundle ID must be provided if an App Store ID is provided.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"missing-or-invalid-nonce\" /* AuthErrorCode.MISSING_OR_INVALID_NONCE */ , \"The request does not contain a valid nonce. This can occur if the SHA-256 hash of the provided raw nonce does not match the hashed nonce in the ID token payload.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"missing-password\" /* AuthErrorCode.MISSING_PASSWORD */ , \"A non-empty password must be provided\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"missing-multi-factor-info\" /* AuthErrorCode.MISSING_MFA_INFO */ , \"No second factor identifier is provided.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"missing-multi-factor-session\" /* AuthErrorCode.MISSING_MFA_SESSION */ , \"The request is missing proof of first factor successful sign-in.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"missing-phone-number\" /* AuthErrorCode.MISSING_PHONE_NUMBER */ , \"To send verification codes, provide a phone number for the recipient.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"missing-verification-id\" /* AuthErrorCode.MISSING_SESSION_INFO */ , \"The phone auth credential was created with an empty verification ID.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"app-deleted\" /* AuthErrorCode.MODULE_DESTROYED */ , \"This instance of FirebaseApp has been deleted.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"multi-factor-info-not-found\" /* AuthErrorCode.MFA_INFO_NOT_FOUND */ , \"The user does not have a second factor matching the identifier provided.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */ , \"Proof of ownership of a second factor is required to complete sign-in.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */ , \"An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */ , \"A network AuthError (such as timeout, interrupted connection or unreachable host) has occurred.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"no-auth-event\" /* AuthErrorCode.NO_AUTH_EVENT */ , \"An internal AuthError has occurred.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"no-such-provider\" /* AuthErrorCode.NO_SUCH_PROVIDER */ , \"User was not linked to an account with the given provider.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"null-user\" /* AuthErrorCode.NULL_USER */ , \"A null user object was provided as the argument for an operation which requires a non-null user object.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"operation-not-allowed\" /* AuthErrorCode.OPERATION_NOT_ALLOWED */ , \"The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */ , 'This operation is not supported in the environment this application is running on. \"location.protocol\" must be http, https or chrome-extension and web storage must be enabled.'), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"popup-blocked\" /* AuthErrorCode.POPUP_BLOCKED */ , \"Unable to establish a connection with the popup. It may have been blocked by the browser.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"popup-closed-by-user\" /* AuthErrorCode.POPUP_CLOSED_BY_USER */ , \"The popup has been closed by the user before finalizing the operation.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"provider-already-linked\" /* AuthErrorCode.PROVIDER_ALREADY_LINKED */ , \"User can only be linked to one identity for the given provider.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"quota-exceeded\" /* AuthErrorCode.QUOTA_EXCEEDED */ , \"The project's quota for this operation has been exceeded.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"redirect-cancelled-by-user\" /* AuthErrorCode.REDIRECT_CANCELLED_BY_USER */ , \"The redirect operation has been cancelled by the user before finalizing.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"redirect-operation-pending\" /* AuthErrorCode.REDIRECT_OPERATION_PENDING */ , \"A redirect sign-in operation is already pending.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"rejected-credential\" /* AuthErrorCode.REJECTED_CREDENTIAL */ , \"The request contains malformed or mismatching credentials.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"second-factor-already-in-use\" /* AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED */ , \"The second factor is already enrolled on this account.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"maximum-second-factor-count-exceeded\" /* AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED */ , \"The maximum allowed number of second factors on a user has been exceeded.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */ , \"The provided tenant ID does not match the Auth instance's tenant ID\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"timeout\" /* AuthErrorCode.TIMEOUT */ , \"The operation has timed out.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */ , \"The user's credential is no longer valid. The user must sign in again.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"too-many-requests\" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */ , \"We have blocked all requests from this device due to unusual activity. Try again later.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"unauthorized-continue-uri\" /* AuthErrorCode.UNAUTHORIZED_DOMAIN */ , \"The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"unsupported-first-factor\" /* AuthErrorCode.UNSUPPORTED_FIRST_FACTOR */ , \"Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"unsupported-persistence-type\" /* AuthErrorCode.UNSUPPORTED_PERSISTENCE */ , \"The current environment does not support the specified persistence type.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"unsupported-tenant-operation\" /* AuthErrorCode.UNSUPPORTED_TENANT_OPERATION */ , \"This operation is not supported in a multi-tenant context.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"unverified-email\" /* AuthErrorCode.UNVERIFIED_EMAIL */ , \"The operation requires a verified email.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"user-cancelled\" /* AuthErrorCode.USER_CANCELLED */ , \"The user did not grant your application the permissions it requested.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"user-not-found\" /* AuthErrorCode.USER_DELETED */ , \"There is no user record corresponding to this identifier. The user may have been deleted.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"user-disabled\" /* AuthErrorCode.USER_DISABLED */ , \"The user account has been disabled by an administrator.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */ , \"The supplied credentials do not correspond to the previously signed in user.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"user-signed-out\" /* AuthErrorCode.USER_SIGNED_OUT */ , \"\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"weak-password\" /* AuthErrorCode.WEAK_PASSWORD */ , \"The password must be 6 characters long or more.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"web-storage-unsupported\" /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */ , \"This browser is not supported or 3rd party cookies and data may be disabled.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"already-initialized\" /* AuthErrorCode.ALREADY_INITIALIZED */ , \"initializeAuth() has already been called with different options. To avoid this error, call initializeAuth() with the same options as when it was originally called, or call getAuth() to return the already initialized instance.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */ , \"The reCAPTCHA token is missing when sending request to the backend.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"invalid-recaptcha-token\" /* AuthErrorCode.INVALID_RECAPTCHA_TOKEN */ , \"The reCAPTCHA token is invalid when sending request to the backend.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"invalid-recaptcha-action\" /* AuthErrorCode.INVALID_RECAPTCHA_ACTION */ , \"The reCAPTCHA action is invalid when sending request to the backend.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"recaptcha-not-enabled\" /* AuthErrorCode.RECAPTCHA_NOT_ENABLED */ , \"reCAPTCHA Enterprise integration is not enabled for this project.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"missing-client-type\" /* AuthErrorCode.MISSING_CLIENT_TYPE */ , \"The reCAPTCHA client type is missing when sending request to the backend.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"missing-recaptcha-version\" /* AuthErrorCode.MISSING_RECAPTCHA_VERSION */ , \"The reCAPTCHA version is missing when sending request to the backend.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"invalid-req-type\" /* AuthErrorCode.INVALID_REQ_TYPE */ , \"Invalid request parameters.\"), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"invalid-recaptcha-version\" /* AuthErrorCode.INVALID_RECAPTCHA_VERSION */ , \"The reCAPTCHA version is invalid when sending request to the backend.\"), _obj);\n}\nfunction $07e48e70fcf53a6e$var$_prodErrorMap() {\n    // We will include this one message in the prod error map since by the very\n    // nature of this error, developers will never be able to see the message\n    // using the debugErrorMap (which is installed during auth initialization).\n    return (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)({}, \"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */ , \"Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK.\");\n}\n/**\r\n * A verbose error map with detailed descriptions for most error codes.\r\n *\r\n * See discussion at {@link AuthErrorMap}\r\n *\r\n * @public\r\n */ var $07e48e70fcf53a6e$export$96f57966bedc81b4 = $07e48e70fcf53a6e$var$_debugErrorMap;\n/**\r\n * A minimal error map with all verbose error messages stripped.\r\n *\r\n * See discussion at {@link AuthErrorMap}\r\n *\r\n * @public\r\n */ var $07e48e70fcf53a6e$export$a9c23c6ac3fc3eca = $07e48e70fcf53a6e$var$_prodErrorMap;\nvar $07e48e70fcf53a6e$var$_DEFAULT_AUTH_ERROR_FACTORY = new (0, $1d9d263a787f8021$export$3fa6e1b18a3b2d40)(\"auth\", \"Firebase\", $07e48e70fcf53a6e$var$_prodErrorMap());\n/**\r\n * A map of potential `Auth` error codes, for easier comparison with errors\r\n * thrown by the SDK.\r\n *\r\n * @remarks\r\n * Note that you can't tree-shake individual keys\r\n * in the map, so by using the map you might substantially increase your\r\n * bundle size.\r\n *\r\n * @public\r\n */ var $07e48e70fcf53a6e$export$2329c99376c9d0a4 = {\n    ADMIN_ONLY_OPERATION: \"auth/admin-restricted-operation\",\n    ARGUMENT_ERROR: \"auth/argument-error\",\n    APP_NOT_AUTHORIZED: \"auth/app-not-authorized\",\n    APP_NOT_INSTALLED: \"auth/app-not-installed\",\n    CAPTCHA_CHECK_FAILED: \"auth/captcha-check-failed\",\n    CODE_EXPIRED: \"auth/code-expired\",\n    CORDOVA_NOT_READY: \"auth/cordova-not-ready\",\n    CORS_UNSUPPORTED: \"auth/cors-unsupported\",\n    CREDENTIAL_ALREADY_IN_USE: \"auth/credential-already-in-use\",\n    CREDENTIAL_MISMATCH: \"auth/custom-token-mismatch\",\n    CREDENTIAL_TOO_OLD_LOGIN_AGAIN: \"auth/requires-recent-login\",\n    DEPENDENT_SDK_INIT_BEFORE_AUTH: \"auth/dependent-sdk-initialized-before-auth\",\n    DYNAMIC_LINK_NOT_ACTIVATED: \"auth/dynamic-link-not-activated\",\n    EMAIL_CHANGE_NEEDS_VERIFICATION: \"auth/email-change-needs-verification\",\n    EMAIL_EXISTS: \"auth/email-already-in-use\",\n    EMULATOR_CONFIG_FAILED: \"auth/emulator-config-failed\",\n    EXPIRED_OOB_CODE: \"auth/expired-action-code\",\n    EXPIRED_POPUP_REQUEST: \"auth/cancelled-popup-request\",\n    INTERNAL_ERROR: \"auth/internal-error\",\n    INVALID_API_KEY: \"auth/invalid-api-key\",\n    INVALID_APP_CREDENTIAL: \"auth/invalid-app-credential\",\n    INVALID_APP_ID: \"auth/invalid-app-id\",\n    INVALID_AUTH: \"auth/invalid-user-token\",\n    INVALID_AUTH_EVENT: \"auth/invalid-auth-event\",\n    INVALID_CERT_HASH: \"auth/invalid-cert-hash\",\n    INVALID_CODE: \"auth/invalid-verification-code\",\n    INVALID_CONTINUE_URI: \"auth/invalid-continue-uri\",\n    INVALID_CORDOVA_CONFIGURATION: \"auth/invalid-cordova-configuration\",\n    INVALID_CUSTOM_TOKEN: \"auth/invalid-custom-token\",\n    INVALID_DYNAMIC_LINK_DOMAIN: \"auth/invalid-dynamic-link-domain\",\n    INVALID_EMAIL: \"auth/invalid-email\",\n    INVALID_EMULATOR_SCHEME: \"auth/invalid-emulator-scheme\",\n    INVALID_IDP_RESPONSE: \"auth/invalid-credential\",\n    INVALID_MESSAGE_PAYLOAD: \"auth/invalid-message-payload\",\n    INVALID_MFA_SESSION: \"auth/invalid-multi-factor-session\",\n    INVALID_OAUTH_CLIENT_ID: \"auth/invalid-oauth-client-id\",\n    INVALID_OAUTH_PROVIDER: \"auth/invalid-oauth-provider\",\n    INVALID_OOB_CODE: \"auth/invalid-action-code\",\n    INVALID_ORIGIN: \"auth/unauthorized-domain\",\n    INVALID_PASSWORD: \"auth/wrong-password\",\n    INVALID_PERSISTENCE: \"auth/invalid-persistence-type\",\n    INVALID_PHONE_NUMBER: \"auth/invalid-phone-number\",\n    INVALID_PROVIDER_ID: \"auth/invalid-provider-id\",\n    INVALID_RECIPIENT_EMAIL: \"auth/invalid-recipient-email\",\n    INVALID_SENDER: \"auth/invalid-sender\",\n    INVALID_SESSION_INFO: \"auth/invalid-verification-id\",\n    INVALID_TENANT_ID: \"auth/invalid-tenant-id\",\n    MFA_INFO_NOT_FOUND: \"auth/multi-factor-info-not-found\",\n    MFA_REQUIRED: \"auth/multi-factor-auth-required\",\n    MISSING_ANDROID_PACKAGE_NAME: \"auth/missing-android-pkg-name\",\n    MISSING_APP_CREDENTIAL: \"auth/missing-app-credential\",\n    MISSING_AUTH_DOMAIN: \"auth/auth-domain-config-required\",\n    MISSING_CODE: \"auth/missing-verification-code\",\n    MISSING_CONTINUE_URI: \"auth/missing-continue-uri\",\n    MISSING_IFRAME_START: \"auth/missing-iframe-start\",\n    MISSING_IOS_BUNDLE_ID: \"auth/missing-ios-bundle-id\",\n    MISSING_OR_INVALID_NONCE: \"auth/missing-or-invalid-nonce\",\n    MISSING_MFA_INFO: \"auth/missing-multi-factor-info\",\n    MISSING_MFA_SESSION: \"auth/missing-multi-factor-session\",\n    MISSING_PHONE_NUMBER: \"auth/missing-phone-number\",\n    MISSING_SESSION_INFO: \"auth/missing-verification-id\",\n    MODULE_DESTROYED: \"auth/app-deleted\",\n    NEED_CONFIRMATION: \"auth/account-exists-with-different-credential\",\n    NETWORK_REQUEST_FAILED: \"auth/network-request-failed\",\n    NULL_USER: \"auth/null-user\",\n    NO_AUTH_EVENT: \"auth/no-auth-event\",\n    NO_SUCH_PROVIDER: \"auth/no-such-provider\",\n    OPERATION_NOT_ALLOWED: \"auth/operation-not-allowed\",\n    OPERATION_NOT_SUPPORTED: \"auth/operation-not-supported-in-this-environment\",\n    POPUP_BLOCKED: \"auth/popup-blocked\",\n    POPUP_CLOSED_BY_USER: \"auth/popup-closed-by-user\",\n    PROVIDER_ALREADY_LINKED: \"auth/provider-already-linked\",\n    QUOTA_EXCEEDED: \"auth/quota-exceeded\",\n    REDIRECT_CANCELLED_BY_USER: \"auth/redirect-cancelled-by-user\",\n    REDIRECT_OPERATION_PENDING: \"auth/redirect-operation-pending\",\n    REJECTED_CREDENTIAL: \"auth/rejected-credential\",\n    SECOND_FACTOR_ALREADY_ENROLLED: \"auth/second-factor-already-in-use\",\n    SECOND_FACTOR_LIMIT_EXCEEDED: \"auth/maximum-second-factor-count-exceeded\",\n    TENANT_ID_MISMATCH: \"auth/tenant-id-mismatch\",\n    TIMEOUT: \"auth/timeout\",\n    TOKEN_EXPIRED: \"auth/user-token-expired\",\n    TOO_MANY_ATTEMPTS_TRY_LATER: \"auth/too-many-requests\",\n    UNAUTHORIZED_DOMAIN: \"auth/unauthorized-continue-uri\",\n    UNSUPPORTED_FIRST_FACTOR: \"auth/unsupported-first-factor\",\n    UNSUPPORTED_PERSISTENCE: \"auth/unsupported-persistence-type\",\n    UNSUPPORTED_TENANT_OPERATION: \"auth/unsupported-tenant-operation\",\n    UNVERIFIED_EMAIL: \"auth/unverified-email\",\n    USER_CANCELLED: \"auth/user-cancelled\",\n    USER_DELETED: \"auth/user-not-found\",\n    USER_DISABLED: \"auth/user-disabled\",\n    USER_MISMATCH: \"auth/user-mismatch\",\n    USER_SIGNED_OUT: \"auth/user-signed-out\",\n    WEAK_PASSWORD: \"auth/weak-password\",\n    WEB_STORAGE_UNSUPPORTED: \"auth/web-storage-unsupported\",\n    ALREADY_INITIALIZED: \"auth/already-initialized\",\n    RECAPTCHA_NOT_ENABLED: \"auth/recaptcha-not-enabled\",\n    MISSING_RECAPTCHA_TOKEN: \"auth/missing-recaptcha-token\",\n    INVALID_RECAPTCHA_TOKEN: \"auth/invalid-recaptcha-token\",\n    INVALID_RECAPTCHA_ACTION: \"auth/invalid-recaptcha-action\",\n    MISSING_CLIENT_TYPE: \"auth/missing-client-type\",\n    MISSING_RECAPTCHA_VERSION: \"auth/missing-recaptcha-version\",\n    INVALID_RECAPTCHA_VERSION: \"auth/invalid-recaptcha-version\",\n    INVALID_REQ_TYPE: \"auth/invalid-req-type\"\n};\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ var $07e48e70fcf53a6e$var$logClient = new (0, $f4758df7279d6c6a$export$efa9a398d6368992)(\"@firebase/auth\");\nfunction $07e48e70fcf53a6e$var$_logWarn(msg) {\n    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        args[_key - 1] = arguments[_key];\n    }\n    var _logClient;\n    if ($07e48e70fcf53a6e$var$logClient.logLevel <= (0, $f4758df7279d6c6a$export$243e62d78d3b544d).WARN) (_logClient = $07e48e70fcf53a6e$var$logClient).warn.apply(_logClient, [\n        \"Auth (\".concat((0, $0913f93b5b3c9bac$export$31499a9cd224b78c), \"): \").concat(msg)\n    ].concat((0, $aYXpI._)(args)));\n}\nfunction $07e48e70fcf53a6e$var$_logError(msg) {\n    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        args[_key - 1] = arguments[_key];\n    }\n    var _logClient;\n    if ($07e48e70fcf53a6e$var$logClient.logLevel <= (0, $f4758df7279d6c6a$export$243e62d78d3b544d).ERROR) (_logClient = $07e48e70fcf53a6e$var$logClient).error.apply(_logClient, [\n        \"Auth (\".concat((0, $0913f93b5b3c9bac$export$31499a9cd224b78c), \"): \").concat(msg)\n    ].concat((0, $aYXpI._)(args)));\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ function $07e48e70fcf53a6e$export$d66dc83d8cfc8dd(authOrCode) {\n    for(var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        rest[_key - 1] = arguments[_key];\n    }\n    throw $07e48e70fcf53a6e$var$createErrorInternal.apply(void 0, [\n        authOrCode\n    ].concat((0, $aYXpI._)(rest)));\n}\nfunction $07e48e70fcf53a6e$export$3d12bd131bb975d1(authOrCode) {\n    for(var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        rest[_key - 1] = arguments[_key];\n    }\n    return $07e48e70fcf53a6e$var$createErrorInternal.apply(void 0, [\n        authOrCode\n    ].concat((0, $aYXpI._)(rest)));\n}\nfunction $07e48e70fcf53a6e$var$_errorWithCustomMessage(auth, code, message) {\n    var errorMap = Object.assign(Object.assign({}, $07e48e70fcf53a6e$export$a9c23c6ac3fc3eca()), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)({}, code, message));\n    var factory = new (0, $1d9d263a787f8021$export$3fa6e1b18a3b2d40)(\"auth\", \"Firebase\", errorMap);\n    return factory.create(code, {\n        appName: auth.name\n    });\n}\nfunction $07e48e70fcf53a6e$var$_assertInstanceOf(auth, object, instance) {\n    var constructorInstance = instance;\n    if (!(object instanceof constructorInstance)) {\n        if (constructorInstance.name !== object.constructor.name) $07e48e70fcf53a6e$export$d66dc83d8cfc8dd(auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */ );\n        throw $07e48e70fcf53a6e$var$_errorWithCustomMessage(auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */ , \"Type of \".concat(object.constructor.name, \" does not match expected instance.\") + \"Did you pass a reference from a different Auth SDK?\");\n    }\n}\nfunction $07e48e70fcf53a6e$var$createErrorInternal(authOrCode) {\n    for(var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        rest[_key - 1] = arguments[_key];\n    }\n    var _DEFAULT_AUTH_ERROR_FACTORY1;\n    if (typeof authOrCode !== \"string\") {\n        var _authOrCode__errorFactory;\n        var code = rest[0];\n        var fullParams = (0, $aYXpI._)(rest.slice(1));\n        if (fullParams[0]) fullParams[0].appName = authOrCode.name;\n        return (_authOrCode__errorFactory = authOrCode._errorFactory).create.apply(_authOrCode__errorFactory, [\n            code\n        ].concat((0, $aYXpI._)(fullParams)));\n    }\n    return (_DEFAULT_AUTH_ERROR_FACTORY1 = $07e48e70fcf53a6e$var$_DEFAULT_AUTH_ERROR_FACTORY).create.apply(_DEFAULT_AUTH_ERROR_FACTORY1, [\n        authOrCode\n    ].concat((0, $aYXpI._)(rest)));\n}\nfunction $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(assertion, authOrCode) {\n    for(var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){\n        rest[_key - 2] = arguments[_key];\n    }\n    if (!assertion) throw $07e48e70fcf53a6e$var$createErrorInternal.apply(void 0, [\n        authOrCode\n    ].concat((0, $aYXpI._)(rest)));\n}\n/**\r\n * Unconditionally fails, throwing an internal error with the given message.\r\n *\r\n * @param failure type of failure encountered\r\n * @throws Error\r\n */ function $07e48e70fcf53a6e$var$debugFail(failure) {\n    // Log the failure in addition to throw an exception, just in case the\n    // exception is swallowed.\n    var message = \"INTERNAL ASSERTION FAILED: \" + failure;\n    $07e48e70fcf53a6e$var$_logError(message);\n    // NOTE: We don't use FirebaseError here because these are internal failures\n    // that cannot be handled by the user. (Also it would create a circular\n    // dependency between the error and assert modules which doesn't work.)\n    throw new Error(message);\n}\n/**\r\n * Fails if the given assertion condition is false, throwing an Error with the\r\n * given message if it did.\r\n *\r\n * @param assertion\r\n * @param message\r\n */ function $07e48e70fcf53a6e$export$6554612db691658e(assertion, message) {\n    if (!assertion) $07e48e70fcf53a6e$var$debugFail(message);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ function $07e48e70fcf53a6e$var$_getCurrentUrl() {\n    var _a;\n    return typeof self !== \"undefined\" && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.href) || \"\";\n}\nfunction $07e48e70fcf53a6e$var$_isHttpOrHttps() {\n    return $07e48e70fcf53a6e$var$_getCurrentScheme() === \"http:\" || $07e48e70fcf53a6e$var$_getCurrentScheme() === \"https:\";\n}\nfunction $07e48e70fcf53a6e$var$_getCurrentScheme() {\n    var _a;\n    return typeof self !== \"undefined\" && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.protocol) || null;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Determine whether the browser is working online\r\n */ function $07e48e70fcf53a6e$var$_isOnline() {\n    if (typeof navigator !== \"undefined\" && navigator && \"onLine\" in navigator && typeof navigator.onLine === \"boolean\" && // Apply only for traditional web apps and Chrome extensions.\n    // This is especially true for Cordova apps which have unreliable\n    // navigator.onLine behavior unless cordova-plugin-network-information is\n    // installed which overwrites the native navigator.onLine value and\n    // defines navigator.connection.\n    ($07e48e70fcf53a6e$var$_isHttpOrHttps() || (0, $1d9d263a787f8021$export$caa8774a9107a58e)() || \"connection\" in navigator)) return navigator.onLine;\n    // If we can't determine the state, assume it is online.\n    return true;\n}\nfunction $07e48e70fcf53a6e$var$_getUserLanguage() {\n    if (typeof navigator === \"undefined\") return null;\n    var navigatorLanguage = navigator;\n    return(// Most reliable, but only supported in Chrome/Firefox.\n    navigatorLanguage.languages && navigatorLanguage.languages[0] || // Supported in most browsers, but returns the language of the browser\n    // UI, not the language set in browser settings.\n    navigatorLanguage.language || // Couldn't determine language.\n    null);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * A structure to help pick between a range of long and short delay durations\r\n * depending on the current environment. In general, the long delay is used for\r\n * mobile environments whereas short delays are used for desktop environments.\r\n */ var $07e48e70fcf53a6e$var$Delay = /*#__PURE__*/ function() {\n    \"use strict\";\n    function Delay(shortDelay, longDelay) {\n        (0, $juqrk._)(this, Delay);\n        this.shortDelay = shortDelay;\n        this.longDelay = longDelay;\n        // Internal error when improperly initialized.\n        $07e48e70fcf53a6e$export$6554612db691658e(longDelay > shortDelay, \"Short delay should be less than long delay!\");\n        this.isMobile = (0, $1d9d263a787f8021$export$872f8323f01d7ae0)() || (0, $1d9d263a787f8021$export$f7a1e23e542d38e3)();\n    }\n    (0, $bNI6E._)(Delay, [\n        {\n            key: \"get\",\n            value: function get() {\n                if (!$07e48e70fcf53a6e$var$_isOnline()) // Pick the shorter timeout.\n                return Math.min(5000 /* DelayMin.OFFLINE */ , this.shortDelay);\n                // If running in a mobile environment, return the long delay, otherwise\n                // return the short delay.\n                // This could be improved in the future to dynamically change based on other\n                // variables instead of just reading the current environment.\n                return this.isMobile ? this.longDelay : this.shortDelay;\n            }\n        }\n    ]);\n    return Delay;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ function $07e48e70fcf53a6e$var$_emulatorUrl(config, path) {\n    $07e48e70fcf53a6e$export$6554612db691658e(config.emulator, \"Emulator should always be set here\");\n    var url = config.emulator.url;\n    if (!path) return url;\n    return \"\".concat(url).concat(path.startsWith(\"/\") ? path.slice(1) : path);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ var $07e48e70fcf53a6e$export$faec65b429be379 = /*#__PURE__*/ function() {\n    \"use strict\";\n    function FetchProvider() {\n        (0, $juqrk._)(this, FetchProvider);\n    }\n    (0, $bNI6E._)(FetchProvider, null, [\n        {\n            key: \"initialize\",\n            value: function initialize(fetchImpl, headersImpl, responseImpl) {\n                this.fetchImpl = fetchImpl;\n                if (headersImpl) this.headersImpl = headersImpl;\n                if (responseImpl) this.responseImpl = responseImpl;\n            }\n        },\n        {\n            key: \"fetch\",\n            value: function fetch1() {\n                if (this.fetchImpl) return this.fetchImpl;\n                if (typeof self !== \"undefined\" && \"fetch\" in self) return self.fetch;\n                $07e48e70fcf53a6e$var$debugFail(\"Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill\");\n            }\n        },\n        {\n            key: \"headers\",\n            value: function headers() {\n                if (this.headersImpl) return this.headersImpl;\n                if (typeof self !== \"undefined\" && \"Headers\" in self) return self.Headers;\n                $07e48e70fcf53a6e$var$debugFail(\"Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill\");\n            }\n        },\n        {\n            key: \"response\",\n            value: function response() {\n                if (this.responseImpl) return this.responseImpl;\n                if (typeof self !== \"undefined\" && \"Response\" in self) return self.Response;\n                $07e48e70fcf53a6e$var$debugFail(\"Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill\");\n            }\n        }\n    ]);\n    return FetchProvider;\n}();\nvar $07e48e70fcf53a6e$var$_obj;\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Map from errors returned by the server to errors to developer visible errors\r\n */ var $07e48e70fcf53a6e$var$SERVER_ERROR_MAP = ($07e48e70fcf53a6e$var$_obj = {}, // Custom token errors.\n(0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"CREDENTIAL_MISMATCH\" /* ServerError.CREDENTIAL_MISMATCH */ , \"custom-token-mismatch\" /* AuthErrorCode.CREDENTIAL_MISMATCH */ ), // This can only happen if the SDK sends a bad request.\n(0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"MISSING_CUSTOM_TOKEN\" /* ServerError.MISSING_CUSTOM_TOKEN */ , \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ ), // Create Auth URI errors.\n(0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"INVALID_IDENTIFIER\" /* ServerError.INVALID_IDENTIFIER */ , \"invalid-email\" /* AuthErrorCode.INVALID_EMAIL */ ), // This can only happen if the SDK sends a bad request.\n(0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"MISSING_CONTINUE_URI\" /* ServerError.MISSING_CONTINUE_URI */ , \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ ), // Sign in with email and password errors (some apply to sign up too).\n(0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"INVALID_PASSWORD\" /* ServerError.INVALID_PASSWORD */ , \"wrong-password\" /* AuthErrorCode.INVALID_PASSWORD */ ), // This can only happen if the SDK sends a bad request.\n(0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"MISSING_PASSWORD\" /* ServerError.MISSING_PASSWORD */ , \"missing-password\" /* AuthErrorCode.MISSING_PASSWORD */ ), // Sign up with email and password errors.\n(0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"EMAIL_EXISTS\" /* ServerError.EMAIL_EXISTS */ , \"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */ ), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"PASSWORD_LOGIN_DISABLED\" /* ServerError.PASSWORD_LOGIN_DISABLED */ , \"operation-not-allowed\" /* AuthErrorCode.OPERATION_NOT_ALLOWED */ ), // Verify assertion for sign in with credential errors:\n(0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"INVALID_IDP_RESPONSE\" /* ServerError.INVALID_IDP_RESPONSE */ , \"invalid-credential\" /* AuthErrorCode.INVALID_IDP_RESPONSE */ ), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"INVALID_PENDING_TOKEN\" /* ServerError.INVALID_PENDING_TOKEN */ , \"invalid-credential\" /* AuthErrorCode.INVALID_IDP_RESPONSE */ ), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"FEDERATED_USER_ID_ALREADY_LINKED\" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */ , \"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */ ), // This can only happen if the SDK sends a bad request.\n(0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"MISSING_REQ_TYPE\" /* ServerError.MISSING_REQ_TYPE */ , \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ ), // Send Password reset email errors:\n(0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"EMAIL_NOT_FOUND\" /* ServerError.EMAIL_NOT_FOUND */ , \"user-not-found\" /* AuthErrorCode.USER_DELETED */ ), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"RESET_PASSWORD_EXCEED_LIMIT\" /* ServerError.RESET_PASSWORD_EXCEED_LIMIT */ , \"too-many-requests\" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */ ), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"EXPIRED_OOB_CODE\" /* ServerError.EXPIRED_OOB_CODE */ , \"expired-action-code\" /* AuthErrorCode.EXPIRED_OOB_CODE */ ), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"INVALID_OOB_CODE\" /* ServerError.INVALID_OOB_CODE */ , \"invalid-action-code\" /* AuthErrorCode.INVALID_OOB_CODE */ ), // This can only happen if the SDK sends a bad request.\n(0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"MISSING_OOB_CODE\" /* ServerError.MISSING_OOB_CODE */ , \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ ), // Operations that require ID token in request:\n(0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"CREDENTIAL_TOO_OLD_LOGIN_AGAIN\" /* ServerError.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */ , \"requires-recent-login\" /* AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */ ), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"INVALID_ID_TOKEN\" /* ServerError.INVALID_ID_TOKEN */ , \"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */ ), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"TOKEN_EXPIRED\" /* ServerError.TOKEN_EXPIRED */ , \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */ ), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"USER_NOT_FOUND\" /* ServerError.USER_NOT_FOUND */ , \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */ ), // Other errors.\n(0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"TOO_MANY_ATTEMPTS_TRY_LATER\" /* ServerError.TOO_MANY_ATTEMPTS_TRY_LATER */ , \"too-many-requests\" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */ ), // Phone Auth related errors.\n(0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"INVALID_CODE\" /* ServerError.INVALID_CODE */ , \"invalid-verification-code\" /* AuthErrorCode.INVALID_CODE */ ), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"INVALID_SESSION_INFO\" /* ServerError.INVALID_SESSION_INFO */ , \"invalid-verification-id\" /* AuthErrorCode.INVALID_SESSION_INFO */ ), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"INVALID_TEMPORARY_PROOF\" /* ServerError.INVALID_TEMPORARY_PROOF */ , \"invalid-credential\" /* AuthErrorCode.INVALID_IDP_RESPONSE */ ), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"MISSING_SESSION_INFO\" /* ServerError.MISSING_SESSION_INFO */ , \"missing-verification-id\" /* AuthErrorCode.MISSING_SESSION_INFO */ ), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"SESSION_EXPIRED\" /* ServerError.SESSION_EXPIRED */ , \"code-expired\" /* AuthErrorCode.CODE_EXPIRED */ ), // Other action code errors when additional settings passed.\n// MISSING_CONTINUE_URI is getting mapped to INTERNAL_ERROR above.\n// This is OK as this error will be caught by client side validation.\n(0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"MISSING_ANDROID_PACKAGE_NAME\" /* ServerError.MISSING_ANDROID_PACKAGE_NAME */ , \"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */ ), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"UNAUTHORIZED_DOMAIN\" /* ServerError.UNAUTHORIZED_DOMAIN */ , \"unauthorized-continue-uri\" /* AuthErrorCode.UNAUTHORIZED_DOMAIN */ ), // getProjectConfig errors when clientId is passed.\n(0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"INVALID_OAUTH_CLIENT_ID\" /* ServerError.INVALID_OAUTH_CLIENT_ID */ , \"invalid-oauth-client-id\" /* AuthErrorCode.INVALID_OAUTH_CLIENT_ID */ ), // User actions (sign-up or deletion) disabled errors.\n(0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"ADMIN_ONLY_OPERATION\" /* ServerError.ADMIN_ONLY_OPERATION */ , \"admin-restricted-operation\" /* AuthErrorCode.ADMIN_ONLY_OPERATION */ ), // Multi factor related errors.\n(0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"INVALID_MFA_PENDING_CREDENTIAL\" /* ServerError.INVALID_MFA_PENDING_CREDENTIAL */ , \"invalid-multi-factor-session\" /* AuthErrorCode.INVALID_MFA_SESSION */ ), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"MFA_ENROLLMENT_NOT_FOUND\" /* ServerError.MFA_ENROLLMENT_NOT_FOUND */ , \"multi-factor-info-not-found\" /* AuthErrorCode.MFA_INFO_NOT_FOUND */ ), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"MISSING_MFA_ENROLLMENT_ID\" /* ServerError.MISSING_MFA_ENROLLMENT_ID */ , \"missing-multi-factor-info\" /* AuthErrorCode.MISSING_MFA_INFO */ ), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"MISSING_MFA_PENDING_CREDENTIAL\" /* ServerError.MISSING_MFA_PENDING_CREDENTIAL */ , \"missing-multi-factor-session\" /* AuthErrorCode.MISSING_MFA_SESSION */ ), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"SECOND_FACTOR_EXISTS\" /* ServerError.SECOND_FACTOR_EXISTS */ , \"second-factor-already-in-use\" /* AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED */ ), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"SECOND_FACTOR_LIMIT_EXCEEDED\" /* ServerError.SECOND_FACTOR_LIMIT_EXCEEDED */ , \"maximum-second-factor-count-exceeded\" /* AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED */ ), // Blocking functions related errors.\n(0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"BLOCKING_FUNCTION_ERROR_RESPONSE\" /* ServerError.BLOCKING_FUNCTION_ERROR_RESPONSE */ , \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ ), // Recaptcha related errors.\n(0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"RECAPTCHA_NOT_ENABLED\" /* ServerError.RECAPTCHA_NOT_ENABLED */ , \"recaptcha-not-enabled\" /* AuthErrorCode.RECAPTCHA_NOT_ENABLED */ ), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"MISSING_RECAPTCHA_TOKEN\" /* ServerError.MISSING_RECAPTCHA_TOKEN */ , \"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */ ), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"INVALID_RECAPTCHA_TOKEN\" /* ServerError.INVALID_RECAPTCHA_TOKEN */ , \"invalid-recaptcha-token\" /* AuthErrorCode.INVALID_RECAPTCHA_TOKEN */ ), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"INVALID_RECAPTCHA_ACTION\" /* ServerError.INVALID_RECAPTCHA_ACTION */ , \"invalid-recaptcha-action\" /* AuthErrorCode.INVALID_RECAPTCHA_ACTION */ ), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"MISSING_CLIENT_TYPE\" /* ServerError.MISSING_CLIENT_TYPE */ , \"missing-client-type\" /* AuthErrorCode.MISSING_CLIENT_TYPE */ ), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"MISSING_RECAPTCHA_VERSION\" /* ServerError.MISSING_RECAPTCHA_VERSION */ , \"missing-recaptcha-version\" /* AuthErrorCode.MISSING_RECAPTCHA_VERSION */ ), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"INVALID_RECAPTCHA_VERSION\" /* ServerError.INVALID_RECAPTCHA_VERSION */ , \"invalid-recaptcha-version\" /* AuthErrorCode.INVALID_RECAPTCHA_VERSION */ ), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)($07e48e70fcf53a6e$var$_obj, \"INVALID_REQ_TYPE\" /* ServerError.INVALID_REQ_TYPE */ , \"invalid-req-type\" /* AuthErrorCode.INVALID_REQ_TYPE */ ), $07e48e70fcf53a6e$var$_obj);\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ var $07e48e70fcf53a6e$var$DEFAULT_API_TIMEOUT_MS = new $07e48e70fcf53a6e$var$Delay(30000, 60000);\nfunction $07e48e70fcf53a6e$var$_addTidIfNecessary(auth, request) {\n    if (auth.tenantId && !request.tenantId) return Object.assign(Object.assign({}, request), {\n        tenantId: auth.tenantId\n    });\n    return request;\n}\nfunction $07e48e70fcf53a6e$var$_performApiRequest(auth, method, path, request) {\n    return $07e48e70fcf53a6e$var$__performApiRequest.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$__performApiRequest() {\n    $07e48e70fcf53a6e$var$__performApiRequest = (0, $i7mVp._)(function(auth, method, path, request) {\n        var customErrorMap;\n        var _arguments = arguments;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            customErrorMap = _arguments.length > 4 && _arguments[4] !== void 0 ? _arguments[4] : {};\n            return [\n                2,\n                $07e48e70fcf53a6e$var$_performFetchWithErrorHandling(auth, customErrorMap, /*#__PURE__*/ (0, $i7mVp._)(function() {\n                    var body, params, query, headers;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                body = {};\n                                params = {};\n                                if (request) {\n                                    if (method === \"GET\" /* HttpMethod.GET */ ) params = request;\n                                    else body = {\n                                        body: JSON.stringify(request)\n                                    };\n                                }\n                                query = (0, $1d9d263a787f8021$export$ac4103b836844853)(Object.assign({\n                                    key: auth.config.apiKey\n                                }, params)).slice(1);\n                                return [\n                                    4,\n                                    auth._getAdditionalHeaders()\n                                ];\n                            case 1:\n                                headers = _state.sent();\n                                headers[\"Content-Type\" /* HttpHeader.CONTENT_TYPE */ ] = \"application/json\";\n                                if (auth.languageCode) headers[\"X-Firebase-Locale\" /* HttpHeader.X_FIREBASE_LOCALE */ ] = auth.languageCode;\n                                return [\n                                    2,\n                                    $07e48e70fcf53a6e$export$faec65b429be379.fetch()($07e48e70fcf53a6e$var$_getFinalTarget(auth, auth.config.apiHost, path, query), Object.assign({\n                                        method: method,\n                                        headers: headers,\n                                        referrerPolicy: \"no-referrer\"\n                                    }, body))\n                                ];\n                        }\n                    });\n                }))\n            ];\n        });\n    });\n    return $07e48e70fcf53a6e$var$__performApiRequest.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_performFetchWithErrorHandling(auth, customErrorMap, fetchFn) {\n    return $07e48e70fcf53a6e$var$__performFetchWithErrorHandling.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$__performFetchWithErrorHandling() {\n    $07e48e70fcf53a6e$var$__performFetchWithErrorHandling = (0, $i7mVp._)(function(auth, customErrorMap, fetchFn) {\n        var errorMap, networkTimeout, response, json, errorMessage, _errorMessage_split, serverErrorCode, serverErrorMessage, authError, e;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    auth._canInitEmulator = false;\n                    errorMap = Object.assign(Object.assign({}, $07e48e70fcf53a6e$var$SERVER_ERROR_MAP), customErrorMap);\n                    _state.label = 1;\n                case 1:\n                    _state.trys.push([\n                        1,\n                        4,\n                        ,\n                        5\n                    ]);\n                    networkTimeout = new $07e48e70fcf53a6e$var$NetworkTimeout(auth);\n                    return [\n                        4,\n                        Promise.race([\n                            fetchFn(),\n                            networkTimeout.promise\n                        ])\n                    ];\n                case 2:\n                    response = _state.sent();\n                    // If we've reached this point, the fetch succeeded and the networkTimeout\n                    // didn't throw; clear the network timeout delay so that Node won't hang\n                    networkTimeout.clearNetworkTimeout();\n                    return [\n                        4,\n                        response.json()\n                    ];\n                case 3:\n                    json = _state.sent();\n                    if (\"needConfirmation\" in json) throw $07e48e70fcf53a6e$var$_makeTaggedError(auth, \"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */ , json);\n                    if (response.ok && !(\"errorMessage\" in json)) return [\n                        2,\n                        json\n                    ];\n                    else {\n                        errorMessage = response.ok ? json.errorMessage : json.error.message;\n                        _errorMessage_split = (0, $fGQt0._)(errorMessage.split(\" : \"), 2), serverErrorCode = _errorMessage_split[0], serverErrorMessage = _errorMessage_split[1];\n                        if (serverErrorCode === \"FEDERATED_USER_ID_ALREADY_LINKED\" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */ ) throw $07e48e70fcf53a6e$var$_makeTaggedError(auth, \"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */ , json);\n                        else if (serverErrorCode === \"EMAIL_EXISTS\" /* ServerError.EMAIL_EXISTS */ ) throw $07e48e70fcf53a6e$var$_makeTaggedError(auth, \"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */ , json);\n                        else if (serverErrorCode === \"USER_DISABLED\" /* ServerError.USER_DISABLED */ ) throw $07e48e70fcf53a6e$var$_makeTaggedError(auth, \"user-disabled\" /* AuthErrorCode.USER_DISABLED */ , json);\n                        authError = errorMap[serverErrorCode] || serverErrorCode.toLowerCase().replace(/[_\\s]+/g, \"-\");\n                        if (serverErrorMessage) throw $07e48e70fcf53a6e$var$_errorWithCustomMessage(auth, authError, serverErrorMessage);\n                        else $07e48e70fcf53a6e$export$d66dc83d8cfc8dd(auth, authError);\n                    }\n                    return [\n                        3,\n                        5\n                    ];\n                case 4:\n                    e = _state.sent();\n                    if (e instanceof (0, $1d9d263a787f8021$export$dd24e9cd51226c56)) throw e;\n                    // Changing this to a different error code will log user out when there is a network error\n                    // because we treat any error other than NETWORK_REQUEST_FAILED as token is invalid.\n                    // https://github.com/firebase/firebase-js-sdk/blob/4fbc73610d70be4e0852e7de63a39cb7897e8546/packages/auth/src/core/auth/auth_impl.ts#L309-L316\n                    $07e48e70fcf53a6e$export$d66dc83d8cfc8dd(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */ , {\n                        \"message\": String(e)\n                    });\n                    return [\n                        3,\n                        5\n                    ];\n                case 5:\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$__performFetchWithErrorHandling.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_performSignInRequest(auth, method, path, request) {\n    return $07e48e70fcf53a6e$var$__performSignInRequest.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$__performSignInRequest() {\n    $07e48e70fcf53a6e$var$__performSignInRequest = (0, $i7mVp._)(function(auth, method, path, request) {\n        var customErrorMap, serverResponse;\n        var _arguments = arguments;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    customErrorMap = _arguments.length > 4 && _arguments[4] !== void 0 ? _arguments[4] : {};\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$_performApiRequest(auth, method, path, request, customErrorMap)\n                    ];\n                case 1:\n                    serverResponse = _state.sent();\n                    if (\"mfaPendingCredential\" in serverResponse) $07e48e70fcf53a6e$export$d66dc83d8cfc8dd(auth, \"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */ , {\n                        _serverResponse: serverResponse\n                    });\n                    return [\n                        2,\n                        serverResponse\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$__performSignInRequest.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_getFinalTarget(auth, host, path, query) {\n    var base = \"\".concat(host).concat(path, \"?\").concat(query);\n    if (!auth.config.emulator) return \"\".concat(auth.config.apiScheme, \"://\").concat(base);\n    return $07e48e70fcf53a6e$var$_emulatorUrl(auth.config, base);\n}\nvar $07e48e70fcf53a6e$var$NetworkTimeout = /*#__PURE__*/ function() {\n    \"use strict\";\n    function NetworkTimeout(auth) {\n        var _this = this;\n        (0, $juqrk._)(this, NetworkTimeout);\n        this.auth = auth;\n        // Node timers and browser timers are fundamentally incompatible, but we\n        // don't care about the value here\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.timer = null;\n        this.promise = new Promise(function(_, reject) {\n            _this.timer = setTimeout(function() {\n                return reject($07e48e70fcf53a6e$export$3d12bd131bb975d1(_this.auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */ ));\n            }, $07e48e70fcf53a6e$var$DEFAULT_API_TIMEOUT_MS.get());\n        });\n    }\n    (0, $bNI6E._)(NetworkTimeout, [\n        {\n            key: \"clearNetworkTimeout\",\n            value: function clearNetworkTimeout() {\n                clearTimeout(this.timer);\n            }\n        }\n    ]);\n    return NetworkTimeout;\n}();\nfunction $07e48e70fcf53a6e$var$_makeTaggedError(auth, code, response) {\n    var errorParams = {\n        appName: auth.name\n    };\n    if (response.email) errorParams.email = response.email;\n    if (response.phoneNumber) errorParams.phoneNumber = response.phoneNumber;\n    var error = $07e48e70fcf53a6e$export$3d12bd131bb975d1(auth, code, errorParams);\n    // We know customData is defined on error because errorParams is defined\n    error.customData._tokenResponse = response;\n    return error;\n}\nfunction $07e48e70fcf53a6e$var$deleteAccount(auth, request) {\n    return $07e48e70fcf53a6e$var$_deleteAccount.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_deleteAccount() {\n    $07e48e70fcf53a6e$var$_deleteAccount = /**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ (0, $i7mVp._)(function(auth, request) {\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            return [\n                2,\n                $07e48e70fcf53a6e$var$_performApiRequest(auth, \"POST\" /* HttpMethod.POST */ , \"/v1/accounts:delete\" /* Endpoint.DELETE_ACCOUNT */ , request)\n            ];\n        });\n    });\n    return $07e48e70fcf53a6e$var$_deleteAccount.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$deleteLinkedAccounts(auth, request) {\n    return $07e48e70fcf53a6e$var$_deleteLinkedAccounts.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_deleteLinkedAccounts() {\n    $07e48e70fcf53a6e$var$_deleteLinkedAccounts = (0, $i7mVp._)(function(auth, request) {\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            return [\n                2,\n                $07e48e70fcf53a6e$var$_performApiRequest(auth, \"POST\" /* HttpMethod.POST */ , \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */ , request)\n            ];\n        });\n    });\n    return $07e48e70fcf53a6e$var$_deleteLinkedAccounts.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$getAccountInfo(auth, request) {\n    return $07e48e70fcf53a6e$var$_getAccountInfo.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_getAccountInfo() {\n    $07e48e70fcf53a6e$var$_getAccountInfo = (0, $i7mVp._)(function(auth, request) {\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            return [\n                2,\n                $07e48e70fcf53a6e$var$_performApiRequest(auth, \"POST\" /* HttpMethod.POST */ , \"/v1/accounts:lookup\" /* Endpoint.GET_ACCOUNT_INFO */ , request)\n            ];\n        });\n    });\n    return $07e48e70fcf53a6e$var$_getAccountInfo.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ function $07e48e70fcf53a6e$var$utcTimestampToDateString(utcTimestamp) {\n    if (!utcTimestamp) return undefined;\n    try {\n        // Convert to date object.\n        var date = new Date(Number(utcTimestamp));\n        // Test date is valid.\n        if (!isNaN(date.getTime())) // Convert to UTC date string.\n        return date.toUTCString();\n    } catch (e) {\n    // Do nothing. undefined will be returned.\n    }\n    return undefined;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Returns a JSON Web Token (JWT) used to identify the user to a Firebase service.\r\n *\r\n * @remarks\r\n * Returns the current token if it has not expired or if it will not expire in the next five\r\n * minutes. Otherwise, this will refresh the token and return a new one.\r\n *\r\n * @param user - The user.\r\n * @param forceRefresh - Force refresh regardless of token expiration.\r\n *\r\n * @public\r\n */ function $07e48e70fcf53a6e$export$ab83b03e4111b1d0(user) {\n    var forceRefresh = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n    return (0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(user).getIdToken(forceRefresh);\n}\nfunction $07e48e70fcf53a6e$export$1a82df3d29112e01(user) {\n    return $07e48e70fcf53a6e$var$_getIdTokenResult.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_getIdTokenResult() {\n    $07e48e70fcf53a6e$var$_getIdTokenResult = /**\r\n * Returns a deserialized JSON Web Token (JWT) used to identify the user to a Firebase service.\r\n *\r\n * @remarks\r\n * Returns the current token if it has not expired or if it will not expire in the next five\r\n * minutes. Otherwise, this will refresh the token and return a new one.\r\n *\r\n * @param user - The user.\r\n * @param forceRefresh - Force refresh regardless of token expiration.\r\n *\r\n * @public\r\n */ (0, $i7mVp._)(function(user) {\n        var forceRefresh, userInternal, token, claims, firebase, signInProvider;\n        var _arguments = arguments;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    forceRefresh = _arguments.length > 1 && _arguments[1] !== void 0 ? _arguments[1] : false;\n                    userInternal = (0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(user);\n                    return [\n                        4,\n                        userInternal.getIdToken(forceRefresh)\n                    ];\n                case 1:\n                    token = _state.sent();\n                    claims = $07e48e70fcf53a6e$var$_parseToken(token);\n                    $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(claims && claims.exp && claims.auth_time && claims.iat, userInternal.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n                    firebase = typeof claims.firebase === \"object\" ? claims.firebase : undefined;\n                    signInProvider = firebase === null || firebase === void 0 ? void 0 : firebase[\"sign_in_provider\"];\n                    return [\n                        2,\n                        {\n                            claims: claims,\n                            token: token,\n                            authTime: $07e48e70fcf53a6e$var$utcTimestampToDateString($07e48e70fcf53a6e$var$secondsStringToMilliseconds(claims.auth_time)),\n                            issuedAtTime: $07e48e70fcf53a6e$var$utcTimestampToDateString($07e48e70fcf53a6e$var$secondsStringToMilliseconds(claims.iat)),\n                            expirationTime: $07e48e70fcf53a6e$var$utcTimestampToDateString($07e48e70fcf53a6e$var$secondsStringToMilliseconds(claims.exp)),\n                            signInProvider: signInProvider || null,\n                            signInSecondFactor: (firebase === null || firebase === void 0 ? void 0 : firebase[\"sign_in_second_factor\"]) || null\n                        }\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$_getIdTokenResult.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$secondsStringToMilliseconds(seconds) {\n    return Number(seconds) * 1000;\n}\nfunction $07e48e70fcf53a6e$var$_parseToken(token) {\n    var _token_split = (0, $fGQt0._)(token.split(\".\"), 3), algorithm = _token_split[0], payload = _token_split[1], signature = _token_split[2];\n    if (algorithm === undefined || payload === undefined || signature === undefined) {\n        $07e48e70fcf53a6e$var$_logError(\"JWT malformed, contained fewer than 3 sections\");\n        return null;\n    }\n    try {\n        var decoded = (0, $1d9d263a787f8021$export$c62426fdd000a97e)(payload);\n        if (!decoded) {\n            $07e48e70fcf53a6e$var$_logError(\"Failed to decode base64 JWT payload\");\n            return null;\n        }\n        return JSON.parse(decoded);\n    } catch (e) {\n        $07e48e70fcf53a6e$var$_logError(\"Caught error parsing JWT payload as JSON\", e === null || e === void 0 ? void 0 : e.toString());\n        return null;\n    }\n}\n/**\r\n * Extract expiresIn TTL from a token by subtracting the expiration from the issuance.\r\n */ function $07e48e70fcf53a6e$var$_tokenExpiresIn(token) {\n    var parsedToken = $07e48e70fcf53a6e$var$_parseToken(token);\n    $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(parsedToken, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n    $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(typeof parsedToken.exp !== \"undefined\", \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n    $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(typeof parsedToken.iat !== \"undefined\", \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n    return Number(parsedToken.exp) - Number(parsedToken.iat);\n}\nfunction $07e48e70fcf53a6e$var$_logoutIfInvalidated(user, promise) {\n    return $07e48e70fcf53a6e$var$__logoutIfInvalidated.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$__logoutIfInvalidated() {\n    $07e48e70fcf53a6e$var$__logoutIfInvalidated = /**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ (0, $i7mVp._)(function(user, promise) {\n        var bypassAuthState, e;\n        var _arguments = arguments;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    bypassAuthState = _arguments.length > 2 && _arguments[2] !== void 0 ? _arguments[2] : false;\n                    if (bypassAuthState) return [\n                        2,\n                        promise\n                    ];\n                    _state.label = 1;\n                case 1:\n                    _state.trys.push([\n                        1,\n                        3,\n                        ,\n                        6\n                    ]);\n                    return [\n                        4,\n                        promise\n                    ];\n                case 2:\n                    return [\n                        2,\n                        _state.sent()\n                    ];\n                case 3:\n                    e = _state.sent();\n                    if (!(e instanceof (0, $1d9d263a787f8021$export$dd24e9cd51226c56) && $07e48e70fcf53a6e$var$isUserInvalidated(e))) return [\n                        3,\n                        5\n                    ];\n                    if (!(user.auth.currentUser === user)) return [\n                        3,\n                        5\n                    ];\n                    return [\n                        4,\n                        user.auth.signOut()\n                    ];\n                case 4:\n                    _state.sent();\n                    _state.label = 5;\n                case 5:\n                    throw e;\n                case 6:\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$__logoutIfInvalidated.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$isUserInvalidated(param) {\n    var code = param.code;\n    return code === \"auth/user-disabled\" /* AuthErrorCode.USER_DISABLED */  || code === \"auth/user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */ ;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ var $07e48e70fcf53a6e$var$ProactiveRefresh = /*#__PURE__*/ function() {\n    \"use strict\";\n    function ProactiveRefresh(user) {\n        (0, $juqrk._)(this, ProactiveRefresh);\n        this.user = user;\n        this.isRunning = false;\n        // Node timers and browser timers return fundamentally different types.\n        // We don't actually care what the value is but TS won't accept unknown and\n        // we can't cast properly in both environments.\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.timerId = null;\n        this.errorBackoff = 30000 /* Duration.RETRY_BACKOFF_MIN */ ;\n    }\n    (0, $bNI6E._)(ProactiveRefresh, [\n        {\n            key: \"_start\",\n            value: function _start() {\n                if (this.isRunning) return;\n                this.isRunning = true;\n                this.schedule();\n            }\n        },\n        {\n            key: \"_stop\",\n            value: function _stop() {\n                if (!this.isRunning) return;\n                this.isRunning = false;\n                if (this.timerId !== null) clearTimeout(this.timerId);\n            }\n        },\n        {\n            key: \"getInterval\",\n            value: function getInterval(wasError) {\n                var _a;\n                if (wasError) {\n                    var interval = this.errorBackoff;\n                    this.errorBackoff = Math.min(this.errorBackoff * 2, 960000 /* Duration.RETRY_BACKOFF_MAX */ );\n                    return interval;\n                } else {\n                    // Reset the error backoff\n                    this.errorBackoff = 30000 /* Duration.RETRY_BACKOFF_MIN */ ;\n                    var expTime = (_a = this.user.stsTokenManager.expirationTime) !== null && _a !== void 0 ? _a : 0;\n                    var interval1 = expTime - Date.now() - 300000 /* Duration.OFFSET */ ;\n                    return Math.max(0, interval1);\n                }\n            }\n        },\n        {\n            key: \"schedule\",\n            value: function schedule() {\n                var wasError = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;\n                if (!this.isRunning) // Just in case...\n                return;\n                var interval = this.getInterval(wasError);\n                var _this = this;\n                this.timerId = setTimeout(/*#__PURE__*/ (0, $i7mVp._)(function() {\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                return [\n                                    4,\n                                    _this.iteration()\n                                ];\n                            case 1:\n                                _state.sent();\n                                return [\n                                    2\n                                ];\n                        }\n                    });\n                }), interval);\n            }\n        },\n        {\n            key: \"iteration\",\n            value: function iteration() {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var e;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                _state.trys.push([\n                                    0,\n                                    2,\n                                    ,\n                                    3\n                                ]);\n                                return [\n                                    4,\n                                    _this.user.getIdToken(true)\n                                ];\n                            case 1:\n                                _state.sent();\n                                return [\n                                    3,\n                                    3\n                                ];\n                            case 2:\n                                e = _state.sent();\n                                // Only retry on network errors\n                                if ((e === null || e === void 0 ? void 0 : e.code) === \"auth/network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */ ) _this.schedule(/* wasError */ true);\n                                return [\n                                    2\n                                ];\n                            case 3:\n                                _this.schedule();\n                                return [\n                                    2\n                                ];\n                        }\n                    });\n                })();\n            }\n        }\n    ]);\n    return ProactiveRefresh;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ var $07e48e70fcf53a6e$var$UserMetadata = /*#__PURE__*/ function() {\n    \"use strict\";\n    function UserMetadata(createdAt, lastLoginAt) {\n        (0, $juqrk._)(this, UserMetadata);\n        this.createdAt = createdAt;\n        this.lastLoginAt = lastLoginAt;\n        this._initializeTime();\n    }\n    (0, $bNI6E._)(UserMetadata, [\n        {\n            key: \"_initializeTime\",\n            value: function _initializeTime() {\n                this.lastSignInTime = $07e48e70fcf53a6e$var$utcTimestampToDateString(this.lastLoginAt);\n                this.creationTime = $07e48e70fcf53a6e$var$utcTimestampToDateString(this.createdAt);\n            }\n        },\n        {\n            key: \"_copy\",\n            value: function _copy(metadata) {\n                this.createdAt = metadata.createdAt;\n                this.lastLoginAt = metadata.lastLoginAt;\n                this._initializeTime();\n            }\n        },\n        {\n            key: \"toJSON\",\n            value: function toJSON() {\n                return {\n                    createdAt: this.createdAt,\n                    lastLoginAt: this.lastLoginAt\n                };\n            }\n        }\n    ]);\n    return UserMetadata;\n}();\nfunction $07e48e70fcf53a6e$var$_reloadWithoutSaving(user) {\n    return $07e48e70fcf53a6e$var$__reloadWithoutSaving.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$__reloadWithoutSaving() {\n    $07e48e70fcf53a6e$var$__reloadWithoutSaving = /**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ (0, $i7mVp._)(function(user) {\n        var _a, auth, idToken, response, coreAccount, newProviderData, providerData, oldIsAnonymous, newIsAnonymous, isAnonymous, updates;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    auth = user.auth;\n                    return [\n                        4,\n                        user.getIdToken()\n                    ];\n                case 1:\n                    idToken = _state.sent();\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$_logoutIfInvalidated(user, $07e48e70fcf53a6e$var$getAccountInfo(auth, {\n                            idToken: idToken\n                        }))\n                    ];\n                case 2:\n                    response = _state.sent();\n                    $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(response === null || response === void 0 ? void 0 : response.users.length, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n                    coreAccount = response.users[0];\n                    user._notifyReloadListener(coreAccount);\n                    newProviderData = ((_a = coreAccount.providerUserInfo) === null || _a === void 0 ? void 0 : _a.length) ? $07e48e70fcf53a6e$var$extractProviderData(coreAccount.providerUserInfo) : [];\n                    providerData = $07e48e70fcf53a6e$var$mergeProviderData(user.providerData, newProviderData);\n                    oldIsAnonymous = user.isAnonymous;\n                    newIsAnonymous = !(user.email && coreAccount.passwordHash) && !(providerData === null || providerData === void 0 ? void 0 : providerData.length);\n                    isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;\n                    updates = {\n                        uid: coreAccount.localId,\n                        displayName: coreAccount.displayName || null,\n                        photoURL: coreAccount.photoUrl || null,\n                        email: coreAccount.email || null,\n                        emailVerified: coreAccount.emailVerified || false,\n                        phoneNumber: coreAccount.phoneNumber || null,\n                        tenantId: coreAccount.tenantId || null,\n                        providerData: providerData,\n                        metadata: new $07e48e70fcf53a6e$var$UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),\n                        isAnonymous: isAnonymous\n                    };\n                    Object.assign(user, updates);\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$__reloadWithoutSaving.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$export$2f6ca3d3b1f80bf5(user) {\n    return $07e48e70fcf53a6e$var$_reload.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_reload() {\n    $07e48e70fcf53a6e$var$_reload = /**\r\n * Reloads user account data, if signed in.\r\n *\r\n * @param user - The user.\r\n *\r\n * @public\r\n */ (0, $i7mVp._)(function(user) {\n        var userInternal;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    userInternal = (0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(user);\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$_reloadWithoutSaving(userInternal)\n                    ];\n                case 1:\n                    _state.sent();\n                    // Even though the current user hasn't changed, update\n                    // current user will trigger a persistence update w/ the\n                    // new info.\n                    return [\n                        4,\n                        userInternal.auth._persistUserIfCurrent(userInternal)\n                    ];\n                case 2:\n                    _state.sent();\n                    userInternal.auth._notifyListenersIfCurrent(userInternal);\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$_reload.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$mergeProviderData(original, newData) {\n    var deduped = original.filter(function(o) {\n        return !newData.some(function(n) {\n            return n.providerId === o.providerId;\n        });\n    });\n    return (0, $aYXpI._)(deduped).concat((0, $aYXpI._)(newData));\n}\nfunction $07e48e70fcf53a6e$var$extractProviderData(providers) {\n    return providers.map(function(_a) {\n        var providerId = _a.providerId, provider = (0, $4tSb9.__rest)(_a, [\n            \"providerId\"\n        ]);\n        return {\n            providerId: providerId,\n            uid: provider.rawId || \"\",\n            displayName: provider.displayName || null,\n            email: provider.email || null,\n            phoneNumber: provider.phoneNumber || null,\n            photoURL: provider.photoUrl || null\n        };\n    });\n}\nfunction $07e48e70fcf53a6e$var$requestStsToken(auth, refreshToken) {\n    return $07e48e70fcf53a6e$var$_requestStsToken.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_requestStsToken() {\n    $07e48e70fcf53a6e$var$_requestStsToken = /**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ (0, $i7mVp._)(function(auth, refreshToken) {\n        var response;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$_performFetchWithErrorHandling(auth, {}, /*#__PURE__*/ (0, $i7mVp._)(function() {\n                            var body, _auth_config, tokenApiHost, apiKey, url, headers;\n                            return (0, $4tSb9.__generator)(this, function(_state) {\n                                switch(_state.label){\n                                    case 0:\n                                        body = (0, $1d9d263a787f8021$export$ac4103b836844853)({\n                                            \"grant_type\": \"refresh_token\",\n                                            \"refresh_token\": refreshToken\n                                        }).slice(1);\n                                        _auth_config = auth.config, tokenApiHost = _auth_config.tokenApiHost, apiKey = _auth_config.apiKey;\n                                        url = $07e48e70fcf53a6e$var$_getFinalTarget(auth, tokenApiHost, \"/v1/token\" /* Endpoint.TOKEN */ , \"key=\".concat(apiKey));\n                                        return [\n                                            4,\n                                            auth._getAdditionalHeaders()\n                                        ];\n                                    case 1:\n                                        headers = _state.sent();\n                                        headers[\"Content-Type\" /* HttpHeader.CONTENT_TYPE */ ] = \"application/x-www-form-urlencoded\";\n                                        return [\n                                            2,\n                                            $07e48e70fcf53a6e$export$faec65b429be379.fetch()(url, {\n                                                method: \"POST\" /* HttpMethod.POST */ ,\n                                                headers: headers,\n                                                body: body\n                                            })\n                                        ];\n                                }\n                            });\n                        }))\n                    ];\n                case 1:\n                    response = _state.sent();\n                    // The response comes back in snake_case. Convert to camel:\n                    return [\n                        2,\n                        {\n                            accessToken: response.access_token,\n                            expiresIn: response.expires_in,\n                            refreshToken: response.refresh_token\n                        }\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$_requestStsToken.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * We need to mark this class as internal explicitly to exclude it in the public typings, because\r\n * it references AuthInternal which has a circular dependency with UserInternal.\r\n *\r\n * @internal\r\n */ var $07e48e70fcf53a6e$var$StsTokenManager = /*#__PURE__*/ function() {\n    \"use strict\";\n    function StsTokenManager() {\n        (0, $juqrk._)(this, StsTokenManager);\n        this.refreshToken = null;\n        this.accessToken = null;\n        this.expirationTime = null;\n    }\n    (0, $bNI6E._)(StsTokenManager, [\n        {\n            key: \"isExpired\",\n            get: function get() {\n                return !this.expirationTime || Date.now() > this.expirationTime - 30000 /* Buffer.TOKEN_REFRESH */ ;\n            }\n        },\n        {\n            key: \"updateFromServerResponse\",\n            value: function updateFromServerResponse(response) {\n                $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(response.idToken, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n                $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(typeof response.idToken !== \"undefined\", \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n                $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(typeof response.refreshToken !== \"undefined\", \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n                var expiresIn = \"expiresIn\" in response && typeof response.expiresIn !== \"undefined\" ? Number(response.expiresIn) : $07e48e70fcf53a6e$var$_tokenExpiresIn(response.idToken);\n                this.updateTokensAndExpiration(response.idToken, response.refreshToken, expiresIn);\n            }\n        },\n        {\n            key: \"getToken\",\n            value: function getToken(auth) {\n                var forceRefresh = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(!_this.accessToken || _this.refreshToken, auth, \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */ );\n                                if (!forceRefresh && _this.accessToken && !_this.isExpired) return [\n                                    2,\n                                    _this.accessToken\n                                ];\n                                if (!_this.refreshToken) return [\n                                    3,\n                                    2\n                                ];\n                                return [\n                                    4,\n                                    _this.refresh(auth, _this.refreshToken)\n                                ];\n                            case 1:\n                                _state.sent();\n                                return [\n                                    2,\n                                    _this.accessToken\n                                ];\n                            case 2:\n                                return [\n                                    2,\n                                    null\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"clearRefreshToken\",\n            value: function clearRefreshToken() {\n                this.refreshToken = null;\n            }\n        },\n        {\n            key: \"refresh\",\n            value: function refresh(auth, oldToken) {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var _ref, accessToken, refreshToken, expiresIn;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                return [\n                                    4,\n                                    $07e48e70fcf53a6e$var$requestStsToken(auth, oldToken)\n                                ];\n                            case 1:\n                                _ref = _state.sent(), accessToken = _ref.accessToken, refreshToken = _ref.refreshToken, expiresIn = _ref.expiresIn;\n                                _this.updateTokensAndExpiration(accessToken, refreshToken, Number(expiresIn));\n                                return [\n                                    2\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"updateTokensAndExpiration\",\n            value: function updateTokensAndExpiration(accessToken, refreshToken, expiresInSec) {\n                this.refreshToken = refreshToken || null;\n                this.accessToken = accessToken || null;\n                this.expirationTime = Date.now() + expiresInSec * 1000;\n            }\n        },\n        {\n            key: \"toJSON\",\n            value: function toJSON() {\n                return {\n                    refreshToken: this.refreshToken,\n                    accessToken: this.accessToken,\n                    expirationTime: this.expirationTime\n                };\n            }\n        },\n        {\n            key: \"_assign\",\n            value: function _assign(stsTokenManager) {\n                this.accessToken = stsTokenManager.accessToken;\n                this.refreshToken = stsTokenManager.refreshToken;\n                this.expirationTime = stsTokenManager.expirationTime;\n            }\n        },\n        {\n            key: \"_clone\",\n            value: function _clone() {\n                return Object.assign(new StsTokenManager(), this.toJSON());\n            }\n        },\n        {\n            key: \"_performRefresh\",\n            value: function _performRefresh() {\n                return $07e48e70fcf53a6e$var$debugFail(\"not implemented\");\n            }\n        }\n    ], [\n        {\n            key: \"fromJSON\",\n            value: function fromJSON(appName, object) {\n                var refreshToken = object.refreshToken, accessToken = object.accessToken, expirationTime = object.expirationTime;\n                var manager = new StsTokenManager();\n                if (refreshToken) {\n                    $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(typeof refreshToken === \"string\", \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ , {\n                        appName: appName\n                    });\n                    manager.refreshToken = refreshToken;\n                }\n                if (accessToken) {\n                    $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(typeof accessToken === \"string\", \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ , {\n                        appName: appName\n                    });\n                    manager.accessToken = accessToken;\n                }\n                if (expirationTime) {\n                    $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(typeof expirationTime === \"number\", \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ , {\n                        appName: appName\n                    });\n                    manager.expirationTime = expirationTime;\n                }\n                return manager;\n            }\n        }\n    ]);\n    return StsTokenManager;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ function $07e48e70fcf53a6e$var$assertStringOrUndefined(assertion, appName) {\n    $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(typeof assertion === \"string\" || typeof assertion === \"undefined\", \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ , {\n        appName: appName\n    });\n}\nvar $07e48e70fcf53a6e$export$b9a6b53f9be3734 = /*#__PURE__*/ function() {\n    \"use strict\";\n    function UserImpl(_a) {\n        (0, $juqrk._)(this, UserImpl);\n        var uid = _a.uid, auth = _a.auth, stsTokenManager = _a.stsTokenManager, opt = (0, $4tSb9.__rest)(_a, [\n            \"uid\",\n            \"auth\",\n            \"stsTokenManager\"\n        ]);\n        // For the user object, provider is always Firebase.\n        this.providerId = \"firebase\" /* ProviderId.FIREBASE */ ;\n        this.proactiveRefresh = new $07e48e70fcf53a6e$var$ProactiveRefresh(this);\n        this.reloadUserInfo = null;\n        this.reloadListener = null;\n        this.uid = uid;\n        this.auth = auth;\n        this.stsTokenManager = stsTokenManager;\n        this.accessToken = stsTokenManager.accessToken;\n        this.displayName = opt.displayName || null;\n        this.email = opt.email || null;\n        this.emailVerified = opt.emailVerified || false;\n        this.phoneNumber = opt.phoneNumber || null;\n        this.photoURL = opt.photoURL || null;\n        this.isAnonymous = opt.isAnonymous || false;\n        this.tenantId = opt.tenantId || null;\n        this.providerData = opt.providerData ? (0, $aYXpI._)(opt.providerData) : [];\n        this.metadata = new $07e48e70fcf53a6e$var$UserMetadata(opt.createdAt || undefined, opt.lastLoginAt || undefined);\n    }\n    (0, $bNI6E._)(UserImpl, [\n        {\n            key: \"getIdToken\",\n            value: function getIdToken(forceRefresh) {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var accessToken;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                return [\n                                    4,\n                                    $07e48e70fcf53a6e$var$_logoutIfInvalidated(_this, _this.stsTokenManager.getToken(_this.auth, forceRefresh))\n                                ];\n                            case 1:\n                                accessToken = _state.sent();\n                                $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(accessToken, _this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n                                if (!(_this.accessToken !== accessToken)) return [\n                                    3,\n                                    3\n                                ];\n                                _this.accessToken = accessToken;\n                                return [\n                                    4,\n                                    _this.auth._persistUserIfCurrent(_this)\n                                ];\n                            case 2:\n                                _state.sent();\n                                _this.auth._notifyListenersIfCurrent(_this);\n                                _state.label = 3;\n                            case 3:\n                                return [\n                                    2,\n                                    accessToken\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"getIdTokenResult\",\n            value: function getIdTokenResult1(forceRefresh) {\n                return $07e48e70fcf53a6e$export$1a82df3d29112e01(this, forceRefresh);\n            }\n        },\n        {\n            key: \"reload\",\n            value: function reload1() {\n                return $07e48e70fcf53a6e$export$2f6ca3d3b1f80bf5(this);\n            }\n        },\n        {\n            key: \"_assign\",\n            value: function _assign(user) {\n                if (this === user) return;\n                $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(this.uid === user.uid, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n                this.displayName = user.displayName;\n                this.photoURL = user.photoURL;\n                this.email = user.email;\n                this.emailVerified = user.emailVerified;\n                this.phoneNumber = user.phoneNumber;\n                this.isAnonymous = user.isAnonymous;\n                this.tenantId = user.tenantId;\n                this.providerData = user.providerData.map(function(userInfo) {\n                    return Object.assign({}, userInfo);\n                });\n                this.metadata._copy(user.metadata);\n                this.stsTokenManager._assign(user.stsTokenManager);\n            }\n        },\n        {\n            key: \"_clone\",\n            value: function _clone(auth) {\n                var newUser = new UserImpl(Object.assign(Object.assign({}, this), {\n                    auth: auth,\n                    stsTokenManager: this.stsTokenManager._clone()\n                }));\n                newUser.metadata._copy(this.metadata);\n                return newUser;\n            }\n        },\n        {\n            key: \"_onReload\",\n            value: function _onReload(callback) {\n                // There should only ever be one listener, and that is a single instance of MultiFactorUser\n                $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(!this.reloadListener, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n                this.reloadListener = callback;\n                if (this.reloadUserInfo) {\n                    this._notifyReloadListener(this.reloadUserInfo);\n                    this.reloadUserInfo = null;\n                }\n            }\n        },\n        {\n            key: \"_notifyReloadListener\",\n            value: function _notifyReloadListener(userInfo) {\n                if (this.reloadListener) this.reloadListener(userInfo);\n                else // If no listener is subscribed yet, save the result so it's available when they do subscribe\n                this.reloadUserInfo = userInfo;\n            }\n        },\n        {\n            key: \"_startProactiveRefresh\",\n            value: function _startProactiveRefresh() {\n                this.proactiveRefresh._start();\n            }\n        },\n        {\n            key: \"_stopProactiveRefresh\",\n            value: function _stopProactiveRefresh() {\n                this.proactiveRefresh._stop();\n            }\n        },\n        {\n            key: \"_updateTokensIfNecessary\",\n            value: function _updateTokensIfNecessary(response) {\n                var reload = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var tokensRefreshed;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                tokensRefreshed = false;\n                                if (response.idToken && response.idToken !== _this.stsTokenManager.accessToken) {\n                                    _this.stsTokenManager.updateFromServerResponse(response);\n                                    tokensRefreshed = true;\n                                }\n                                if (!reload) return [\n                                    3,\n                                    2\n                                ];\n                                return [\n                                    4,\n                                    $07e48e70fcf53a6e$var$_reloadWithoutSaving(_this)\n                                ];\n                            case 1:\n                                _state.sent();\n                                _state.label = 2;\n                            case 2:\n                                return [\n                                    4,\n                                    _this.auth._persistUserIfCurrent(_this)\n                                ];\n                            case 3:\n                                _state.sent();\n                                if (tokensRefreshed) _this.auth._notifyListenersIfCurrent(_this);\n                                return [\n                                    2\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"delete\",\n            value: function _delete() {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var idToken;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                return [\n                                    4,\n                                    _this.getIdToken()\n                                ];\n                            case 1:\n                                idToken = _state.sent();\n                                return [\n                                    4,\n                                    $07e48e70fcf53a6e$var$_logoutIfInvalidated(_this, $07e48e70fcf53a6e$var$deleteAccount(_this.auth, {\n                                        idToken: idToken\n                                    }))\n                                ];\n                            case 2:\n                                _state.sent();\n                                _this.stsTokenManager.clearRefreshToken();\n                                // TODO: Determine if cancellable-promises are necessary to use in this class so that delete()\n                                //       cancels pending actions...\n                                return [\n                                    2,\n                                    _this.auth.signOut()\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"toJSON\",\n            value: function toJSON() {\n                return Object.assign(Object.assign({\n                    uid: this.uid,\n                    email: this.email || undefined,\n                    emailVerified: this.emailVerified,\n                    displayName: this.displayName || undefined,\n                    isAnonymous: this.isAnonymous,\n                    photoURL: this.photoURL || undefined,\n                    phoneNumber: this.phoneNumber || undefined,\n                    tenantId: this.tenantId || undefined,\n                    providerData: this.providerData.map(function(userInfo) {\n                        return Object.assign({}, userInfo);\n                    }),\n                    stsTokenManager: this.stsTokenManager.toJSON(),\n                    // Redirect event ID must be maintained in case there is a pending\n                    // redirect event.\n                    _redirectEventId: this._redirectEventId\n                }, this.metadata.toJSON()), {\n                    // Required for compatibility with the legacy SDK (go/firebase-auth-sdk-persistence-parsing):\n                    apiKey: this.auth.config.apiKey,\n                    appName: this.auth.name\n                });\n            }\n        },\n        {\n            key: \"refreshToken\",\n            get: function get() {\n                return this.stsTokenManager.refreshToken || \"\";\n            }\n        }\n    ], [\n        {\n            key: \"_fromJSON\",\n            value: function _fromJSON(auth, object) {\n                var _a, _b, _c, _d, _e, _f, _g, _h;\n                var displayName = (_a = object.displayName) !== null && _a !== void 0 ? _a : undefined;\n                var email = (_b = object.email) !== null && _b !== void 0 ? _b : undefined;\n                var phoneNumber = (_c = object.phoneNumber) !== null && _c !== void 0 ? _c : undefined;\n                var photoURL = (_d = object.photoURL) !== null && _d !== void 0 ? _d : undefined;\n                var tenantId = (_e = object.tenantId) !== null && _e !== void 0 ? _e : undefined;\n                var _redirectEventId = (_f = object._redirectEventId) !== null && _f !== void 0 ? _f : undefined;\n                var createdAt = (_g = object.createdAt) !== null && _g !== void 0 ? _g : undefined;\n                var lastLoginAt = (_h = object.lastLoginAt) !== null && _h !== void 0 ? _h : undefined;\n                var uid = object.uid, emailVerified = object.emailVerified, isAnonymous = object.isAnonymous, providerData = object.providerData, plainObjectTokenManager = object.stsTokenManager;\n                $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(uid && plainObjectTokenManager, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n                var stsTokenManager = $07e48e70fcf53a6e$var$StsTokenManager.fromJSON(this.name, plainObjectTokenManager);\n                $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(typeof uid === \"string\", auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n                $07e48e70fcf53a6e$var$assertStringOrUndefined(displayName, auth.name);\n                $07e48e70fcf53a6e$var$assertStringOrUndefined(email, auth.name);\n                $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(typeof emailVerified === \"boolean\", auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n                $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(typeof isAnonymous === \"boolean\", auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n                $07e48e70fcf53a6e$var$assertStringOrUndefined(phoneNumber, auth.name);\n                $07e48e70fcf53a6e$var$assertStringOrUndefined(photoURL, auth.name);\n                $07e48e70fcf53a6e$var$assertStringOrUndefined(tenantId, auth.name);\n                $07e48e70fcf53a6e$var$assertStringOrUndefined(_redirectEventId, auth.name);\n                $07e48e70fcf53a6e$var$assertStringOrUndefined(createdAt, auth.name);\n                $07e48e70fcf53a6e$var$assertStringOrUndefined(lastLoginAt, auth.name);\n                var user = new UserImpl({\n                    uid: uid,\n                    auth: auth,\n                    email: email,\n                    emailVerified: emailVerified,\n                    displayName: displayName,\n                    isAnonymous: isAnonymous,\n                    photoURL: photoURL,\n                    phoneNumber: phoneNumber,\n                    tenantId: tenantId,\n                    stsTokenManager: stsTokenManager,\n                    createdAt: createdAt,\n                    lastLoginAt: lastLoginAt\n                });\n                if (providerData && Array.isArray(providerData)) user.providerData = providerData.map(function(userInfo) {\n                    return Object.assign({}, userInfo);\n                });\n                if (_redirectEventId) user._redirectEventId = _redirectEventId;\n                return user;\n            }\n        },\n        {\n            key: \"_fromIdTokenResponse\",\n            value: /**\r\n     * Initialize a User from an idToken server response\r\n     * @param auth\r\n     * @param idTokenResponse\r\n     */ function _fromIdTokenResponse(auth, idTokenResponse) {\n                var isAnonymous = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n                return (0, $i7mVp._)(function() {\n                    var stsTokenManager, user;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                stsTokenManager = new $07e48e70fcf53a6e$var$StsTokenManager();\n                                stsTokenManager.updateFromServerResponse(idTokenResponse);\n                                user = new UserImpl({\n                                    uid: idTokenResponse.localId,\n                                    auth: auth,\n                                    stsTokenManager: stsTokenManager,\n                                    isAnonymous: isAnonymous\n                                });\n                                // Updates the user info and data and resolves with a user instance.\n                                return [\n                                    4,\n                                    $07e48e70fcf53a6e$var$_reloadWithoutSaving(user)\n                                ];\n                            case 1:\n                                _state.sent();\n                                return [\n                                    2,\n                                    user\n                                ];\n                        }\n                    });\n                })();\n            }\n        }\n    ]);\n    return UserImpl;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ var $07e48e70fcf53a6e$var$instanceCache = new Map();\nfunction $07e48e70fcf53a6e$export$890c4ad488842ce7(cls) {\n    $07e48e70fcf53a6e$export$6554612db691658e(cls instanceof Function, \"Expected a class definition\");\n    var instance = $07e48e70fcf53a6e$var$instanceCache.get(cls);\n    if (instance) {\n        $07e48e70fcf53a6e$export$6554612db691658e(instance instanceof cls, \"Instance stored in cache mismatched with class\");\n        return instance;\n    }\n    instance = new cls();\n    $07e48e70fcf53a6e$var$instanceCache.set(cls, instance);\n    return instance;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ var $07e48e70fcf53a6e$var$InMemoryPersistence = /*#__PURE__*/ function() {\n    \"use strict\";\n    function InMemoryPersistence() {\n        (0, $juqrk._)(this, InMemoryPersistence);\n        this.type = \"NONE\" /* PersistenceType.NONE */ ;\n        this.storage = {};\n    }\n    (0, $bNI6E._)(InMemoryPersistence, [\n        {\n            key: \"_isAvailable\",\n            value: function _isAvailable() {\n                return (0, $i7mVp._)(function() {\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        return [\n                            2,\n                            true\n                        ];\n                    });\n                })();\n            }\n        },\n        {\n            key: \"_set\",\n            value: function _set(key, value) {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        _this.storage[key] = value;\n                        return [\n                            2\n                        ];\n                    });\n                })();\n            }\n        },\n        {\n            key: \"_get\",\n            value: function _get(key) {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var value;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        value = _this.storage[key];\n                        return [\n                            2,\n                            value === undefined ? null : value\n                        ];\n                    });\n                })();\n            }\n        },\n        {\n            key: \"_remove\",\n            value: function _remove(key) {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        delete _this.storage[key];\n                        return [\n                            2\n                        ];\n                    });\n                })();\n            }\n        },\n        {\n            key: \"_addListener\",\n            value: function _addListener(_key, _listener) {\n                // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\n                return;\n            }\n        },\n        {\n            key: \"_removeListener\",\n            value: function _removeListener(_key, _listener) {\n                // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\n                return;\n            }\n        }\n    ]);\n    return InMemoryPersistence;\n}();\n$07e48e70fcf53a6e$var$InMemoryPersistence.type = \"NONE\";\n/**\r\n * An implementation of {@link Persistence} of type 'NONE'.\r\n *\r\n * @public\r\n */ var $07e48e70fcf53a6e$export$a07804094c3ecf2d = $07e48e70fcf53a6e$var$InMemoryPersistence;\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ function $07e48e70fcf53a6e$export$24baa2b76016ce0e(key, apiKey, appName) {\n    return \"firebase:\".concat(key, \":\").concat(apiKey, \":\").concat(appName);\n}\nvar $07e48e70fcf53a6e$var$PersistenceUserManager = /*#__PURE__*/ function() {\n    \"use strict\";\n    function PersistenceUserManager(persistence, auth, userKey) {\n        (0, $juqrk._)(this, PersistenceUserManager);\n        this.persistence = persistence;\n        this.auth = auth;\n        this.userKey = userKey;\n        var _this_auth = this.auth, config = _this_auth.config, name = _this_auth.name;\n        this.fullUserKey = $07e48e70fcf53a6e$export$24baa2b76016ce0e(this.userKey, config.apiKey, name);\n        this.fullPersistenceKey = $07e48e70fcf53a6e$export$24baa2b76016ce0e(\"persistence\" /* KeyName.PERSISTENCE_USER */ , config.apiKey, name);\n        this.boundEventHandler = auth._onStorageEvent.bind(auth);\n        this.persistence._addListener(this.fullUserKey, this.boundEventHandler);\n    }\n    (0, $bNI6E._)(PersistenceUserManager, [\n        {\n            key: \"setCurrentUser\",\n            value: function setCurrentUser(user) {\n                return this.persistence._set(this.fullUserKey, user.toJSON());\n            }\n        },\n        {\n            key: \"getCurrentUser\",\n            value: function getCurrentUser() {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var blob;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                return [\n                                    4,\n                                    _this.persistence._get(_this.fullUserKey)\n                                ];\n                            case 1:\n                                blob = _state.sent();\n                                return [\n                                    2,\n                                    blob ? $07e48e70fcf53a6e$export$b9a6b53f9be3734._fromJSON(_this.auth, blob) : null\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"removeCurrentUser\",\n            value: function removeCurrentUser() {\n                return this.persistence._remove(this.fullUserKey);\n            }\n        },\n        {\n            key: \"savePersistenceForRedirect\",\n            value: function savePersistenceForRedirect() {\n                return this.persistence._set(this.fullPersistenceKey, this.persistence.type);\n            }\n        },\n        {\n            key: \"setPersistence\",\n            value: function setPersistence(newPersistence) {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var currentUser;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                if (_this.persistence === newPersistence) return [\n                                    2\n                                ];\n                                return [\n                                    4,\n                                    _this.getCurrentUser()\n                                ];\n                            case 1:\n                                currentUser = _state.sent();\n                                return [\n                                    4,\n                                    _this.removeCurrentUser()\n                                ];\n                            case 2:\n                                _state.sent();\n                                _this.persistence = newPersistence;\n                                if (currentUser) return [\n                                    2,\n                                    _this.setCurrentUser(currentUser)\n                                ];\n                                return [\n                                    2\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"delete\",\n            value: function _delete() {\n                this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);\n            }\n        }\n    ], [\n        {\n            key: \"create\",\n            value: function create(auth, persistenceHierarchy) {\n                var userKey = arguments.length > 2 && arguments[2] !== void 0 /* KeyName.AUTH_USER */  ? arguments[2] : \"authUser\";\n                return (0, $i7mVp._)(function() {\n                    var availablePersistences, selectedPersistence, key, userToMigrate, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, persistence, blob, user, _a, err, migrationHierarchy;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                if (!persistenceHierarchy.length) return [\n                                    2,\n                                    new PersistenceUserManager($07e48e70fcf53a6e$export$890c4ad488842ce7($07e48e70fcf53a6e$export$a07804094c3ecf2d), auth, userKey)\n                                ];\n                                return [\n                                    4,\n                                    Promise.all(persistenceHierarchy.map(function() {\n                                        var _ref = (0, $i7mVp._)(function(persistence) {\n                                            return (0, $4tSb9.__generator)(this, function(_state) {\n                                                switch(_state.label){\n                                                    case 0:\n                                                        return [\n                                                            4,\n                                                            persistence._isAvailable()\n                                                        ];\n                                                    case 1:\n                                                        if (_state.sent()) return [\n                                                            2,\n                                                            persistence\n                                                        ];\n                                                        return [\n                                                            2,\n                                                            undefined\n                                                        ];\n                                                }\n                                            });\n                                        });\n                                        return function(persistence) {\n                                            return _ref.apply(this, arguments);\n                                        };\n                                    }()))\n                                ];\n                            case 1:\n                                availablePersistences = _state.sent().filter(function(persistence) {\n                                    return persistence;\n                                });\n                                selectedPersistence = availablePersistences[0] || $07e48e70fcf53a6e$export$890c4ad488842ce7($07e48e70fcf53a6e$export$a07804094c3ecf2d);\n                                key = $07e48e70fcf53a6e$export$24baa2b76016ce0e(userKey, auth.config.apiKey, auth.name);\n                                userToMigrate = null;\n                                _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                                _state.label = 2;\n                            case 2:\n                                _state.trys.push([\n                                    2,\n                                    9,\n                                    10,\n                                    11\n                                ]);\n                                _iterator = persistenceHierarchy[Symbol.iterator]();\n                                _state.label = 3;\n                            case 3:\n                                if (!!(_iteratorNormalCompletion = (_step = _iterator.next()).done)) return [\n                                    3,\n                                    8\n                                ];\n                                persistence = _step.value;\n                                _state.label = 4;\n                            case 4:\n                                _state.trys.push([\n                                    4,\n                                    6,\n                                    ,\n                                    7\n                                ]);\n                                return [\n                                    4,\n                                    persistence._get(key)\n                                ];\n                            case 5:\n                                blob = _state.sent();\n                                if (blob) {\n                                    user = $07e48e70fcf53a6e$export$b9a6b53f9be3734._fromJSON(auth, blob); // throws for unparsable blob (wrong format)\n                                    if (persistence !== selectedPersistence) userToMigrate = user;\n                                    selectedPersistence = persistence;\n                                    return [\n                                        3,\n                                        8\n                                    ];\n                                }\n                                return [\n                                    3,\n                                    7\n                                ];\n                            case 6:\n                                _a = _state.sent();\n                                return [\n                                    3,\n                                    7\n                                ];\n                            case 7:\n                                _iteratorNormalCompletion = true;\n                                return [\n                                    3,\n                                    3\n                                ];\n                            case 8:\n                                return [\n                                    3,\n                                    11\n                                ];\n                            case 9:\n                                err = _state.sent();\n                                _didIteratorError = true;\n                                _iteratorError = err;\n                                return [\n                                    3,\n                                    11\n                                ];\n                            case 10:\n                                try {\n                                    if (!_iteratorNormalCompletion && _iterator.return != null) {\n                                        _iterator.return();\n                                    }\n                                } finally{\n                                    if (_didIteratorError) {\n                                        throw _iteratorError;\n                                    }\n                                }\n                                return [\n                                    7\n                                ];\n                            case 11:\n                                migrationHierarchy = availablePersistences.filter(function(p) {\n                                    return p._shouldAllowMigration;\n                                });\n                                // If the persistence does _not_ allow migration, just finish off here\n                                if (!selectedPersistence._shouldAllowMigration || !migrationHierarchy.length) return [\n                                    2,\n                                    new PersistenceUserManager(selectedPersistence, auth, userKey)\n                                ];\n                                selectedPersistence = migrationHierarchy[0];\n                                if (!userToMigrate) return [\n                                    3,\n                                    13\n                                ];\n                                // This normally shouldn't throw since chosenPersistence.isAvailable() is true, but if it does\n                                // we'll just let it bubble to surface the error.\n                                return [\n                                    4,\n                                    selectedPersistence._set(key, userToMigrate.toJSON())\n                                ];\n                            case 12:\n                                _state.sent();\n                                _state.label = 13;\n                            case 13:\n                                // Attempt to clear the key in other persistences but ignore errors. This helps prevent issues\n                                // such as users getting stuck with a previous account after signing out and refreshing the tab.\n                                return [\n                                    4,\n                                    Promise.all(persistenceHierarchy.map(function() {\n                                        var _ref = (0, $i7mVp._)(function(persistence) {\n                                            var _a;\n                                            return (0, $4tSb9.__generator)(this, function(_state) {\n                                                switch(_state.label){\n                                                    case 0:\n                                                        if (!(persistence !== selectedPersistence)) return [\n                                                            3,\n                                                            4\n                                                        ];\n                                                        _state.label = 1;\n                                                    case 1:\n                                                        _state.trys.push([\n                                                            1,\n                                                            3,\n                                                            ,\n                                                            4\n                                                        ]);\n                                                        return [\n                                                            4,\n                                                            persistence._remove(key)\n                                                        ];\n                                                    case 2:\n                                                        _state.sent();\n                                                        return [\n                                                            3,\n                                                            4\n                                                        ];\n                                                    case 3:\n                                                        _a = _state.sent();\n                                                        return [\n                                                            3,\n                                                            4\n                                                        ];\n                                                    case 4:\n                                                        return [\n                                                            2\n                                                        ];\n                                                }\n                                            });\n                                        });\n                                        return function(persistence) {\n                                            return _ref.apply(this, arguments);\n                                        };\n                                    }()))\n                                ];\n                            case 14:\n                                _state.sent();\n                                return [\n                                    2,\n                                    new PersistenceUserManager(selectedPersistence, auth, userKey)\n                                ];\n                        }\n                    });\n                })();\n            }\n        }\n    ]);\n    return PersistenceUserManager;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Determine the browser for the purposes of reporting usage to the API\r\n */ function $07e48e70fcf53a6e$var$_getBrowserName(userAgent) {\n    var ua = userAgent.toLowerCase();\n    if (ua.includes(\"opera/\") || ua.includes(\"opr/\") || ua.includes(\"opios/\")) return \"Opera\" /* BrowserName.OPERA */ ;\n    else if ($07e48e70fcf53a6e$var$_isIEMobile(ua)) // Windows phone IEMobile browser.\n    return \"IEMobile\" /* BrowserName.IEMOBILE */ ;\n    else if (ua.includes(\"msie\") || ua.includes(\"trident/\")) return \"IE\" /* BrowserName.IE */ ;\n    else if (ua.includes(\"edge/\")) return \"Edge\" /* BrowserName.EDGE */ ;\n    else if ($07e48e70fcf53a6e$var$_isFirefox(ua)) return \"Firefox\" /* BrowserName.FIREFOX */ ;\n    else if (ua.includes(\"silk/\")) return \"Silk\" /* BrowserName.SILK */ ;\n    else if ($07e48e70fcf53a6e$var$_isBlackBerry(ua)) // Blackberry browser.\n    return \"Blackberry\" /* BrowserName.BLACKBERRY */ ;\n    else if ($07e48e70fcf53a6e$var$_isWebOS(ua)) // WebOS default browser.\n    return \"Webos\" /* BrowserName.WEBOS */ ;\n    else if ($07e48e70fcf53a6e$var$_isSafari(ua)) return \"Safari\" /* BrowserName.SAFARI */ ;\n    else if ((ua.includes(\"chrome/\") || $07e48e70fcf53a6e$var$_isChromeIOS(ua)) && !ua.includes(\"edge/\")) return \"Chrome\" /* BrowserName.CHROME */ ;\n    else if ($07e48e70fcf53a6e$export$1fbe638ecf81657e(ua)) // Android stock browser.\n    return \"Android\" /* BrowserName.ANDROID */ ;\n    else {\n        // Most modern browsers have name/version at end of user agent string.\n        var re = /([a-zA-Z\\d\\.]+)\\/[a-zA-Z\\d\\.]*$/;\n        var matches = userAgent.match(re);\n        if ((matches === null || matches === void 0 ? void 0 : matches.length) === 2) return matches[1];\n    }\n    return \"Other\" /* BrowserName.OTHER */ ;\n}\nfunction $07e48e70fcf53a6e$var$_isFirefox() {\n    var ua = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : (0, $1d9d263a787f8021$export$c36915b22ce77c19)();\n    return /firefox\\//i.test(ua);\n}\nfunction $07e48e70fcf53a6e$var$_isSafari() {\n    var userAgent = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : (0, $1d9d263a787f8021$export$c36915b22ce77c19)();\n    var ua = userAgent.toLowerCase();\n    return ua.includes(\"safari/\") && !ua.includes(\"chrome/\") && !ua.includes(\"crios/\") && !ua.includes(\"android\");\n}\nfunction $07e48e70fcf53a6e$var$_isChromeIOS() {\n    var ua = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : (0, $1d9d263a787f8021$export$c36915b22ce77c19)();\n    return /crios\\//i.test(ua);\n}\nfunction $07e48e70fcf53a6e$var$_isIEMobile() {\n    var ua = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : (0, $1d9d263a787f8021$export$c36915b22ce77c19)();\n    return /iemobile/i.test(ua);\n}\nfunction $07e48e70fcf53a6e$export$1fbe638ecf81657e() {\n    var ua = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : (0, $1d9d263a787f8021$export$c36915b22ce77c19)();\n    return /android/i.test(ua);\n}\nfunction $07e48e70fcf53a6e$var$_isBlackBerry() {\n    var ua = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : (0, $1d9d263a787f8021$export$c36915b22ce77c19)();\n    return /blackberry/i.test(ua);\n}\nfunction $07e48e70fcf53a6e$var$_isWebOS() {\n    var ua = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : (0, $1d9d263a787f8021$export$c36915b22ce77c19)();\n    return /webos/i.test(ua);\n}\nfunction $07e48e70fcf53a6e$export$493d36ec626b6698() {\n    var ua = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : (0, $1d9d263a787f8021$export$c36915b22ce77c19)();\n    return /iphone|ipad|ipod/i.test(ua) || /macintosh/i.test(ua) && /mobile/i.test(ua);\n}\nfunction $07e48e70fcf53a6e$export$28f7fcd39efa255() {\n    var ua = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : (0, $1d9d263a787f8021$export$c36915b22ce77c19)();\n    return /(iPad|iPhone|iPod).*OS 7_\\d/i.test(ua) || /(iPad|iPhone|iPod).*OS 8_\\d/i.test(ua);\n}\nfunction $07e48e70fcf53a6e$var$_isIOSStandalone() {\n    var ua = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : (0, $1d9d263a787f8021$export$c36915b22ce77c19)();\n    var _a;\n    return $07e48e70fcf53a6e$export$493d36ec626b6698(ua) && !!((_a = window.navigator) === null || _a === void 0 ? void 0 : _a.standalone);\n}\nfunction $07e48e70fcf53a6e$var$_isIE10() {\n    return (0, $1d9d263a787f8021$export$7e7b1a9668aaed8)() && document.documentMode === 10;\n}\nfunction $07e48e70fcf53a6e$var$_isMobileBrowser() {\n    var ua = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : (0, $1d9d263a787f8021$export$c36915b22ce77c19)();\n    // TODO: implement getBrowserName equivalent for OS.\n    return $07e48e70fcf53a6e$export$493d36ec626b6698(ua) || $07e48e70fcf53a6e$export$1fbe638ecf81657e(ua) || $07e48e70fcf53a6e$var$_isWebOS(ua) || $07e48e70fcf53a6e$var$_isBlackBerry(ua) || /windows phone/i.test(ua) || $07e48e70fcf53a6e$var$_isIEMobile(ua);\n}\nfunction $07e48e70fcf53a6e$var$_isIframe() {\n    try {\n        // Check that the current window is not the top window.\n        // If so, return true.\n        return !!(window && window !== window.top);\n    } catch (e) {\n        return false;\n    }\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /*\r\n * Determine the SDK version string\r\n */ function $07e48e70fcf53a6e$export$23ebac1979863676(clientPlatform) {\n    var frameworks = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];\n    var reportedPlatform;\n    switch(clientPlatform){\n        case \"Browser\" /* ClientPlatform.BROWSER */ :\n            // In a browser environment, report the browser name.\n            reportedPlatform = $07e48e70fcf53a6e$var$_getBrowserName((0, $1d9d263a787f8021$export$c36915b22ce77c19)());\n            break;\n        case \"Worker\" /* ClientPlatform.WORKER */ :\n            // Technically a worker runs from a browser but we need to differentiate a\n            // worker from a browser.\n            // For example: Chrome-Worker/JsCore/4.9.1/FirebaseCore-web.\n            reportedPlatform = \"\".concat($07e48e70fcf53a6e$var$_getBrowserName((0, $1d9d263a787f8021$export$c36915b22ce77c19)()), \"-\").concat(clientPlatform);\n            break;\n        default:\n            reportedPlatform = clientPlatform;\n    }\n    var reportedFrameworks = frameworks.length ? frameworks.join(\",\") : \"FirebaseCore-web\"; /* default value if no other framework is used */ \n    return \"\".concat(reportedPlatform, \"/\", \"JsCore\" /* ClientImplementation.CORE */ , \"/\").concat((0, $0913f93b5b3c9bac$export$31499a9cd224b78c), \"/\").concat(reportedFrameworks);\n}\nfunction $07e48e70fcf53a6e$var$getRecaptchaParams(auth) {\n    return $07e48e70fcf53a6e$var$_getRecaptchaParams.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_getRecaptchaParams() {\n    $07e48e70fcf53a6e$var$_getRecaptchaParams = /**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ (0, $i7mVp._)(function(auth) {\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$_performApiRequest(auth, \"GET\" /* HttpMethod.GET */ , \"/v1/recaptchaParams\" /* Endpoint.GET_RECAPTCHA_PARAM */ )\n                    ];\n                case 1:\n                    return [\n                        2,\n                        _state.sent().recaptchaSiteKey || \"\"\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$_getRecaptchaParams.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$getRecaptchaConfig(auth, request) {\n    return $07e48e70fcf53a6e$var$_getRecaptchaConfig.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_getRecaptchaConfig() {\n    $07e48e70fcf53a6e$var$_getRecaptchaConfig = (0, $i7mVp._)(function(auth, request) {\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            return [\n                2,\n                $07e48e70fcf53a6e$var$_performApiRequest(auth, \"GET\" /* HttpMethod.GET */ , \"/v2/recaptchaConfig\" /* Endpoint.GET_RECAPTCHA_CONFIG */ , $07e48e70fcf53a6e$var$_addTidIfNecessary(auth, request))\n            ];\n        });\n    });\n    return $07e48e70fcf53a6e$var$_getRecaptchaConfig.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ function $07e48e70fcf53a6e$var$isV2(grecaptcha) {\n    return grecaptcha !== undefined && grecaptcha.getResponse !== undefined;\n}\nfunction $07e48e70fcf53a6e$var$isEnterprise(grecaptcha) {\n    return grecaptcha !== undefined && grecaptcha.enterprise !== undefined;\n}\nvar $07e48e70fcf53a6e$var$RecaptchaConfig = function RecaptchaConfig(response) {\n    \"use strict\";\n    (0, $juqrk._)(this, RecaptchaConfig);\n    /**\r\n         * The reCAPTCHA site key.\r\n         */ this.siteKey = \"\";\n    /**\r\n         * The reCAPTCHA enablement status of the {@link EmailAuthProvider} for the current tenant.\r\n         */ this.emailPasswordEnabled = false;\n    if (response.recaptchaKey === undefined) throw new Error(\"recaptchaKey undefined\");\n    // Example response.recaptchaKey: \"projects/proj123/keys/sitekey123\"\n    this.siteKey = response.recaptchaKey.split(\"/\")[3];\n    this.emailPasswordEnabled = response.recaptchaEnforcementState.some(function(enforcementState) {\n        return enforcementState.provider === \"EMAIL_PASSWORD_PROVIDER\" && enforcementState.enforcementState !== \"OFF\";\n    });\n};\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ function $07e48e70fcf53a6e$var$getScriptParentElement() {\n    var _a, _b;\n    return (_b = (_a = document.getElementsByTagName(\"head\")) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : document;\n}\nfunction $07e48e70fcf53a6e$var$_loadJS(url) {\n    // TODO: consider adding timeout support & cancellation\n    return new Promise(function(resolve, reject) {\n        var el = document.createElement(\"script\");\n        el.setAttribute(\"src\", url);\n        el.onload = resolve;\n        el.onerror = function(e) {\n            var error = $07e48e70fcf53a6e$export$3d12bd131bb975d1(\"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n            error.customData = e;\n            reject(error);\n        };\n        el.type = \"text/javascript\";\n        el.charset = \"UTF-8\";\n        $07e48e70fcf53a6e$var$getScriptParentElement().appendChild(el);\n    });\n}\nfunction $07e48e70fcf53a6e$var$_generateCallbackName(prefix) {\n    return \"__\".concat(prefix).concat(Math.floor(Math.random() * 1000000));\n}\n/* eslint-disable @typescript-eslint/no-require-imports */ var $07e48e70fcf53a6e$var$RECAPTCHA_ENTERPRISE_URL = \"https://www.google.com/recaptcha/enterprise.js?render=\";\nvar $07e48e70fcf53a6e$var$RECAPTCHA_ENTERPRISE_VERIFIER_TYPE = \"recaptcha-enterprise\";\nvar $07e48e70fcf53a6e$var$FAKE_TOKEN = \"NO_RECAPTCHA\";\nvar $07e48e70fcf53a6e$var$RecaptchaEnterpriseVerifier = /*#__PURE__*/ function() {\n    \"use strict\";\n    function RecaptchaEnterpriseVerifier(authExtern) {\n        (0, $juqrk._)(this, RecaptchaEnterpriseVerifier);\n        /**\r\n         * Identifies the type of application verifier (e.g. \"recaptcha-enterprise\").\r\n         */ this.type = $07e48e70fcf53a6e$var$RECAPTCHA_ENTERPRISE_VERIFIER_TYPE;\n        this.auth = $07e48e70fcf53a6e$export$a33b77bbdbb8366c(authExtern);\n    }\n    (0, $bNI6E._)(RecaptchaEnterpriseVerifier, [\n        {\n            key: \"verify\",\n            value: /**\r\n     * Executes the verification process.\r\n     *\r\n     * @returns A Promise for a token that can be used to assert the validity of a request.\r\n     */ function verify() {\n                var action = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"verify\", forceRefresh = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    function retrieveSiteKey(auth) {\n                        return _retrieveSiteKey.apply(this, arguments);\n                    }\n                    function _retrieveSiteKey() {\n                        _retrieveSiteKey = (0, $i7mVp._)(function(auth) {\n                            return (0, $4tSb9.__generator)(this, function(_state) {\n                                if (!forceRefresh) {\n                                    if (auth.tenantId == null && auth._agentRecaptchaConfig != null) return [\n                                        2,\n                                        auth._agentRecaptchaConfig.siteKey\n                                    ];\n                                    if (auth.tenantId != null && auth._tenantRecaptchaConfigs[auth.tenantId] !== undefined) return [\n                                        2,\n                                        auth._tenantRecaptchaConfigs[auth.tenantId].siteKey\n                                    ];\n                                }\n                                return [\n                                    2,\n                                    new Promise(function() {\n                                        var _ref = (0, $i7mVp._)(function(resolve, reject) {\n                                            return (0, $4tSb9.__generator)(this, function(_state) {\n                                                $07e48e70fcf53a6e$var$getRecaptchaConfig(auth, {\n                                                    clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */ ,\n                                                    version: \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */ \n                                                }).then(function(response) {\n                                                    if (response.recaptchaKey === undefined) reject(new Error(\"recaptcha Enterprise site key undefined\"));\n                                                    else {\n                                                        var config = new $07e48e70fcf53a6e$var$RecaptchaConfig(response);\n                                                        if (auth.tenantId == null) auth._agentRecaptchaConfig = config;\n                                                        else auth._tenantRecaptchaConfigs[auth.tenantId] = config;\n                                                        return resolve(config.siteKey);\n                                                    }\n                                                }).catch(function(error) {\n                                                    reject(error);\n                                                });\n                                                return [\n                                                    2\n                                                ];\n                                            });\n                                        });\n                                        return function(resolve, reject) {\n                                            return _ref.apply(this, arguments);\n                                        };\n                                    }())\n                                ];\n                            });\n                        });\n                        return _retrieveSiteKey.apply(this, arguments);\n                    }\n                    function retrieveRecaptchaToken(siteKey, resolve, reject) {\n                        var grecaptcha = window.grecaptcha;\n                        if ($07e48e70fcf53a6e$var$isEnterprise(grecaptcha)) grecaptcha.enterprise.ready(function() {\n                            grecaptcha.enterprise.execute(siteKey, {\n                                action: action\n                            }).then(function(token) {\n                                resolve(token);\n                            }).catch(function() {\n                                resolve($07e48e70fcf53a6e$var$FAKE_TOKEN);\n                            });\n                        });\n                        else reject(Error(\"No reCAPTCHA enterprise script loaded.\"));\n                    }\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        return [\n                            2,\n                            new Promise(function(resolve, reject) {\n                                retrieveSiteKey(_this.auth).then(function(siteKey) {\n                                    if (!forceRefresh && $07e48e70fcf53a6e$var$isEnterprise(window.grecaptcha)) retrieveRecaptchaToken(siteKey, resolve, reject);\n                                    else {\n                                        if (typeof window === \"undefined\") {\n                                            reject(new Error(\"RecaptchaVerifier is only supported in browser\"));\n                                            return;\n                                        }\n                                        $07e48e70fcf53a6e$var$_loadJS($07e48e70fcf53a6e$var$RECAPTCHA_ENTERPRISE_URL + siteKey).then(function() {\n                                            retrieveRecaptchaToken(siteKey, resolve, reject);\n                                        }).catch(function(error) {\n                                            reject(error);\n                                        });\n                                    }\n                                }).catch(function(error) {\n                                    reject(error);\n                                });\n                            })\n                        ];\n                    });\n                })();\n            }\n        }\n    ]);\n    return RecaptchaEnterpriseVerifier;\n}();\nfunction $07e48e70fcf53a6e$var$injectRecaptchaFields(auth, request, action) {\n    return $07e48e70fcf53a6e$var$_injectRecaptchaFields.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_injectRecaptchaFields() {\n    $07e48e70fcf53a6e$var$_injectRecaptchaFields = (0, $i7mVp._)(function(auth, request, action) {\n        var captchaResp, verifier, captchaResponse, error, newRequest;\n        var _arguments = arguments;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    captchaResp = _arguments.length > 3 && _arguments[3] !== void 0 ? _arguments[3] : false;\n                    verifier = new $07e48e70fcf53a6e$var$RecaptchaEnterpriseVerifier(auth);\n                    _state.label = 1;\n                case 1:\n                    _state.trys.push([\n                        1,\n                        3,\n                        ,\n                        5\n                    ]);\n                    return [\n                        4,\n                        verifier.verify(action)\n                    ];\n                case 2:\n                    captchaResponse = _state.sent();\n                    return [\n                        3,\n                        5\n                    ];\n                case 3:\n                    error = _state.sent();\n                    return [\n                        4,\n                        verifier.verify(action, true)\n                    ];\n                case 4:\n                    captchaResponse = _state.sent();\n                    return [\n                        3,\n                        5\n                    ];\n                case 5:\n                    newRequest = Object.assign({}, request);\n                    if (!captchaResp) Object.assign(newRequest, {\n                        captchaResponse: captchaResponse\n                    });\n                    else Object.assign(newRequest, {\n                        \"captchaResp\": captchaResponse\n                    });\n                    Object.assign(newRequest, {\n                        \"clientType\": \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */ \n                    });\n                    Object.assign(newRequest, {\n                        \"recaptchaVersion\": \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */ \n                    });\n                    return [\n                        2,\n                        newRequest\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$_injectRecaptchaFields.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ var $07e48e70fcf53a6e$var$AuthMiddlewareQueue = /*#__PURE__*/ function() {\n    \"use strict\";\n    function AuthMiddlewareQueue(auth) {\n        (0, $juqrk._)(this, AuthMiddlewareQueue);\n        this.auth = auth;\n        this.queue = [];\n    }\n    (0, $bNI6E._)(AuthMiddlewareQueue, [\n        {\n            key: \"pushCallback\",\n            value: function pushCallback(callback, onAbort) {\n                var _this = this;\n                // The callback could be sync or async. Wrap it into a\n                // function that is always async.\n                var wrappedCallback = function(user) {\n                    return new Promise(function(resolve, reject) {\n                        try {\n                            var result = callback(user);\n                            // Either resolve with existing promise or wrap a non-promise\n                            // return value into a promise.\n                            resolve(result);\n                        } catch (e) {\n                            // Sync callback throws.\n                            reject(e);\n                        }\n                    });\n                };\n                // Attach the onAbort if present\n                wrappedCallback.onAbort = onAbort;\n                this.queue.push(wrappedCallback);\n                var index = this.queue.length - 1;\n                return function() {\n                    // Unsubscribe. Replace with no-op. Do not remove from array, or it will disturb\n                    // indexing of other elements.\n                    _this.queue[index] = function() {\n                        return Promise.resolve();\n                    };\n                };\n            }\n        },\n        {\n            key: \"runMiddleware\",\n            value: function runMiddleware(nextUser) {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var onAbortStack, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, beforeStateCallback, err, e, _iteratorNormalCompletion1, _didIteratorError1, _iteratorError1, _iterator1, _step1, onAbort;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                if (_this.auth.currentUser === nextUser) return [\n                                    2\n                                ];\n                                onAbortStack = [];\n                                _state.label = 1;\n                            case 1:\n                                _state.trys.push([\n                                    1,\n                                    10,\n                                    ,\n                                    11\n                                ]);\n                                _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                                _state.label = 2;\n                            case 2:\n                                _state.trys.push([\n                                    2,\n                                    7,\n                                    8,\n                                    9\n                                ]);\n                                _iterator = _this.queue[Symbol.iterator]();\n                                _state.label = 3;\n                            case 3:\n                                if (!!(_iteratorNormalCompletion = (_step = _iterator.next()).done)) return [\n                                    3,\n                                    6\n                                ];\n                                beforeStateCallback = _step.value;\n                                return [\n                                    4,\n                                    beforeStateCallback(nextUser)\n                                ];\n                            case 4:\n                                _state.sent();\n                                // Only push the onAbort if the callback succeeds\n                                if (beforeStateCallback.onAbort) onAbortStack.push(beforeStateCallback.onAbort);\n                                _state.label = 5;\n                            case 5:\n                                _iteratorNormalCompletion = true;\n                                return [\n                                    3,\n                                    3\n                                ];\n                            case 6:\n                                return [\n                                    3,\n                                    9\n                                ];\n                            case 7:\n                                err = _state.sent();\n                                _didIteratorError = true;\n                                _iteratorError = err;\n                                return [\n                                    3,\n                                    9\n                                ];\n                            case 8:\n                                try {\n                                    if (!_iteratorNormalCompletion && _iterator.return != null) {\n                                        _iterator.return();\n                                    }\n                                } finally{\n                                    if (_didIteratorError) {\n                                        throw _iteratorError;\n                                    }\n                                }\n                                return [\n                                    7\n                                ];\n                            case 9:\n                                return [\n                                    3,\n                                    11\n                                ];\n                            case 10:\n                                e = _state.sent();\n                                // Run all onAbort, with separate try/catch to ignore any errors and\n                                // continue\n                                onAbortStack.reverse();\n                                _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n                                try {\n                                    for(_iterator1 = onAbortStack[Symbol.iterator](); !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){\n                                        onAbort = _step1.value;\n                                        try {\n                                            onAbort();\n                                        } catch (_) {\n                                        /* swallow error */ }\n                                    }\n                                } catch (err) {\n                                    _didIteratorError1 = true;\n                                    _iteratorError1 = err;\n                                } finally{\n                                    try {\n                                        if (!_iteratorNormalCompletion1 && _iterator1.return != null) {\n                                            _iterator1.return();\n                                        }\n                                    } finally{\n                                        if (_didIteratorError1) {\n                                            throw _iteratorError1;\n                                        }\n                                    }\n                                }\n                                throw _this.auth._errorFactory.create(\"login-blocked\" /* AuthErrorCode.LOGIN_BLOCKED */ , {\n                                    originalMessage: e === null || e === void 0 ? void 0 : e.message\n                                });\n                            case 11:\n                                return [\n                                    2\n                                ];\n                        }\n                    });\n                })();\n            }\n        }\n    ]);\n    return AuthMiddlewareQueue;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ var $07e48e70fcf53a6e$export$a05254e7c3aeba6e = /*#__PURE__*/ function() {\n    \"use strict\";\n    function AuthImpl(app, heartbeatServiceProvider, appCheckServiceProvider, config) {\n        (0, $juqrk._)(this, AuthImpl);\n        this.app = app;\n        this.heartbeatServiceProvider = heartbeatServiceProvider;\n        this.appCheckServiceProvider = appCheckServiceProvider;\n        this.config = config;\n        this.currentUser = null;\n        this.emulatorConfig = null;\n        this.operations = Promise.resolve();\n        this.authStateSubscription = new $07e48e70fcf53a6e$var$Subscription(this);\n        this.idTokenSubscription = new $07e48e70fcf53a6e$var$Subscription(this);\n        this.beforeStateQueue = new $07e48e70fcf53a6e$var$AuthMiddlewareQueue(this);\n        this.redirectUser = null;\n        this.isProactiveRefreshEnabled = false;\n        // Any network calls will set this to true and prevent subsequent emulator\n        // initialization\n        this._canInitEmulator = true;\n        this._isInitialized = false;\n        this._deleted = false;\n        this._initializationPromise = null;\n        this._popupRedirectResolver = null;\n        this._errorFactory = $07e48e70fcf53a6e$var$_DEFAULT_AUTH_ERROR_FACTORY;\n        this._agentRecaptchaConfig = null;\n        this._tenantRecaptchaConfigs = {};\n        // Tracks the last notified UID for state change listeners to prevent\n        // repeated calls to the callbacks. Undefined means it's never been\n        // called, whereas null means it's been called with a signed out user\n        this.lastNotifiedUid = undefined;\n        this.languageCode = null;\n        this.tenantId = null;\n        this.settings = {\n            appVerificationDisabledForTesting: false\n        };\n        this.frameworks = [];\n        this.name = app.name;\n        this.clientVersion = config.sdkClientVersion;\n    }\n    (0, $bNI6E._)(AuthImpl, [\n        {\n            key: \"_initializeWithPersistence\",\n            value: function _initializeWithPersistence(persistenceHierarchy, popupRedirectResolver) {\n                if (popupRedirectResolver) this._popupRedirectResolver = $07e48e70fcf53a6e$export$890c4ad488842ce7(popupRedirectResolver);\n                var _this = this;\n                // Have to check for app deletion throughout initialization (after each\n                // promise resolution)\n                this._initializationPromise = this.queue(/*#__PURE__*/ (0, $i7mVp._)(function() {\n                    var _a, _b, e;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                if (_this._deleted) return [\n                                    2\n                                ];\n                                return [\n                                    4,\n                                    $07e48e70fcf53a6e$var$PersistenceUserManager.create(_this, persistenceHierarchy)\n                                ];\n                            case 1:\n                                _this.persistenceManager = _state.sent();\n                                if (_this._deleted) return [\n                                    2\n                                ];\n                                if (!((_a = _this._popupRedirectResolver) === null || _a === void 0 ? void 0 : _a._shouldInitProactively)) return [\n                                    3,\n                                    5\n                                ];\n                                _state.label = 2;\n                            case 2:\n                                _state.trys.push([\n                                    2,\n                                    4,\n                                    ,\n                                    5\n                                ]);\n                                return [\n                                    4,\n                                    _this._popupRedirectResolver._initialize(_this)\n                                ];\n                            case 3:\n                                _state.sent();\n                                return [\n                                    3,\n                                    5\n                                ];\n                            case 4:\n                                e = _state.sent();\n                                return [\n                                    3,\n                                    5\n                                ];\n                            case 5:\n                                return [\n                                    4,\n                                    _this.initializeCurrentUser(popupRedirectResolver)\n                                ];\n                            case 6:\n                                _state.sent();\n                                _this.lastNotifiedUid = ((_b = _this.currentUser) === null || _b === void 0 ? void 0 : _b.uid) || null;\n                                if (_this._deleted) return [\n                                    2\n                                ];\n                                _this._isInitialized = true;\n                                return [\n                                    2\n                                ];\n                        }\n                    });\n                }));\n                return this._initializationPromise;\n            }\n        },\n        {\n            key: \"_onStorageEvent\",\n            value: /**\r\n     * If the persistence is changed in another window, the user manager will let us know\r\n     */ function _onStorageEvent() {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var user;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                if (_this._deleted) return [\n                                    2\n                                ];\n                                return [\n                                    4,\n                                    _this.assertedPersistence.getCurrentUser()\n                                ];\n                            case 1:\n                                user = _state.sent();\n                                if (!_this.currentUser && !user) // No change, do nothing (was signed out and remained signed out).\n                                return [\n                                    2\n                                ];\n                                if (!(_this.currentUser && user && _this.currentUser.uid === user.uid)) return [\n                                    3,\n                                    3\n                                ];\n                                // Data update, simply copy data changes.\n                                _this._currentUser._assign(user);\n                                // If tokens changed from previous user tokens, this will trigger\n                                // notifyAuthListeners_.\n                                return [\n                                    4,\n                                    _this.currentUser.getIdToken()\n                                ];\n                            case 2:\n                                _state.sent();\n                                return [\n                                    2\n                                ];\n                            case 3:\n                                // Update current Auth state. Either a new login or logout.\n                                // Skip blocking callbacks, they should not apply to a change in another tab.\n                                return [\n                                    4,\n                                    _this._updateCurrentUser(user, /* skipBeforeStateCallbacks */ true)\n                                ];\n                            case 4:\n                                _state.sent();\n                                return [\n                                    2\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"initializeCurrentUser\",\n            value: function initializeCurrentUser(popupRedirectResolver) {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var _a, previouslyStoredUser, futureCurrentUser, needsTocheckMiddleware, redirectUserEventId, storedUserEventId, result, e;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                return [\n                                    4,\n                                    _this.assertedPersistence.getCurrentUser()\n                                ];\n                            case 1:\n                                previouslyStoredUser = _state.sent();\n                                futureCurrentUser = previouslyStoredUser;\n                                needsTocheckMiddleware = false;\n                                if (!(popupRedirectResolver && _this.config.authDomain)) return [\n                                    3,\n                                    4\n                                ];\n                                return [\n                                    4,\n                                    _this.getOrInitRedirectPersistenceManager()\n                                ];\n                            case 2:\n                                _state.sent();\n                                redirectUserEventId = (_a = _this.redirectUser) === null || _a === void 0 ? void 0 : _a._redirectEventId;\n                                storedUserEventId = futureCurrentUser === null || futureCurrentUser === void 0 ? void 0 : futureCurrentUser._redirectEventId;\n                                return [\n                                    4,\n                                    _this.tryRedirectSignIn(popupRedirectResolver)\n                                ];\n                            case 3:\n                                result = _state.sent();\n                                // If the stored user (i.e. the old \"currentUser\") has a redirectId that\n                                // matches the redirect user, then we want to initially sign in with the\n                                // new user object from result.\n                                // TODO(samgho): More thoroughly test all of this\n                                if ((!redirectUserEventId || redirectUserEventId === storedUserEventId) && (result === null || result === void 0 ? void 0 : result.user)) {\n                                    futureCurrentUser = result.user;\n                                    needsTocheckMiddleware = true;\n                                }\n                                _state.label = 4;\n                            case 4:\n                                // If no user in persistence, there is no current user. Set to null.\n                                if (!futureCurrentUser) return [\n                                    2,\n                                    _this.directlySetCurrentUser(null)\n                                ];\n                                if (!!futureCurrentUser._redirectEventId) return [\n                                    3,\n                                    9\n                                ];\n                                if (!needsTocheckMiddleware) return [\n                                    3,\n                                    8\n                                ];\n                                _state.label = 5;\n                            case 5:\n                                _state.trys.push([\n                                    5,\n                                    7,\n                                    ,\n                                    8\n                                ]);\n                                return [\n                                    4,\n                                    _this.beforeStateQueue.runMiddleware(futureCurrentUser)\n                                ];\n                            case 6:\n                                _state.sent();\n                                return [\n                                    3,\n                                    8\n                                ];\n                            case 7:\n                                e = _state.sent();\n                                futureCurrentUser = previouslyStoredUser;\n                                // We know this is available since the bit is only set when the\n                                // resolver is available\n                                _this._popupRedirectResolver._overrideRedirectResult(_this, function() {\n                                    return Promise.reject(e);\n                                });\n                                return [\n                                    3,\n                                    8\n                                ];\n                            case 8:\n                                if (futureCurrentUser) return [\n                                    2,\n                                    _this.reloadAndSetCurrentUserOrClear(futureCurrentUser)\n                                ];\n                                else return [\n                                    2,\n                                    _this.directlySetCurrentUser(null)\n                                ];\n                                _state.label = 9;\n                            case 9:\n                                $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(_this._popupRedirectResolver, _this, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */ );\n                                return [\n                                    4,\n                                    _this.getOrInitRedirectPersistenceManager()\n                                ];\n                            case 10:\n                                _state.sent();\n                                // If the redirect user's event ID matches the current user's event ID,\n                                // DO NOT reload the current user, otherwise they'll be cleared from storage.\n                                // This is important for the reauthenticateWithRedirect() flow.\n                                if (_this.redirectUser && _this.redirectUser._redirectEventId === futureCurrentUser._redirectEventId) return [\n                                    2,\n                                    _this.directlySetCurrentUser(futureCurrentUser)\n                                ];\n                                return [\n                                    2,\n                                    _this.reloadAndSetCurrentUserOrClear(futureCurrentUser)\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"tryRedirectSignIn\",\n            value: function tryRedirectSignIn(redirectResolver) {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var result, e;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                result = null;\n                                _state.label = 1;\n                            case 1:\n                                _state.trys.push([\n                                    1,\n                                    3,\n                                    ,\n                                    5\n                                ]);\n                                return [\n                                    4,\n                                    _this._popupRedirectResolver._completeRedirectFn(_this, redirectResolver, true)\n                                ];\n                            case 2:\n                                // We know this._popupRedirectResolver is set since redirectResolver\n                                // is passed in. The _completeRedirectFn expects the unwrapped extern.\n                                result = _state.sent();\n                                return [\n                                    3,\n                                    5\n                                ];\n                            case 3:\n                                e = _state.sent();\n                                // Swallow any errors here; the code can retrieve them in\n                                // getRedirectResult().\n                                return [\n                                    4,\n                                    _this._setRedirectUser(null)\n                                ];\n                            case 4:\n                                _state.sent();\n                                return [\n                                    3,\n                                    5\n                                ];\n                            case 5:\n                                return [\n                                    2,\n                                    result\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"reloadAndSetCurrentUserOrClear\",\n            value: function reloadAndSetCurrentUserOrClear(user) {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var e;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                _state.trys.push([\n                                    0,\n                                    2,\n                                    ,\n                                    3\n                                ]);\n                                return [\n                                    4,\n                                    $07e48e70fcf53a6e$var$_reloadWithoutSaving(user)\n                                ];\n                            case 1:\n                                _state.sent();\n                                return [\n                                    3,\n                                    3\n                                ];\n                            case 2:\n                                e = _state.sent();\n                                if ((e === null || e === void 0 ? void 0 : e.code) !== \"auth/network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */ ) // Something's wrong with the user's token. Log them out and remove\n                                // them from storage\n                                return [\n                                    2,\n                                    _this.directlySetCurrentUser(null)\n                                ];\n                                return [\n                                    3,\n                                    3\n                                ];\n                            case 3:\n                                return [\n                                    2,\n                                    _this.directlySetCurrentUser(user)\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"useDeviceLanguage\",\n            value: function useDeviceLanguage() {\n                this.languageCode = $07e48e70fcf53a6e$var$_getUserLanguage();\n            }\n        },\n        {\n            key: \"_delete\",\n            value: function _delete() {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        _this._deleted = true;\n                        return [\n                            2\n                        ];\n                    });\n                })();\n            }\n        },\n        {\n            key: \"updateCurrentUser\",\n            value: function updateCurrentUser(userExtern) {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var user;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        user = userExtern ? (0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(userExtern) : null;\n                        if (user) $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(user.auth.config.apiKey === _this.config.apiKey, _this, \"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */ );\n                        return [\n                            2,\n                            _this._updateCurrentUser(user && user._clone(_this))\n                        ];\n                    });\n                })();\n            }\n        },\n        {\n            key: \"_updateCurrentUser\",\n            value: function _updateCurrentUser(user) {\n                var skipBeforeStateCallbacks = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                if (_this._deleted) return [\n                                    2\n                                ];\n                                if (user) $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(_this.tenantId === user.tenantId, _this, \"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */ );\n                                if (!!skipBeforeStateCallbacks) return [\n                                    3,\n                                    2\n                                ];\n                                return [\n                                    4,\n                                    _this.beforeStateQueue.runMiddleware(user)\n                                ];\n                            case 1:\n                                _state.sent();\n                                _state.label = 2;\n                            case 2:\n                                return [\n                                    2,\n                                    _this.queue(/*#__PURE__*/ (0, $i7mVp._)(function() {\n                                        return (0, $4tSb9.__generator)(this, function(_state) {\n                                            switch(_state.label){\n                                                case 0:\n                                                    return [\n                                                        4,\n                                                        _this.directlySetCurrentUser(user)\n                                                    ];\n                                                case 1:\n                                                    _state.sent();\n                                                    _this.notifyAuthListeners();\n                                                    return [\n                                                        2\n                                                    ];\n                                            }\n                                        });\n                                    }))\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"signOut\",\n            value: function signOut() {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                // Run first, to block _setRedirectUser() if any callbacks fail.\n                                return [\n                                    4,\n                                    _this.beforeStateQueue.runMiddleware(null)\n                                ];\n                            case 1:\n                                _state.sent();\n                                if (!(_this.redirectPersistenceManager || _this._popupRedirectResolver)) return [\n                                    3,\n                                    3\n                                ];\n                                return [\n                                    4,\n                                    _this._setRedirectUser(null)\n                                ];\n                            case 2:\n                                _state.sent();\n                                _state.label = 3;\n                            case 3:\n                                // Prevent callbacks from being called again in _updateCurrentUser, as\n                                // they were already called in the first line.\n                                return [\n                                    2,\n                                    _this._updateCurrentUser(null, /* skipBeforeStateCallbacks */ true)\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"setPersistence\",\n            value: function setPersistence(persistence) {\n                var _this = this;\n                return this.queue(/*#__PURE__*/ (0, $i7mVp._)(function() {\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                return [\n                                    4,\n                                    _this.assertedPersistence.setPersistence($07e48e70fcf53a6e$export$890c4ad488842ce7(persistence))\n                                ];\n                            case 1:\n                                _state.sent();\n                                return [\n                                    2\n                                ];\n                        }\n                    });\n                }));\n            }\n        },\n        {\n            key: \"initializeRecaptchaConfig\",\n            value: function initializeRecaptchaConfig() {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var response, config, verifier;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                return [\n                                    4,\n                                    $07e48e70fcf53a6e$var$getRecaptchaConfig(_this, {\n                                        clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */ ,\n                                        version: \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */ \n                                    })\n                                ];\n                            case 1:\n                                response = _state.sent();\n                                config = new $07e48e70fcf53a6e$var$RecaptchaConfig(response);\n                                if (_this.tenantId == null) _this._agentRecaptchaConfig = config;\n                                else _this._tenantRecaptchaConfigs[_this.tenantId] = config;\n                                if (config.emailPasswordEnabled) {\n                                    verifier = new $07e48e70fcf53a6e$var$RecaptchaEnterpriseVerifier(_this);\n                                    verifier.verify();\n                                }\n                                return [\n                                    2\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"_getRecaptchaConfig\",\n            value: function _getRecaptchaConfig() {\n                if (this.tenantId == null) return this._agentRecaptchaConfig;\n                else return this._tenantRecaptchaConfigs[this.tenantId];\n            }\n        },\n        {\n            key: \"_getPersistence\",\n            value: function _getPersistence() {\n                return this.assertedPersistence.persistence.type;\n            }\n        },\n        {\n            key: \"_updateErrorMap\",\n            value: function _updateErrorMap(errorMap) {\n                this._errorFactory = new (0, $1d9d263a787f8021$export$3fa6e1b18a3b2d40)(\"auth\", \"Firebase\", errorMap());\n            }\n        },\n        {\n            key: \"onAuthStateChanged\",\n            value: function onAuthStateChanged(nextOrObserver, error, completed) {\n                return this.registerStateListener(this.authStateSubscription, nextOrObserver, error, completed);\n            }\n        },\n        {\n            key: \"beforeAuthStateChanged\",\n            value: function beforeAuthStateChanged(callback, onAbort) {\n                return this.beforeStateQueue.pushCallback(callback, onAbort);\n            }\n        },\n        {\n            key: \"onIdTokenChanged\",\n            value: function onIdTokenChanged(nextOrObserver, error, completed) {\n                return this.registerStateListener(this.idTokenSubscription, nextOrObserver, error, completed);\n            }\n        },\n        {\n            key: \"toJSON\",\n            value: function toJSON() {\n                var _a;\n                return {\n                    apiKey: this.config.apiKey,\n                    authDomain: this.config.authDomain,\n                    appName: this.name,\n                    currentUser: (_a = this._currentUser) === null || _a === void 0 ? void 0 : _a.toJSON()\n                };\n            }\n        },\n        {\n            key: \"_setRedirectUser\",\n            value: function _setRedirectUser(user, popupRedirectResolver) {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var redirectManager;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                return [\n                                    4,\n                                    _this.getOrInitRedirectPersistenceManager(popupRedirectResolver)\n                                ];\n                            case 1:\n                                redirectManager = _state.sent();\n                                return [\n                                    2,\n                                    user === null ? redirectManager.removeCurrentUser() : redirectManager.setCurrentUser(user)\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"getOrInitRedirectPersistenceManager\",\n            value: function getOrInitRedirectPersistenceManager(popupRedirectResolver) {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var resolver;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                if (!!_this.redirectPersistenceManager) return [\n                                    3,\n                                    3\n                                ];\n                                resolver = popupRedirectResolver && $07e48e70fcf53a6e$export$890c4ad488842ce7(popupRedirectResolver) || _this._popupRedirectResolver;\n                                $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(resolver, _this, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */ );\n                                return [\n                                    4,\n                                    $07e48e70fcf53a6e$var$PersistenceUserManager.create(_this, [\n                                        $07e48e70fcf53a6e$export$890c4ad488842ce7(resolver._redirectPersistence)\n                                    ], \"redirectUser\" /* KeyName.REDIRECT_USER */ )\n                                ];\n                            case 1:\n                                _this.redirectPersistenceManager = _state.sent();\n                                return [\n                                    4,\n                                    _this.redirectPersistenceManager.getCurrentUser()\n                                ];\n                            case 2:\n                                _this.redirectUser = _state.sent();\n                                _state.label = 3;\n                            case 3:\n                                return [\n                                    2,\n                                    _this.redirectPersistenceManager\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"_redirectUserForId\",\n            value: function _redirectUserForId(id) {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var _a, _b;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                if (!_this._isInitialized) return [\n                                    3,\n                                    2\n                                ];\n                                return [\n                                    4,\n                                    _this.queue(/*#__PURE__*/ (0, $i7mVp._)(function() {\n                                        return (0, $4tSb9.__generator)(this, function(_state) {\n                                            return [\n                                                2\n                                            ];\n                                        });\n                                    }))\n                                ];\n                            case 1:\n                                _state.sent();\n                                _state.label = 2;\n                            case 2:\n                                if (((_a = _this._currentUser) === null || _a === void 0 ? void 0 : _a._redirectEventId) === id) return [\n                                    2,\n                                    _this._currentUser\n                                ];\n                                if (((_b = _this.redirectUser) === null || _b === void 0 ? void 0 : _b._redirectEventId) === id) return [\n                                    2,\n                                    _this.redirectUser\n                                ];\n                                return [\n                                    2,\n                                    null\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"_persistUserIfCurrent\",\n            value: function _persistUserIfCurrent(user) {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        if (user === _this.currentUser) return [\n                            2,\n                            _this.queue(/*#__PURE__*/ (0, $i7mVp._)(function() {\n                                return (0, $4tSb9.__generator)(this, function(_state) {\n                                    return [\n                                        2,\n                                        _this.directlySetCurrentUser(user)\n                                    ];\n                                });\n                            }))\n                        ];\n                        return [\n                            2\n                        ];\n                    });\n                })();\n            }\n        },\n        {\n            /** Notifies listeners only if the user is current */ key: \"_notifyListenersIfCurrent\",\n            value: function _notifyListenersIfCurrent(user) {\n                if (user === this.currentUser) this.notifyAuthListeners();\n            }\n        },\n        {\n            key: \"_key\",\n            value: function _key() {\n                return \"\".concat(this.config.authDomain, \":\").concat(this.config.apiKey, \":\").concat(this.name);\n            }\n        },\n        {\n            key: \"_startProactiveRefresh\",\n            value: function _startProactiveRefresh() {\n                this.isProactiveRefreshEnabled = true;\n                if (this.currentUser) this._currentUser._startProactiveRefresh();\n            }\n        },\n        {\n            key: \"_stopProactiveRefresh\",\n            value: function _stopProactiveRefresh() {\n                this.isProactiveRefreshEnabled = false;\n                if (this.currentUser) this._currentUser._stopProactiveRefresh();\n            }\n        },\n        {\n            key: \"_currentUser\",\n            get: /** Returns the current user cast as the internal type */ function get() {\n                return this.currentUser;\n            }\n        },\n        {\n            key: \"notifyAuthListeners\",\n            value: function notifyAuthListeners() {\n                var _a, _b;\n                if (!this._isInitialized) return;\n                this.idTokenSubscription.next(this.currentUser);\n                var currentUid = (_b = (_a = this.currentUser) === null || _a === void 0 ? void 0 : _a.uid) !== null && _b !== void 0 ? _b : null;\n                if (this.lastNotifiedUid !== currentUid) {\n                    this.lastNotifiedUid = currentUid;\n                    this.authStateSubscription.next(this.currentUser);\n                }\n            }\n        },\n        {\n            key: \"registerStateListener\",\n            value: function registerStateListener(subscription, nextOrObserver, error, completed) {\n                var _this = this;\n                if (this._deleted) return function() {};\n                var cb = typeof nextOrObserver === \"function\" ? nextOrObserver : nextOrObserver.next.bind(nextOrObserver);\n                var promise = this._isInitialized ? Promise.resolve() : this._initializationPromise;\n                $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(promise, this, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n                // The callback needs to be called asynchronously per the spec.\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                promise.then(function() {\n                    return cb(_this.currentUser);\n                });\n                if (typeof nextOrObserver === \"function\") return subscription.addObserver(nextOrObserver, error, completed);\n                else return subscription.addObserver(nextOrObserver);\n            }\n        },\n        {\n            key: \"directlySetCurrentUser\",\n            value: /**\r\n     * Unprotected (from race conditions) method to set the current user. This\r\n     * should only be called from within a queued callback. This is necessary\r\n     * because the queue shouldn't rely on another queued callback.\r\n     */ function directlySetCurrentUser(user) {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                if (_this.currentUser && _this.currentUser !== user) _this._currentUser._stopProactiveRefresh();\n                                if (user && _this.isProactiveRefreshEnabled) user._startProactiveRefresh();\n                                _this.currentUser = user;\n                                if (!user) return [\n                                    3,\n                                    2\n                                ];\n                                return [\n                                    4,\n                                    _this.assertedPersistence.setCurrentUser(user)\n                                ];\n                            case 1:\n                                _state.sent();\n                                return [\n                                    3,\n                                    4\n                                ];\n                            case 2:\n                                return [\n                                    4,\n                                    _this.assertedPersistence.removeCurrentUser()\n                                ];\n                            case 3:\n                                _state.sent();\n                                _state.label = 4;\n                            case 4:\n                                return [\n                                    2\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"queue\",\n            value: function queue(action) {\n                // In case something errors, the callback still should be called in order\n                // to keep the promise chain alive\n                this.operations = this.operations.then(action, action);\n                return this.operations;\n            }\n        },\n        {\n            key: \"assertedPersistence\",\n            get: function get() {\n                $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(this.persistenceManager, this, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n                return this.persistenceManager;\n            }\n        },\n        {\n            key: \"_logFramework\",\n            value: function _logFramework(framework) {\n                if (!framework || this.frameworks.includes(framework)) return;\n                this.frameworks.push(framework);\n                // Sort alphabetically so that \"FirebaseCore-web,FirebaseUI-web\" and\n                // \"FirebaseUI-web,FirebaseCore-web\" aren't viewed as different.\n                this.frameworks.sort();\n                this.clientVersion = $07e48e70fcf53a6e$export$23ebac1979863676(this.config.clientPlatform, this._getFrameworks());\n            }\n        },\n        {\n            key: \"_getFrameworks\",\n            value: function _getFrameworks() {\n                return this.frameworks;\n            }\n        },\n        {\n            key: \"_getAdditionalHeaders\",\n            value: function _getAdditionalHeaders() {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var _a, headers, heartbeatsHeader, appCheckToken;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                headers = (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)({}, \"X-Client-Version\" /* HttpHeader.X_CLIENT_VERSION */ , _this.clientVersion);\n                                if (_this.app.options.appId) headers[\"X-Firebase-gmpid\" /* HttpHeader.X_FIREBASE_GMPID */ ] = _this.app.options.appId;\n                                return [\n                                    4,\n                                    (_a = _this.heartbeatServiceProvider.getImmediate({\n                                        optional: true\n                                    })) === null || _a === void 0 ? void 0 : _a.getHeartbeatsHeader()\n                                ];\n                            case 1:\n                                heartbeatsHeader = _state.sent();\n                                if (heartbeatsHeader) headers[\"X-Firebase-Client\" /* HttpHeader.X_FIREBASE_CLIENT */ ] = heartbeatsHeader;\n                                return [\n                                    4,\n                                    _this._getAppCheckToken()\n                                ];\n                            case 2:\n                                appCheckToken = _state.sent();\n                                if (appCheckToken) headers[\"X-Firebase-AppCheck\" /* HttpHeader.X_FIREBASE_APP_CHECK */ ] = appCheckToken;\n                                return [\n                                    2,\n                                    headers\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"_getAppCheckToken\",\n            value: function _getAppCheckToken() {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var _a, appCheckTokenResult;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                return [\n                                    4,\n                                    (_a = _this.appCheckServiceProvider.getImmediate({\n                                        optional: true\n                                    })) === null || _a === void 0 ? void 0 : _a.getToken()\n                                ];\n                            case 1:\n                                appCheckTokenResult = _state.sent();\n                                if (appCheckTokenResult === null || appCheckTokenResult === void 0 ? void 0 : appCheckTokenResult.error) // Context: appCheck.getToken() will never throw even if an error happened.\n                                // In the error case, a dummy token will be returned along with an error field describing\n                                // the error. In general, we shouldn't care about the error condition and just use\n                                // the token (actual or dummy) to send requests.\n                                $07e48e70fcf53a6e$var$_logWarn(\"Error while retrieving App Check token: \".concat(appCheckTokenResult.error));\n                                return [\n                                    2,\n                                    appCheckTokenResult === null || appCheckTokenResult === void 0 ? void 0 : appCheckTokenResult.token\n                                ];\n                        }\n                    });\n                })();\n            }\n        }\n    ]);\n    return AuthImpl;\n}();\n/**\r\n * Method to be used to cast down to our private implmentation of Auth.\r\n * It will also handle unwrapping from the compat type if necessary\r\n *\r\n * @param auth Auth object passed in from developer\r\n */ function $07e48e70fcf53a6e$export$a33b77bbdbb8366c(auth) {\n    return (0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(auth);\n}\n/** Helper class to wrap subscriber logic */ var $07e48e70fcf53a6e$var$Subscription = /*#__PURE__*/ function() {\n    \"use strict\";\n    function Subscription(auth) {\n        var _this = this;\n        (0, $juqrk._)(this, Subscription);\n        this.auth = auth;\n        this.observer = null;\n        this.addObserver = (0, $1d9d263a787f8021$export$364097d812234b3f)(function(observer) {\n            return _this.observer = observer;\n        });\n    }\n    (0, $bNI6E._)(Subscription, [\n        {\n            key: \"next\",\n            get: function get() {\n                $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(this.observer, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n                return this.observer.next.bind(this.observer);\n            }\n        }\n    ]);\n    return Subscription;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Initializes an {@link Auth} instance with fine-grained control over\r\n * {@link Dependencies}.\r\n *\r\n * @remarks\r\n *\r\n * This function allows more control over the {@link Auth} instance than\r\n * {@link getAuth}. `getAuth` uses platform-specific defaults to supply\r\n * the {@link Dependencies}. In general, `getAuth` is the easiest way to\r\n * initialize Auth and works for most use cases. Use `initializeAuth` if you\r\n * need control over which persistence layer is used, or to minimize bundle\r\n * size if you're not using either `signInWithPopup` or `signInWithRedirect`.\r\n *\r\n * For example, if your app only uses anonymous accounts and you only want\r\n * accounts saved for the current session, initialize `Auth` with:\r\n *\r\n * ```js\r\n * const auth = initializeAuth(app, {\r\n *   persistence: browserSessionPersistence,\r\n *   popupRedirectResolver: undefined,\r\n * });\r\n * ```\r\n *\r\n * @public\r\n */ function $07e48e70fcf53a6e$export$7f8ddf7c7c20b3cd(app, deps) {\n    var provider = (0, $0913f93b5b3c9bac$export$fa0d6da0f5838f50)(app, \"auth\");\n    if (provider.isInitialized()) {\n        var auth = provider.getImmediate();\n        var initialOptions = provider.getOptions();\n        if ((0, $1d9d263a787f8021$export$9cb4719e2e525b7a)(initialOptions, deps !== null && deps !== void 0 ? deps : {})) return auth;\n        else $07e48e70fcf53a6e$export$d66dc83d8cfc8dd(auth, \"already-initialized\" /* AuthErrorCode.ALREADY_INITIALIZED */ );\n    }\n    var auth1 = provider.initialize({\n        options: deps\n    });\n    return auth1;\n}\nfunction $07e48e70fcf53a6e$var$_initializeAuthInstance(auth, deps) {\n    var persistence = (deps === null || deps === void 0 ? void 0 : deps.persistence) || [];\n    var hierarchy = (Array.isArray(persistence) ? persistence : [\n        persistence\n    ]).map($07e48e70fcf53a6e$export$890c4ad488842ce7);\n    if (deps === null || deps === void 0 ? void 0 : deps.errorMap) auth._updateErrorMap(deps.errorMap);\n    // This promise is intended to float; auth initialization happens in the\n    // background, meanwhile the auth object may be used by the app.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    auth._initializeWithPersistence(hierarchy, deps === null || deps === void 0 ? void 0 : deps.popupRedirectResolver);\n}\n/**\r\n * Changes the {@link Auth} instance to communicate with the Firebase Auth Emulator, instead of production\r\n * Firebase Auth services.\r\n *\r\n * @remarks\r\n * This must be called synchronously immediately following the first call to\r\n * {@link initializeAuth}.  Do not use with production credentials as emulator\r\n * traffic is not encrypted.\r\n *\r\n *\r\n * @example\r\n * ```javascript\r\n * connectAuthEmulator(auth, 'http://127.0.0.1:9099', { disableWarnings: true });\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param url - The URL at which the emulator is running (eg, 'http://localhost:9099').\r\n * @param options - Optional. `options.disableWarnings` defaults to `false`. Set it to\r\n * `true` to disable the warning banner attached to the DOM.\r\n *\r\n * @public\r\n */ function $07e48e70fcf53a6e$export$9bb611d729802a56(auth, url, options) {\n    var authInternal = $07e48e70fcf53a6e$export$a33b77bbdbb8366c(auth);\n    $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(authInternal._canInitEmulator, authInternal, \"emulator-config-failed\" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */ );\n    $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(/^https?:\\/\\//.test(url), authInternal, \"invalid-emulator-scheme\" /* AuthErrorCode.INVALID_EMULATOR_SCHEME */ );\n    var disableWarnings = !!(options === null || options === void 0 ? void 0 : options.disableWarnings);\n    var protocol = $07e48e70fcf53a6e$var$extractProtocol(url);\n    var _extractHostAndPort = $07e48e70fcf53a6e$var$extractHostAndPort(url), host = _extractHostAndPort.host, port = _extractHostAndPort.port;\n    var portStr = port === null ? \"\" : \":\".concat(port);\n    // Always replace path with \"/\" (even if input url had no path at all, or had a different one).\n    authInternal.config.emulator = {\n        url: \"\".concat(protocol, \"//\").concat(host).concat(portStr, \"/\")\n    };\n    authInternal.settings.appVerificationDisabledForTesting = true;\n    authInternal.emulatorConfig = Object.freeze({\n        host: host,\n        port: port,\n        protocol: protocol.replace(\":\", \"\"),\n        options: Object.freeze({\n            disableWarnings: disableWarnings\n        })\n    });\n    if (!disableWarnings) $07e48e70fcf53a6e$var$emitEmulatorWarning();\n}\nfunction $07e48e70fcf53a6e$var$extractProtocol(url) {\n    var protocolEnd = url.indexOf(\":\");\n    return protocolEnd < 0 ? \"\" : url.substr(0, protocolEnd + 1);\n}\nfunction $07e48e70fcf53a6e$var$extractHostAndPort(url) {\n    var protocol = $07e48e70fcf53a6e$var$extractProtocol(url);\n    var authority = /(\\/\\/)?([^?#/]+)/.exec(url.substr(protocol.length)); // Between // and /, ? or #.\n    if (!authority) return {\n        host: \"\",\n        port: null\n    };\n    var hostAndPort = authority[2].split(\"@\").pop() || \"\"; // Strip out \"username:password@\".\n    var bracketedIPv6 = /^(\\[[^\\]]+\\])(:|$)/.exec(hostAndPort);\n    if (bracketedIPv6) {\n        var host = bracketedIPv6[1];\n        return {\n            host: host,\n            port: $07e48e70fcf53a6e$var$parsePort(hostAndPort.substr(host.length + 1))\n        };\n    } else {\n        var _hostAndPort_split = (0, $fGQt0._)(hostAndPort.split(\":\"), 2), host1 = _hostAndPort_split[0], port = _hostAndPort_split[1];\n        return {\n            host: host1,\n            port: $07e48e70fcf53a6e$var$parsePort(port)\n        };\n    }\n}\nfunction $07e48e70fcf53a6e$var$parsePort(portStr) {\n    if (!portStr) return null;\n    var port = Number(portStr);\n    if (isNaN(port)) return null;\n    return port;\n}\nfunction $07e48e70fcf53a6e$var$emitEmulatorWarning() {\n    function attachBanner() {\n        var el = document.createElement(\"p\");\n        var sty = el.style;\n        el.innerText = \"Running in emulator mode. Do not use with production credentials.\";\n        sty.position = \"fixed\";\n        sty.width = \"100%\";\n        sty.backgroundColor = \"#ffffff\";\n        sty.border = \".1em solid #000000\";\n        sty.color = \"#b50000\";\n        sty.bottom = \"0px\";\n        sty.left = \"0px\";\n        sty.margin = \"0px\";\n        sty.zIndex = \"10000\";\n        sty.textAlign = \"center\";\n        el.classList.add(\"firebase-emulator-warning\");\n        document.body.appendChild(el);\n    }\n    if (typeof console !== \"undefined\" && typeof console.info === \"function\") console.info(\"WARNING: You are using the Auth Emulator, which is intended for local testing only.  Do not use with production credentials.\");\n    if (typeof window !== \"undefined\" && typeof document !== \"undefined\") {\n        if (document.readyState === \"loading\") window.addEventListener(\"DOMContentLoaded\", attachBanner);\n        else attachBanner();\n    }\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Interface that represents the credentials returned by an {@link AuthProvider}.\r\n *\r\n * @remarks\r\n * Implementations specify the details about each auth provider's credential requirements.\r\n *\r\n * @public\r\n */ var $07e48e70fcf53a6e$export$b4171a6734a65d42 = /*#__PURE__*/ function() {\n    \"use strict\";\n    function AuthCredential(/**\r\n     * The authentication provider ID for the credential.\r\n     *\r\n     * @remarks\r\n     * For example, 'facebook.com', or 'google.com'.\r\n     */ providerId, /**\r\n     * The authentication sign in method for the credential.\r\n     *\r\n     * @remarks\r\n     * For example, {@link SignInMethod}.EMAIL_PASSWORD, or\r\n     * {@link SignInMethod}.EMAIL_LINK. This corresponds to the sign-in method\r\n     * identifier as returned in {@link fetchSignInMethodsForEmail}.\r\n     */ signInMethod) {\n        (0, $juqrk._)(this, AuthCredential);\n        this.providerId = providerId;\n        this.signInMethod = signInMethod;\n    }\n    (0, $bNI6E._)(AuthCredential, [\n        {\n            /**\r\n     * Returns a JSON-serializable representation of this object.\r\n     *\r\n     * @returns a JSON-serializable representation of this object.\r\n     */ key: \"toJSON\",\n            value: function toJSON() {\n                return $07e48e70fcf53a6e$var$debugFail(\"not implemented\");\n            }\n        },\n        {\n            /** @internal */ key: \"_getIdTokenResponse\",\n            value: function _getIdTokenResponse(_auth) {\n                return $07e48e70fcf53a6e$var$debugFail(\"not implemented\");\n            }\n        },\n        {\n            /** @internal */ key: \"_linkToIdToken\",\n            value: function _linkToIdToken(_auth, _idToken) {\n                return $07e48e70fcf53a6e$var$debugFail(\"not implemented\");\n            }\n        },\n        {\n            /** @internal */ key: \"_getReauthenticationResolver\",\n            value: function _getReauthenticationResolver(_auth) {\n                return $07e48e70fcf53a6e$var$debugFail(\"not implemented\");\n            }\n        }\n    ]);\n    return AuthCredential;\n}();\nfunction $07e48e70fcf53a6e$var$resetPassword(auth, request) {\n    return $07e48e70fcf53a6e$var$_resetPassword.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_resetPassword() {\n    $07e48e70fcf53a6e$var$_resetPassword = /**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ (0, $i7mVp._)(function(auth, request) {\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            return [\n                2,\n                $07e48e70fcf53a6e$var$_performApiRequest(auth, \"POST\" /* HttpMethod.POST */ , \"/v1/accounts:resetPassword\" /* Endpoint.RESET_PASSWORD */ , $07e48e70fcf53a6e$var$_addTidIfNecessary(auth, request))\n            ];\n        });\n    });\n    return $07e48e70fcf53a6e$var$_resetPassword.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$updateEmailPassword(auth, request) {\n    return $07e48e70fcf53a6e$var$_updateEmailPassword.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_updateEmailPassword() {\n    $07e48e70fcf53a6e$var$_updateEmailPassword = (0, $i7mVp._)(function(auth, request) {\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            return [\n                2,\n                $07e48e70fcf53a6e$var$_performApiRequest(auth, \"POST\" /* HttpMethod.POST */ , \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */ , request)\n            ];\n        });\n    });\n    return $07e48e70fcf53a6e$var$_updateEmailPassword.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$applyActionCode$1(auth, request) {\n    return $07e48e70fcf53a6e$var$_applyActionCode$1.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_applyActionCode$1() {\n    $07e48e70fcf53a6e$var$_applyActionCode$1 = (0, $i7mVp._)(function(auth, request) {\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            return [\n                2,\n                $07e48e70fcf53a6e$var$_performApiRequest(auth, \"POST\" /* HttpMethod.POST */ , \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */ , $07e48e70fcf53a6e$var$_addTidIfNecessary(auth, request))\n            ];\n        });\n    });\n    return $07e48e70fcf53a6e$var$_applyActionCode$1.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$signInWithPassword(auth, request) {\n    return $07e48e70fcf53a6e$var$_signInWithPassword.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_signInWithPassword() {\n    $07e48e70fcf53a6e$var$_signInWithPassword = /**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ (0, $i7mVp._)(function(auth, request) {\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            return [\n                2,\n                $07e48e70fcf53a6e$var$_performSignInRequest(auth, \"POST\" /* HttpMethod.POST */ , \"/v1/accounts:signInWithPassword\" /* Endpoint.SIGN_IN_WITH_PASSWORD */ , $07e48e70fcf53a6e$var$_addTidIfNecessary(auth, request))\n            ];\n        });\n    });\n    return $07e48e70fcf53a6e$var$_signInWithPassword.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$sendOobCode(auth, request) {\n    return $07e48e70fcf53a6e$var$_sendOobCode.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_sendOobCode() {\n    $07e48e70fcf53a6e$var$_sendOobCode = (0, $i7mVp._)(function(auth, request) {\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            return [\n                2,\n                $07e48e70fcf53a6e$var$_performApiRequest(auth, \"POST\" /* HttpMethod.POST */ , \"/v1/accounts:sendOobCode\" /* Endpoint.SEND_OOB_CODE */ , $07e48e70fcf53a6e$var$_addTidIfNecessary(auth, request))\n            ];\n        });\n    });\n    return $07e48e70fcf53a6e$var$_sendOobCode.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$sendEmailVerification$1(auth, request) {\n    return $07e48e70fcf53a6e$var$_sendEmailVerification$1.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_sendEmailVerification$1() {\n    $07e48e70fcf53a6e$var$_sendEmailVerification$1 = (0, $i7mVp._)(function(auth, request) {\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            return [\n                2,\n                $07e48e70fcf53a6e$var$sendOobCode(auth, request)\n            ];\n        });\n    });\n    return $07e48e70fcf53a6e$var$_sendEmailVerification$1.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$sendPasswordResetEmail$1(auth, request) {\n    return $07e48e70fcf53a6e$var$_sendPasswordResetEmail$1.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_sendPasswordResetEmail$1() {\n    $07e48e70fcf53a6e$var$_sendPasswordResetEmail$1 = (0, $i7mVp._)(function(auth, request) {\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            return [\n                2,\n                $07e48e70fcf53a6e$var$sendOobCode(auth, request)\n            ];\n        });\n    });\n    return $07e48e70fcf53a6e$var$_sendPasswordResetEmail$1.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$sendSignInLinkToEmail$1(auth, request) {\n    return $07e48e70fcf53a6e$var$_sendSignInLinkToEmail$1.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_sendSignInLinkToEmail$1() {\n    $07e48e70fcf53a6e$var$_sendSignInLinkToEmail$1 = (0, $i7mVp._)(function(auth, request) {\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            return [\n                2,\n                $07e48e70fcf53a6e$var$sendOobCode(auth, request)\n            ];\n        });\n    });\n    return $07e48e70fcf53a6e$var$_sendSignInLinkToEmail$1.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$verifyAndChangeEmail(auth, request) {\n    return $07e48e70fcf53a6e$var$_verifyAndChangeEmail.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_verifyAndChangeEmail() {\n    $07e48e70fcf53a6e$var$_verifyAndChangeEmail = (0, $i7mVp._)(function(auth, request) {\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            return [\n                2,\n                $07e48e70fcf53a6e$var$sendOobCode(auth, request)\n            ];\n        });\n    });\n    return $07e48e70fcf53a6e$var$_verifyAndChangeEmail.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$signInWithEmailLink$1(auth, request) {\n    return $07e48e70fcf53a6e$var$_signInWithEmailLink$1.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_signInWithEmailLink$1() {\n    $07e48e70fcf53a6e$var$_signInWithEmailLink$1 = /**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ (0, $i7mVp._)(function(auth, request) {\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            return [\n                2,\n                $07e48e70fcf53a6e$var$_performSignInRequest(auth, \"POST\" /* HttpMethod.POST */ , \"/v1/accounts:signInWithEmailLink\" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */ , $07e48e70fcf53a6e$var$_addTidIfNecessary(auth, request))\n            ];\n        });\n    });\n    return $07e48e70fcf53a6e$var$_signInWithEmailLink$1.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$signInWithEmailLinkForLinking(auth, request) {\n    return $07e48e70fcf53a6e$var$_signInWithEmailLinkForLinking.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_signInWithEmailLinkForLinking() {\n    $07e48e70fcf53a6e$var$_signInWithEmailLinkForLinking = (0, $i7mVp._)(function(auth, request) {\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            return [\n                2,\n                $07e48e70fcf53a6e$var$_performSignInRequest(auth, \"POST\" /* HttpMethod.POST */ , \"/v1/accounts:signInWithEmailLink\" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */ , $07e48e70fcf53a6e$var$_addTidIfNecessary(auth, request))\n            ];\n        });\n    });\n    return $07e48e70fcf53a6e$var$_signInWithEmailLinkForLinking.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Interface that represents the credentials returned by {@link EmailAuthProvider} for\r\n * {@link ProviderId}.PASSWORD\r\n *\r\n * @remarks\r\n * Covers both {@link SignInMethod}.EMAIL_PASSWORD and\r\n * {@link SignInMethod}.EMAIL_LINK.\r\n *\r\n * @public\r\n */ var $07e48e70fcf53a6e$export$3466f893ebf79586 = /*#__PURE__*/ function(AuthCredential) {\n    \"use strict\";\n    (0, $jqfyu._)(EmailAuthCredential, AuthCredential);\n    var _super = (0, $50zho._)(EmailAuthCredential);\n    function EmailAuthCredential(/** @internal */ _email, /** @internal */ _password, signInMethod) {\n        var /** @internal */ _tenantId = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;\n        (0, $juqrk._)(this, EmailAuthCredential);\n        var _this;\n        _this = _super.call(this, \"password\" /* ProviderId.PASSWORD */ , signInMethod);\n        _this._email = _email;\n        _this._password = _password;\n        _this._tenantId = _tenantId;\n        return _this;\n    }\n    (0, $bNI6E._)(EmailAuthCredential, [\n        {\n            /** {@inheritdoc AuthCredential.toJSON} */ key: \"toJSON\",\n            value: function toJSON() {\n                return {\n                    email: this._email,\n                    password: this._password,\n                    signInMethod: this.signInMethod,\n                    tenantId: this._tenantId\n                };\n            }\n        },\n        {\n            key: \"_getIdTokenResponse\",\n            value: /** @internal */ function _getIdTokenResponse(auth) {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var _a, _, request, requestWithRecaptcha;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                _ = _this.signInMethod;\n                                switch(_){\n                                    case \"password\" /* SignInMethod.EMAIL_PASSWORD */ :\n                                        return [\n                                            3,\n                                            1\n                                        ];\n                                    case \"emailLink\" /* SignInMethod.EMAIL_LINK */ :\n                                        return [\n                                            3,\n                                            4\n                                        ];\n                                }\n                                return [\n                                    3,\n                                    5\n                                ];\n                            case 1:\n                                request = {\n                                    returnSecureToken: true,\n                                    email: _this._email,\n                                    password: _this._password,\n                                    clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */ \n                                };\n                                if (!((_a = auth._getRecaptchaConfig()) === null || _a === void 0 ? void 0 : _a.emailPasswordEnabled)) return [\n                                    3,\n                                    3\n                                ];\n                                return [\n                                    4,\n                                    $07e48e70fcf53a6e$var$injectRecaptchaFields(auth, request, \"signInWithPassword\" /* RecaptchaActionName.SIGN_IN_WITH_PASSWORD */ )\n                                ];\n                            case 2:\n                                requestWithRecaptcha = _state.sent();\n                                return [\n                                    2,\n                                    $07e48e70fcf53a6e$var$signInWithPassword(auth, requestWithRecaptcha)\n                                ];\n                            case 3:\n                                return [\n                                    2,\n                                    $07e48e70fcf53a6e$var$signInWithPassword(auth, request).catch(function() {\n                                        var _ref = (0, $i7mVp._)(function(error) {\n                                            var requestWithRecaptcha;\n                                            return (0, $4tSb9.__generator)(this, function(_state) {\n                                                switch(_state.label){\n                                                    case 0:\n                                                        if (!(error.code === \"auth/missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */ )) return [\n                                                            3,\n                                                            2\n                                                        ];\n                                                        console.log(\"Sign-in with email address and password is protected by reCAPTCHA for this project. Automatically triggering the reCAPTCHA flow and restarting the sign-in flow.\");\n                                                        return [\n                                                            4,\n                                                            $07e48e70fcf53a6e$var$injectRecaptchaFields(auth, request, \"signInWithPassword\" /* RecaptchaActionName.SIGN_IN_WITH_PASSWORD */ )\n                                                        ];\n                                                    case 1:\n                                                        requestWithRecaptcha = _state.sent();\n                                                        return [\n                                                            2,\n                                                            $07e48e70fcf53a6e$var$signInWithPassword(auth, requestWithRecaptcha)\n                                                        ];\n                                                    case 2:\n                                                        return [\n                                                            2,\n                                                            Promise.reject(error)\n                                                        ];\n                                                    case 3:\n                                                        return [\n                                                            2\n                                                        ];\n                                                }\n                                            });\n                                        });\n                                        return function(error) {\n                                            return _ref.apply(this, arguments);\n                                        };\n                                    }())\n                                ];\n                            case 4:\n                                return [\n                                    2,\n                                    $07e48e70fcf53a6e$var$signInWithEmailLink$1(auth, {\n                                        email: _this._email,\n                                        oobCode: _this._password\n                                    })\n                                ];\n                            case 5:\n                                $07e48e70fcf53a6e$export$d66dc83d8cfc8dd(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n                                _state.label = 6;\n                            case 6:\n                                return [\n                                    2\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"_linkToIdToken\",\n            value: /** @internal */ function _linkToIdToken(auth, idToken) {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_this.signInMethod){\n                            case \"password\" /* SignInMethod.EMAIL_PASSWORD */ :\n                                return [\n                                    2,\n                                    $07e48e70fcf53a6e$var$updateEmailPassword(auth, {\n                                        idToken: idToken,\n                                        returnSecureToken: true,\n                                        email: _this._email,\n                                        password: _this._password\n                                    })\n                                ];\n                            case \"emailLink\" /* SignInMethod.EMAIL_LINK */ :\n                                return [\n                                    2,\n                                    $07e48e70fcf53a6e$var$signInWithEmailLinkForLinking(auth, {\n                                        idToken: idToken,\n                                        email: _this._email,\n                                        oobCode: _this._password\n                                    })\n                                ];\n                            default:\n                                $07e48e70fcf53a6e$export$d66dc83d8cfc8dd(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n                        }\n                        return [\n                            2\n                        ];\n                    });\n                })();\n            }\n        },\n        {\n            /** @internal */ key: \"_getReauthenticationResolver\",\n            value: function _getReauthenticationResolver(auth) {\n                return this._getIdTokenResponse(auth);\n            }\n        }\n    ], [\n        {\n            key: \"_fromEmailAndPassword\",\n            value: /** @internal */ function _fromEmailAndPassword(email, password) {\n                return new EmailAuthCredential(email, password, \"password\" /* SignInMethod.EMAIL_PASSWORD */ );\n            }\n        },\n        {\n            key: \"_fromEmailAndCode\",\n            value: /** @internal */ function _fromEmailAndCode(email, oobCode) {\n                var tenantId = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;\n                return new EmailAuthCredential(email, oobCode, \"emailLink\" /* SignInMethod.EMAIL_LINK */ , tenantId);\n            }\n        },\n        {\n            key: \"fromJSON\",\n            value: /**\r\n     * Static method to deserialize a JSON representation of an object into an {@link  AuthCredential}.\r\n     *\r\n     * @param json - Either `object` or the stringified representation of the object. When string is\r\n     * provided, `JSON.parse` would be called first.\r\n     *\r\n     * @returns If the JSON input does not represent an {@link AuthCredential}, null is returned.\r\n     */ function fromJSON(json) {\n                var obj = typeof json === \"string\" ? JSON.parse(json) : json;\n                if ((obj === null || obj === void 0 ? void 0 : obj.email) && (obj === null || obj === void 0 ? void 0 : obj.password)) {\n                    if (obj.signInMethod === \"password\" /* SignInMethod.EMAIL_PASSWORD */ ) return this._fromEmailAndPassword(obj.email, obj.password);\n                    else if (obj.signInMethod === \"emailLink\" /* SignInMethod.EMAIL_LINK */ ) return this._fromEmailAndCode(obj.email, obj.password, obj.tenantId);\n                }\n                return null;\n            }\n        }\n    ]);\n    return EmailAuthCredential;\n}($07e48e70fcf53a6e$export$b4171a6734a65d42);\nfunction $07e48e70fcf53a6e$var$signInWithIdp(auth, request) {\n    return $07e48e70fcf53a6e$var$_signInWithIdp.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_signInWithIdp() {\n    $07e48e70fcf53a6e$var$_signInWithIdp = /**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ (0, $i7mVp._)(function(auth, request) {\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            return [\n                2,\n                $07e48e70fcf53a6e$var$_performSignInRequest(auth, \"POST\" /* HttpMethod.POST */ , \"/v1/accounts:signInWithIdp\" /* Endpoint.SIGN_IN_WITH_IDP */ , $07e48e70fcf53a6e$var$_addTidIfNecessary(auth, request))\n            ];\n        });\n    });\n    return $07e48e70fcf53a6e$var$_signInWithIdp.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ var $07e48e70fcf53a6e$var$IDP_REQUEST_URI$1 = \"http://localhost\";\n/**\r\n * Represents the OAuth credentials returned by an {@link OAuthProvider}.\r\n *\r\n * @remarks\r\n * Implementations specify the details about each auth provider's credential requirements.\r\n *\r\n * @public\r\n */ var $07e48e70fcf53a6e$export$61196ced6d74a310 = /*#__PURE__*/ function(AuthCredential) {\n    \"use strict\";\n    (0, $jqfyu._)(OAuthCredential, AuthCredential);\n    var _super = (0, $50zho._)(OAuthCredential);\n    function OAuthCredential() {\n        (0, $juqrk._)(this, OAuthCredential);\n        var _this;\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(Array.prototype.slice.call(arguments)));\n        _this.pendingToken = null;\n        return _this;\n    }\n    (0, $bNI6E._)(OAuthCredential, [\n        {\n            /** {@inheritdoc AuthCredential.toJSON}  */ key: \"toJSON\",\n            value: function toJSON() {\n                return {\n                    idToken: this.idToken,\n                    accessToken: this.accessToken,\n                    secret: this.secret,\n                    nonce: this.nonce,\n                    pendingToken: this.pendingToken,\n                    providerId: this.providerId,\n                    signInMethod: this.signInMethod\n                };\n            }\n        },\n        {\n            /** @internal */ key: \"_getIdTokenResponse\",\n            value: function _getIdTokenResponse(auth) {\n                var request = this.buildRequest();\n                return $07e48e70fcf53a6e$var$signInWithIdp(auth, request);\n            }\n        },\n        {\n            /** @internal */ key: \"_linkToIdToken\",\n            value: function _linkToIdToken(auth, idToken) {\n                var request = this.buildRequest();\n                request.idToken = idToken;\n                return $07e48e70fcf53a6e$var$signInWithIdp(auth, request);\n            }\n        },\n        {\n            /** @internal */ key: \"_getReauthenticationResolver\",\n            value: function _getReauthenticationResolver(auth) {\n                var request = this.buildRequest();\n                request.autoCreate = false;\n                return $07e48e70fcf53a6e$var$signInWithIdp(auth, request);\n            }\n        },\n        {\n            key: \"buildRequest\",\n            value: function buildRequest() {\n                var request = {\n                    requestUri: $07e48e70fcf53a6e$var$IDP_REQUEST_URI$1,\n                    returnSecureToken: true\n                };\n                if (this.pendingToken) request.pendingToken = this.pendingToken;\n                else {\n                    var postBody = {};\n                    if (this.idToken) postBody[\"id_token\"] = this.idToken;\n                    if (this.accessToken) postBody[\"access_token\"] = this.accessToken;\n                    if (this.secret) postBody[\"oauth_token_secret\"] = this.secret;\n                    postBody[\"providerId\"] = this.providerId;\n                    if (this.nonce && !this.pendingToken) postBody[\"nonce\"] = this.nonce;\n                    request.postBody = (0, $1d9d263a787f8021$export$ac4103b836844853)(postBody);\n                }\n                return request;\n            }\n        }\n    ], [\n        {\n            key: \"_fromParams\",\n            value: /** @internal */ function _fromParams(params) {\n                var cred = new OAuthCredential(params.providerId, params.signInMethod);\n                if (params.idToken || params.accessToken) {\n                    // OAuth 2 and either ID token or access token.\n                    if (params.idToken) cred.idToken = params.idToken;\n                    if (params.accessToken) cred.accessToken = params.accessToken;\n                    // Add nonce if available and no pendingToken is present.\n                    if (params.nonce && !params.pendingToken) cred.nonce = params.nonce;\n                    if (params.pendingToken) cred.pendingToken = params.pendingToken;\n                } else if (params.oauthToken && params.oauthTokenSecret) {\n                    // OAuth 1 and OAuth token with token secret\n                    cred.accessToken = params.oauthToken;\n                    cred.secret = params.oauthTokenSecret;\n                } else $07e48e70fcf53a6e$export$d66dc83d8cfc8dd(\"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */ );\n                return cred;\n            }\n        },\n        {\n            key: \"fromJSON\",\n            value: /**\r\n     * Static method to deserialize a JSON representation of an object into an\r\n     * {@link  AuthCredential}.\r\n     *\r\n     * @param json - Input can be either Object or the stringified representation of the object.\r\n     * When string is provided, JSON.parse would be called first.\r\n     *\r\n     * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\r\n     */ function fromJSON(json) {\n                var obj = typeof json === \"string\" ? JSON.parse(json) : json;\n                var providerId = obj.providerId, signInMethod = obj.signInMethod, rest = (0, $4tSb9.__rest)(obj, [\n                    \"providerId\",\n                    \"signInMethod\"\n                ]);\n                if (!providerId || !signInMethod) return null;\n                var cred = new OAuthCredential(providerId, signInMethod);\n                cred.idToken = rest.idToken || undefined;\n                cred.accessToken = rest.accessToken || undefined;\n                cred.secret = rest.secret;\n                cred.nonce = rest.nonce;\n                cred.pendingToken = rest.pendingToken || null;\n                return cred;\n            }\n        }\n    ]);\n    return OAuthCredential;\n}($07e48e70fcf53a6e$export$b4171a6734a65d42);\nfunction $07e48e70fcf53a6e$var$sendPhoneVerificationCode(auth, request) {\n    return $07e48e70fcf53a6e$var$_sendPhoneVerificationCode.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_sendPhoneVerificationCode() {\n    $07e48e70fcf53a6e$var$_sendPhoneVerificationCode = /**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ (0, $i7mVp._)(function(auth, request) {\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            return [\n                2,\n                $07e48e70fcf53a6e$var$_performApiRequest(auth, \"POST\" /* HttpMethod.POST */ , \"/v1/accounts:sendVerificationCode\" /* Endpoint.SEND_VERIFICATION_CODE */ , $07e48e70fcf53a6e$var$_addTidIfNecessary(auth, request))\n            ];\n        });\n    });\n    return $07e48e70fcf53a6e$var$_sendPhoneVerificationCode.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$signInWithPhoneNumber$1(auth, request) {\n    return $07e48e70fcf53a6e$var$_signInWithPhoneNumber$1.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_signInWithPhoneNumber$1() {\n    $07e48e70fcf53a6e$var$_signInWithPhoneNumber$1 = (0, $i7mVp._)(function(auth, request) {\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            return [\n                2,\n                $07e48e70fcf53a6e$var$_performSignInRequest(auth, \"POST\" /* HttpMethod.POST */ , \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */ , $07e48e70fcf53a6e$var$_addTidIfNecessary(auth, request))\n            ];\n        });\n    });\n    return $07e48e70fcf53a6e$var$_signInWithPhoneNumber$1.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$linkWithPhoneNumber$1(auth, request) {\n    return $07e48e70fcf53a6e$var$_linkWithPhoneNumber$1.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_linkWithPhoneNumber$1() {\n    $07e48e70fcf53a6e$var$_linkWithPhoneNumber$1 = (0, $i7mVp._)(function(auth, request) {\n        var response;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$_performSignInRequest(auth, \"POST\" /* HttpMethod.POST */ , \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */ , $07e48e70fcf53a6e$var$_addTidIfNecessary(auth, request))\n                    ];\n                case 1:\n                    response = _state.sent();\n                    if (response.temporaryProof) throw $07e48e70fcf53a6e$var$_makeTaggedError(auth, \"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */ , response);\n                    return [\n                        2,\n                        response\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$_linkWithPhoneNumber$1.apply(this, arguments);\n}\nvar $07e48e70fcf53a6e$var$VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_ = (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)({}, \"USER_NOT_FOUND\" /* ServerError.USER_NOT_FOUND */ , \"user-not-found\" /* AuthErrorCode.USER_DELETED */ );\nfunction $07e48e70fcf53a6e$var$verifyPhoneNumberForExisting(auth, request) {\n    return $07e48e70fcf53a6e$var$_verifyPhoneNumberForExisting.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_verifyPhoneNumberForExisting() {\n    $07e48e70fcf53a6e$var$_verifyPhoneNumberForExisting = (0, $i7mVp._)(function(auth, request) {\n        var apiRequest;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            apiRequest = Object.assign(Object.assign({}, request), {\n                operation: \"REAUTH\"\n            });\n            return [\n                2,\n                $07e48e70fcf53a6e$var$_performSignInRequest(auth, \"POST\" /* HttpMethod.POST */ , \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */ , $07e48e70fcf53a6e$var$_addTidIfNecessary(auth, apiRequest), $07e48e70fcf53a6e$var$VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_)\n            ];\n        });\n    });\n    return $07e48e70fcf53a6e$var$_verifyPhoneNumberForExisting.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Represents the credentials returned by {@link PhoneAuthProvider}.\r\n *\r\n * @public\r\n */ var $07e48e70fcf53a6e$export$3a1a48c8f6ef640e = /*#__PURE__*/ function(AuthCredential) {\n    \"use strict\";\n    (0, $jqfyu._)(PhoneAuthCredential, AuthCredential);\n    var _super = (0, $50zho._)(PhoneAuthCredential);\n    function PhoneAuthCredential(params) {\n        (0, $juqrk._)(this, PhoneAuthCredential);\n        var _this;\n        _this = _super.call(this, \"phone\" /* ProviderId.PHONE */ , \"phone\" /* SignInMethod.PHONE */ );\n        _this.params = params;\n        return _this;\n    }\n    (0, $bNI6E._)(PhoneAuthCredential, [\n        {\n            /** @internal */ key: \"_getIdTokenResponse\",\n            value: function _getIdTokenResponse(auth) {\n                return $07e48e70fcf53a6e$var$signInWithPhoneNumber$1(auth, this._makeVerificationRequest());\n            }\n        },\n        {\n            /** @internal */ key: \"_linkToIdToken\",\n            value: function _linkToIdToken(auth, idToken) {\n                return $07e48e70fcf53a6e$var$linkWithPhoneNumber$1(auth, Object.assign({\n                    idToken: idToken\n                }, this._makeVerificationRequest()));\n            }\n        },\n        {\n            /** @internal */ key: \"_getReauthenticationResolver\",\n            value: function _getReauthenticationResolver(auth) {\n                return $07e48e70fcf53a6e$var$verifyPhoneNumberForExisting(auth, this._makeVerificationRequest());\n            }\n        },\n        {\n            /** @internal */ key: \"_makeVerificationRequest\",\n            value: function _makeVerificationRequest() {\n                var _this_params = this.params, temporaryProof = _this_params.temporaryProof, phoneNumber = _this_params.phoneNumber, verificationId = _this_params.verificationId, verificationCode = _this_params.verificationCode;\n                if (temporaryProof && phoneNumber) return {\n                    temporaryProof: temporaryProof,\n                    phoneNumber: phoneNumber\n                };\n                return {\n                    sessionInfo: verificationId,\n                    code: verificationCode\n                };\n            }\n        },\n        {\n            /** {@inheritdoc AuthCredential.toJSON} */ key: \"toJSON\",\n            value: function toJSON() {\n                var obj = {\n                    providerId: this.providerId\n                };\n                if (this.params.phoneNumber) obj.phoneNumber = this.params.phoneNumber;\n                if (this.params.temporaryProof) obj.temporaryProof = this.params.temporaryProof;\n                if (this.params.verificationCode) obj.verificationCode = this.params.verificationCode;\n                if (this.params.verificationId) obj.verificationId = this.params.verificationId;\n                return obj;\n            }\n        }\n    ], [\n        {\n            key: \"_fromVerification\",\n            value: /** @internal */ function _fromVerification(verificationId, verificationCode) {\n                return new PhoneAuthCredential({\n                    verificationId: verificationId,\n                    verificationCode: verificationCode\n                });\n            }\n        },\n        {\n            key: \"_fromTokenResponse\",\n            value: /** @internal */ function _fromTokenResponse(phoneNumber, temporaryProof) {\n                return new PhoneAuthCredential({\n                    phoneNumber: phoneNumber,\n                    temporaryProof: temporaryProof\n                });\n            }\n        },\n        {\n            key: \"fromJSON\",\n            value: /** Generates a phone credential based on a plain object or a JSON string. */ function fromJSON(json) {\n                if (typeof json === \"string\") json = JSON.parse(json);\n                var verificationId = json.verificationId, verificationCode = json.verificationCode, phoneNumber = json.phoneNumber, temporaryProof = json.temporaryProof;\n                if (!verificationCode && !verificationId && !phoneNumber && !temporaryProof) return null;\n                return new PhoneAuthCredential({\n                    verificationId: verificationId,\n                    verificationCode: verificationCode,\n                    phoneNumber: phoneNumber,\n                    temporaryProof: temporaryProof\n                });\n            }\n        }\n    ]);\n    return PhoneAuthCredential;\n}($07e48e70fcf53a6e$export$b4171a6734a65d42);\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Maps the mode string in action code URL to Action Code Info operation.\r\n *\r\n * @param mode\r\n */ function $07e48e70fcf53a6e$var$parseMode(mode) {\n    switch(mode){\n        case \"recoverEmail\":\n            return \"RECOVER_EMAIL\" /* ActionCodeOperation.RECOVER_EMAIL */ ;\n        case \"resetPassword\":\n            return \"PASSWORD_RESET\" /* ActionCodeOperation.PASSWORD_RESET */ ;\n        case \"signIn\":\n            return \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */ ;\n        case \"verifyEmail\":\n            return \"VERIFY_EMAIL\" /* ActionCodeOperation.VERIFY_EMAIL */ ;\n        case \"verifyAndChangeEmail\":\n            return \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */ ;\n        case \"revertSecondFactorAddition\":\n            return \"REVERT_SECOND_FACTOR_ADDITION\" /* ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION */ ;\n        default:\n            return null;\n    }\n}\n/**\r\n * Helper to parse FDL links\r\n *\r\n * @param url\r\n */ function $07e48e70fcf53a6e$var$parseDeepLink(url) {\n    var link = (0, $1d9d263a787f8021$export$c1271ca4c8a70741)((0, $1d9d263a787f8021$export$1a8408415472d8ed)(url))[\"link\"];\n    // Double link case (automatic redirect).\n    var doubleDeepLink = link ? (0, $1d9d263a787f8021$export$c1271ca4c8a70741)((0, $1d9d263a787f8021$export$1a8408415472d8ed)(link))[\"deep_link_id\"] : null;\n    // iOS custom scheme links.\n    var iOSDeepLink = (0, $1d9d263a787f8021$export$c1271ca4c8a70741)((0, $1d9d263a787f8021$export$1a8408415472d8ed)(url))[\"deep_link_id\"];\n    var iOSDoubleDeepLink = iOSDeepLink ? (0, $1d9d263a787f8021$export$c1271ca4c8a70741)((0, $1d9d263a787f8021$export$1a8408415472d8ed)(iOSDeepLink))[\"link\"] : null;\n    return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;\n}\n/**\r\n * A utility class to parse email action URLs such as password reset, email verification,\r\n * email link sign in, etc.\r\n *\r\n * @public\r\n */ var $07e48e70fcf53a6e$export$ee7c8ad385a60b7b = /*#__PURE__*/ function() {\n    \"use strict\";\n    function ActionCodeURL(actionLink) {\n        (0, $juqrk._)(this, ActionCodeURL);\n        var _a, _b, _c, _d, _e, _f;\n        var searchParams = (0, $1d9d263a787f8021$export$c1271ca4c8a70741)((0, $1d9d263a787f8021$export$1a8408415472d8ed)(actionLink));\n        var apiKey = (_a = searchParams[\"apiKey\" /* QueryField.API_KEY */ ]) !== null && _a !== void 0 ? _a : null;\n        var code = (_b = searchParams[\"oobCode\" /* QueryField.CODE */ ]) !== null && _b !== void 0 ? _b : null;\n        var operation = $07e48e70fcf53a6e$var$parseMode((_c = searchParams[\"mode\" /* QueryField.MODE */ ]) !== null && _c !== void 0 ? _c : null);\n        // Validate API key, code and mode.\n        $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(apiKey && code && operation, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */ );\n        this.apiKey = apiKey;\n        this.operation = operation;\n        this.code = code;\n        this.continueUrl = (_d = searchParams[\"continueUrl\" /* QueryField.CONTINUE_URL */ ]) !== null && _d !== void 0 ? _d : null;\n        this.languageCode = (_e = searchParams[\"languageCode\" /* QueryField.LANGUAGE_CODE */ ]) !== null && _e !== void 0 ? _e : null;\n        this.tenantId = (_f = searchParams[\"tenantId\" /* QueryField.TENANT_ID */ ]) !== null && _f !== void 0 ? _f : null;\n    }\n    (0, $bNI6E._)(ActionCodeURL, null, [\n        {\n            key: \"parseLink\",\n            value: /**\r\n     * Parses the email action link string and returns an {@link ActionCodeURL} if the link is valid,\r\n     * otherwise returns null.\r\n     *\r\n     * @param link  - The email action link string.\r\n     * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\r\n     *\r\n     * @public\r\n     */ function parseLink(link) {\n                var actionLink = $07e48e70fcf53a6e$var$parseDeepLink(link);\n                try {\n                    return new ActionCodeURL(actionLink);\n                } catch (_a) {\n                    return null;\n                }\n            }\n        }\n    ]);\n    return ActionCodeURL;\n}();\n/**\r\n * Parses the email action link string and returns an {@link ActionCodeURL} if\r\n * the link is valid, otherwise returns null.\r\n *\r\n * @public\r\n */ function $07e48e70fcf53a6e$export$995eb9fca571757(link) {\n    return $07e48e70fcf53a6e$export$ee7c8ad385a60b7b.parseLink(link);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Provider for generating {@link EmailAuthCredential}.\r\n *\r\n * @public\r\n */ var $07e48e70fcf53a6e$export$3722cfe417b6ed86 = /*#__PURE__*/ function() {\n    \"use strict\";\n    function EmailAuthProvider() {\n        (0, $juqrk._)(this, EmailAuthProvider);\n        /**\r\n         * Always set to {@link ProviderId}.PASSWORD, even for email link.\r\n         */ this.providerId = EmailAuthProvider.PROVIDER_ID;\n    }\n    (0, $bNI6E._)(EmailAuthProvider, null, [\n        {\n            key: \"credential\",\n            value: /**\r\n     * Initialize an {@link AuthCredential} using an email and password.\r\n     *\r\n     * @example\r\n     * ```javascript\r\n     * const authCredential = EmailAuthProvider.credential(email, password);\r\n     * const userCredential = await signInWithCredential(auth, authCredential);\r\n     * ```\r\n     *\r\n     * @example\r\n     * ```javascript\r\n     * const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n     * ```\r\n     *\r\n     * @param email - Email address.\r\n     * @param password - User account password.\r\n     * @returns The auth provider credential.\r\n     */ function credential(email, password) {\n                return $07e48e70fcf53a6e$export$3466f893ebf79586._fromEmailAndPassword(email, password);\n            }\n        },\n        {\n            key: \"credentialWithLink\",\n            value: /**\r\n     * Initialize an {@link AuthCredential} using an email and an email link after a sign in with\r\n     * email link operation.\r\n     *\r\n     * @example\r\n     * ```javascript\r\n     * const authCredential = EmailAuthProvider.credentialWithLink(auth, email, emailLink);\r\n     * const userCredential = await signInWithCredential(auth, authCredential);\r\n     * ```\r\n     *\r\n     * @example\r\n     * ```javascript\r\n     * await sendSignInLinkToEmail(auth, email);\r\n     * // Obtain emailLink from user.\r\n     * const userCredential = await signInWithEmailLink(auth, email, emailLink);\r\n     * ```\r\n     *\r\n     * @param auth - The {@link Auth} instance used to verify the link.\r\n     * @param email - Email address.\r\n     * @param emailLink - Sign-in email link.\r\n     * @returns - The auth provider credential.\r\n     */ function credentialWithLink(email, emailLink) {\n                var actionCodeUrl = $07e48e70fcf53a6e$export$ee7c8ad385a60b7b.parseLink(emailLink);\n                $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(actionCodeUrl, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */ );\n                return $07e48e70fcf53a6e$export$3466f893ebf79586._fromEmailAndCode(email, actionCodeUrl.code, actionCodeUrl.tenantId);\n            }\n        }\n    ]);\n    return EmailAuthProvider;\n}();\n/**\r\n * Always set to {@link ProviderId}.PASSWORD, even for email link.\r\n */ $07e48e70fcf53a6e$export$3722cfe417b6ed86.PROVIDER_ID = \"password\" /* ProviderId.PASSWORD */ ;\n/**\r\n * Always set to {@link SignInMethod}.EMAIL_PASSWORD.\r\n */ $07e48e70fcf53a6e$export$3722cfe417b6ed86.EMAIL_PASSWORD_SIGN_IN_METHOD = \"password\" /* SignInMethod.EMAIL_PASSWORD */ ;\n/**\r\n * Always set to {@link SignInMethod}.EMAIL_LINK.\r\n */ $07e48e70fcf53a6e$export$3722cfe417b6ed86.EMAIL_LINK_SIGN_IN_METHOD = \"emailLink\" /* SignInMethod.EMAIL_LINK */ ;\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * The base class for all Federated providers (OAuth (including OIDC), SAML).\r\n *\r\n * This class is not meant to be instantiated directly.\r\n *\r\n * @public\r\n */ var $07e48e70fcf53a6e$var$FederatedAuthProvider = /*#__PURE__*/ function() {\n    \"use strict\";\n    function FederatedAuthProvider(providerId) {\n        (0, $juqrk._)(this, FederatedAuthProvider);\n        this.providerId = providerId;\n        /** @internal */ this.defaultLanguageCode = null;\n        /** @internal */ this.customParameters = {};\n    }\n    (0, $bNI6E._)(FederatedAuthProvider, [\n        {\n            /**\r\n     * Set the language gode.\r\n     *\r\n     * @param languageCode - language code\r\n     */ key: \"setDefaultLanguage\",\n            value: function setDefaultLanguage(languageCode) {\n                this.defaultLanguageCode = languageCode;\n            }\n        },\n        {\n            /**\r\n     * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in\r\n     * operations.\r\n     *\r\n     * @remarks\r\n     * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,\r\n     * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.\r\n     *\r\n     * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.\r\n     */ key: \"setCustomParameters\",\n            value: function setCustomParameters(customOAuthParameters) {\n                this.customParameters = customOAuthParameters;\n                return this;\n            }\n        },\n        {\n            /**\r\n     * Retrieve the current list of {@link CustomParameters}.\r\n     */ key: \"getCustomParameters\",\n            value: function getCustomParameters() {\n                return this.customParameters;\n            }\n        }\n    ]);\n    return FederatedAuthProvider;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Common code to all OAuth providers. This is separate from the\r\n * {@link OAuthProvider} so that child providers (like\r\n * {@link GoogleAuthProvider}) don't inherit the `credential` instance method.\r\n * Instead, they rely on a static `credential` method.\r\n */ var $07e48e70fcf53a6e$var$BaseOAuthProvider = /*#__PURE__*/ function(FederatedAuthProvider) {\n    \"use strict\";\n    (0, $jqfyu._)(BaseOAuthProvider, FederatedAuthProvider);\n    var _super = (0, $50zho._)(BaseOAuthProvider);\n    function BaseOAuthProvider() {\n        (0, $juqrk._)(this, BaseOAuthProvider);\n        var _this;\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(Array.prototype.slice.call(arguments)));\n        /** @internal */ _this.scopes = [];\n        return _this;\n    }\n    (0, $bNI6E._)(BaseOAuthProvider, [\n        {\n            /**\r\n     * Add an OAuth scope to the credential.\r\n     *\r\n     * @param scope - Provider OAuth scope to add.\r\n     */ key: \"addScope\",\n            value: function addScope(scope) {\n                // If not already added, add scope to list.\n                if (!this.scopes.includes(scope)) this.scopes.push(scope);\n                return this;\n            }\n        },\n        {\n            /**\r\n     * Retrieve the current list of OAuth scopes.\r\n     */ key: \"getScopes\",\n            value: function getScopes() {\n                return (0, $aYXpI._)(this.scopes);\n            }\n        }\n    ]);\n    return BaseOAuthProvider;\n}($07e48e70fcf53a6e$var$FederatedAuthProvider);\n/**\r\n * Provider for generating generic {@link OAuthCredential}.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new OAuthProvider('google.com');\r\n * // Start a sign in process for an unauthenticated user.\r\n * provider.addScope('profile');\r\n * provider.addScope('email');\r\n * await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * if (result) {\r\n *   // This is the signed-in user\r\n *   const user = result.user;\r\n *   // This gives you a OAuth Access Token for the provider.\r\n *   const credential = provider.credentialFromResult(auth, result);\r\n *   const token = credential.accessToken;\r\n * }\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a popup.\r\n * const provider = new OAuthProvider('google.com');\r\n * provider.addScope('profile');\r\n * provider.addScope('email');\r\n * const result = await signInWithPopup(auth, provider);\r\n *\r\n * // The signed-in user info.\r\n * const user = result.user;\r\n * // This gives you a OAuth Access Token for the provider.\r\n * const credential = provider.credentialFromResult(auth, result);\r\n * const token = credential.accessToken;\r\n * ```\r\n * @public\r\n */ var $07e48e70fcf53a6e$export$78acf4525d8a74c4 = /*#__PURE__*/ function(BaseOAuthProvider) {\n    \"use strict\";\n    (0, $jqfyu._)(OAuthProvider, BaseOAuthProvider);\n    var _super = (0, $50zho._)(OAuthProvider);\n    function OAuthProvider() {\n        (0, $juqrk._)(this, OAuthProvider);\n        return _super.apply(this, arguments);\n    }\n    (0, $bNI6E._)(OAuthProvider, [\n        {\n            /**\r\n     * Creates a {@link OAuthCredential} from a generic OAuth provider's access token or ID token.\r\n     *\r\n     * @remarks\r\n     * The raw nonce is required when an ID token with a nonce field is provided. The SHA-256 hash of\r\n     * the raw nonce must match the nonce field in the ID token.\r\n     *\r\n     * @example\r\n     * ```javascript\r\n     * // `googleUser` from the onsuccess Google Sign In callback.\r\n     * // Initialize a generate OAuth provider with a `google.com` providerId.\r\n     * const provider = new OAuthProvider('google.com');\r\n     * const credential = provider.credential({\r\n     *   idToken: googleUser.getAuthResponse().id_token,\r\n     * });\r\n     * const result = await signInWithCredential(credential);\r\n     * ```\r\n     *\r\n     * @param params - Either the options object containing the ID token, access token and raw nonce\r\n     * or the ID token string.\r\n     */ key: \"credential\",\n            value: function credential(params) {\n                return this._credential(Object.assign(Object.assign({}, params), {\n                    nonce: params.rawNonce\n                }));\n            }\n        },\n        {\n            /** An internal credential method that accepts more permissive options */ key: \"_credential\",\n            value: function _credential(params) {\n                $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(params.idToken || params.accessToken, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */ );\n                // For OAuthCredential, sign in method is same as providerId.\n                return $07e48e70fcf53a6e$export$61196ced6d74a310._fromParams(Object.assign(Object.assign({}, params), {\n                    providerId: this.providerId,\n                    signInMethod: this.providerId\n                }));\n            }\n        }\n    ], [\n        {\n            key: \"credentialFromJSON\",\n            value: /**\r\n     * Creates an {@link OAuthCredential} from a JSON string or a plain object.\r\n     * @param json - A plain object or a JSON string\r\n     */ function credentialFromJSON(json) {\n                var obj = typeof json === \"string\" ? JSON.parse(json) : json;\n                $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(\"providerId\" in obj && \"signInMethod\" in obj, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */ );\n                return $07e48e70fcf53a6e$export$61196ced6d74a310._fromParams(obj);\n            }\n        },\n        {\n            key: \"credentialFromResult\",\n            value: /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */ function credentialFromResult(userCredential) {\n                return OAuthProvider.oauthCredentialFromTaggedObject(userCredential);\n            }\n        },\n        {\n            key: \"credentialFromError\",\n            value: /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\r\n     * thrown during a sign-in, link, or reauthenticate operation.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */ function credentialFromError(error) {\n                return OAuthProvider.oauthCredentialFromTaggedObject(error.customData || {});\n            }\n        },\n        {\n            key: \"oauthCredentialFromTaggedObject\",\n            value: function oauthCredentialFromTaggedObject(param) {\n                var tokenResponse = param._tokenResponse;\n                if (!tokenResponse) return null;\n                var oauthIdToken = tokenResponse.oauthIdToken, oauthAccessToken = tokenResponse.oauthAccessToken, oauthTokenSecret = tokenResponse.oauthTokenSecret, pendingToken = tokenResponse.pendingToken, nonce = tokenResponse.nonce, providerId = tokenResponse.providerId;\n                if (!oauthAccessToken && !oauthTokenSecret && !oauthIdToken && !pendingToken) return null;\n                if (!providerId) return null;\n                try {\n                    return new OAuthProvider(providerId)._credential({\n                        idToken: oauthIdToken,\n                        accessToken: oauthAccessToken,\n                        nonce: nonce,\n                        pendingToken: pendingToken\n                    });\n                } catch (e) {\n                    return null;\n                }\n            }\n        }\n    ]);\n    return OAuthProvider;\n}($07e48e70fcf53a6e$var$BaseOAuthProvider);\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.FACEBOOK.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new FacebookAuthProvider();\r\n * // Start a sign in process for an unauthenticated user.\r\n * provider.addScope('user_birthday');\r\n * await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * if (result) {\r\n *   // This is the signed-in user\r\n *   const user = result.user;\r\n *   // This gives you a Facebook Access Token.\r\n *   const credential = FacebookAuthProvider.credentialFromResult(result);\r\n *   const token = credential.accessToken;\r\n * }\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a popup.\r\n * const provider = new FacebookAuthProvider();\r\n * provider.addScope('user_birthday');\r\n * const result = await signInWithPopup(auth, provider);\r\n *\r\n * // The signed-in user info.\r\n * const user = result.user;\r\n * // This gives you a Facebook Access Token.\r\n * const credential = FacebookAuthProvider.credentialFromResult(result);\r\n * const token = credential.accessToken;\r\n * ```\r\n *\r\n * @public\r\n */ var $07e48e70fcf53a6e$export$3a6d5c9ae78a2c08 = /*#__PURE__*/ function(BaseOAuthProvider) {\n    \"use strict\";\n    (0, $jqfyu._)(FacebookAuthProvider, BaseOAuthProvider);\n    var _super = (0, $50zho._)(FacebookAuthProvider);\n    function FacebookAuthProvider() {\n        (0, $juqrk._)(this, FacebookAuthProvider);\n        return _super.call(this, \"facebook.com\" /* ProviderId.FACEBOOK */ );\n    }\n    (0, $bNI6E._)(FacebookAuthProvider, null, [\n        {\n            key: \"credential\",\n            value: /**\r\n     * Creates a credential for Facebook.\r\n     *\r\n     * @example\r\n     * ```javascript\r\n     * // `event` from the Facebook auth.authResponseChange callback.\r\n     * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);\r\n     * const result = await signInWithCredential(credential);\r\n     * ```\r\n     *\r\n     * @param accessToken - Facebook access token.\r\n     */ function credential(accessToken) {\n                return $07e48e70fcf53a6e$export$61196ced6d74a310._fromParams({\n                    providerId: FacebookAuthProvider.PROVIDER_ID,\n                    signInMethod: FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD,\n                    accessToken: accessToken\n                });\n            }\n        },\n        {\n            key: \"credentialFromResult\",\n            value: /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */ function credentialFromResult(userCredential) {\n                return FacebookAuthProvider.credentialFromTaggedObject(userCredential);\n            }\n        },\n        {\n            key: \"credentialFromError\",\n            value: /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\r\n     * thrown during a sign-in, link, or reauthenticate operation.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */ function credentialFromError(error) {\n                return FacebookAuthProvider.credentialFromTaggedObject(error.customData || {});\n            }\n        },\n        {\n            key: \"credentialFromTaggedObject\",\n            value: function credentialFromTaggedObject(param) {\n                var tokenResponse = param._tokenResponse;\n                if (!tokenResponse || !(\"oauthAccessToken\" in tokenResponse)) return null;\n                if (!tokenResponse.oauthAccessToken) return null;\n                try {\n                    return FacebookAuthProvider.credential(tokenResponse.oauthAccessToken);\n                } catch (_a) {\n                    return null;\n                }\n            }\n        }\n    ]);\n    return FacebookAuthProvider;\n}($07e48e70fcf53a6e$var$BaseOAuthProvider);\n/** Always set to {@link SignInMethod}.FACEBOOK. */ $07e48e70fcf53a6e$export$3a6d5c9ae78a2c08.FACEBOOK_SIGN_IN_METHOD = \"facebook.com\" /* SignInMethod.FACEBOOK */ ;\n/** Always set to {@link ProviderId}.FACEBOOK. */ $07e48e70fcf53a6e$export$3a6d5c9ae78a2c08.PROVIDER_ID = \"facebook.com\" /* ProviderId.FACEBOOK */ ;\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Provider for generating an an {@link OAuthCredential} for {@link ProviderId}.GOOGLE.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new GoogleAuthProvider();\r\n * // Start a sign in process for an unauthenticated user.\r\n * provider.addScope('profile');\r\n * provider.addScope('email');\r\n * await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * if (result) {\r\n *   // This is the signed-in user\r\n *   const user = result.user;\r\n *   // This gives you a Google Access Token.\r\n *   const credential = GoogleAuthProvider.credentialFromResult(result);\r\n *   const token = credential.accessToken;\r\n * }\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a popup.\r\n * const provider = new GoogleAuthProvider();\r\n * provider.addScope('profile');\r\n * provider.addScope('email');\r\n * const result = await signInWithPopup(auth, provider);\r\n *\r\n * // The signed-in user info.\r\n * const user = result.user;\r\n * // This gives you a Google Access Token.\r\n * const credential = GoogleAuthProvider.credentialFromResult(result);\r\n * const token = credential.accessToken;\r\n * ```\r\n *\r\n * @public\r\n */ var $07e48e70fcf53a6e$export$e7c866399fa523f5 = /*#__PURE__*/ function(BaseOAuthProvider) {\n    \"use strict\";\n    (0, $jqfyu._)(GoogleAuthProvider, BaseOAuthProvider);\n    var _super = (0, $50zho._)(GoogleAuthProvider);\n    function GoogleAuthProvider() {\n        (0, $juqrk._)(this, GoogleAuthProvider);\n        var _this;\n        _this = _super.call(this, \"google.com\" /* ProviderId.GOOGLE */ );\n        _this.addScope(\"profile\");\n        return _this;\n    }\n    (0, $bNI6E._)(GoogleAuthProvider, null, [\n        {\n            key: \"credential\",\n            value: /**\r\n     * Creates a credential for Google. At least one of ID token and access token is required.\r\n     *\r\n     * @example\r\n     * ```javascript\r\n     * // \\`googleUser\\` from the onsuccess Google Sign In callback.\r\n     * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);\r\n     * const result = await signInWithCredential(credential);\r\n     * ```\r\n     *\r\n     * @param idToken - Google ID token.\r\n     * @param accessToken - Google access token.\r\n     */ function credential(idToken, accessToken) {\n                return $07e48e70fcf53a6e$export$61196ced6d74a310._fromParams({\n                    providerId: GoogleAuthProvider.PROVIDER_ID,\n                    signInMethod: GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD,\n                    idToken: idToken,\n                    accessToken: accessToken\n                });\n            }\n        },\n        {\n            key: \"credentialFromResult\",\n            value: /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */ function credentialFromResult(userCredential) {\n                return GoogleAuthProvider.credentialFromTaggedObject(userCredential);\n            }\n        },\n        {\n            key: \"credentialFromError\",\n            value: /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\r\n     * thrown during a sign-in, link, or reauthenticate operation.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */ function credentialFromError(error) {\n                return GoogleAuthProvider.credentialFromTaggedObject(error.customData || {});\n            }\n        },\n        {\n            key: \"credentialFromTaggedObject\",\n            value: function credentialFromTaggedObject(param) {\n                var tokenResponse = param._tokenResponse;\n                if (!tokenResponse) return null;\n                var oauthIdToken = tokenResponse.oauthIdToken, oauthAccessToken = tokenResponse.oauthAccessToken;\n                if (!oauthIdToken && !oauthAccessToken) // This could be an oauth 1 credential or a phone credential\n                return null;\n                try {\n                    return GoogleAuthProvider.credential(oauthIdToken, oauthAccessToken);\n                } catch (_a) {\n                    return null;\n                }\n            }\n        }\n    ]);\n    return GoogleAuthProvider;\n}($07e48e70fcf53a6e$var$BaseOAuthProvider);\n/** Always set to {@link SignInMethod}.GOOGLE. */ $07e48e70fcf53a6e$export$e7c866399fa523f5.GOOGLE_SIGN_IN_METHOD = \"google.com\" /* SignInMethod.GOOGLE */ ;\n/** Always set to {@link ProviderId}.GOOGLE. */ $07e48e70fcf53a6e$export$e7c866399fa523f5.PROVIDER_ID = \"google.com\" /* ProviderId.GOOGLE */ ;\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GITHUB.\r\n *\r\n * @remarks\r\n * GitHub requires an OAuth 2.0 redirect, so you can either handle the redirect directly, or use\r\n * the {@link signInWithPopup} handler:\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new GithubAuthProvider();\r\n * // Start a sign in process for an unauthenticated user.\r\n * provider.addScope('repo');\r\n * await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * if (result) {\r\n *   // This is the signed-in user\r\n *   const user = result.user;\r\n *   // This gives you a Github Access Token.\r\n *   const credential = GithubAuthProvider.credentialFromResult(result);\r\n *   const token = credential.accessToken;\r\n * }\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a popup.\r\n * const provider = new GithubAuthProvider();\r\n * provider.addScope('repo');\r\n * const result = await signInWithPopup(auth, provider);\r\n *\r\n * // The signed-in user info.\r\n * const user = result.user;\r\n * // This gives you a Github Access Token.\r\n * const credential = GithubAuthProvider.credentialFromResult(result);\r\n * const token = credential.accessToken;\r\n * ```\r\n * @public\r\n */ var $07e48e70fcf53a6e$export$71cec2538cb2c617 = /*#__PURE__*/ function(BaseOAuthProvider) {\n    \"use strict\";\n    (0, $jqfyu._)(GithubAuthProvider, BaseOAuthProvider);\n    var _super = (0, $50zho._)(GithubAuthProvider);\n    function GithubAuthProvider() {\n        (0, $juqrk._)(this, GithubAuthProvider);\n        return _super.call(this, \"github.com\" /* ProviderId.GITHUB */ );\n    }\n    (0, $bNI6E._)(GithubAuthProvider, null, [\n        {\n            key: \"credential\",\n            value: /**\r\n     * Creates a credential for Github.\r\n     *\r\n     * @param accessToken - Github access token.\r\n     */ function credential(accessToken) {\n                return $07e48e70fcf53a6e$export$61196ced6d74a310._fromParams({\n                    providerId: GithubAuthProvider.PROVIDER_ID,\n                    signInMethod: GithubAuthProvider.GITHUB_SIGN_IN_METHOD,\n                    accessToken: accessToken\n                });\n            }\n        },\n        {\n            key: \"credentialFromResult\",\n            value: /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */ function credentialFromResult(userCredential) {\n                return GithubAuthProvider.credentialFromTaggedObject(userCredential);\n            }\n        },\n        {\n            key: \"credentialFromError\",\n            value: /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\r\n     * thrown during a sign-in, link, or reauthenticate operation.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */ function credentialFromError(error) {\n                return GithubAuthProvider.credentialFromTaggedObject(error.customData || {});\n            }\n        },\n        {\n            key: \"credentialFromTaggedObject\",\n            value: function credentialFromTaggedObject(param) {\n                var tokenResponse = param._tokenResponse;\n                if (!tokenResponse || !(\"oauthAccessToken\" in tokenResponse)) return null;\n                if (!tokenResponse.oauthAccessToken) return null;\n                try {\n                    return GithubAuthProvider.credential(tokenResponse.oauthAccessToken);\n                } catch (_a) {\n                    return null;\n                }\n            }\n        }\n    ]);\n    return GithubAuthProvider;\n}($07e48e70fcf53a6e$var$BaseOAuthProvider);\n/** Always set to {@link SignInMethod}.GITHUB. */ $07e48e70fcf53a6e$export$71cec2538cb2c617.GITHUB_SIGN_IN_METHOD = \"github.com\" /* SignInMethod.GITHUB */ ;\n/** Always set to {@link ProviderId}.GITHUB. */ $07e48e70fcf53a6e$export$71cec2538cb2c617.PROVIDER_ID = \"github.com\" /* ProviderId.GITHUB */ ;\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ var $07e48e70fcf53a6e$var$IDP_REQUEST_URI = \"http://localhost\";\n/**\r\n * @public\r\n */ var $07e48e70fcf53a6e$export$c03999cb2f36933f = /*#__PURE__*/ function(AuthCredential) {\n    \"use strict\";\n    (0, $jqfyu._)(SAMLAuthCredential, AuthCredential);\n    var _super = (0, $50zho._)(SAMLAuthCredential);\n    function SAMLAuthCredential(providerId, pendingToken) {\n        (0, $juqrk._)(this, SAMLAuthCredential);\n        var _this;\n        _this = _super.call(this, providerId, providerId);\n        _this.pendingToken = pendingToken;\n        return _this;\n    }\n    (0, $bNI6E._)(SAMLAuthCredential, [\n        {\n            /** @internal */ key: \"_getIdTokenResponse\",\n            value: function _getIdTokenResponse(auth) {\n                var request = this.buildRequest();\n                return $07e48e70fcf53a6e$var$signInWithIdp(auth, request);\n            }\n        },\n        {\n            /** @internal */ key: \"_linkToIdToken\",\n            value: function _linkToIdToken(auth, idToken) {\n                var request = this.buildRequest();\n                request.idToken = idToken;\n                return $07e48e70fcf53a6e$var$signInWithIdp(auth, request);\n            }\n        },\n        {\n            /** @internal */ key: \"_getReauthenticationResolver\",\n            value: function _getReauthenticationResolver(auth) {\n                var request = this.buildRequest();\n                request.autoCreate = false;\n                return $07e48e70fcf53a6e$var$signInWithIdp(auth, request);\n            }\n        },\n        {\n            /** {@inheritdoc AuthCredential.toJSON}  */ key: \"toJSON\",\n            value: function toJSON() {\n                return {\n                    signInMethod: this.signInMethod,\n                    providerId: this.providerId,\n                    pendingToken: this.pendingToken\n                };\n            }\n        },\n        {\n            key: \"buildRequest\",\n            value: function buildRequest() {\n                return {\n                    requestUri: $07e48e70fcf53a6e$var$IDP_REQUEST_URI,\n                    returnSecureToken: true,\n                    pendingToken: this.pendingToken\n                };\n            }\n        }\n    ], [\n        {\n            key: \"fromJSON\",\n            value: /**\r\n     * Static method to deserialize a JSON representation of an object into an\r\n     * {@link  AuthCredential}.\r\n     *\r\n     * @param json - Input can be either Object or the stringified representation of the object.\r\n     * When string is provided, JSON.parse would be called first.\r\n     *\r\n     * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\r\n     */ function fromJSON(json) {\n                var obj = typeof json === \"string\" ? JSON.parse(json) : json;\n                var providerId = obj.providerId, signInMethod = obj.signInMethod, pendingToken = obj.pendingToken;\n                if (!providerId || !signInMethod || !pendingToken || providerId !== signInMethod) return null;\n                return new SAMLAuthCredential(providerId, pendingToken);\n            }\n        },\n        {\n            key: \"_create\",\n            value: /**\r\n     * Helper static method to avoid exposing the constructor to end users.\r\n     *\r\n     * @internal\r\n     */ function _create(providerId, pendingToken) {\n                return new SAMLAuthCredential(providerId, pendingToken);\n            }\n        }\n    ]);\n    return SAMLAuthCredential;\n}($07e48e70fcf53a6e$export$b4171a6734a65d42);\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ var $07e48e70fcf53a6e$var$SAML_PROVIDER_PREFIX = \"saml.\";\n/**\r\n * An {@link AuthProvider} for SAML.\r\n *\r\n * @public\r\n */ var $07e48e70fcf53a6e$export$8743009a87fcb00f = /*#__PURE__*/ function(FederatedAuthProvider) {\n    \"use strict\";\n    (0, $jqfyu._)(SAMLAuthProvider, FederatedAuthProvider);\n    var _super = (0, $50zho._)(SAMLAuthProvider);\n    function SAMLAuthProvider(providerId) {\n        (0, $juqrk._)(this, SAMLAuthProvider);\n        $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(providerId.startsWith($07e48e70fcf53a6e$var$SAML_PROVIDER_PREFIX), \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */ );\n        return _super.call(this, providerId);\n    }\n    (0, $bNI6E._)(SAMLAuthProvider, null, [\n        {\n            key: \"credentialFromResult\",\n            value: /**\r\n     * Generates an {@link AuthCredential} from a {@link UserCredential} after a\r\n     * successful SAML flow completes.\r\n     *\r\n     * @remarks\r\n     *\r\n     * For example, to get an {@link AuthCredential}, you could write the\r\n     * following code:\r\n     *\r\n     * ```js\r\n     * const userCredential = await signInWithPopup(auth, samlProvider);\r\n     * const credential = SAMLAuthProvider.credentialFromResult(userCredential);\r\n     * ```\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */ function credentialFromResult(userCredential) {\n                return SAMLAuthProvider.samlCredentialFromTaggedObject(userCredential);\n            }\n        },\n        {\n            key: \"credentialFromError\",\n            value: /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\r\n     * thrown during a sign-in, link, or reauthenticate operation.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */ function credentialFromError(error) {\n                return SAMLAuthProvider.samlCredentialFromTaggedObject(error.customData || {});\n            }\n        },\n        {\n            key: \"credentialFromJSON\",\n            value: /**\r\n     * Creates an {@link AuthCredential} from a JSON string or a plain object.\r\n     * @param json - A plain object or a JSON string\r\n     */ function credentialFromJSON(json) {\n                var credential = $07e48e70fcf53a6e$export$c03999cb2f36933f.fromJSON(json);\n                $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(credential, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */ );\n                return credential;\n            }\n        },\n        {\n            key: \"samlCredentialFromTaggedObject\",\n            value: function samlCredentialFromTaggedObject(param) {\n                var tokenResponse = param._tokenResponse;\n                if (!tokenResponse) return null;\n                var pendingToken = tokenResponse.pendingToken, providerId = tokenResponse.providerId;\n                if (!pendingToken || !providerId) return null;\n                try {\n                    return $07e48e70fcf53a6e$export$c03999cb2f36933f._create(providerId, pendingToken);\n                } catch (e) {\n                    return null;\n                }\n            }\n        }\n    ]);\n    return SAMLAuthProvider;\n}($07e48e70fcf53a6e$var$FederatedAuthProvider);\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.TWITTER.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new TwitterAuthProvider();\r\n * // Start a sign in process for an unauthenticated user.\r\n * await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * if (result) {\r\n *   // This is the signed-in user\r\n *   const user = result.user;\r\n *   // This gives you a Twitter Access Token and Secret.\r\n *   const credential = TwitterAuthProvider.credentialFromResult(result);\r\n *   const token = credential.accessToken;\r\n *   const secret = credential.secret;\r\n * }\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a popup.\r\n * const provider = new TwitterAuthProvider();\r\n * const result = await signInWithPopup(auth, provider);\r\n *\r\n * // The signed-in user info.\r\n * const user = result.user;\r\n * // This gives you a Twitter Access Token and Secret.\r\n * const credential = TwitterAuthProvider.credentialFromResult(result);\r\n * const token = credential.accessToken;\r\n * const secret = credential.secret;\r\n * ```\r\n *\r\n * @public\r\n */ var $07e48e70fcf53a6e$export$dc98b0b04f4c7758 = /*#__PURE__*/ function(BaseOAuthProvider) {\n    \"use strict\";\n    (0, $jqfyu._)(TwitterAuthProvider, BaseOAuthProvider);\n    var _super = (0, $50zho._)(TwitterAuthProvider);\n    function TwitterAuthProvider() {\n        (0, $juqrk._)(this, TwitterAuthProvider);\n        return _super.call(this, \"twitter.com\" /* ProviderId.TWITTER */ );\n    }\n    (0, $bNI6E._)(TwitterAuthProvider, null, [\n        {\n            key: \"credential\",\n            value: /**\r\n     * Creates a credential for Twitter.\r\n     *\r\n     * @param token - Twitter access token.\r\n     * @param secret - Twitter secret.\r\n     */ function credential(token, secret) {\n                return $07e48e70fcf53a6e$export$61196ced6d74a310._fromParams({\n                    providerId: TwitterAuthProvider.PROVIDER_ID,\n                    signInMethod: TwitterAuthProvider.TWITTER_SIGN_IN_METHOD,\n                    oauthToken: token,\n                    oauthTokenSecret: secret\n                });\n            }\n        },\n        {\n            key: \"credentialFromResult\",\n            value: /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */ function credentialFromResult(userCredential) {\n                return TwitterAuthProvider.credentialFromTaggedObject(userCredential);\n            }\n        },\n        {\n            key: \"credentialFromError\",\n            value: /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\r\n     * thrown during a sign-in, link, or reauthenticate operation.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */ function credentialFromError(error) {\n                return TwitterAuthProvider.credentialFromTaggedObject(error.customData || {});\n            }\n        },\n        {\n            key: \"credentialFromTaggedObject\",\n            value: function credentialFromTaggedObject(param) {\n                var tokenResponse = param._tokenResponse;\n                if (!tokenResponse) return null;\n                var oauthAccessToken = tokenResponse.oauthAccessToken, oauthTokenSecret = tokenResponse.oauthTokenSecret;\n                if (!oauthAccessToken || !oauthTokenSecret) return null;\n                try {\n                    return TwitterAuthProvider.credential(oauthAccessToken, oauthTokenSecret);\n                } catch (_a) {\n                    return null;\n                }\n            }\n        }\n    ]);\n    return TwitterAuthProvider;\n}($07e48e70fcf53a6e$var$BaseOAuthProvider);\n/** Always set to {@link SignInMethod}.TWITTER. */ $07e48e70fcf53a6e$export$dc98b0b04f4c7758.TWITTER_SIGN_IN_METHOD = \"twitter.com\" /* SignInMethod.TWITTER */ ;\n/** Always set to {@link ProviderId}.TWITTER. */ $07e48e70fcf53a6e$export$dc98b0b04f4c7758.PROVIDER_ID = \"twitter.com\" /* ProviderId.TWITTER */ ;\nfunction $07e48e70fcf53a6e$var$signUp(auth, request) {\n    return $07e48e70fcf53a6e$var$_signUp.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_signUp() {\n    $07e48e70fcf53a6e$var$_signUp = /**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ (0, $i7mVp._)(function(auth, request) {\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            return [\n                2,\n                $07e48e70fcf53a6e$var$_performSignInRequest(auth, \"POST\" /* HttpMethod.POST */ , \"/v1/accounts:signUp\" /* Endpoint.SIGN_UP */ , $07e48e70fcf53a6e$var$_addTidIfNecessary(auth, request))\n            ];\n        });\n    });\n    return $07e48e70fcf53a6e$var$_signUp.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ var $07e48e70fcf53a6e$var$UserCredentialImpl = /*#__PURE__*/ function() {\n    \"use strict\";\n    function UserCredentialImpl(params) {\n        (0, $juqrk._)(this, UserCredentialImpl);\n        this.user = params.user;\n        this.providerId = params.providerId;\n        this._tokenResponse = params._tokenResponse;\n        this.operationType = params.operationType;\n    }\n    (0, $bNI6E._)(UserCredentialImpl, null, [\n        {\n            key: \"_fromIdTokenResponse\",\n            value: function _fromIdTokenResponse(auth, operationType, idTokenResponse) {\n                var isAnonymous = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;\n                return (0, $i7mVp._)(function() {\n                    var user, providerId, userCred;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                return [\n                                    4,\n                                    $07e48e70fcf53a6e$export$b9a6b53f9be3734._fromIdTokenResponse(auth, idTokenResponse, isAnonymous)\n                                ];\n                            case 1:\n                                user = _state.sent();\n                                providerId = $07e48e70fcf53a6e$var$providerIdForResponse(idTokenResponse);\n                                userCred = new UserCredentialImpl({\n                                    user: user,\n                                    providerId: providerId,\n                                    _tokenResponse: idTokenResponse,\n                                    operationType: operationType\n                                });\n                                return [\n                                    2,\n                                    userCred\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"_forOperation\",\n            value: function _forOperation(user, operationType, response) {\n                return (0, $i7mVp._)(function() {\n                    var providerId;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                return [\n                                    4,\n                                    user._updateTokensIfNecessary(response, /* reload */ true)\n                                ];\n                            case 1:\n                                _state.sent();\n                                providerId = $07e48e70fcf53a6e$var$providerIdForResponse(response);\n                                return [\n                                    2,\n                                    new UserCredentialImpl({\n                                        user: user,\n                                        providerId: providerId,\n                                        _tokenResponse: response,\n                                        operationType: operationType\n                                    })\n                                ];\n                        }\n                    });\n                })();\n            }\n        }\n    ]);\n    return UserCredentialImpl;\n}();\nfunction $07e48e70fcf53a6e$var$providerIdForResponse(response) {\n    if (response.providerId) return response.providerId;\n    if (\"phoneNumber\" in response) return \"phone\" /* ProviderId.PHONE */ ;\n    return null;\n}\nfunction $07e48e70fcf53a6e$export$71511d61b312f219(auth) {\n    return $07e48e70fcf53a6e$var$_signInAnonymously.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_signInAnonymously() {\n    $07e48e70fcf53a6e$var$_signInAnonymously = /**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Asynchronously signs in as an anonymous user.\r\n *\r\n * @remarks\r\n * If there is already an anonymous user signed in, that user will be returned; otherwise, a\r\n * new anonymous user identity will be created and returned.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n *\r\n * @public\r\n */ (0, $i7mVp._)(function(auth) {\n        var _a, authInternal, response, userCredential;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    authInternal = $07e48e70fcf53a6e$export$a33b77bbdbb8366c(auth);\n                    return [\n                        4,\n                        authInternal._initializationPromise\n                    ];\n                case 1:\n                    _state.sent();\n                    if ((_a = authInternal.currentUser) === null || _a === void 0 ? void 0 : _a.isAnonymous) // If an anonymous user is already signed in, no need to sign them in again.\n                    return [\n                        2,\n                        new $07e48e70fcf53a6e$var$UserCredentialImpl({\n                            user: authInternal.currentUser,\n                            providerId: null,\n                            operationType: \"signIn\" /* OperationType.SIGN_IN */ \n                        })\n                    ];\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$signUp(authInternal, {\n                            returnSecureToken: true\n                        })\n                    ];\n                case 2:\n                    response = _state.sent();\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */ , response, true)\n                    ];\n                case 3:\n                    userCredential = _state.sent();\n                    return [\n                        4,\n                        authInternal._updateCurrentUser(userCredential.user)\n                    ];\n                case 4:\n                    _state.sent();\n                    return [\n                        2,\n                        userCredential\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$_signInAnonymously.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ var $07e48e70fcf53a6e$var$MultiFactorError = /*#__PURE__*/ function(FirebaseError) {\n    \"use strict\";\n    (0, $jqfyu._)(MultiFactorError, FirebaseError);\n    var _super = (0, $50zho._)(MultiFactorError);\n    function MultiFactorError(auth, error, operationType, user) {\n        (0, $juqrk._)(this, MultiFactorError);\n        var _this;\n        var _a;\n        _this = _super.call(this, error.code, error.message);\n        _this.operationType = operationType;\n        _this.user = user;\n        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        Object.setPrototypeOf((0, $cquyX._)(_this), MultiFactorError.prototype);\n        _this.customData = {\n            appName: auth.name,\n            tenantId: (_a = auth.tenantId) !== null && _a !== void 0 ? _a : undefined,\n            _serverResponse: error.customData._serverResponse,\n            operationType: operationType\n        };\n        return _this;\n    }\n    (0, $bNI6E._)(MultiFactorError, null, [\n        {\n            key: \"_fromErrorAndOperation\",\n            value: function _fromErrorAndOperation(auth, error, operationType, user) {\n                return new MultiFactorError(auth, error, operationType, user);\n            }\n        }\n    ]);\n    return MultiFactorError;\n}((0, $1d9d263a787f8021$export$dd24e9cd51226c56));\nfunction $07e48e70fcf53a6e$var$_processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user) {\n    var idTokenProvider = operationType === \"reauthenticate\" /* OperationType.REAUTHENTICATE */  ? credential._getReauthenticationResolver(auth) : credential._getIdTokenResponse(auth);\n    return idTokenProvider.catch(function(error) {\n        if (error.code === \"auth/multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */ ) throw $07e48e70fcf53a6e$var$MultiFactorError._fromErrorAndOperation(auth, error, operationType, user);\n        throw error;\n    });\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Takes a set of UserInfo provider data and converts it to a set of names\r\n */ function $07e48e70fcf53a6e$var$providerDataAsNames(providerData) {\n    return new Set(providerData.map(function(param) {\n        var providerId = param.providerId;\n        return providerId;\n    }).filter(function(pid) {\n        return !!pid;\n    }));\n}\nfunction $07e48e70fcf53a6e$export$306ddfe3a8403e2(user, providerId) {\n    return $07e48e70fcf53a6e$var$_unlink.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_unlink() {\n    $07e48e70fcf53a6e$var$_unlink = /**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Unlinks a provider from a user account.\r\n *\r\n * @param user - The user.\r\n * @param providerId - The provider to unlink.\r\n *\r\n * @public\r\n */ (0, $i7mVp._)(function(user, providerId) {\n        var userInternal, providerUserInfo, _tmp, _tmp1, providersLeft;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    userInternal = (0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(user);\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$_assertLinkedStatus(true, userInternal, providerId)\n                    ];\n                case 1:\n                    _state.sent();\n                    _tmp = [\n                        userInternal.auth\n                    ];\n                    _tmp1 = {};\n                    return [\n                        4,\n                        userInternal.getIdToken()\n                    ];\n                case 2:\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$deleteLinkedAccounts.apply(void 0, _tmp.concat([\n                            (_tmp1.idToken = _state.sent(), _tmp1.deleteProvider = [\n                                providerId\n                            ], _tmp1)\n                        ]))\n                    ];\n                case 3:\n                    providerUserInfo = _state.sent().providerUserInfo;\n                    providersLeft = $07e48e70fcf53a6e$var$providerDataAsNames(providerUserInfo || []);\n                    userInternal.providerData = userInternal.providerData.filter(function(pd) {\n                        return providersLeft.has(pd.providerId);\n                    });\n                    if (!providersLeft.has(\"phone\" /* ProviderId.PHONE */ )) userInternal.phoneNumber = null;\n                    return [\n                        4,\n                        userInternal.auth._persistUserIfCurrent(userInternal)\n                    ];\n                case 4:\n                    _state.sent();\n                    return [\n                        2,\n                        userInternal\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$_unlink.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_link$1(user, credential) {\n    return $07e48e70fcf53a6e$var$__link$1.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$__link$1() {\n    $07e48e70fcf53a6e$var$__link$1 = (0, $i7mVp._)(function(user, credential) {\n        var bypassAuthState, response, _tmp, _, _tmp1;\n        var _arguments = arguments;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    bypassAuthState = _arguments.length > 2 && _arguments[2] !== void 0 ? _arguments[2] : false;\n                    _tmp = [\n                        user\n                    ];\n                    _ = credential._linkToIdToken;\n                    _tmp1 = [\n                        user.auth\n                    ];\n                    return [\n                        4,\n                        user.getIdToken()\n                    ];\n                case 1:\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$_logoutIfInvalidated.apply(void 0, _tmp.concat([\n                            _.apply(credential, _tmp1.concat([\n                                _state.sent()\n                            ])),\n                            bypassAuthState\n                        ]))\n                    ];\n                case 2:\n                    response = _state.sent();\n                    return [\n                        2,\n                        $07e48e70fcf53a6e$var$UserCredentialImpl._forOperation(user, \"link\" /* OperationType.LINK */ , response)\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$__link$1.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_assertLinkedStatus(expected, user, provider) {\n    return $07e48e70fcf53a6e$var$__assertLinkedStatus.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$__assertLinkedStatus() {\n    $07e48e70fcf53a6e$var$__assertLinkedStatus = (0, $i7mVp._)(function(expected, user, provider) {\n        var providerIds, code;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$_reloadWithoutSaving(user)\n                    ];\n                case 1:\n                    _state.sent();\n                    providerIds = $07e48e70fcf53a6e$var$providerDataAsNames(user.providerData);\n                    code = expected === false ? \"provider-already-linked\" /* AuthErrorCode.PROVIDER_ALREADY_LINKED */  : \"no-such-provider\" /* AuthErrorCode.NO_SUCH_PROVIDER */ ;\n                    $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(providerIds.has(provider) === expected, user.auth, code);\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$__assertLinkedStatus.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_reauthenticate(user, credential) {\n    return $07e48e70fcf53a6e$var$__reauthenticate.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$__reauthenticate() {\n    $07e48e70fcf53a6e$var$__reauthenticate = /**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ (0, $i7mVp._)(function(user, credential) {\n        var bypassAuthState, auth, operationType, response, parsed, localId, e;\n        var _arguments = arguments;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    bypassAuthState = _arguments.length > 2 && _arguments[2] !== void 0 ? _arguments[2] : false;\n                    auth = user.auth;\n                    operationType = \"reauthenticate\" /* OperationType.REAUTHENTICATE */ ;\n                    _state.label = 1;\n                case 1:\n                    _state.trys.push([\n                        1,\n                        3,\n                        ,\n                        4\n                    ]);\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$_logoutIfInvalidated(user, $07e48e70fcf53a6e$var$_processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user), bypassAuthState)\n                    ];\n                case 2:\n                    response = _state.sent();\n                    $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(response.idToken, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n                    parsed = $07e48e70fcf53a6e$var$_parseToken(response.idToken);\n                    $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(parsed, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n                    localId = parsed.sub;\n                    $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(user.uid === localId, auth, \"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */ );\n                    return [\n                        2,\n                        $07e48e70fcf53a6e$var$UserCredentialImpl._forOperation(user, operationType, response)\n                    ];\n                case 3:\n                    e = _state.sent();\n                    // Convert user deleted error into user mismatch\n                    if ((e === null || e === void 0 ? void 0 : e.code) === \"auth/user-not-found\" /* AuthErrorCode.USER_DELETED */ ) $07e48e70fcf53a6e$export$d66dc83d8cfc8dd(auth, \"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */ );\n                    throw e;\n                case 4:\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$__reauthenticate.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_signInWithCredential(auth, credential) {\n    return $07e48e70fcf53a6e$var$__signInWithCredential.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$__signInWithCredential() {\n    $07e48e70fcf53a6e$var$__signInWithCredential = /**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ (0, $i7mVp._)(function(auth, credential) {\n        var bypassAuthState, operationType, response, userCredential;\n        var _arguments = arguments;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    bypassAuthState = _arguments.length > 2 && _arguments[2] !== void 0 ? _arguments[2] : false;\n                    operationType = \"signIn\" /* OperationType.SIGN_IN */ ;\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$_processCredentialSavingMfaContextIfNecessary(auth, operationType, credential)\n                    ];\n                case 1:\n                    response = _state.sent();\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$UserCredentialImpl._fromIdTokenResponse(auth, operationType, response)\n                    ];\n                case 2:\n                    userCredential = _state.sent();\n                    if (!!bypassAuthState) return [\n                        3,\n                        4\n                    ];\n                    return [\n                        4,\n                        auth._updateCurrentUser(userCredential.user)\n                    ];\n                case 3:\n                    _state.sent();\n                    _state.label = 4;\n                case 4:\n                    return [\n                        2,\n                        userCredential\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$__signInWithCredential.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$export$3d8c2f653ac9d0b9(auth, credential) {\n    return $07e48e70fcf53a6e$var$_signInWithCredential1.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_signInWithCredential1() {\n    $07e48e70fcf53a6e$var$_signInWithCredential1 = /**\r\n * Asynchronously signs in with the given credentials.\r\n *\r\n * @remarks\r\n * An {@link AuthProvider} can be used to generate the credential.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param credential - The auth credential.\r\n *\r\n * @public\r\n */ (0, $i7mVp._)(function(auth, credential) {\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            return [\n                2,\n                $07e48e70fcf53a6e$var$_signInWithCredential($07e48e70fcf53a6e$export$a33b77bbdbb8366c(auth), credential)\n            ];\n        });\n    });\n    return $07e48e70fcf53a6e$var$_signInWithCredential1.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$export$34aec0b863436764(user, credential) {\n    return $07e48e70fcf53a6e$var$_linkWithCredential.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_linkWithCredential() {\n    $07e48e70fcf53a6e$var$_linkWithCredential = /**\r\n * Links the user account with the given credentials.\r\n *\r\n * @remarks\r\n * An {@link AuthProvider} can be used to generate the credential.\r\n *\r\n * @param user - The user.\r\n * @param credential - The auth credential.\r\n *\r\n * @public\r\n */ (0, $i7mVp._)(function(user, credential) {\n        var userInternal;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    userInternal = (0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(user);\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$_assertLinkedStatus(false, userInternal, credential.providerId)\n                    ];\n                case 1:\n                    _state.sent();\n                    return [\n                        2,\n                        $07e48e70fcf53a6e$var$_link$1(userInternal, credential)\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$_linkWithCredential.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$export$3c2fa207a37baaea(user, credential) {\n    return $07e48e70fcf53a6e$var$_reauthenticateWithCredential.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_reauthenticateWithCredential() {\n    $07e48e70fcf53a6e$var$_reauthenticateWithCredential = /**\r\n * Re-authenticates a user using a fresh credential.\r\n *\r\n * @remarks\r\n * Use before operations such as {@link updatePassword} that require tokens from recent sign-in\r\n * attempts. This method can be used to recover from a `CREDENTIAL_TOO_OLD_LOGIN_AGAIN` error\r\n * or a `TOKEN_EXPIRED` error.\r\n *\r\n * @param user - The user.\r\n * @param credential - The auth credential.\r\n *\r\n * @public\r\n */ (0, $i7mVp._)(function(user, credential) {\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            return [\n                2,\n                $07e48e70fcf53a6e$var$_reauthenticate((0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(user), credential)\n            ];\n        });\n    });\n    return $07e48e70fcf53a6e$var$_reauthenticateWithCredential.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$signInWithCustomToken$1(auth, request) {\n    return $07e48e70fcf53a6e$var$_signInWithCustomToken$1.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_signInWithCustomToken$1() {\n    $07e48e70fcf53a6e$var$_signInWithCustomToken$1 = /**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ (0, $i7mVp._)(function(auth, request) {\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            return [\n                2,\n                $07e48e70fcf53a6e$var$_performSignInRequest(auth, \"POST\" /* HttpMethod.POST */ , \"/v1/accounts:signInWithCustomToken\" /* Endpoint.SIGN_IN_WITH_CUSTOM_TOKEN */ , $07e48e70fcf53a6e$var$_addTidIfNecessary(auth, request))\n            ];\n        });\n    });\n    return $07e48e70fcf53a6e$var$_signInWithCustomToken$1.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$export$ce26c07117d59d6a(auth, customToken) {\n    return $07e48e70fcf53a6e$var$_signInWithCustomToken.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_signInWithCustomToken() {\n    $07e48e70fcf53a6e$var$_signInWithCustomToken = /**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Asynchronously signs in using a custom token.\r\n *\r\n * @remarks\r\n * Custom tokens are used to integrate Firebase Auth with existing auth systems, and must\r\n * be generated by an auth backend using the\r\n * {@link https://firebase.google.com/docs/reference/admin/node/admin.auth.Auth#createcustomtoken | createCustomToken}\r\n * method in the {@link https://firebase.google.com/docs/auth/admin | Admin SDK} .\r\n *\r\n * Fails with an error if the token is invalid, expired, or not accepted by the Firebase Auth service.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param customToken - The custom token to sign in with.\r\n *\r\n * @public\r\n */ (0, $i7mVp._)(function(auth, customToken) {\n        var authInternal, response, cred;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    authInternal = $07e48e70fcf53a6e$export$a33b77bbdbb8366c(auth);\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$signInWithCustomToken$1(authInternal, {\n                            token: customToken,\n                            returnSecureToken: true\n                        })\n                    ];\n                case 1:\n                    response = _state.sent();\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */ , response)\n                    ];\n                case 2:\n                    cred = _state.sent();\n                    return [\n                        4,\n                        authInternal._updateCurrentUser(cred.user)\n                    ];\n                case 3:\n                    _state.sent();\n                    return [\n                        2,\n                        cred\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$_signInWithCustomToken.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ var $07e48e70fcf53a6e$var$MultiFactorInfoImpl = /*#__PURE__*/ function() {\n    \"use strict\";\n    function MultiFactorInfoImpl(factorId, response) {\n        (0, $juqrk._)(this, MultiFactorInfoImpl);\n        this.factorId = factorId;\n        this.uid = response.mfaEnrollmentId;\n        this.enrollmentTime = new Date(response.enrolledAt).toUTCString();\n        this.displayName = response.displayName;\n    }\n    (0, $bNI6E._)(MultiFactorInfoImpl, null, [\n        {\n            key: \"_fromServerResponse\",\n            value: function _fromServerResponse(auth, enrollment) {\n                if (\"phoneInfo\" in enrollment) return $07e48e70fcf53a6e$var$PhoneMultiFactorInfoImpl._fromServerResponse(auth, enrollment);\n                else if (\"totpInfo\" in enrollment) return $07e48e70fcf53a6e$var$TotpMultiFactorInfoImpl._fromServerResponse(auth, enrollment);\n                return $07e48e70fcf53a6e$export$d66dc83d8cfc8dd(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n            }\n        }\n    ]);\n    return MultiFactorInfoImpl;\n}();\nvar $07e48e70fcf53a6e$var$PhoneMultiFactorInfoImpl = /*#__PURE__*/ function(MultiFactorInfoImpl) {\n    \"use strict\";\n    (0, $jqfyu._)(PhoneMultiFactorInfoImpl, MultiFactorInfoImpl);\n    var _super = (0, $50zho._)(PhoneMultiFactorInfoImpl);\n    function PhoneMultiFactorInfoImpl(response) {\n        (0, $juqrk._)(this, PhoneMultiFactorInfoImpl);\n        var _this;\n        _this = _super.call(this, \"phone\" /* FactorId.PHONE */ , response);\n        _this.phoneNumber = response.phoneInfo;\n        return _this;\n    }\n    (0, $bNI6E._)(PhoneMultiFactorInfoImpl, null, [\n        {\n            key: \"_fromServerResponse\",\n            value: function _fromServerResponse(_auth, enrollment) {\n                return new PhoneMultiFactorInfoImpl(enrollment);\n            }\n        }\n    ]);\n    return PhoneMultiFactorInfoImpl;\n}($07e48e70fcf53a6e$var$MultiFactorInfoImpl);\nvar $07e48e70fcf53a6e$var$TotpMultiFactorInfoImpl = /*#__PURE__*/ function(MultiFactorInfoImpl) {\n    \"use strict\";\n    (0, $jqfyu._)(TotpMultiFactorInfoImpl, MultiFactorInfoImpl);\n    var _super = (0, $50zho._)(TotpMultiFactorInfoImpl);\n    function TotpMultiFactorInfoImpl(response) {\n        (0, $juqrk._)(this, TotpMultiFactorInfoImpl);\n        return _super.call(this, \"totp\" /* FactorId.TOTP */ , response);\n    }\n    (0, $bNI6E._)(TotpMultiFactorInfoImpl, null, [\n        {\n            key: \"_fromServerResponse\",\n            value: function _fromServerResponse(_auth, enrollment) {\n                return new TotpMultiFactorInfoImpl(enrollment);\n            }\n        }\n    ]);\n    return TotpMultiFactorInfoImpl;\n}($07e48e70fcf53a6e$var$MultiFactorInfoImpl);\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ function $07e48e70fcf53a6e$var$_setActionCodeSettingsOnRequest(auth, request, actionCodeSettings) {\n    var _a;\n    $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(((_a = actionCodeSettings.url) === null || _a === void 0 ? void 0 : _a.length) > 0, auth, \"invalid-continue-uri\" /* AuthErrorCode.INVALID_CONTINUE_URI */ );\n    $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(typeof actionCodeSettings.dynamicLinkDomain === \"undefined\" || actionCodeSettings.dynamicLinkDomain.length > 0, auth, \"invalid-dynamic-link-domain\" /* AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN */ );\n    request.continueUrl = actionCodeSettings.url;\n    request.dynamicLinkDomain = actionCodeSettings.dynamicLinkDomain;\n    request.canHandleCodeInApp = actionCodeSettings.handleCodeInApp;\n    if (actionCodeSettings.iOS) {\n        $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(actionCodeSettings.iOS.bundleId.length > 0, auth, \"missing-ios-bundle-id\" /* AuthErrorCode.MISSING_IOS_BUNDLE_ID */ );\n        request.iOSBundleId = actionCodeSettings.iOS.bundleId;\n    }\n    if (actionCodeSettings.android) {\n        $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(actionCodeSettings.android.packageName.length > 0, auth, \"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */ );\n        request.androidInstallApp = actionCodeSettings.android.installApp;\n        request.androidMinimumVersionCode = actionCodeSettings.android.minimumVersion;\n        request.androidPackageName = actionCodeSettings.android.packageName;\n    }\n}\nfunction $07e48e70fcf53a6e$export$6559d589eb85fbb6(auth, email, actionCodeSettings) {\n    return $07e48e70fcf53a6e$var$_sendPasswordResetEmail.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_sendPasswordResetEmail() {\n    $07e48e70fcf53a6e$var$_sendPasswordResetEmail = /**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Sends a password reset email to the given email address.\r\n *\r\n * @remarks\r\n * To complete the password reset, call {@link confirmPasswordReset} with the code supplied in\r\n * the email sent to the user, along with the new password specified by the user.\r\n *\r\n * @example\r\n * ```javascript\r\n * const actionCodeSettings = {\r\n *   url: 'https://www.example.com/?email=user@example.com',\r\n *   iOS: {\r\n *      bundleId: 'com.example.ios'\r\n *   },\r\n *   android: {\r\n *     packageName: 'com.example.android',\r\n *     installApp: true,\r\n *     minimumVersion: '12'\r\n *   },\r\n *   handleCodeInApp: true\r\n * };\r\n * await sendPasswordResetEmail(auth, 'user@example.com', actionCodeSettings);\r\n * // Obtain code from user.\r\n * await confirmPasswordReset('user@example.com', code);\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param email - The user's email address.\r\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\r\n *\r\n * @public\r\n */ (0, $i7mVp._)(function(auth, email, actionCodeSettings) {\n        var _a, authInternal, request, requestWithRecaptcha;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    authInternal = $07e48e70fcf53a6e$export$a33b77bbdbb8366c(auth);\n                    request = {\n                        requestType: \"PASSWORD_RESET\" /* ActionCodeOperation.PASSWORD_RESET */ ,\n                        email: email,\n                        clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */ \n                    };\n                    if (!((_a = authInternal._getRecaptchaConfig()) === null || _a === void 0 ? void 0 : _a.emailPasswordEnabled)) return [\n                        3,\n                        3\n                    ];\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$injectRecaptchaFields(authInternal, request, \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */ , true)\n                    ];\n                case 1:\n                    requestWithRecaptcha = _state.sent();\n                    if (actionCodeSettings) $07e48e70fcf53a6e$var$_setActionCodeSettingsOnRequest(authInternal, requestWithRecaptcha, actionCodeSettings);\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$sendPasswordResetEmail$1(authInternal, requestWithRecaptcha)\n                    ];\n                case 2:\n                    _state.sent();\n                    return [\n                        3,\n                        5\n                    ];\n                case 3:\n                    if (actionCodeSettings) $07e48e70fcf53a6e$var$_setActionCodeSettingsOnRequest(authInternal, request, actionCodeSettings);\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$sendPasswordResetEmail$1(authInternal, request).catch(function() {\n                            var _ref = (0, $i7mVp._)(function(error) {\n                                var requestWithRecaptcha;\n                                return (0, $4tSb9.__generator)(this, function(_state) {\n                                    switch(_state.label){\n                                        case 0:\n                                            if (!(error.code === \"auth/missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */ )) return [\n                                                3,\n                                                3\n                                            ];\n                                            console.log(\"Password resets are protected by reCAPTCHA for this project. Automatically triggering the reCAPTCHA flow and restarting the password reset flow.\");\n                                            return [\n                                                4,\n                                                $07e48e70fcf53a6e$var$injectRecaptchaFields(authInternal, request, \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */ , true)\n                                            ];\n                                        case 1:\n                                            requestWithRecaptcha = _state.sent();\n                                            if (actionCodeSettings) $07e48e70fcf53a6e$var$_setActionCodeSettingsOnRequest(authInternal, requestWithRecaptcha, actionCodeSettings);\n                                            return [\n                                                4,\n                                                $07e48e70fcf53a6e$var$sendPasswordResetEmail$1(authInternal, requestWithRecaptcha)\n                                            ];\n                                        case 2:\n                                            _state.sent();\n                                            return [\n                                                3,\n                                                4\n                                            ];\n                                        case 3:\n                                            return [\n                                                2,\n                                                Promise.reject(error)\n                                            ];\n                                        case 4:\n                                            return [\n                                                2\n                                            ];\n                                    }\n                                });\n                            });\n                            return function(error) {\n                                return _ref.apply(this, arguments);\n                            };\n                        }())\n                    ];\n                case 4:\n                    _state.sent();\n                    _state.label = 5;\n                case 5:\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$_sendPasswordResetEmail.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$export$efca4cbe5dd06740(auth, oobCode, newPassword) {\n    return $07e48e70fcf53a6e$var$_confirmPasswordReset.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_confirmPasswordReset() {\n    $07e48e70fcf53a6e$var$_confirmPasswordReset = /**\r\n * Completes the password reset process, given a confirmation code and new password.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param oobCode - A confirmation code sent to the user.\r\n * @param newPassword - The new password.\r\n *\r\n * @public\r\n */ (0, $i7mVp._)(function(auth, oobCode, newPassword) {\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$resetPassword((0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(auth), {\n                            oobCode: oobCode,\n                            newPassword: newPassword\n                        })\n                    ];\n                case 1:\n                    _state.sent();\n                    return [\n                        2\n                    ];\n            }\n        });\n    // Do not return the email.\n    });\n    return $07e48e70fcf53a6e$var$_confirmPasswordReset.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$export$a8550f7dbe79f93a(auth, oobCode) {\n    return $07e48e70fcf53a6e$var$_applyActionCode.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_applyActionCode() {\n    $07e48e70fcf53a6e$var$_applyActionCode = /**\r\n * Applies a verification code sent to the user by email or other out-of-band mechanism.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param oobCode - A verification code sent to the user.\r\n *\r\n * @public\r\n */ (0, $i7mVp._)(function(auth, oobCode) {\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$applyActionCode$1((0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(auth), {\n                            oobCode: oobCode\n                        })\n                    ];\n                case 1:\n                    _state.sent();\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$_applyActionCode.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$export$2e2af4578d910ddf(auth, oobCode) {\n    return $07e48e70fcf53a6e$var$_checkActionCode.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_checkActionCode() {\n    $07e48e70fcf53a6e$var$_checkActionCode = /**\r\n * Checks a verification code sent to the user by email or other out-of-band mechanism.\r\n *\r\n * @returns metadata about the code.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param oobCode - A verification code sent to the user.\r\n *\r\n * @public\r\n */ (0, $i7mVp._)(function(auth, oobCode) {\n        var authModular, response, operation, multiFactorInfo;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    authModular = (0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(auth);\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$resetPassword(authModular, {\n                            oobCode: oobCode\n                        })\n                    ];\n                case 1:\n                    response = _state.sent();\n                    operation = response.requestType;\n                    $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(operation, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n                    switch(operation){\n                        case \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */ :\n                            break;\n                        case \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */ :\n                            $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(response.newEmail, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n                            break;\n                        case \"REVERT_SECOND_FACTOR_ADDITION\" /* ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION */ :\n                            $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(response.mfaInfo, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n                        // fall through\n                        default:\n                            $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(response.email, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n                    }\n                    multiFactorInfo = null;\n                    if (response.mfaInfo) multiFactorInfo = $07e48e70fcf53a6e$var$MultiFactorInfoImpl._fromServerResponse($07e48e70fcf53a6e$export$a33b77bbdbb8366c(authModular), response.mfaInfo);\n                    return [\n                        2,\n                        {\n                            data: {\n                                email: (response.requestType === \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */  ? response.newEmail : response.email) || null,\n                                previousEmail: (response.requestType === \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */  ? response.email : response.newEmail) || null,\n                                multiFactorInfo: multiFactorInfo\n                            },\n                            operation: operation\n                        }\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$_checkActionCode.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$export$a93c5207d687da10(auth, code) {\n    return $07e48e70fcf53a6e$var$_verifyPasswordResetCode.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_verifyPasswordResetCode() {\n    $07e48e70fcf53a6e$var$_verifyPasswordResetCode = /**\r\n * Checks a password reset code sent to the user by email or other out-of-band mechanism.\r\n *\r\n * @returns the user's email address if valid.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param code - A verification code sent to the user.\r\n *\r\n * @public\r\n */ (0, $i7mVp._)(function(auth, code) {\n        var data;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$export$2e2af4578d910ddf((0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(auth), code)\n                    ];\n                case 1:\n                    data = _state.sent().data;\n                    // Email should always be present since a code was sent to it\n                    return [\n                        2,\n                        data.email\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$_verifyPasswordResetCode.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$export$c3950d9923825c02(auth, email, password) {\n    return $07e48e70fcf53a6e$var$_createUserWithEmailAndPassword.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_createUserWithEmailAndPassword() {\n    $07e48e70fcf53a6e$var$_createUserWithEmailAndPassword = /**\r\n * Creates a new user account associated with the specified email address and password.\r\n *\r\n * @remarks\r\n * On successful creation of the user account, this user will also be signed in to your application.\r\n *\r\n * User account creation can fail if the account already exists or the password is invalid.\r\n *\r\n * Note: The email address acts as a unique identifier for the user and enables an email-based\r\n * password reset. This function will create a new user account and set the initial user password.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param email - The user's email address.\r\n * @param password - The user's chosen password.\r\n *\r\n * @public\r\n */ (0, $i7mVp._)(function(auth, email, password) {\n        var _a, authInternal, request, signUpResponse, requestWithRecaptcha, response, userCredential;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    authInternal = $07e48e70fcf53a6e$export$a33b77bbdbb8366c(auth);\n                    request = {\n                        returnSecureToken: true,\n                        email: email,\n                        password: password,\n                        clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */ \n                    };\n                    if (!((_a = authInternal._getRecaptchaConfig()) === null || _a === void 0 ? void 0 : _a.emailPasswordEnabled)) return [\n                        3,\n                        2\n                    ];\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$injectRecaptchaFields(authInternal, request, \"signUpPassword\" /* RecaptchaActionName.SIGN_UP_PASSWORD */ )\n                    ];\n                case 1:\n                    requestWithRecaptcha = _state.sent();\n                    signUpResponse = $07e48e70fcf53a6e$var$signUp(authInternal, requestWithRecaptcha);\n                    return [\n                        3,\n                        3\n                    ];\n                case 2:\n                    signUpResponse = $07e48e70fcf53a6e$var$signUp(authInternal, request).catch(function() {\n                        var _ref = (0, $i7mVp._)(function(error) {\n                            var requestWithRecaptcha;\n                            return (0, $4tSb9.__generator)(this, function(_state) {\n                                switch(_state.label){\n                                    case 0:\n                                        if (!(error.code === \"auth/missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */ )) return [\n                                            3,\n                                            2\n                                        ];\n                                        console.log(\"Sign-up is protected by reCAPTCHA for this project. Automatically triggering the reCAPTCHA flow and restarting the sign-up flow.\");\n                                        return [\n                                            4,\n                                            $07e48e70fcf53a6e$var$injectRecaptchaFields(authInternal, request, \"signUpPassword\" /* RecaptchaActionName.SIGN_UP_PASSWORD */ )\n                                        ];\n                                    case 1:\n                                        requestWithRecaptcha = _state.sent();\n                                        return [\n                                            2,\n                                            $07e48e70fcf53a6e$var$signUp(authInternal, requestWithRecaptcha)\n                                        ];\n                                    case 2:\n                                        return [\n                                            2,\n                                            Promise.reject(error)\n                                        ];\n                                    case 3:\n                                        return [\n                                            2\n                                        ];\n                                }\n                            });\n                        });\n                        return function(error) {\n                            return _ref.apply(this, arguments);\n                        };\n                    }());\n                    _state.label = 3;\n                case 3:\n                    return [\n                        4,\n                        signUpResponse.catch(function(error) {\n                            return Promise.reject(error);\n                        })\n                    ];\n                case 4:\n                    response = _state.sent();\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */ , response)\n                    ];\n                case 5:\n                    userCredential = _state.sent();\n                    return [\n                        4,\n                        authInternal._updateCurrentUser(userCredential.user)\n                    ];\n                case 6:\n                    _state.sent();\n                    return [\n                        2,\n                        userCredential\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$_createUserWithEmailAndPassword.apply(this, arguments);\n}\n/**\r\n * Asynchronously signs in using an email and password.\r\n *\r\n * @remarks\r\n * Fails with an error if the email address and password do not match.\r\n *\r\n * Note: The user's password is NOT the password used to access the user's email account. The\r\n * email address serves as a unique identifier for the user, and the password is used to access\r\n * the user's account in your Firebase project. See also: {@link createUserWithEmailAndPassword}.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param email - The users email address.\r\n * @param password - The users password.\r\n *\r\n * @public\r\n */ function $07e48e70fcf53a6e$export$a9c996f45e5784d0(auth, email, password) {\n    return $07e48e70fcf53a6e$export$3d8c2f653ac9d0b9((0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(auth), $07e48e70fcf53a6e$export$3722cfe417b6ed86.credential(email, password));\n}\nfunction $07e48e70fcf53a6e$export$7910e0436ed8d1de(auth, email, actionCodeSettings) {\n    return $07e48e70fcf53a6e$var$_sendSignInLinkToEmail.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_sendSignInLinkToEmail() {\n    $07e48e70fcf53a6e$var$_sendSignInLinkToEmail = /**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Sends a sign-in email link to the user with the specified email.\r\n *\r\n * @remarks\r\n * The sign-in operation has to always be completed in the app unlike other out of band email\r\n * actions (password reset and email verifications). This is because, at the end of the flow,\r\n * the user is expected to be signed in and their Auth state persisted within the app.\r\n *\r\n * To complete sign in with the email link, call {@link signInWithEmailLink} with the email\r\n * address and the email link supplied in the email sent to the user.\r\n *\r\n * @example\r\n * ```javascript\r\n * const actionCodeSettings = {\r\n *   url: 'https://www.example.com/?email=user@example.com',\r\n *   iOS: {\r\n *      bundleId: 'com.example.ios'\r\n *   },\r\n *   android: {\r\n *     packageName: 'com.example.android',\r\n *     installApp: true,\r\n *     minimumVersion: '12'\r\n *   },\r\n *   handleCodeInApp: true\r\n * };\r\n * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\r\n * // Obtain emailLink from the user.\r\n * if(isSignInWithEmailLink(auth, emailLink)) {\r\n *   await signInWithEmailLink(auth, 'user@example.com', emailLink);\r\n * }\r\n * ```\r\n *\r\n * @param authInternal - The {@link Auth} instance.\r\n * @param email - The user's email address.\r\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\r\n *\r\n * @public\r\n */ (0, $i7mVp._)(function(auth, email, actionCodeSettings) {\n        var _a, authInternal, request, requestWithRecaptcha;\n        function setActionCodeSettings(request, actionCodeSettings) {\n            $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(actionCodeSettings.handleCodeInApp, authInternal, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */ );\n            if (actionCodeSettings) $07e48e70fcf53a6e$var$_setActionCodeSettingsOnRequest(authInternal, request, actionCodeSettings);\n        }\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    authInternal = $07e48e70fcf53a6e$export$a33b77bbdbb8366c(auth);\n                    request = {\n                        requestType: \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */ ,\n                        email: email,\n                        clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */ \n                    };\n                    if (!((_a = authInternal._getRecaptchaConfig()) === null || _a === void 0 ? void 0 : _a.emailPasswordEnabled)) return [\n                        3,\n                        3\n                    ];\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$injectRecaptchaFields(authInternal, request, \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */ , true)\n                    ];\n                case 1:\n                    requestWithRecaptcha = _state.sent();\n                    setActionCodeSettings(requestWithRecaptcha, actionCodeSettings);\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$sendSignInLinkToEmail$1(authInternal, requestWithRecaptcha)\n                    ];\n                case 2:\n                    _state.sent();\n                    return [\n                        3,\n                        5\n                    ];\n                case 3:\n                    setActionCodeSettings(request, actionCodeSettings);\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$sendSignInLinkToEmail$1(authInternal, request).catch(function() {\n                            var _ref = (0, $i7mVp._)(function(error) {\n                                var requestWithRecaptcha;\n                                return (0, $4tSb9.__generator)(this, function(_state) {\n                                    switch(_state.label){\n                                        case 0:\n                                            if (!(error.code === \"auth/missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */ )) return [\n                                                3,\n                                                3\n                                            ];\n                                            console.log(\"Email link sign-in is protected by reCAPTCHA for this project. Automatically triggering the reCAPTCHA flow and restarting the sign-in flow.\");\n                                            return [\n                                                4,\n                                                $07e48e70fcf53a6e$var$injectRecaptchaFields(authInternal, request, \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */ , true)\n                                            ];\n                                        case 1:\n                                            requestWithRecaptcha = _state.sent();\n                                            setActionCodeSettings(requestWithRecaptcha, actionCodeSettings);\n                                            return [\n                                                4,\n                                                $07e48e70fcf53a6e$var$sendSignInLinkToEmail$1(authInternal, requestWithRecaptcha)\n                                            ];\n                                        case 2:\n                                            _state.sent();\n                                            return [\n                                                3,\n                                                4\n                                            ];\n                                        case 3:\n                                            return [\n                                                2,\n                                                Promise.reject(error)\n                                            ];\n                                        case 4:\n                                            return [\n                                                2\n                                            ];\n                                    }\n                                });\n                            });\n                            return function(error) {\n                                return _ref.apply(this, arguments);\n                            };\n                        }())\n                    ];\n                case 4:\n                    _state.sent();\n                    _state.label = 5;\n                case 5:\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$_sendSignInLinkToEmail.apply(this, arguments);\n}\n/**\r\n * Checks if an incoming link is a sign-in with email link suitable for {@link signInWithEmailLink}.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param emailLink - The link sent to the user's email address.\r\n *\r\n * @public\r\n */ function $07e48e70fcf53a6e$export$555508cbc6add439(auth, emailLink) {\n    var actionCodeUrl = $07e48e70fcf53a6e$export$ee7c8ad385a60b7b.parseLink(emailLink);\n    return (actionCodeUrl === null || actionCodeUrl === void 0 ? void 0 : actionCodeUrl.operation) === \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */ ;\n}\nfunction $07e48e70fcf53a6e$export$2219238a014317b0(auth, email, emailLink) {\n    return $07e48e70fcf53a6e$var$_signInWithEmailLink.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_signInWithEmailLink() {\n    $07e48e70fcf53a6e$var$_signInWithEmailLink = /**\r\n * Asynchronously signs in using an email and sign-in email link.\r\n *\r\n * @remarks\r\n * If no link is passed, the link is inferred from the current URL.\r\n *\r\n * Fails with an error if the email address is invalid or OTP in email link expires.\r\n *\r\n * Note: Confirm the link is a sign-in email link before calling this method firebase.auth.Auth.isSignInWithEmailLink.\r\n *\r\n * @example\r\n * ```javascript\r\n * const actionCodeSettings = {\r\n *   url: 'https://www.example.com/?email=user@example.com',\r\n *   iOS: {\r\n *      bundleId: 'com.example.ios'\r\n *   },\r\n *   android: {\r\n *     packageName: 'com.example.android',\r\n *     installApp: true,\r\n *     minimumVersion: '12'\r\n *   },\r\n *   handleCodeInApp: true\r\n * };\r\n * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\r\n * // Obtain emailLink from the user.\r\n * if(isSignInWithEmailLink(auth, emailLink)) {\r\n *   await signInWithEmailLink(auth, 'user@example.com', emailLink);\r\n * }\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param email - The user's email address.\r\n * @param emailLink - The link sent to the user's email address.\r\n *\r\n * @public\r\n */ (0, $i7mVp._)(function(auth, email, emailLink) {\n        var authModular, credential;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            authModular = (0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(auth);\n            credential = $07e48e70fcf53a6e$export$3722cfe417b6ed86.credentialWithLink(email, emailLink || $07e48e70fcf53a6e$var$_getCurrentUrl());\n            // Check if the tenant ID in the email link matches the tenant ID on Auth\n            // instance.\n            $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(credential._tenantId === (authModular.tenantId || null), authModular, \"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */ );\n            return [\n                2,\n                $07e48e70fcf53a6e$export$3d8c2f653ac9d0b9(authModular, credential)\n            ];\n        });\n    });\n    return $07e48e70fcf53a6e$var$_signInWithEmailLink.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$createAuthUri(auth, request) {\n    return $07e48e70fcf53a6e$var$_createAuthUri.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_createAuthUri() {\n    $07e48e70fcf53a6e$var$_createAuthUri = /**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ (0, $i7mVp._)(function(auth, request) {\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            return [\n                2,\n                $07e48e70fcf53a6e$var$_performApiRequest(auth, \"POST\" /* HttpMethod.POST */ , \"/v1/accounts:createAuthUri\" /* Endpoint.CREATE_AUTH_URI */ , $07e48e70fcf53a6e$var$_addTidIfNecessary(auth, request))\n            ];\n        });\n    });\n    return $07e48e70fcf53a6e$var$_createAuthUri.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$export$4c3d22f3d993c33f(auth, email) {\n    return $07e48e70fcf53a6e$var$_fetchSignInMethodsForEmail.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_fetchSignInMethodsForEmail() {\n    $07e48e70fcf53a6e$var$_fetchSignInMethodsForEmail = /**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Gets the list of possible sign in methods for the given email address.\r\n *\r\n * @remarks\r\n * This is useful to differentiate methods of sign-in for the same provider, eg.\r\n * {@link EmailAuthProvider} which has 2 methods of sign-in,\r\n * {@link SignInMethod}.EMAIL_PASSWORD and\r\n * {@link SignInMethod}.EMAIL_LINK.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param email - The user's email address.\r\n *\r\n * @public\r\n */ (0, $i7mVp._)(function(auth, email) {\n        var continueUri, request, signinMethods;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    continueUri = $07e48e70fcf53a6e$var$_isHttpOrHttps() ? $07e48e70fcf53a6e$var$_getCurrentUrl() : \"http://localhost\";\n                    request = {\n                        identifier: email,\n                        continueUri: continueUri\n                    };\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$createAuthUri((0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(auth), request)\n                    ];\n                case 1:\n                    signinMethods = _state.sent().signinMethods;\n                    return [\n                        2,\n                        signinMethods || []\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$_fetchSignInMethodsForEmail.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$export$f787f51d84a910ad(user, actionCodeSettings) {\n    return $07e48e70fcf53a6e$var$_sendEmailVerification.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_sendEmailVerification() {\n    $07e48e70fcf53a6e$var$_sendEmailVerification = /**\r\n * Sends a verification email to a user.\r\n *\r\n * @remarks\r\n * The verification process is completed by calling {@link applyActionCode}.\r\n *\r\n * @example\r\n * ```javascript\r\n * const actionCodeSettings = {\r\n *   url: 'https://www.example.com/?email=user@example.com',\r\n *   iOS: {\r\n *      bundleId: 'com.example.ios'\r\n *   },\r\n *   android: {\r\n *     packageName: 'com.example.android',\r\n *     installApp: true,\r\n *     minimumVersion: '12'\r\n *   },\r\n *   handleCodeInApp: true\r\n * };\r\n * await sendEmailVerification(user, actionCodeSettings);\r\n * // Obtain code from the user.\r\n * await applyActionCode(auth, code);\r\n * ```\r\n *\r\n * @param user - The user.\r\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\r\n *\r\n * @public\r\n */ (0, $i7mVp._)(function(user, actionCodeSettings) {\n        var userInternal, idToken, request, email;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    userInternal = (0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(user);\n                    return [\n                        4,\n                        user.getIdToken()\n                    ];\n                case 1:\n                    idToken = _state.sent();\n                    request = {\n                        requestType: \"VERIFY_EMAIL\" /* ActionCodeOperation.VERIFY_EMAIL */ ,\n                        idToken: idToken\n                    };\n                    if (actionCodeSettings) $07e48e70fcf53a6e$var$_setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$sendEmailVerification$1(userInternal.auth, request)\n                    ];\n                case 2:\n                    email = _state.sent().email;\n                    if (!(email !== user.email)) return [\n                        3,\n                        4\n                    ];\n                    return [\n                        4,\n                        user.reload()\n                    ];\n                case 3:\n                    _state.sent();\n                    _state.label = 4;\n                case 4:\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$_sendEmailVerification.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$export$c9170ad7d4cd7e57(user, newEmail, actionCodeSettings) {\n    return $07e48e70fcf53a6e$var$_verifyBeforeUpdateEmail.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_verifyBeforeUpdateEmail() {\n    $07e48e70fcf53a6e$var$_verifyBeforeUpdateEmail = /**\r\n * Sends a verification email to a new email address.\r\n *\r\n * @remarks\r\n * The user's email will be updated to the new one after being verified.\r\n *\r\n * If you have a custom email action handler, you can complete the verification process by calling\r\n * {@link applyActionCode}.\r\n *\r\n * @example\r\n * ```javascript\r\n * const actionCodeSettings = {\r\n *   url: 'https://www.example.com/?email=user@example.com',\r\n *   iOS: {\r\n *      bundleId: 'com.example.ios'\r\n *   },\r\n *   android: {\r\n *     packageName: 'com.example.android',\r\n *     installApp: true,\r\n *     minimumVersion: '12'\r\n *   },\r\n *   handleCodeInApp: true\r\n * };\r\n * await verifyBeforeUpdateEmail(user, 'newemail@example.com', actionCodeSettings);\r\n * // Obtain code from the user.\r\n * await applyActionCode(auth, code);\r\n * ```\r\n *\r\n * @param user - The user.\r\n * @param newEmail - The new email address to be verified before update.\r\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\r\n *\r\n * @public\r\n */ (0, $i7mVp._)(function(user, newEmail, actionCodeSettings) {\n        var userInternal, idToken, request, email;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    userInternal = (0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(user);\n                    return [\n                        4,\n                        user.getIdToken()\n                    ];\n                case 1:\n                    idToken = _state.sent();\n                    request = {\n                        requestType: \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */ ,\n                        idToken: idToken,\n                        newEmail: newEmail\n                    };\n                    if (actionCodeSettings) $07e48e70fcf53a6e$var$_setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$verifyAndChangeEmail(userInternal.auth, request)\n                    ];\n                case 2:\n                    email = _state.sent().email;\n                    if (!(email !== user.email)) return [\n                        3,\n                        4\n                    ];\n                    // If the local copy of the email on user is outdated, reload the\n                    // user.\n                    return [\n                        4,\n                        user.reload()\n                    ];\n                case 3:\n                    _state.sent();\n                    _state.label = 4;\n                case 4:\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$_verifyBeforeUpdateEmail.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$updateProfile$1(auth, request) {\n    return $07e48e70fcf53a6e$var$_updateProfile$1.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_updateProfile$1() {\n    $07e48e70fcf53a6e$var$_updateProfile$1 = /**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ (0, $i7mVp._)(function(auth, request) {\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            return [\n                2,\n                $07e48e70fcf53a6e$var$_performApiRequest(auth, \"POST\" /* HttpMethod.POST */ , \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */ , request)\n            ];\n        });\n    });\n    return $07e48e70fcf53a6e$var$_updateProfile$1.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$export$f38c853ae54ed474(user, _) {\n    return $07e48e70fcf53a6e$var$_updateProfile.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_updateProfile() {\n    $07e48e70fcf53a6e$var$_updateProfile = /**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Updates a user's profile data.\r\n *\r\n * @param user - The user.\r\n * @param profile - The profile's `displayName` and `photoURL` to update.\r\n *\r\n * @public\r\n */ (0, $i7mVp._)(function(user, param) {\n        var displayName, photoUrl, userInternal, idToken, profileRequest, response, passwordProvider;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    displayName = param.displayName, photoUrl = param.photoURL;\n                    if (displayName === undefined && photoUrl === undefined) return [\n                        2\n                    ];\n                    userInternal = (0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(user);\n                    return [\n                        4,\n                        userInternal.getIdToken()\n                    ];\n                case 1:\n                    idToken = _state.sent();\n                    profileRequest = {\n                        idToken: idToken,\n                        displayName: displayName,\n                        photoUrl: photoUrl,\n                        returnSecureToken: true\n                    };\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$_logoutIfInvalidated(userInternal, $07e48e70fcf53a6e$var$updateProfile$1(userInternal.auth, profileRequest))\n                    ];\n                case 2:\n                    response = _state.sent();\n                    userInternal.displayName = response.displayName || null;\n                    userInternal.photoURL = response.photoUrl || null;\n                    passwordProvider = userInternal.providerData.find(function(param) {\n                        var providerId = param.providerId;\n                        return providerId === \"password\" /* ProviderId.PASSWORD */ ;\n                    });\n                    if (passwordProvider) {\n                        passwordProvider.displayName = userInternal.displayName;\n                        passwordProvider.photoURL = userInternal.photoURL;\n                    }\n                    return [\n                        4,\n                        userInternal._updateTokensIfNecessary(response)\n                    ];\n                case 3:\n                    _state.sent();\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$_updateProfile.apply(this, arguments);\n}\n/**\r\n * Updates the user's email address.\r\n *\r\n * @remarks\r\n * An email will be sent to the original email address (if it was set) that allows to revoke the\r\n * email address change, in order to protect them from account hijacking.\r\n *\r\n * Important: this is a security sensitive operation that requires the user to have recently signed\r\n * in. If this requirement isn't met, ask the user to authenticate again and then call\r\n * {@link reauthenticateWithCredential}.\r\n *\r\n * @param user - The user.\r\n * @param newEmail - The new email address.\r\n *\r\n * @public\r\n */ function $07e48e70fcf53a6e$export$3b513254972cfc9c(user, newEmail) {\n    return $07e48e70fcf53a6e$var$updateEmailOrPassword((0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(user), newEmail, null);\n}\n/**\r\n * Updates the user's password.\r\n *\r\n * @remarks\r\n * Important: this is a security sensitive operation that requires the user to have recently signed\r\n * in. If this requirement isn't met, ask the user to authenticate again and then call\r\n * {@link reauthenticateWithCredential}.\r\n *\r\n * @param user - The user.\r\n * @param newPassword - The new password.\r\n *\r\n * @public\r\n */ function $07e48e70fcf53a6e$export$21579262ef46735b(user, newPassword) {\n    return $07e48e70fcf53a6e$var$updateEmailOrPassword((0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(user), null, newPassword);\n}\nfunction $07e48e70fcf53a6e$var$updateEmailOrPassword(user, email, password) {\n    return $07e48e70fcf53a6e$var$_updateEmailOrPassword.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_updateEmailOrPassword() {\n    $07e48e70fcf53a6e$var$_updateEmailOrPassword = (0, $i7mVp._)(function(user, email, password) {\n        var auth, idToken, request, response;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    auth = user.auth;\n                    return [\n                        4,\n                        user.getIdToken()\n                    ];\n                case 1:\n                    idToken = _state.sent();\n                    request = {\n                        idToken: idToken,\n                        returnSecureToken: true\n                    };\n                    if (email) request.email = email;\n                    if (password) request.password = password;\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$_logoutIfInvalidated(user, $07e48e70fcf53a6e$var$updateEmailPassword(auth, request))\n                    ];\n                case 2:\n                    response = _state.sent();\n                    return [\n                        4,\n                        user._updateTokensIfNecessary(response, /* reload */ true)\n                    ];\n                case 3:\n                    _state.sent();\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$_updateEmailOrPassword.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Parse the `AdditionalUserInfo` from the ID token response.\r\n *\r\n */ function $07e48e70fcf53a6e$var$_fromIdTokenResponse(idTokenResponse) {\n    var _a, _b;\n    if (!idTokenResponse) return null;\n    var providerId = idTokenResponse.providerId;\n    var profile = idTokenResponse.rawUserInfo ? JSON.parse(idTokenResponse.rawUserInfo) : {};\n    var isNewUser = idTokenResponse.isNewUser || idTokenResponse.kind === \"identitytoolkit#SignupNewUserResponse\" /* IdTokenResponseKind.SignupNewUser */ ;\n    if (!providerId && (idTokenResponse === null || idTokenResponse === void 0 ? void 0 : idTokenResponse.idToken)) {\n        var signInProvider = (_b = (_a = $07e48e70fcf53a6e$var$_parseToken(idTokenResponse.idToken)) === null || _a === void 0 ? void 0 : _a.firebase) === null || _b === void 0 ? void 0 : _b[\"sign_in_provider\"];\n        if (signInProvider) {\n            var filteredProviderId = signInProvider !== \"anonymous\" /* ProviderId.ANONYMOUS */  && signInProvider !== \"custom\" /* ProviderId.CUSTOM */  ? signInProvider : null;\n            // Uses generic class in accordance with the legacy SDK.\n            return new $07e48e70fcf53a6e$var$GenericAdditionalUserInfo(isNewUser, filteredProviderId);\n        }\n    }\n    if (!providerId) return null;\n    switch(providerId){\n        case \"facebook.com\" /* ProviderId.FACEBOOK */ :\n            return new $07e48e70fcf53a6e$var$FacebookAdditionalUserInfo(isNewUser, profile);\n        case \"github.com\" /* ProviderId.GITHUB */ :\n            return new $07e48e70fcf53a6e$var$GithubAdditionalUserInfo(isNewUser, profile);\n        case \"google.com\" /* ProviderId.GOOGLE */ :\n            return new $07e48e70fcf53a6e$var$GoogleAdditionalUserInfo(isNewUser, profile);\n        case \"twitter.com\" /* ProviderId.TWITTER */ :\n            return new $07e48e70fcf53a6e$var$TwitterAdditionalUserInfo(isNewUser, profile, idTokenResponse.screenName || null);\n        case \"custom\" /* ProviderId.CUSTOM */ :\n        case \"anonymous\" /* ProviderId.ANONYMOUS */ :\n            return new $07e48e70fcf53a6e$var$GenericAdditionalUserInfo(isNewUser, null);\n        default:\n            return new $07e48e70fcf53a6e$var$GenericAdditionalUserInfo(isNewUser, providerId, profile);\n    }\n}\nvar $07e48e70fcf53a6e$var$GenericAdditionalUserInfo = function GenericAdditionalUserInfo(isNewUser, providerId) {\n    \"use strict\";\n    var profile = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    (0, $juqrk._)(this, GenericAdditionalUserInfo);\n    this.isNewUser = isNewUser;\n    this.providerId = providerId;\n    this.profile = profile;\n};\nvar $07e48e70fcf53a6e$var$FederatedAdditionalUserInfoWithUsername = /*#__PURE__*/ function(GenericAdditionalUserInfo) {\n    \"use strict\";\n    (0, $jqfyu._)(FederatedAdditionalUserInfoWithUsername, GenericAdditionalUserInfo);\n    var _super = (0, $50zho._)(FederatedAdditionalUserInfoWithUsername);\n    function FederatedAdditionalUserInfoWithUsername(isNewUser, providerId, profile, username) {\n        (0, $juqrk._)(this, FederatedAdditionalUserInfoWithUsername);\n        var _this;\n        _this = _super.call(this, isNewUser, providerId, profile);\n        _this.username = username;\n        return _this;\n    }\n    return FederatedAdditionalUserInfoWithUsername;\n}($07e48e70fcf53a6e$var$GenericAdditionalUserInfo);\nvar $07e48e70fcf53a6e$var$FacebookAdditionalUserInfo = /*#__PURE__*/ function(GenericAdditionalUserInfo) {\n    \"use strict\";\n    (0, $jqfyu._)(FacebookAdditionalUserInfo, GenericAdditionalUserInfo);\n    var _super = (0, $50zho._)(FacebookAdditionalUserInfo);\n    function FacebookAdditionalUserInfo(isNewUser, profile) {\n        (0, $juqrk._)(this, FacebookAdditionalUserInfo);\n        return _super.call(this, isNewUser, \"facebook.com\" /* ProviderId.FACEBOOK */ , profile);\n    }\n    return FacebookAdditionalUserInfo;\n}($07e48e70fcf53a6e$var$GenericAdditionalUserInfo);\nvar $07e48e70fcf53a6e$var$GithubAdditionalUserInfo = /*#__PURE__*/ function(FederatedAdditionalUserInfoWithUsername) {\n    \"use strict\";\n    (0, $jqfyu._)(GithubAdditionalUserInfo, FederatedAdditionalUserInfoWithUsername);\n    var _super = (0, $50zho._)(GithubAdditionalUserInfo);\n    function GithubAdditionalUserInfo(isNewUser, profile) {\n        (0, $juqrk._)(this, GithubAdditionalUserInfo);\n        return _super.call(this, isNewUser, \"github.com\" /* ProviderId.GITHUB */ , profile, typeof (profile === null || profile === void 0 ? void 0 : profile.login) === \"string\" ? profile === null || profile === void 0 ? void 0 : profile.login : null);\n    }\n    return GithubAdditionalUserInfo;\n}($07e48e70fcf53a6e$var$FederatedAdditionalUserInfoWithUsername);\nvar $07e48e70fcf53a6e$var$GoogleAdditionalUserInfo = /*#__PURE__*/ function(GenericAdditionalUserInfo) {\n    \"use strict\";\n    (0, $jqfyu._)(GoogleAdditionalUserInfo, GenericAdditionalUserInfo);\n    var _super = (0, $50zho._)(GoogleAdditionalUserInfo);\n    function GoogleAdditionalUserInfo(isNewUser, profile) {\n        (0, $juqrk._)(this, GoogleAdditionalUserInfo);\n        return _super.call(this, isNewUser, \"google.com\" /* ProviderId.GOOGLE */ , profile);\n    }\n    return GoogleAdditionalUserInfo;\n}($07e48e70fcf53a6e$var$GenericAdditionalUserInfo);\nvar $07e48e70fcf53a6e$var$TwitterAdditionalUserInfo = /*#__PURE__*/ function(FederatedAdditionalUserInfoWithUsername) {\n    \"use strict\";\n    (0, $jqfyu._)(TwitterAdditionalUserInfo, FederatedAdditionalUserInfoWithUsername);\n    var _super = (0, $50zho._)(TwitterAdditionalUserInfo);\n    function TwitterAdditionalUserInfo(isNewUser, profile, screenName) {\n        (0, $juqrk._)(this, TwitterAdditionalUserInfo);\n        return _super.call(this, isNewUser, \"twitter.com\" /* ProviderId.TWITTER */ , profile, screenName);\n    }\n    return TwitterAdditionalUserInfo;\n}($07e48e70fcf53a6e$var$FederatedAdditionalUserInfoWithUsername);\n/**\r\n * Extracts provider specific {@link AdditionalUserInfo} for the given credential.\r\n *\r\n * @param userCredential - The user credential.\r\n *\r\n * @public\r\n */ function $07e48e70fcf53a6e$export$7a38258bbe170828(userCredential) {\n    var user = userCredential.user, _tokenResponse = userCredential._tokenResponse;\n    if (user.isAnonymous && !_tokenResponse) // Handle the special case where signInAnonymously() gets called twice.\n    // No network call is made so there's nothing to actually fill this in\n    return {\n        providerId: null,\n        isNewUser: false,\n        profile: null\n    };\n    return $07e48e70fcf53a6e$var$_fromIdTokenResponse(_tokenResponse);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ // Non-optional auth methods.\n/**\r\n * Changes the type of persistence on the {@link Auth} instance for the currently saved\r\n * `Auth` session and applies this type of persistence for future sign-in requests, including\r\n * sign-in with redirect requests.\r\n *\r\n * @remarks\r\n * This makes it easy for a user signing in to specify whether their session should be\r\n * remembered or not. It also makes it easier to never persist the `Auth` state for applications\r\n * that are shared by other users or have sensitive data.\r\n *\r\n * @example\r\n * ```javascript\r\n * setPersistence(auth, browserSessionPersistence);\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param persistence - The {@link Persistence} to use.\r\n * @returns A `Promise` that resolves once the persistence change has completed\r\n *\r\n * @public\r\n */ function $07e48e70fcf53a6e$export$9e5f44173e64f162(auth, persistence) {\n    return (0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(auth).setPersistence(persistence);\n}\n/**\r\n * Loads the reCAPTCHA configuration into the `Auth` instance.\r\n *\r\n * @remarks\r\n * This will load the reCAPTCHA config, which indicates whether the reCAPTCHA\r\n * verification flow should be triggered for each auth provider, into the\r\n * current Auth session.\r\n *\r\n * If initializeRecaptchaConfig() is not invoked, the auth flow will always start\r\n * without reCAPTCHA verification. If the provider is configured to require reCAPTCHA\r\n * verification, the SDK will transparently load the reCAPTCHA config and restart the\r\n * auth flows.\r\n *\r\n * Thus, by calling this optional method, you will reduce the latency of future auth flows.\r\n * Loading the reCAPTCHA config early will also enhance the signal collected by reCAPTCHA.\r\n *\r\n * @example\r\n * ```javascript\r\n * initializeRecaptchaConfig(auth);\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n *\r\n * @public\r\n */ function $07e48e70fcf53a6e$export$625550452a3fa3ec(auth) {\n    var authInternal = $07e48e70fcf53a6e$export$a33b77bbdbb8366c(auth);\n    return authInternal.initializeRecaptchaConfig();\n}\n/**\r\n * Adds an observer for changes to the signed-in user's ID token.\r\n *\r\n * @remarks\r\n * This includes sign-in, sign-out, and token refresh events.\r\n * This will not be triggered automatically upon ID token expiration. Use {@link User.getIdToken} to refresh the ID token.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param nextOrObserver - callback triggered on change.\r\n * @param error - Deprecated. This callback is never triggered. Errors\r\n * on signing in/out can be caught in promises returned from\r\n * sign-in/sign-out functions.\r\n * @param completed - Deprecated. This callback is never triggered.\r\n *\r\n * @public\r\n */ function $07e48e70fcf53a6e$export$90a7f3efeed30595(auth, nextOrObserver, error, completed) {\n    return (0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(auth).onIdTokenChanged(nextOrObserver, error, completed);\n}\n/**\r\n * Adds a blocking callback that runs before an auth state change\r\n * sets a new user.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param callback - callback triggered before new user value is set.\r\n *   If this throws, it blocks the user from being set.\r\n * @param onAbort - callback triggered if a later `beforeAuthStateChanged()`\r\n *   callback throws, allowing you to undo any side effects.\r\n */ function $07e48e70fcf53a6e$export$efccba1c4a2ef57b(auth, callback, onAbort) {\n    return (0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(auth).beforeAuthStateChanged(callback, onAbort);\n}\n/**\r\n * Adds an observer for changes to the user's sign-in state.\r\n *\r\n * @remarks\r\n * To keep the old behavior, see {@link onIdTokenChanged}.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param nextOrObserver - callback triggered on change.\r\n * @param error - Deprecated. This callback is never triggered. Errors\r\n * on signing in/out can be caught in promises returned from\r\n * sign-in/sign-out functions.\r\n * @param completed - Deprecated. This callback is never triggered.\r\n *\r\n * @public\r\n */ function $07e48e70fcf53a6e$export$d141bba7fdc215a3(auth, nextOrObserver, error, completed) {\n    return (0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(auth).onAuthStateChanged(nextOrObserver, error, completed);\n}\n/**\r\n * Sets the current language to the default device/browser preference.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n *\r\n * @public\r\n */ function $07e48e70fcf53a6e$export$4a5767248b18ef41(auth) {\n    (0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(auth).useDeviceLanguage();\n}\n/**\r\n * Asynchronously sets the provided user as {@link Auth.currentUser} on the\r\n * {@link Auth} instance.\r\n *\r\n * @remarks\r\n * A new instance copy of the user provided will be made and set as currentUser.\r\n *\r\n * This will trigger {@link onAuthStateChanged} and {@link onIdTokenChanged} listeners\r\n * like other sign in methods.\r\n *\r\n * The operation fails with an error if the user to be updated belongs to a different Firebase\r\n * project.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param user - The new {@link User}.\r\n *\r\n * @public\r\n */ function $07e48e70fcf53a6e$export$df995fae86a55f06(auth, user) {\n    return (0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(auth).updateCurrentUser(user);\n}\n/**\r\n * Signs out the current user.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n *\r\n * @public\r\n */ function $07e48e70fcf53a6e$export$ef35774e6d314e91(auth) {\n    return (0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(auth).signOut();\n}\nfunction $07e48e70fcf53a6e$export$e7094788287c5e9b(user) {\n    return $07e48e70fcf53a6e$var$_deleteUser.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_deleteUser() {\n    $07e48e70fcf53a6e$var$_deleteUser = /**\r\n * Deletes and signs out the user.\r\n *\r\n * @remarks\r\n * Important: this is a security-sensitive operation that requires the user to have recently\r\n * signed in. If this requirement isn't met, ask the user to authenticate again and then call\r\n * {@link reauthenticateWithCredential}.\r\n *\r\n * @param user - The user.\r\n *\r\n * @public\r\n */ (0, $i7mVp._)(function(user) {\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            return [\n                2,\n                (0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(user).delete()\n            ];\n        });\n    });\n    return $07e48e70fcf53a6e$var$_deleteUser.apply(this, arguments);\n}\nvar $07e48e70fcf53a6e$var$MultiFactorSessionImpl = /*#__PURE__*/ function() {\n    \"use strict\";\n    function MultiFactorSessionImpl(type, credential, auth) {\n        (0, $juqrk._)(this, MultiFactorSessionImpl);\n        this.type = type;\n        this.credential = credential;\n        this.auth = auth;\n    }\n    (0, $bNI6E._)(MultiFactorSessionImpl, [\n        {\n            key: \"toJSON\",\n            value: function toJSON() {\n                var key = this.type === \"enroll\" /* MultiFactorSessionType.ENROLL */  ? \"idToken\" : \"pendingCredential\";\n                return {\n                    multiFactorSession: (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)({}, key, this.credential)\n                };\n            }\n        }\n    ], [\n        {\n            key: \"_fromIdtoken\",\n            value: function _fromIdtoken(idToken, auth) {\n                return new MultiFactorSessionImpl(\"enroll\" /* MultiFactorSessionType.ENROLL */ , idToken, auth);\n            }\n        },\n        {\n            key: \"_fromMfaPendingCredential\",\n            value: function _fromMfaPendingCredential(mfaPendingCredential) {\n                return new MultiFactorSessionImpl(\"signin\" /* MultiFactorSessionType.SIGN_IN */ , mfaPendingCredential);\n            }\n        },\n        {\n            key: \"fromJSON\",\n            value: function fromJSON(obj) {\n                var _a, _b;\n                if (obj === null || obj === void 0 ? void 0 : obj.multiFactorSession) {\n                    if ((_a = obj.multiFactorSession) === null || _a === void 0 ? void 0 : _a.pendingCredential) return MultiFactorSessionImpl._fromMfaPendingCredential(obj.multiFactorSession.pendingCredential);\n                    else if ((_b = obj.multiFactorSession) === null || _b === void 0 ? void 0 : _b.idToken) return MultiFactorSessionImpl._fromIdtoken(obj.multiFactorSession.idToken);\n                }\n                return null;\n            }\n        }\n    ]);\n    return MultiFactorSessionImpl;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ var $07e48e70fcf53a6e$var$MultiFactorResolverImpl = /*#__PURE__*/ function() {\n    \"use strict\";\n    function MultiFactorResolverImpl(session, hints, signInResolver) {\n        (0, $juqrk._)(this, MultiFactorResolverImpl);\n        this.session = session;\n        this.hints = hints;\n        this.signInResolver = signInResolver;\n    }\n    (0, $bNI6E._)(MultiFactorResolverImpl, [\n        {\n            key: \"resolveSignIn\",\n            value: function resolveSignIn(assertionExtern) {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var assertion;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        assertion = assertionExtern;\n                        return [\n                            2,\n                            _this.signInResolver(assertion)\n                        ];\n                    });\n                })();\n            }\n        }\n    ], [\n        {\n            key: \"_fromError\",\n            value: /** @internal */ function _fromError(authExtern, error) {\n                var auth = $07e48e70fcf53a6e$export$a33b77bbdbb8366c(authExtern);\n                var serverResponse = error.customData._serverResponse;\n                var hints = (serverResponse.mfaInfo || []).map(function(enrollment) {\n                    return $07e48e70fcf53a6e$var$MultiFactorInfoImpl._fromServerResponse(auth, enrollment);\n                });\n                $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(serverResponse.mfaPendingCredential, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n                var session = $07e48e70fcf53a6e$var$MultiFactorSessionImpl._fromMfaPendingCredential(serverResponse.mfaPendingCredential);\n                return new MultiFactorResolverImpl(session, hints, function() {\n                    var _ref = (0, $i7mVp._)(function(assertion) {\n                        var mfaResponse, idTokenResponse, _, userCredential;\n                        return (0, $4tSb9.__generator)(this, function(_state) {\n                            switch(_state.label){\n                                case 0:\n                                    return [\n                                        4,\n                                        assertion._process(auth, session)\n                                    ];\n                                case 1:\n                                    mfaResponse = _state.sent();\n                                    // Clear out the unneeded fields from the old login response\n                                    delete serverResponse.mfaInfo;\n                                    delete serverResponse.mfaPendingCredential;\n                                    idTokenResponse = Object.assign(Object.assign({}, serverResponse), {\n                                        idToken: mfaResponse.idToken,\n                                        refreshToken: mfaResponse.refreshToken\n                                    });\n                                    _ = error.operationType;\n                                    switch(_){\n                                        case \"signIn\" /* OperationType.SIGN_IN */ :\n                                            return [\n                                                3,\n                                                2\n                                            ];\n                                        case \"reauthenticate\" /* OperationType.REAUTHENTICATE */ :\n                                            return [\n                                                3,\n                                                5\n                                            ];\n                                    }\n                                    return [\n                                        3,\n                                        6\n                                    ];\n                                case 2:\n                                    return [\n                                        4,\n                                        $07e48e70fcf53a6e$var$UserCredentialImpl._fromIdTokenResponse(auth, error.operationType, idTokenResponse)\n                                    ];\n                                case 3:\n                                    userCredential = _state.sent();\n                                    return [\n                                        4,\n                                        auth._updateCurrentUser(userCredential.user)\n                                    ];\n                                case 4:\n                                    _state.sent();\n                                    return [\n                                        2,\n                                        userCredential\n                                    ];\n                                case 5:\n                                    $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(error.user, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n                                    return [\n                                        2,\n                                        $07e48e70fcf53a6e$var$UserCredentialImpl._forOperation(error.user, error.operationType, idTokenResponse)\n                                    ];\n                                case 6:\n                                    $07e48e70fcf53a6e$export$d66dc83d8cfc8dd(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n                                    _state.label = 7;\n                                case 7:\n                                    return [\n                                        2\n                                    ];\n                            }\n                        });\n                    });\n                    return function(assertion) {\n                        return _ref.apply(this, arguments);\n                    };\n                }());\n            }\n        }\n    ]);\n    return MultiFactorResolverImpl;\n}();\n/**\r\n * Provides a {@link MultiFactorResolver} suitable for completion of a\r\n * multi-factor flow.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param error - The {@link MultiFactorError} raised during a sign-in, or\r\n * reauthentication operation.\r\n *\r\n * @public\r\n */ function $07e48e70fcf53a6e$export$8a5498727ef6be21(auth, error) {\n    var _a;\n    var authModular = (0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(auth);\n    var errorInternal = error;\n    $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(error.customData.operationType, authModular, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */ );\n    $07e48e70fcf53a6e$export$91c6e00c14e7e6fd((_a = errorInternal.customData._serverResponse) === null || _a === void 0 ? void 0 : _a.mfaPendingCredential, authModular, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */ );\n    return $07e48e70fcf53a6e$var$MultiFactorResolverImpl._fromError(authModular, errorInternal);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ function $07e48e70fcf53a6e$var$startEnrollPhoneMfa(auth, request) {\n    return $07e48e70fcf53a6e$var$_performApiRequest(auth, \"POST\" /* HttpMethod.POST */ , \"/v2/accounts/mfaEnrollment:start\" /* Endpoint.START_MFA_ENROLLMENT */ , $07e48e70fcf53a6e$var$_addTidIfNecessary(auth, request));\n}\nfunction $07e48e70fcf53a6e$var$finalizeEnrollPhoneMfa(auth, request) {\n    return $07e48e70fcf53a6e$var$_performApiRequest(auth, \"POST\" /* HttpMethod.POST */ , \"/v2/accounts/mfaEnrollment:finalize\" /* Endpoint.FINALIZE_MFA_ENROLLMENT */ , $07e48e70fcf53a6e$var$_addTidIfNecessary(auth, request));\n}\nfunction $07e48e70fcf53a6e$var$startEnrollTotpMfa(auth, request) {\n    return $07e48e70fcf53a6e$var$_performApiRequest(auth, \"POST\" /* HttpMethod.POST */ , \"/v2/accounts/mfaEnrollment:start\" /* Endpoint.START_MFA_ENROLLMENT */ , $07e48e70fcf53a6e$var$_addTidIfNecessary(auth, request));\n}\nfunction $07e48e70fcf53a6e$var$finalizeEnrollTotpMfa(auth, request) {\n    return $07e48e70fcf53a6e$var$_performApiRequest(auth, \"POST\" /* HttpMethod.POST */ , \"/v2/accounts/mfaEnrollment:finalize\" /* Endpoint.FINALIZE_MFA_ENROLLMENT */ , $07e48e70fcf53a6e$var$_addTidIfNecessary(auth, request));\n}\nfunction $07e48e70fcf53a6e$var$withdrawMfa(auth, request) {\n    return $07e48e70fcf53a6e$var$_performApiRequest(auth, \"POST\" /* HttpMethod.POST */ , \"/v2/accounts/mfaEnrollment:withdraw\" /* Endpoint.WITHDRAW_MFA */ , $07e48e70fcf53a6e$var$_addTidIfNecessary(auth, request));\n}\nvar $07e48e70fcf53a6e$var$MultiFactorUserImpl = /*#__PURE__*/ function() {\n    \"use strict\";\n    function MultiFactorUserImpl(user) {\n        var _this = this;\n        (0, $juqrk._)(this, MultiFactorUserImpl);\n        this.user = user;\n        this.enrolledFactors = [];\n        user._onReload(function(userInfo) {\n            if (userInfo.mfaInfo) _this.enrolledFactors = userInfo.mfaInfo.map(function(enrollment) {\n                return $07e48e70fcf53a6e$var$MultiFactorInfoImpl._fromServerResponse(user.auth, enrollment);\n            });\n        });\n    }\n    (0, $bNI6E._)(MultiFactorUserImpl, [\n        {\n            key: \"getSession\",\n            value: function getSession() {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var _;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                _ = $07e48e70fcf53a6e$var$MultiFactorSessionImpl._fromIdtoken;\n                                return [\n                                    4,\n                                    _this.user.getIdToken()\n                                ];\n                            case 1:\n                                return [\n                                    2,\n                                    _.apply($07e48e70fcf53a6e$var$MultiFactorSessionImpl, [\n                                        _state.sent(),\n                                        _this.user.auth\n                                    ])\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"enroll\",\n            value: function enroll(assertionExtern, displayName) {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var assertion, session, finalizeMfaResponse;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                assertion = assertionExtern;\n                                return [\n                                    4,\n                                    _this.getSession()\n                                ];\n                            case 1:\n                                session = _state.sent();\n                                return [\n                                    4,\n                                    $07e48e70fcf53a6e$var$_logoutIfInvalidated(_this.user, assertion._process(_this.user.auth, session, displayName))\n                                ];\n                            case 2:\n                                finalizeMfaResponse = _state.sent();\n                                // New tokens will be issued after enrollment of the new second factors.\n                                // They need to be updated on the user.\n                                return [\n                                    4,\n                                    _this.user._updateTokensIfNecessary(finalizeMfaResponse)\n                                ];\n                            case 3:\n                                _state.sent();\n                                // The user needs to be reloaded to get the new multi-factor information\n                                // from server. USER_RELOADED event will be triggered and `enrolledFactors`\n                                // will be updated.\n                                return [\n                                    2,\n                                    _this.user.reload()\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"unenroll\",\n            value: function unenroll(infoOrUid) {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var mfaEnrollmentId, idToken, idTokenResponse, e;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                mfaEnrollmentId = typeof infoOrUid === \"string\" ? infoOrUid : infoOrUid.uid;\n                                return [\n                                    4,\n                                    _this.user.getIdToken()\n                                ];\n                            case 1:\n                                idToken = _state.sent();\n                                _state.label = 2;\n                            case 2:\n                                _state.trys.push([\n                                    2,\n                                    6,\n                                    ,\n                                    7\n                                ]);\n                                return [\n                                    4,\n                                    $07e48e70fcf53a6e$var$_logoutIfInvalidated(_this.user, $07e48e70fcf53a6e$var$withdrawMfa(_this.user.auth, {\n                                        idToken: idToken,\n                                        mfaEnrollmentId: mfaEnrollmentId\n                                    }))\n                                ];\n                            case 3:\n                                idTokenResponse = _state.sent();\n                                // Remove the second factor from the user's list.\n                                _this.enrolledFactors = _this.enrolledFactors.filter(function(param) {\n                                    var uid = param.uid;\n                                    return uid !== mfaEnrollmentId;\n                                });\n                                // Depending on whether the backend decided to revoke the user's session,\n                                // the tokenResponse may be empty. If the tokens were not updated (and they\n                                // are now invalid), reloading the user will discover this and invalidate\n                                // the user's state accordingly.\n                                return [\n                                    4,\n                                    _this.user._updateTokensIfNecessary(idTokenResponse)\n                                ];\n                            case 4:\n                                _state.sent();\n                                return [\n                                    4,\n                                    _this.user.reload()\n                                ];\n                            case 5:\n                                _state.sent();\n                                return [\n                                    3,\n                                    7\n                                ];\n                            case 6:\n                                e = _state.sent();\n                                throw e;\n                            case 7:\n                                return [\n                                    2\n                                ];\n                        }\n                    });\n                })();\n            }\n        }\n    ], [\n        {\n            key: \"_fromUser\",\n            value: function _fromUser(user) {\n                return new MultiFactorUserImpl(user);\n            }\n        }\n    ]);\n    return MultiFactorUserImpl;\n}();\nvar $07e48e70fcf53a6e$var$multiFactorUserCache = new WeakMap();\n/**\r\n * The {@link MultiFactorUser} corresponding to the user.\r\n *\r\n * @remarks\r\n * This is used to access all multi-factor properties and operations related to the user.\r\n *\r\n * @param user - The user.\r\n *\r\n * @public\r\n */ function $07e48e70fcf53a6e$export$d24c54395ce0c509(user) {\n    var userModular = (0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(user);\n    if (!$07e48e70fcf53a6e$var$multiFactorUserCache.has(userModular)) $07e48e70fcf53a6e$var$multiFactorUserCache.set(userModular, $07e48e70fcf53a6e$var$MultiFactorUserImpl._fromUser(userModular));\n    return $07e48e70fcf53a6e$var$multiFactorUserCache.get(userModular);\n}\nvar $07e48e70fcf53a6e$var$STORAGE_AVAILABLE_KEY = \"__sak\";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ // There are two different browser persistence types: local and session.\n// Both have the same implementation but use a different underlying storage\n// object.\nvar $07e48e70fcf53a6e$var$BrowserPersistenceClass = /*#__PURE__*/ function() {\n    \"use strict\";\n    function BrowserPersistenceClass(storageRetriever, type) {\n        (0, $juqrk._)(this, BrowserPersistenceClass);\n        this.storageRetriever = storageRetriever;\n        this.type = type;\n    }\n    (0, $bNI6E._)(BrowserPersistenceClass, [\n        {\n            key: \"_isAvailable\",\n            value: function _isAvailable() {\n                try {\n                    if (!this.storage) return Promise.resolve(false);\n                    this.storage.setItem($07e48e70fcf53a6e$var$STORAGE_AVAILABLE_KEY, \"1\");\n                    this.storage.removeItem($07e48e70fcf53a6e$var$STORAGE_AVAILABLE_KEY);\n                    return Promise.resolve(true);\n                } catch (_a) {\n                    return Promise.resolve(false);\n                }\n            }\n        },\n        {\n            key: \"_set\",\n            value: function _set(key, value) {\n                this.storage.setItem(key, JSON.stringify(value));\n                return Promise.resolve();\n            }\n        },\n        {\n            key: \"_get\",\n            value: function _get(key) {\n                var json = this.storage.getItem(key);\n                return Promise.resolve(json ? JSON.parse(json) : null);\n            }\n        },\n        {\n            key: \"_remove\",\n            value: function _remove(key) {\n                this.storage.removeItem(key);\n                return Promise.resolve();\n            }\n        },\n        {\n            key: \"storage\",\n            get: function get() {\n                return this.storageRetriever();\n            }\n        }\n    ]);\n    return BrowserPersistenceClass;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ function $07e48e70fcf53a6e$var$_iframeCannotSyncWebStorage() {\n    var ua = (0, $1d9d263a787f8021$export$c36915b22ce77c19)();\n    return $07e48e70fcf53a6e$var$_isSafari(ua) || $07e48e70fcf53a6e$export$493d36ec626b6698(ua);\n}\n// The polling period in case events are not supported\nvar $07e48e70fcf53a6e$var$_POLLING_INTERVAL_MS$1 = 1000;\n// The IE 10 localStorage cross tab synchronization delay in milliseconds\nvar $07e48e70fcf53a6e$var$IE10_LOCAL_STORAGE_SYNC_DELAY = 10;\nvar $07e48e70fcf53a6e$var$BrowserLocalPersistence = /*#__PURE__*/ function(BrowserPersistenceClass) {\n    \"use strict\";\n    (0, $jqfyu._)(BrowserLocalPersistence, BrowserPersistenceClass);\n    var _super = (0, $50zho._)(BrowserLocalPersistence);\n    function BrowserLocalPersistence() {\n        (0, $juqrk._)(this, BrowserLocalPersistence);\n        var _this;\n        _this = _super.call(this, function() {\n            return window.localStorage;\n        }, \"LOCAL\" /* PersistenceType.LOCAL */ );\n        _this.boundEventHandler = function(event, poll) {\n            return _this.onStorageEvent(event, poll);\n        };\n        _this.listeners = {};\n        _this.localCache = {};\n        // setTimeout return value is platform specific\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        _this.pollTimer = null;\n        // Safari or iOS browser and embedded in an iframe.\n        _this.safariLocalStorageNotSynced = $07e48e70fcf53a6e$var$_iframeCannotSyncWebStorage() && $07e48e70fcf53a6e$var$_isIframe();\n        // Whether to use polling instead of depending on window events\n        _this.fallbackToPolling = $07e48e70fcf53a6e$var$_isMobileBrowser();\n        _this._shouldAllowMigration = true;\n        return _this;\n    }\n    (0, $bNI6E._)(BrowserLocalPersistence, [\n        {\n            key: \"forAllChangedKeys\",\n            value: function forAllChangedKeys(cb) {\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    // Check all keys with listeners on them.\n                    for(var _iterator = Object.keys(this.listeners)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var key = _step.value;\n                        // Get value from localStorage.\n                        var newValue = this.storage.getItem(key);\n                        var oldValue = this.localCache[key];\n                        // If local map value does not match, trigger listener with storage event.\n                        // Differentiate this simulated event from the real storage event.\n                        if (newValue !== oldValue) cb(key, oldValue, newValue);\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n            }\n        },\n        {\n            key: \"onStorageEvent\",\n            value: function onStorageEvent(event) {\n                var poll = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n                var _this = this;\n                // Key would be null in some situations, like when localStorage is cleared\n                if (!event.key) {\n                    this.forAllChangedKeys(function(key, _oldValue, newValue) {\n                        _this.notifyListeners(key, newValue);\n                    });\n                    return;\n                }\n                var key = event.key;\n                // Check the mechanism how this event was detected.\n                // The first event will dictate the mechanism to be used.\n                if (poll) // Environment detects storage changes via polling.\n                // Remove storage event listener to prevent possible event duplication.\n                this.detachListener();\n                else // Environment detects storage changes via storage event listener.\n                // Remove polling listener to prevent possible event duplication.\n                this.stopPolling();\n                // Safari embedded iframe. Storage event will trigger with the delta\n                // changes but no changes will be applied to the iframe localStorage.\n                if (this.safariLocalStorageNotSynced) {\n                    // Get current iframe page value.\n                    var storedValue = this.storage.getItem(key);\n                    // Value not synchronized, synchronize manually.\n                    if (event.newValue !== storedValue) {\n                        if (event.newValue !== null) // Value changed from current value.\n                        this.storage.setItem(key, event.newValue);\n                        else // Current value deleted.\n                        this.storage.removeItem(key);\n                    } else if (this.localCache[key] === event.newValue && !poll) // Already detected and processed, do not trigger listeners again.\n                    return;\n                }\n                var triggerListeners = function() {\n                    // Keep local map up to date in case storage event is triggered before\n                    // poll.\n                    var storedValue = _this.storage.getItem(key);\n                    if (!poll && _this.localCache[key] === storedValue) // Real storage event which has already been detected, do nothing.\n                    // This seems to trigger in some IE browsers for some reason.\n                    return;\n                    _this.notifyListeners(key, storedValue);\n                };\n                var storedValue1 = this.storage.getItem(key);\n                if ($07e48e70fcf53a6e$var$_isIE10() && storedValue1 !== event.newValue && event.newValue !== event.oldValue) // IE 10 has this weird bug where a storage event would trigger with the\n                // correct key, oldValue and newValue but localStorage.getItem(key) does\n                // not yield the updated value until a few milliseconds. This ensures\n                // this recovers from that situation.\n                setTimeout(triggerListeners, $07e48e70fcf53a6e$var$IE10_LOCAL_STORAGE_SYNC_DELAY);\n                else triggerListeners();\n            }\n        },\n        {\n            key: \"notifyListeners\",\n            value: function notifyListeners(key, value) {\n                this.localCache[key] = value;\n                var listeners = this.listeners[key];\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                if (listeners) try {\n                    for(var _iterator = Array.from(listeners)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var listener = _step.value;\n                        listener(value ? JSON.parse(value) : value);\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n            }\n        },\n        {\n            key: \"startPolling\",\n            value: function startPolling() {\n                var _this = this;\n                this.stopPolling();\n                this.pollTimer = setInterval(function() {\n                    _this.forAllChangedKeys(function(key, oldValue, newValue) {\n                        _this.onStorageEvent(new StorageEvent(\"storage\", {\n                            key: key,\n                            oldValue: oldValue,\n                            newValue: newValue\n                        }), /* poll */ true);\n                    });\n                }, $07e48e70fcf53a6e$var$_POLLING_INTERVAL_MS$1);\n            }\n        },\n        {\n            key: \"stopPolling\",\n            value: function stopPolling() {\n                if (this.pollTimer) {\n                    clearInterval(this.pollTimer);\n                    this.pollTimer = null;\n                }\n            }\n        },\n        {\n            key: \"attachListener\",\n            value: function attachListener() {\n                window.addEventListener(\"storage\", this.boundEventHandler);\n            }\n        },\n        {\n            key: \"detachListener\",\n            value: function detachListener() {\n                window.removeEventListener(\"storage\", this.boundEventHandler);\n            }\n        },\n        {\n            key: \"_addListener\",\n            value: function _addListener(key, listener) {\n                if (Object.keys(this.listeners).length === 0) {\n                    // Whether browser can detect storage event when it had already been pushed to the background.\n                    // This may happen in some mobile browsers. A localStorage change in the foreground window\n                    // will not be detected in the background window via the storage event.\n                    // This was detected in iOS 7.x mobile browsers\n                    if (this.fallbackToPolling) this.startPolling();\n                    else this.attachListener();\n                }\n                if (!this.listeners[key]) {\n                    this.listeners[key] = new Set();\n                    // Populate the cache to avoid spuriously triggering on first poll.\n                    this.localCache[key] = this.storage.getItem(key);\n                }\n                this.listeners[key].add(listener);\n            }\n        },\n        {\n            key: \"_removeListener\",\n            value: function _removeListener(key, listener) {\n                if (this.listeners[key]) {\n                    this.listeners[key].delete(listener);\n                    if (this.listeners[key].size === 0) delete this.listeners[key];\n                }\n                if (Object.keys(this.listeners).length === 0) {\n                    this.detachListener();\n                    this.stopPolling();\n                }\n            }\n        },\n        {\n            key: \"_set\",\n            value: // Update local cache on base operations:\n            function _set(key, value) {\n                var _this = this;\n                var _this1 = this, _superprop_get__set = function() {\n                    return (0, $e6962c1d2fca547a$export$afb3516d9d608401)((0, $5yT7U._)(BrowserLocalPersistence.prototype), \"_set\", _this);\n                };\n                return (0, $i7mVp._)(function() {\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                return [\n                                    4,\n                                    _superprop_get__set().call(_this1, key, value)\n                                ];\n                            case 1:\n                                _state.sent();\n                                _this1.localCache[key] = JSON.stringify(value);\n                                return [\n                                    2\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"_get\",\n            value: function _get1(key) {\n                var _this = this;\n                var _this1 = this, _superprop_get__get = function() {\n                    return (0, $e6962c1d2fca547a$export$afb3516d9d608401)((0, $5yT7U._)(BrowserLocalPersistence.prototype), \"_get\", _this);\n                };\n                return (0, $i7mVp._)(function() {\n                    var value;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                return [\n                                    4,\n                                    _superprop_get__get().call(_this1, key)\n                                ];\n                            case 1:\n                                value = _state.sent();\n                                _this1.localCache[key] = JSON.stringify(value);\n                                return [\n                                    2,\n                                    value\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"_remove\",\n            value: function _remove(key) {\n                var _this = this;\n                var _this1 = this, _superprop_get__remove = function() {\n                    return (0, $e6962c1d2fca547a$export$afb3516d9d608401)((0, $5yT7U._)(BrowserLocalPersistence.prototype), \"_remove\", _this);\n                };\n                return (0, $i7mVp._)(function() {\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                return [\n                                    4,\n                                    _superprop_get__remove().call(_this1, key)\n                                ];\n                            case 1:\n                                _state.sent();\n                                delete _this1.localCache[key];\n                                return [\n                                    2\n                                ];\n                        }\n                    });\n                })();\n            }\n        }\n    ]);\n    return BrowserLocalPersistence;\n}($07e48e70fcf53a6e$var$BrowserPersistenceClass);\n$07e48e70fcf53a6e$var$BrowserLocalPersistence.type = \"LOCAL\";\n/**\r\n * An implementation of {@link Persistence} of type `LOCAL` using `localStorage`\r\n * for the underlying storage.\r\n *\r\n * @public\r\n */ var $07e48e70fcf53a6e$export$8b22cf2602fb60ce = $07e48e70fcf53a6e$var$BrowserLocalPersistence;\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ var $07e48e70fcf53a6e$var$BrowserSessionPersistence = /*#__PURE__*/ function(BrowserPersistenceClass) {\n    \"use strict\";\n    (0, $jqfyu._)(BrowserSessionPersistence, BrowserPersistenceClass);\n    var _super = (0, $50zho._)(BrowserSessionPersistence);\n    function BrowserSessionPersistence() {\n        (0, $juqrk._)(this, BrowserSessionPersistence);\n        return _super.call(this, function() {\n            return window.sessionStorage;\n        }, \"SESSION\" /* PersistenceType.SESSION */ );\n    }\n    (0, $bNI6E._)(BrowserSessionPersistence, [\n        {\n            key: \"_addListener\",\n            value: function _addListener(_key, _listener) {\n                // Listeners are not supported for session storage since it cannot be shared across windows\n                return;\n            }\n        },\n        {\n            key: \"_removeListener\",\n            value: function _removeListener(_key, _listener) {\n                // Listeners are not supported for session storage since it cannot be shared across windows\n                return;\n            }\n        }\n    ]);\n    return BrowserSessionPersistence;\n}($07e48e70fcf53a6e$var$BrowserPersistenceClass);\n$07e48e70fcf53a6e$var$BrowserSessionPersistence.type = \"SESSION\";\n/**\r\n * An implementation of {@link Persistence} of `SESSION` using `sessionStorage`\r\n * for the underlying storage.\r\n *\r\n * @public\r\n */ var $07e48e70fcf53a6e$export$407448d2b89b1813 = $07e48e70fcf53a6e$var$BrowserSessionPersistence;\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Shim for Promise.allSettled, note the slightly different format of `fulfilled` vs `status`.\r\n *\r\n * @param promises - Array of promises to wait on.\r\n */ function $07e48e70fcf53a6e$var$_allSettled(promises) {\n    return Promise.all(promises.map(function() {\n        var _ref = (0, $i7mVp._)(function(promise) {\n            var value, reason;\n            return (0, $4tSb9.__generator)(this, function(_state) {\n                switch(_state.label){\n                    case 0:\n                        _state.trys.push([\n                            0,\n                            2,\n                            ,\n                            3\n                        ]);\n                        return [\n                            4,\n                            promise\n                        ];\n                    case 1:\n                        value = _state.sent();\n                        return [\n                            2,\n                            {\n                                fulfilled: true,\n                                value: value\n                            }\n                        ];\n                    case 2:\n                        reason = _state.sent();\n                        return [\n                            2,\n                            {\n                                fulfilled: false,\n                                reason: reason\n                            }\n                        ];\n                    case 3:\n                        return [\n                            2\n                        ];\n                }\n            });\n        });\n        return function(promise) {\n            return _ref.apply(this, arguments);\n        };\n    }()));\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Interface class for receiving messages.\r\n *\r\n */ var $07e48e70fcf53a6e$var$Receiver = /*#__PURE__*/ function() {\n    \"use strict\";\n    function Receiver(eventTarget) {\n        (0, $juqrk._)(this, Receiver);\n        this.eventTarget = eventTarget;\n        this.handlersMap = {};\n        this.boundEventHandler = this.handleEvent.bind(this);\n    }\n    (0, $bNI6E._)(Receiver, [\n        {\n            key: \"isListeningto\",\n            value: function isListeningto(eventTarget) {\n                return this.eventTarget === eventTarget;\n            }\n        },\n        {\n            key: \"handleEvent\",\n            value: /**\r\n     * Fans out a MessageEvent to the appropriate listeners.\r\n     *\r\n     * @remarks\r\n     * Sends an {@link Status.ACK} upon receipt and a {@link Status.DONE} once all handlers have\r\n     * finished processing.\r\n     *\r\n     * @param event - The MessageEvent.\r\n     *\r\n     */ function handleEvent(event) {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var messageEvent, _messageEvent_data, eventId, eventType, data, handlers, promises, response;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                messageEvent = event;\n                                _messageEvent_data = messageEvent.data, eventId = _messageEvent_data.eventId, eventType = _messageEvent_data.eventType, data = _messageEvent_data.data;\n                                handlers = _this.handlersMap[eventType];\n                                if (!(handlers === null || handlers === void 0 ? void 0 : handlers.size)) return [\n                                    2\n                                ];\n                                messageEvent.ports[0].postMessage({\n                                    status: \"ack\" /* _Status.ACK */ ,\n                                    eventId: eventId,\n                                    eventType: eventType\n                                });\n                                promises = Array.from(handlers).map(function() {\n                                    var _ref = (0, $i7mVp._)(function(handler) {\n                                        return (0, $4tSb9.__generator)(this, function(_state) {\n                                            return [\n                                                2,\n                                                handler(messageEvent.origin, data)\n                                            ];\n                                        });\n                                    });\n                                    return function(handler) {\n                                        return _ref.apply(this, arguments);\n                                    };\n                                }());\n                                return [\n                                    4,\n                                    $07e48e70fcf53a6e$var$_allSettled(promises)\n                                ];\n                            case 1:\n                                response = _state.sent();\n                                messageEvent.ports[0].postMessage({\n                                    status: \"done\" /* _Status.DONE */ ,\n                                    eventId: eventId,\n                                    eventType: eventType,\n                                    response: response\n                                });\n                                return [\n                                    2\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            /**\r\n     * Subscribe an event handler for a particular event.\r\n     *\r\n     * @param eventType - Event name to subscribe to.\r\n     * @param eventHandler - The event handler which should receive the events.\r\n     *\r\n     */ key: \"_subscribe\",\n            value: function _subscribe(eventType, eventHandler) {\n                if (Object.keys(this.handlersMap).length === 0) this.eventTarget.addEventListener(\"message\", this.boundEventHandler);\n                if (!this.handlersMap[eventType]) this.handlersMap[eventType] = new Set();\n                this.handlersMap[eventType].add(eventHandler);\n            }\n        },\n        {\n            /**\r\n     * Unsubscribe an event handler from a particular event.\r\n     *\r\n     * @param eventType - Event name to unsubscribe from.\r\n     * @param eventHandler - Optinoal event handler, if none provided, unsubscribe all handlers on this event.\r\n     *\r\n     */ key: \"_unsubscribe\",\n            value: function _unsubscribe(eventType, eventHandler) {\n                if (this.handlersMap[eventType] && eventHandler) this.handlersMap[eventType].delete(eventHandler);\n                if (!eventHandler || this.handlersMap[eventType].size === 0) delete this.handlersMap[eventType];\n                if (Object.keys(this.handlersMap).length === 0) this.eventTarget.removeEventListener(\"message\", this.boundEventHandler);\n            }\n        }\n    ], [\n        {\n            key: \"_getInstance\",\n            value: /**\r\n     * Obtain an instance of a Receiver for a given event target, if none exists it will be created.\r\n     *\r\n     * @param eventTarget - An event target (such as window or self) through which the underlying\r\n     * messages will be received.\r\n     */ function _getInstance(eventTarget) {\n                // The results are stored in an array since objects can't be keys for other\n                // objects. In addition, setting a unique property on an event target as a\n                // hash map key may not be allowed due to CORS restrictions.\n                var existingInstance = this.receivers.find(function(receiver) {\n                    return receiver.isListeningto(eventTarget);\n                });\n                if (existingInstance) return existingInstance;\n                var newInstance = new Receiver(eventTarget);\n                this.receivers.push(newInstance);\n                return newInstance;\n            }\n        }\n    ]);\n    return Receiver;\n}();\n$07e48e70fcf53a6e$var$Receiver.receivers = [];\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ function $07e48e70fcf53a6e$export$91477dc880baac21() {\n    var prefix = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"\", digits = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 10;\n    var random = \"\";\n    for(var i = 0; i < digits; i++)random += Math.floor(Math.random() * 10);\n    return prefix + random;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Interface for sending messages and waiting for a completion response.\r\n *\r\n */ var $07e48e70fcf53a6e$var$Sender = /*#__PURE__*/ function() {\n    \"use strict\";\n    function Sender(target) {\n        (0, $juqrk._)(this, Sender);\n        this.target = target;\n        this.handlers = new Set();\n    }\n    (0, $bNI6E._)(Sender, [\n        {\n            /**\r\n     * Unsubscribe the handler and remove it from our tracking Set.\r\n     *\r\n     * @param handler - The handler to unsubscribe.\r\n     */ key: \"removeMessageHandler\",\n            value: function removeMessageHandler(handler) {\n                if (handler.messageChannel) {\n                    handler.messageChannel.port1.removeEventListener(\"message\", handler.onMessage);\n                    handler.messageChannel.port1.close();\n                }\n                this.handlers.delete(handler);\n            }\n        },\n        {\n            key: \"_send\",\n            value: /**\r\n     * Send a message to the Receiver located at {@link target}.\r\n     *\r\n     * @remarks\r\n     * We'll first wait a bit for an ACK , if we get one we will wait significantly longer until the\r\n     * receiver has had a chance to fully process the event.\r\n     *\r\n     * @param eventType - Type of event to send.\r\n     * @param data - The payload of the event.\r\n     * @param timeout - Timeout for waiting on an ACK from the receiver.\r\n     *\r\n     * @returns An array of settled promises from all the handlers that were listening on the receiver.\r\n     */ function _send(eventType, data) {\n                var timeout = arguments.length > 2 && arguments[2] !== void 0 /* _TimeoutDuration.ACK */  ? arguments[2] : 50;\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var messageChannel, completionTimer, handler;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        messageChannel = typeof MessageChannel !== \"undefined\" ? new MessageChannel() : null;\n                        if (!messageChannel) throw new Error(\"connection_unavailable\" /* _MessageError.CONNECTION_UNAVAILABLE */ );\n                        return [\n                            2,\n                            new Promise(function(resolve, reject) {\n                                var eventId = $07e48e70fcf53a6e$export$91477dc880baac21(\"\", 20);\n                                messageChannel.port1.start();\n                                var ackTimer = setTimeout(function() {\n                                    reject(new Error(\"unsupported_event\" /* _MessageError.UNSUPPORTED_EVENT */ ));\n                                }, timeout);\n                                handler = {\n                                    messageChannel: messageChannel,\n                                    onMessage: function(event) {\n                                        var messageEvent = event;\n                                        if (messageEvent.data.eventId !== eventId) return;\n                                        switch(messageEvent.data.status){\n                                            case \"ack\" /* _Status.ACK */ :\n                                                // The receiver should ACK first.\n                                                clearTimeout(ackTimer);\n                                                completionTimer = setTimeout(function() {\n                                                    reject(new Error(\"timeout\" /* _MessageError.TIMEOUT */ ));\n                                                }, 3000 /* _TimeoutDuration.COMPLETION */ );\n                                                break;\n                                            case \"done\" /* _Status.DONE */ :\n                                                // Once the receiver's handlers are finished we will get the results.\n                                                clearTimeout(completionTimer);\n                                                resolve(messageEvent.data.response);\n                                                break;\n                                            default:\n                                                clearTimeout(ackTimer);\n                                                clearTimeout(completionTimer);\n                                                reject(new Error(\"invalid_response\" /* _MessageError.INVALID_RESPONSE */ ));\n                                                break;\n                                        }\n                                    }\n                                };\n                                _this.handlers.add(handler);\n                                messageChannel.port1.addEventListener(\"message\", handler.onMessage);\n                                _this.target.postMessage({\n                                    eventType: eventType,\n                                    eventId: eventId,\n                                    data: data\n                                }, [\n                                    messageChannel.port2\n                                ]);\n                            }).finally(function() {\n                                if (handler) _this.removeMessageHandler(handler);\n                            })\n                        ];\n                    });\n                })();\n            }\n        }\n    ]);\n    return Sender;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Lazy accessor for window, since the compat layer won't tree shake this out,\r\n * we need to make sure not to mess with window unless we have to\r\n */ function $07e48e70fcf53a6e$var$_window() {\n    return window;\n}\nfunction $07e48e70fcf53a6e$var$_setWindowLocation(url) {\n    $07e48e70fcf53a6e$var$_window().location.href = url;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ function $07e48e70fcf53a6e$var$_isWorker() {\n    return typeof $07e48e70fcf53a6e$var$_window()[\"WorkerGlobalScope\"] !== \"undefined\" && typeof $07e48e70fcf53a6e$var$_window()[\"importScripts\"] === \"function\";\n}\nfunction $07e48e70fcf53a6e$var$_getActiveServiceWorker() {\n    return $07e48e70fcf53a6e$var$__getActiveServiceWorker.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$__getActiveServiceWorker() {\n    $07e48e70fcf53a6e$var$__getActiveServiceWorker = (0, $i7mVp._)(function() {\n        var registration, _a;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    if (!(navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker)) return [\n                        2,\n                        null\n                    ];\n                    _state.label = 1;\n                case 1:\n                    _state.trys.push([\n                        1,\n                        3,\n                        ,\n                        4\n                    ]);\n                    return [\n                        4,\n                        navigator.serviceWorker.ready\n                    ];\n                case 2:\n                    registration = _state.sent();\n                    return [\n                        2,\n                        registration.active\n                    ];\n                case 3:\n                    _a = _state.sent();\n                    return [\n                        2,\n                        null\n                    ];\n                case 4:\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$__getActiveServiceWorker.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_getServiceWorkerController() {\n    var _a;\n    return ((_a = navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker) === null || _a === void 0 ? void 0 : _a.controller) || null;\n}\nfunction $07e48e70fcf53a6e$var$_getWorkerGlobalScope() {\n    return $07e48e70fcf53a6e$var$_isWorker() ? self : null;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ var $07e48e70fcf53a6e$var$DB_NAME = \"firebaseLocalStorageDb\";\nvar $07e48e70fcf53a6e$var$DB_VERSION = 1;\nvar $07e48e70fcf53a6e$var$DB_OBJECTSTORE_NAME = \"firebaseLocalStorage\";\nvar $07e48e70fcf53a6e$var$DB_DATA_KEYPATH = \"fbase_key\";\n/**\r\n * Promise wrapper for IDBRequest\r\n *\r\n * Unfortunately we can't cleanly extend Promise<T> since promises are not callable in ES6\r\n *\r\n */ var $07e48e70fcf53a6e$var$DBPromise = /*#__PURE__*/ function() {\n    \"use strict\";\n    function DBPromise(request) {\n        (0, $juqrk._)(this, DBPromise);\n        this.request = request;\n    }\n    (0, $bNI6E._)(DBPromise, [\n        {\n            key: \"toPromise\",\n            value: function toPromise() {\n                var _this = this;\n                return new Promise(function(resolve, reject) {\n                    _this.request.addEventListener(\"success\", function() {\n                        resolve(_this.request.result);\n                    });\n                    _this.request.addEventListener(\"error\", function() {\n                        reject(_this.request.error);\n                    });\n                });\n            }\n        }\n    ]);\n    return DBPromise;\n}();\nfunction $07e48e70fcf53a6e$var$getObjectStore(db, isReadWrite) {\n    return db.transaction([\n        $07e48e70fcf53a6e$var$DB_OBJECTSTORE_NAME\n    ], isReadWrite ? \"readwrite\" : \"readonly\").objectStore($07e48e70fcf53a6e$var$DB_OBJECTSTORE_NAME);\n}\nfunction $07e48e70fcf53a6e$var$_deleteDatabase() {\n    var request = indexedDB.deleteDatabase($07e48e70fcf53a6e$var$DB_NAME);\n    return new $07e48e70fcf53a6e$var$DBPromise(request).toPromise();\n}\nfunction $07e48e70fcf53a6e$var$_openDatabase() {\n    var request = indexedDB.open($07e48e70fcf53a6e$var$DB_NAME, $07e48e70fcf53a6e$var$DB_VERSION);\n    return new Promise(function(resolve, reject) {\n        request.addEventListener(\"error\", function() {\n            reject(request.error);\n        });\n        request.addEventListener(\"upgradeneeded\", function() {\n            var db = request.result;\n            try {\n                db.createObjectStore($07e48e70fcf53a6e$var$DB_OBJECTSTORE_NAME, {\n                    keyPath: $07e48e70fcf53a6e$var$DB_DATA_KEYPATH\n                });\n            } catch (e) {\n                reject(e);\n            }\n        });\n        request.addEventListener(\"success\", /*#__PURE__*/ (0, $i7mVp._)(function() {\n            var db;\n            return (0, $4tSb9.__generator)(this, function(_state) {\n                switch(_state.label){\n                    case 0:\n                        db = request.result;\n                        if (!!db.objectStoreNames.contains($07e48e70fcf53a6e$var$DB_OBJECTSTORE_NAME)) return [\n                            3,\n                            3\n                        ];\n                        // Need to close the database or else you get a `blocked` event\n                        db.close();\n                        return [\n                            4,\n                            $07e48e70fcf53a6e$var$_deleteDatabase()\n                        ];\n                    case 1:\n                        _state.sent();\n                        return [\n                            4,\n                            $07e48e70fcf53a6e$var$_openDatabase()\n                        ];\n                    case 2:\n                        resolve.apply(void 0, [\n                            _state.sent()\n                        ]);\n                        return [\n                            3,\n                            4\n                        ];\n                    case 3:\n                        resolve(db);\n                        _state.label = 4;\n                    case 4:\n                        return [\n                            2\n                        ];\n                }\n            });\n        }));\n    });\n}\nfunction $07e48e70fcf53a6e$var$_putObject(db, key, value) {\n    return $07e48e70fcf53a6e$var$__putObject.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$__putObject() {\n    $07e48e70fcf53a6e$var$__putObject = (0, $i7mVp._)(function(db, key, value) {\n        var _obj, request;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            request = $07e48e70fcf53a6e$var$getObjectStore(db, true).put((_obj = {}, (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, $07e48e70fcf53a6e$var$DB_DATA_KEYPATH, key), (0, $a568c0d5880c90ba$export$1e71eb4bef00f6b0)(_obj, \"value\", value), _obj));\n            return [\n                2,\n                new $07e48e70fcf53a6e$var$DBPromise(request).toPromise()\n            ];\n        });\n    });\n    return $07e48e70fcf53a6e$var$__putObject.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$getObject(db, key) {\n    return $07e48e70fcf53a6e$var$_getObject.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_getObject() {\n    $07e48e70fcf53a6e$var$_getObject = (0, $i7mVp._)(function(db, key) {\n        var request, data;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    request = $07e48e70fcf53a6e$var$getObjectStore(db, false).get(key);\n                    return [\n                        4,\n                        new $07e48e70fcf53a6e$var$DBPromise(request).toPromise()\n                    ];\n                case 1:\n                    data = _state.sent();\n                    return [\n                        2,\n                        data === undefined ? null : data.value\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$_getObject.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_deleteObject(db, key) {\n    var request = $07e48e70fcf53a6e$var$getObjectStore(db, true).delete(key);\n    return new $07e48e70fcf53a6e$var$DBPromise(request).toPromise();\n}\nvar $07e48e70fcf53a6e$var$_POLLING_INTERVAL_MS = 800;\nvar $07e48e70fcf53a6e$var$_TRANSACTION_RETRY_COUNT = 3;\nvar $07e48e70fcf53a6e$var$IndexedDBLocalPersistence = /*#__PURE__*/ function() {\n    \"use strict\";\n    function IndexedDBLocalPersistence() {\n        (0, $juqrk._)(this, IndexedDBLocalPersistence);\n        this.type = \"LOCAL\" /* PersistenceType.LOCAL */ ;\n        this._shouldAllowMigration = true;\n        this.listeners = {};\n        this.localCache = {};\n        // setTimeout return value is platform specific\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.pollTimer = null;\n        this.pendingWrites = 0;\n        this.receiver = null;\n        this.sender = null;\n        this.serviceWorkerReceiverAvailable = false;\n        this.activeServiceWorker = null;\n        // Fire & forget the service worker registration as it may never resolve\n        this._workerInitializationPromise = this.initializeServiceWorkerMessaging().then(function() {}, function() {});\n    }\n    (0, $bNI6E._)(IndexedDBLocalPersistence, [\n        {\n            key: \"_openDb\",\n            value: function _openDb() {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                if (_this.db) return [\n                                    2,\n                                    _this.db\n                                ];\n                                return [\n                                    4,\n                                    $07e48e70fcf53a6e$var$_openDatabase()\n                                ];\n                            case 1:\n                                _this.db = _state.sent();\n                                return [\n                                    2,\n                                    _this.db\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"_withRetries\",\n            value: function _withRetries(op) {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var numAttempts, db, e;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                numAttempts = 0;\n                                _state.label = 1;\n                            case 1:\n                                if (!true) return [\n                                    3,\n                                    7\n                                ];\n                                _state.label = 2;\n                            case 2:\n                                _state.trys.push([\n                                    2,\n                                    5,\n                                    ,\n                                    6\n                                ]);\n                                return [\n                                    4,\n                                    _this._openDb()\n                                ];\n                            case 3:\n                                db = _state.sent();\n                                return [\n                                    4,\n                                    op(db)\n                                ];\n                            case 4:\n                                return [\n                                    2,\n                                    _state.sent()\n                                ];\n                            case 5:\n                                e = _state.sent();\n                                if (numAttempts++ > $07e48e70fcf53a6e$var$_TRANSACTION_RETRY_COUNT) throw e;\n                                if (_this.db) {\n                                    _this.db.close();\n                                    _this.db = undefined;\n                                }\n                                return [\n                                    3,\n                                    6\n                                ];\n                            case 6:\n                                return [\n                                    3,\n                                    1\n                                ];\n                            case 7:\n                                return [\n                                    2\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"initializeServiceWorkerMessaging\",\n            value: /**\r\n     * IndexedDB events do not propagate from the main window to the worker context.  We rely on a\r\n     * postMessage interface to send these events to the worker ourselves.\r\n     */ function initializeServiceWorkerMessaging() {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        return [\n                            2,\n                            $07e48e70fcf53a6e$var$_isWorker() ? _this.initializeReceiver() : _this.initializeSender()\n                        ];\n                    });\n                })();\n            }\n        },\n        {\n            key: \"initializeReceiver\",\n            value: /**\r\n     * As the worker we should listen to events from the main window.\r\n     */ function initializeReceiver() {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        _this.receiver = $07e48e70fcf53a6e$var$Receiver._getInstance($07e48e70fcf53a6e$var$_getWorkerGlobalScope());\n                        // Refresh from persistence if we receive a KeyChanged message.\n                        _this.receiver._subscribe(\"keyChanged\" /* _EventType.KEY_CHANGED */ , function() {\n                            var _ref = (0, $i7mVp._)(function(_origin, data) {\n                                var keys;\n                                return (0, $4tSb9.__generator)(this, function(_state) {\n                                    switch(_state.label){\n                                        case 0:\n                                            return [\n                                                4,\n                                                _this._poll()\n                                            ];\n                                        case 1:\n                                            keys = _state.sent();\n                                            return [\n                                                2,\n                                                {\n                                                    keyProcessed: keys.includes(data.key)\n                                                }\n                                            ];\n                                    }\n                                });\n                            });\n                            return function(_origin, data) {\n                                return _ref.apply(this, arguments);\n                            };\n                        }());\n                        // Let the sender know that we are listening so they give us more timeout.\n                        _this.receiver._subscribe(\"ping\" /* _EventType.PING */ , function() {\n                            var _ref = (0, $i7mVp._)(function(_origin, _data) {\n                                return (0, $4tSb9.__generator)(this, function(_state) {\n                                    return [\n                                        2,\n                                        [\n                                            \"keyChanged\" /* _EventType.KEY_CHANGED */ \n                                        ]\n                                    ];\n                                });\n                            });\n                            return function(_origin, _data) {\n                                return _ref.apply(this, arguments);\n                            };\n                        }());\n                        return [\n                            2\n                        ];\n                    });\n                })();\n            }\n        },\n        {\n            key: \"initializeSender\",\n            value: /**\r\n     * As the main window, we should let the worker know when keys change (set and remove).\r\n     *\r\n     * @remarks\r\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready | ServiceWorkerContainer.ready}\r\n     * may not resolve.\r\n     */ function initializeSender() {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var _a, _b, results;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                return [\n                                    4,\n                                    $07e48e70fcf53a6e$var$_getActiveServiceWorker()\n                                ];\n                            case 1:\n                                // Check to see if there's an active service worker.\n                                _this.activeServiceWorker = _state.sent();\n                                if (!_this.activeServiceWorker) return [\n                                    2\n                                ];\n                                _this.sender = new $07e48e70fcf53a6e$var$Sender(_this.activeServiceWorker);\n                                return [\n                                    4,\n                                    _this.sender._send(\"ping\" /* _EventType.PING */ , {}, 800 /* _TimeoutDuration.LONG_ACK */ )\n                                ];\n                            case 2:\n                                results = _state.sent();\n                                if (!results) return [\n                                    2\n                                ];\n                                if (((_a = results[0]) === null || _a === void 0 ? void 0 : _a.fulfilled) && ((_b = results[0]) === null || _b === void 0 ? void 0 : _b.value.includes(\"keyChanged\" /* _EventType.KEY_CHANGED */ ))) _this.serviceWorkerReceiverAvailable = true;\n                                return [\n                                    2\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"notifyServiceWorker\",\n            value: /**\r\n     * Let the worker know about a changed key, the exact key doesn't technically matter since the\r\n     * worker will just trigger a full sync anyway.\r\n     *\r\n     * @remarks\r\n     * For now, we only support one service worker per page.\r\n     *\r\n     * @param key - Storage key which changed.\r\n     */ function notifyServiceWorker(key) {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var _a;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                if (!_this.sender || !_this.activeServiceWorker || $07e48e70fcf53a6e$var$_getServiceWorkerController() !== _this.activeServiceWorker) return [\n                                    2\n                                ];\n                                _state.label = 1;\n                            case 1:\n                                _state.trys.push([\n                                    1,\n                                    3,\n                                    ,\n                                    4\n                                ]);\n                                return [\n                                    4,\n                                    _this.sender._send(\"keyChanged\" /* _EventType.KEY_CHANGED */ , {\n                                        key: key\n                                    }, // Use long timeout if receiver has previously responded to a ping from us.\n                                    _this.serviceWorkerReceiverAvailable ? 800 /* _TimeoutDuration.LONG_ACK */  : 50 /* _TimeoutDuration.ACK */ )\n                                ];\n                            case 2:\n                                _state.sent();\n                                return [\n                                    3,\n                                    4\n                                ];\n                            case 3:\n                                _a = _state.sent();\n                                return [\n                                    3,\n                                    4\n                                ];\n                            case 4:\n                                return [\n                                    2\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"_isAvailable\",\n            value: function _isAvailable() {\n                return (0, $i7mVp._)(function() {\n                    var db, _a;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                _state.trys.push([\n                                    0,\n                                    4,\n                                    ,\n                                    5\n                                ]);\n                                if (!indexedDB) return [\n                                    2,\n                                    false\n                                ];\n                                return [\n                                    4,\n                                    $07e48e70fcf53a6e$var$_openDatabase()\n                                ];\n                            case 1:\n                                db = _state.sent();\n                                return [\n                                    4,\n                                    $07e48e70fcf53a6e$var$_putObject(db, $07e48e70fcf53a6e$var$STORAGE_AVAILABLE_KEY, \"1\")\n                                ];\n                            case 2:\n                                _state.sent();\n                                return [\n                                    4,\n                                    $07e48e70fcf53a6e$var$_deleteObject(db, $07e48e70fcf53a6e$var$STORAGE_AVAILABLE_KEY)\n                                ];\n                            case 3:\n                                _state.sent();\n                                return [\n                                    2,\n                                    true\n                                ];\n                            case 4:\n                                _a = _state.sent();\n                                return [\n                                    3,\n                                    5\n                                ];\n                            case 5:\n                                return [\n                                    2,\n                                    false\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"_withPendingWrite\",\n            value: function _withPendingWrite(write) {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                _this.pendingWrites++;\n                                _state.label = 1;\n                            case 1:\n                                _state.trys.push([\n                                    1,\n                                    ,\n                                    3,\n                                    4\n                                ]);\n                                return [\n                                    4,\n                                    write()\n                                ];\n                            case 2:\n                                _state.sent();\n                                return [\n                                    3,\n                                    4\n                                ];\n                            case 3:\n                                _this.pendingWrites--;\n                                return [\n                                    7\n                                ];\n                            case 4:\n                                return [\n                                    2\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"_set\",\n            value: function _set(key, value) {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        return [\n                            2,\n                            _this._withPendingWrite(/*#__PURE__*/ (0, $i7mVp._)(function() {\n                                return (0, $4tSb9.__generator)(this, function(_state) {\n                                    switch(_state.label){\n                                        case 0:\n                                            return [\n                                                4,\n                                                _this._withRetries(function(db) {\n                                                    return $07e48e70fcf53a6e$var$_putObject(db, key, value);\n                                                })\n                                            ];\n                                        case 1:\n                                            _state.sent();\n                                            _this.localCache[key] = value;\n                                            return [\n                                                2,\n                                                _this.notifyServiceWorker(key)\n                                            ];\n                                    }\n                                });\n                            }))\n                        ];\n                    });\n                })();\n            }\n        },\n        {\n            key: \"_get\",\n            value: function _get(key) {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var obj;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                return [\n                                    4,\n                                    _this._withRetries(function(db) {\n                                        return $07e48e70fcf53a6e$var$getObject(db, key);\n                                    })\n                                ];\n                            case 1:\n                                obj = _state.sent();\n                                _this.localCache[key] = obj;\n                                return [\n                                    2,\n                                    obj\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"_remove\",\n            value: function _remove(key) {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        return [\n                            2,\n                            _this._withPendingWrite(/*#__PURE__*/ (0, $i7mVp._)(function() {\n                                return (0, $4tSb9.__generator)(this, function(_state) {\n                                    switch(_state.label){\n                                        case 0:\n                                            return [\n                                                4,\n                                                _this._withRetries(function(db) {\n                                                    return $07e48e70fcf53a6e$var$_deleteObject(db, key);\n                                                })\n                                            ];\n                                        case 1:\n                                            _state.sent();\n                                            delete _this.localCache[key];\n                                            return [\n                                                2,\n                                                _this.notifyServiceWorker(key)\n                                            ];\n                                    }\n                                });\n                            }))\n                        ];\n                    });\n                })();\n            }\n        },\n        {\n            key: \"_poll\",\n            value: function _poll() {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var result, keys, keysInResult, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step_value, key, value, _iteratorNormalCompletion1, _didIteratorError1, _iteratorError1, _iterator1, _step1, localKey;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                return [\n                                    4,\n                                    _this._withRetries(function(db) {\n                                        var getAllRequest = $07e48e70fcf53a6e$var$getObjectStore(db, false).getAll();\n                                        return new $07e48e70fcf53a6e$var$DBPromise(getAllRequest).toPromise();\n                                    })\n                                ];\n                            case 1:\n                                result = _state.sent();\n                                if (!result) return [\n                                    2,\n                                    []\n                                ];\n                                // If we have pending writes in progress abort, we'll get picked up on the next poll\n                                if (_this.pendingWrites !== 0) return [\n                                    2,\n                                    []\n                                ];\n                                keys = [];\n                                keysInResult = new Set();\n                                _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                                try {\n                                    for(_iterator = result[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                                        _step_value = _step.value, key = _step_value.fbase_key, value = _step_value.value;\n                                        keysInResult.add(key);\n                                        if (JSON.stringify(_this.localCache[key]) !== JSON.stringify(value)) {\n                                            _this.notifyListeners(key, value);\n                                            keys.push(key);\n                                        }\n                                    }\n                                } catch (err) {\n                                    _didIteratorError = true;\n                                    _iteratorError = err;\n                                } finally{\n                                    try {\n                                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                                            _iterator.return();\n                                        }\n                                    } finally{\n                                        if (_didIteratorError) {\n                                            throw _iteratorError;\n                                        }\n                                    }\n                                }\n                                _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n                                try {\n                                    for(_iterator1 = Object.keys(_this.localCache)[Symbol.iterator](); !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){\n                                        localKey = _step1.value;\n                                        if (_this.localCache[localKey] && !keysInResult.has(localKey)) {\n                                            // Deleted\n                                            _this.notifyListeners(localKey, null);\n                                            keys.push(localKey);\n                                        }\n                                    }\n                                } catch (err) {\n                                    _didIteratorError1 = true;\n                                    _iteratorError1 = err;\n                                } finally{\n                                    try {\n                                        if (!_iteratorNormalCompletion1 && _iterator1.return != null) {\n                                            _iterator1.return();\n                                        }\n                                    } finally{\n                                        if (_didIteratorError1) {\n                                            throw _iteratorError1;\n                                        }\n                                    }\n                                }\n                                return [\n                                    2,\n                                    keys\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"notifyListeners\",\n            value: function notifyListeners(key, newValue) {\n                this.localCache[key] = newValue;\n                var listeners = this.listeners[key];\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                if (listeners) try {\n                    for(var _iterator = Array.from(listeners)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var listener = _step.value;\n                        listener(newValue);\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n            }\n        },\n        {\n            key: \"startPolling\",\n            value: function startPolling() {\n                this.stopPolling();\n                var _this = this;\n                this.pollTimer = setInterval(/*#__PURE__*/ (0, $i7mVp._)(function() {\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        return [\n                            2,\n                            _this._poll()\n                        ];\n                    });\n                }), $07e48e70fcf53a6e$var$_POLLING_INTERVAL_MS);\n            }\n        },\n        {\n            key: \"stopPolling\",\n            value: function stopPolling() {\n                if (this.pollTimer) {\n                    clearInterval(this.pollTimer);\n                    this.pollTimer = null;\n                }\n            }\n        },\n        {\n            key: \"_addListener\",\n            value: function _addListener(key, listener) {\n                if (Object.keys(this.listeners).length === 0) this.startPolling();\n                if (!this.listeners[key]) {\n                    this.listeners[key] = new Set();\n                    this._get(key); // This can happen in the background async and we can return immediately.\n                }\n                this.listeners[key].add(listener);\n            }\n        },\n        {\n            key: \"_removeListener\",\n            value: function _removeListener(key, listener) {\n                if (this.listeners[key]) {\n                    this.listeners[key].delete(listener);\n                    if (this.listeners[key].size === 0) delete this.listeners[key];\n                }\n                if (Object.keys(this.listeners).length === 0) this.stopPolling();\n            }\n        }\n    ]);\n    return IndexedDBLocalPersistence;\n}();\n$07e48e70fcf53a6e$var$IndexedDBLocalPersistence.type = \"LOCAL\";\n/**\r\n * An implementation of {@link Persistence} of type `LOCAL` using `indexedDB`\r\n * for the underlying storage.\r\n *\r\n * @public\r\n */ var $07e48e70fcf53a6e$export$23f2a1d2818174ef = $07e48e70fcf53a6e$var$IndexedDBLocalPersistence;\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ function $07e48e70fcf53a6e$var$startSignInPhoneMfa(auth, request) {\n    return $07e48e70fcf53a6e$var$_performApiRequest(auth, \"POST\" /* HttpMethod.POST */ , \"/v2/accounts/mfaSignIn:start\" /* Endpoint.START_MFA_SIGN_IN */ , $07e48e70fcf53a6e$var$_addTidIfNecessary(auth, request));\n}\nfunction $07e48e70fcf53a6e$var$finalizeSignInPhoneMfa(auth, request) {\n    return $07e48e70fcf53a6e$var$_performApiRequest(auth, \"POST\" /* HttpMethod.POST */ , \"/v2/accounts/mfaSignIn:finalize\" /* Endpoint.FINALIZE_MFA_SIGN_IN */ , $07e48e70fcf53a6e$var$_addTidIfNecessary(auth, request));\n}\nfunction $07e48e70fcf53a6e$var$finalizeSignInTotpMfa(auth, request) {\n    return $07e48e70fcf53a6e$var$_performApiRequest(auth, \"POST\" /* HttpMethod.POST */ , \"/v2/accounts/mfaSignIn:finalize\" /* Endpoint.FINALIZE_MFA_SIGN_IN */ , $07e48e70fcf53a6e$var$_addTidIfNecessary(auth, request));\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ var $07e48e70fcf53a6e$var$_SOLVE_TIME_MS = 500;\nvar $07e48e70fcf53a6e$var$_EXPIRATION_TIME_MS = 60000;\nvar $07e48e70fcf53a6e$var$_WIDGET_ID_START = 1000000000000;\nvar $07e48e70fcf53a6e$var$MockReCaptcha = /*#__PURE__*/ function() {\n    \"use strict\";\n    function MockReCaptcha(auth) {\n        (0, $juqrk._)(this, MockReCaptcha);\n        this.auth = auth;\n        this.counter = $07e48e70fcf53a6e$var$_WIDGET_ID_START;\n        this._widgets = new Map();\n    }\n    (0, $bNI6E._)(MockReCaptcha, [\n        {\n            key: \"render\",\n            value: function render(container, parameters) {\n                var id = this.counter;\n                this._widgets.set(id, new $07e48e70fcf53a6e$var$MockWidget(container, this.auth.name, parameters || {}));\n                this.counter++;\n                return id;\n            }\n        },\n        {\n            key: \"reset\",\n            value: function reset(optWidgetId) {\n                var _a;\n                var id = optWidgetId || $07e48e70fcf53a6e$var$_WIDGET_ID_START;\n                (_a = this._widgets.get(id)) === null || _a === void 0 || _a.delete();\n                this._widgets.delete(id);\n            }\n        },\n        {\n            key: \"getResponse\",\n            value: function getResponse(optWidgetId) {\n                var _a;\n                var id = optWidgetId || $07e48e70fcf53a6e$var$_WIDGET_ID_START;\n                return ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.getResponse()) || \"\";\n            }\n        },\n        {\n            key: \"execute\",\n            value: function execute(optWidgetId) {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var _a, id;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        id = optWidgetId || $07e48e70fcf53a6e$var$_WIDGET_ID_START;\n                        (_a = _this._widgets.get(id)) === null || _a === void 0 || _a.execute();\n                        return [\n                            2,\n                            \"\"\n                        ];\n                    });\n                })();\n            }\n        }\n    ]);\n    return MockReCaptcha;\n}();\nvar $07e48e70fcf53a6e$var$MockWidget = /*#__PURE__*/ function() {\n    \"use strict\";\n    function MockWidget(containerOrId, appName, params) {\n        var _this = this;\n        (0, $juqrk._)(this, MockWidget);\n        this.params = params;\n        this.timerId = null;\n        this.deleted = false;\n        this.responseToken = null;\n        this.clickHandler = function() {\n            _this.execute();\n        };\n        var container = typeof containerOrId === \"string\" ? document.getElementById(containerOrId) : containerOrId;\n        $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(container, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */ , {\n            appName: appName\n        });\n        this.container = container;\n        this.isVisible = this.params.size !== \"invisible\";\n        if (this.isVisible) this.execute();\n        else this.container.addEventListener(\"click\", this.clickHandler);\n    }\n    (0, $bNI6E._)(MockWidget, [\n        {\n            key: \"getResponse\",\n            value: function getResponse() {\n                this.checkIfDeleted();\n                return this.responseToken;\n            }\n        },\n        {\n            key: \"delete\",\n            value: function _delete() {\n                this.checkIfDeleted();\n                this.deleted = true;\n                if (this.timerId) {\n                    clearTimeout(this.timerId);\n                    this.timerId = null;\n                }\n                this.container.removeEventListener(\"click\", this.clickHandler);\n            }\n        },\n        {\n            key: \"execute\",\n            value: function execute() {\n                var _this = this;\n                this.checkIfDeleted();\n                if (this.timerId) return;\n                this.timerId = window.setTimeout(function() {\n                    _this.responseToken = $07e48e70fcf53a6e$var$generateRandomAlphaNumericString(50);\n                    var _this_params = _this.params, callback = _this_params.callback, expiredCallback = _this_params[\"expired-callback\"];\n                    if (callback) try {\n                        callback(_this.responseToken);\n                    } catch (e) {}\n                    _this.timerId = window.setTimeout(function() {\n                        _this.timerId = null;\n                        _this.responseToken = null;\n                        if (expiredCallback) try {\n                            expiredCallback();\n                        } catch (e) {}\n                        if (_this.isVisible) _this.execute();\n                    }, $07e48e70fcf53a6e$var$_EXPIRATION_TIME_MS);\n                }, $07e48e70fcf53a6e$var$_SOLVE_TIME_MS);\n            }\n        },\n        {\n            key: \"checkIfDeleted\",\n            value: function checkIfDeleted() {\n                if (this.deleted) throw new Error(\"reCAPTCHA mock was already deleted!\");\n            }\n        }\n    ]);\n    return MockWidget;\n}();\nfunction $07e48e70fcf53a6e$var$generateRandomAlphaNumericString(len) {\n    var chars = [];\n    var allowedChars = \"1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    for(var i = 0; i < len; i++)chars.push(allowedChars.charAt(Math.floor(Math.random() * allowedChars.length)));\n    return chars.join(\"\");\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ // ReCaptcha will load using the same callback, so the callback function needs\n// to be kept around\nvar $07e48e70fcf53a6e$var$_JSLOAD_CALLBACK = $07e48e70fcf53a6e$var$_generateCallbackName(\"rcb\");\nvar $07e48e70fcf53a6e$var$NETWORK_TIMEOUT_DELAY = new $07e48e70fcf53a6e$var$Delay(30000, 60000);\nvar $07e48e70fcf53a6e$var$RECAPTCHA_BASE = \"https://www.google.com/recaptcha/api.js?\";\n/**\r\n * Loader for the GReCaptcha library. There should only ever be one of this.\r\n */ var $07e48e70fcf53a6e$var$ReCaptchaLoaderImpl = /*#__PURE__*/ function() {\n    \"use strict\";\n    function ReCaptchaLoaderImpl() {\n        (0, $juqrk._)(this, ReCaptchaLoaderImpl);\n        var _a;\n        this.hostLanguage = \"\";\n        this.counter = 0;\n        /**\r\n         * Check for `render()` method. `window.grecaptcha` will exist if the Enterprise\r\n         * version of the ReCAPTCHA script was loaded by someone else (e.g. App Check) but\r\n         * `window.grecaptcha.render()` will not. Another load will add it.\r\n         */ this.librarySeparatelyLoaded = !!((_a = $07e48e70fcf53a6e$var$_window().grecaptcha) === null || _a === void 0 ? void 0 : _a.render);\n    }\n    (0, $bNI6E._)(ReCaptchaLoaderImpl, [\n        {\n            key: \"load\",\n            value: function load(auth) {\n                var hl = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"\";\n                var _this = this;\n                $07e48e70fcf53a6e$export$91c6e00c14e7e6fd($07e48e70fcf53a6e$var$isHostLanguageValid(hl), auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */ );\n                if (this.shouldResolveImmediately(hl) && $07e48e70fcf53a6e$var$isV2($07e48e70fcf53a6e$var$_window().grecaptcha)) return Promise.resolve($07e48e70fcf53a6e$var$_window().grecaptcha);\n                return new Promise(function(resolve, reject) {\n                    var networkTimeout = $07e48e70fcf53a6e$var$_window().setTimeout(function() {\n                        reject($07e48e70fcf53a6e$export$3d12bd131bb975d1(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */ ));\n                    }, $07e48e70fcf53a6e$var$NETWORK_TIMEOUT_DELAY.get());\n                    $07e48e70fcf53a6e$var$_window()[$07e48e70fcf53a6e$var$_JSLOAD_CALLBACK] = function() {\n                        $07e48e70fcf53a6e$var$_window().clearTimeout(networkTimeout);\n                        delete $07e48e70fcf53a6e$var$_window()[$07e48e70fcf53a6e$var$_JSLOAD_CALLBACK];\n                        var recaptcha = $07e48e70fcf53a6e$var$_window().grecaptcha;\n                        if (!recaptcha || !$07e48e70fcf53a6e$var$isV2(recaptcha)) {\n                            reject($07e48e70fcf53a6e$export$3d12bd131bb975d1(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ ));\n                            return;\n                        }\n                        // Wrap the greptcha render function so that we know if the developer has\n                        // called it separately\n                        var render = recaptcha.render;\n                        recaptcha.render = function(container, params) {\n                            var widgetId = render(container, params);\n                            _this.counter++;\n                            return widgetId;\n                        };\n                        _this.hostLanguage = hl;\n                        resolve(recaptcha);\n                    };\n                    var url = \"\".concat($07e48e70fcf53a6e$var$RECAPTCHA_BASE, \"?\").concat((0, $1d9d263a787f8021$export$ac4103b836844853)({\n                        onload: $07e48e70fcf53a6e$var$_JSLOAD_CALLBACK,\n                        render: \"explicit\",\n                        hl: hl\n                    }));\n                    $07e48e70fcf53a6e$var$_loadJS(url).catch(function() {\n                        clearTimeout(networkTimeout);\n                        reject($07e48e70fcf53a6e$export$3d12bd131bb975d1(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ ));\n                    });\n                });\n            }\n        },\n        {\n            key: \"clearedOneInstance\",\n            value: function clearedOneInstance() {\n                this.counter--;\n            }\n        },\n        {\n            key: \"shouldResolveImmediately\",\n            value: function shouldResolveImmediately(hl) {\n                var _a;\n                // We can resolve immediately if:\n                //   • grecaptcha is already defined AND (\n                //     1. the requested language codes are the same OR\n                //     2. there exists already a ReCaptcha on the page\n                //     3. the library was already loaded by the app\n                // In cases (2) and (3), we _can't_ reload as it would break the recaptchas\n                // that are already in the page\n                return !!((_a = $07e48e70fcf53a6e$var$_window().grecaptcha) === null || _a === void 0 ? void 0 : _a.render) && (hl === this.hostLanguage || this.counter > 0 || this.librarySeparatelyLoaded);\n            }\n        }\n    ]);\n    return ReCaptchaLoaderImpl;\n}();\nfunction $07e48e70fcf53a6e$var$isHostLanguageValid(hl) {\n    return hl.length <= 6 && /^\\s*[a-zA-Z0-9\\-]*\\s*$/.test(hl);\n}\nvar $07e48e70fcf53a6e$var$MockReCaptchaLoaderImpl = /*#__PURE__*/ function() {\n    \"use strict\";\n    function MockReCaptchaLoaderImpl() {\n        (0, $juqrk._)(this, MockReCaptchaLoaderImpl);\n    }\n    (0, $bNI6E._)(MockReCaptchaLoaderImpl, [\n        {\n            key: \"load\",\n            value: function load(auth) {\n                return (0, $i7mVp._)(function() {\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        return [\n                            2,\n                            new $07e48e70fcf53a6e$var$MockReCaptcha(auth)\n                        ];\n                    });\n                })();\n            }\n        },\n        {\n            key: \"clearedOneInstance\",\n            value: function clearedOneInstance() {}\n        }\n    ]);\n    return MockReCaptchaLoaderImpl;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ var $07e48e70fcf53a6e$var$RECAPTCHA_VERIFIER_TYPE = \"recaptcha\";\nvar $07e48e70fcf53a6e$var$DEFAULT_PARAMS = {\n    theme: \"light\",\n    type: \"image\"\n};\n/**\r\n * An {@link https://www.google.com/recaptcha/ | reCAPTCHA}-based application verifier.\r\n *\r\n * @public\r\n */ var $07e48e70fcf53a6e$export$db202ddc8be9136 = /*#__PURE__*/ function() {\n    \"use strict\";\n    function RecaptchaVerifier(containerOrId) {\n        var parameters = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Object.assign({}, $07e48e70fcf53a6e$var$DEFAULT_PARAMS), authExtern = arguments.length > 2 ? arguments[2] : void 0;\n        (0, $juqrk._)(this, RecaptchaVerifier);\n        this.parameters = parameters;\n        /**\r\n         * The application verifier type.\r\n         *\r\n         * @remarks\r\n         * For a reCAPTCHA verifier, this is 'recaptcha'.\r\n         */ this.type = $07e48e70fcf53a6e$var$RECAPTCHA_VERIFIER_TYPE;\n        this.destroyed = false;\n        this.widgetId = null;\n        this.tokenChangeListeners = new Set();\n        this.renderPromise = null;\n        this.recaptcha = null;\n        this.auth = $07e48e70fcf53a6e$export$a33b77bbdbb8366c(authExtern);\n        this.isInvisible = this.parameters.size === \"invisible\";\n        $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(typeof document !== \"undefined\", this.auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */ );\n        var container = typeof containerOrId === \"string\" ? document.getElementById(containerOrId) : containerOrId;\n        $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(container, this.auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */ );\n        this.container = container;\n        this.parameters.callback = this.makeTokenCallback(this.parameters.callback);\n        this._recaptchaLoader = this.auth.settings.appVerificationDisabledForTesting ? new $07e48e70fcf53a6e$var$MockReCaptchaLoaderImpl() : new $07e48e70fcf53a6e$var$ReCaptchaLoaderImpl();\n        this.validateStartingState();\n    }\n    (0, $bNI6E._)(RecaptchaVerifier, [\n        {\n            key: \"verify\",\n            value: /**\r\n     * Waits for the user to solve the reCAPTCHA and resolves with the reCAPTCHA token.\r\n     *\r\n     * @returns A Promise for the reCAPTCHA token.\r\n     */ function verify() {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var id, recaptcha, response;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                _this.assertNotDestroyed();\n                                return [\n                                    4,\n                                    _this.render()\n                                ];\n                            case 1:\n                                id = _state.sent();\n                                recaptcha = _this.getAssertedRecaptcha();\n                                response = recaptcha.getResponse(id);\n                                if (response) return [\n                                    2,\n                                    response\n                                ];\n                                return [\n                                    2,\n                                    new Promise(function(resolve) {\n                                        var tokenChange = function(token) {\n                                            if (!token) return; // Ignore token expirations.\n                                            _this.tokenChangeListeners.delete(tokenChange);\n                                            resolve(token);\n                                        };\n                                        _this.tokenChangeListeners.add(tokenChange);\n                                        if (_this.isInvisible) recaptcha.execute(id);\n                                    })\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            /**\r\n     * Renders the reCAPTCHA widget on the page.\r\n     *\r\n     * @returns A Promise that resolves with the reCAPTCHA widget ID.\r\n     */ key: \"render\",\n            value: function render() {\n                var _this = this;\n                try {\n                    this.assertNotDestroyed();\n                } catch (e) {\n                    // This method returns a promise. Since it's not async (we want to return the\n                    // _same_ promise if rendering is still occurring), the API surface should\n                    // reject with the error rather than just throw\n                    return Promise.reject(e);\n                }\n                if (this.renderPromise) return this.renderPromise;\n                this.renderPromise = this.makeRenderPromise().catch(function(e) {\n                    _this.renderPromise = null;\n                    throw e;\n                });\n                return this.renderPromise;\n            }\n        },\n        {\n            /** @internal */ key: \"_reset\",\n            value: function _reset() {\n                this.assertNotDestroyed();\n                if (this.widgetId !== null) this.getAssertedRecaptcha().reset(this.widgetId);\n            }\n        },\n        {\n            /**\r\n     * Clears the reCAPTCHA widget from the page and destroys the instance.\r\n     */ key: \"clear\",\n            value: function clear() {\n                var _this = this;\n                this.assertNotDestroyed();\n                this.destroyed = true;\n                this._recaptchaLoader.clearedOneInstance();\n                if (!this.isInvisible) this.container.childNodes.forEach(function(node) {\n                    _this.container.removeChild(node);\n                });\n            }\n        },\n        {\n            key: \"validateStartingState\",\n            value: function validateStartingState() {\n                $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(!this.parameters.sitekey, this.auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */ );\n                $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(this.isInvisible || !this.container.hasChildNodes(), this.auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */ );\n                $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(typeof document !== \"undefined\", this.auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */ );\n            }\n        },\n        {\n            key: \"makeTokenCallback\",\n            value: function makeTokenCallback(existing) {\n                var _this = this;\n                return function(token) {\n                    _this.tokenChangeListeners.forEach(function(listener) {\n                        return listener(token);\n                    });\n                    if (typeof existing === \"function\") existing(token);\n                    else if (typeof existing === \"string\") {\n                        var globalFunc = $07e48e70fcf53a6e$var$_window()[existing];\n                        if (typeof globalFunc === \"function\") globalFunc(token);\n                    }\n                };\n            }\n        },\n        {\n            key: \"assertNotDestroyed\",\n            value: function assertNotDestroyed() {\n                $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(!this.destroyed, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n            }\n        },\n        {\n            key: \"makeRenderPromise\",\n            value: function makeRenderPromise() {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var container, guaranteedEmpty;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                return [\n                                    4,\n                                    _this.init()\n                                ];\n                            case 1:\n                                _state.sent();\n                                if (!_this.widgetId) {\n                                    container = _this.container;\n                                    if (!_this.isInvisible) {\n                                        guaranteedEmpty = document.createElement(\"div\");\n                                        container.appendChild(guaranteedEmpty);\n                                        container = guaranteedEmpty;\n                                    }\n                                    _this.widgetId = _this.getAssertedRecaptcha().render(container, _this.parameters);\n                                }\n                                return [\n                                    2,\n                                    _this.widgetId\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"init\",\n            value: function init() {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var siteKey;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                $07e48e70fcf53a6e$export$91c6e00c14e7e6fd($07e48e70fcf53a6e$var$_isHttpOrHttps() && !$07e48e70fcf53a6e$var$_isWorker(), _this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n                                return [\n                                    4,\n                                    $07e48e70fcf53a6e$var$domReady()\n                                ];\n                            case 1:\n                                _state.sent();\n                                return [\n                                    4,\n                                    _this._recaptchaLoader.load(_this.auth, _this.auth.languageCode || undefined)\n                                ];\n                            case 2:\n                                _this.recaptcha = _state.sent();\n                                return [\n                                    4,\n                                    $07e48e70fcf53a6e$var$getRecaptchaParams(_this.auth)\n                                ];\n                            case 3:\n                                siteKey = _state.sent();\n                                $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(siteKey, _this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n                                _this.parameters.sitekey = siteKey;\n                                return [\n                                    2\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"getAssertedRecaptcha\",\n            value: function getAssertedRecaptcha() {\n                $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(this.recaptcha, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n                return this.recaptcha;\n            }\n        }\n    ]);\n    return RecaptchaVerifier;\n}();\nfunction $07e48e70fcf53a6e$var$domReady() {\n    var resolver = null;\n    return new Promise(function(resolve) {\n        if (document.readyState === \"complete\") {\n            resolve();\n            return;\n        }\n        // Document not ready, wait for load before resolving.\n        // Save resolver, so we can remove listener in case it was externally\n        // cancelled.\n        resolver = function() {\n            return resolve();\n        };\n        window.addEventListener(\"load\", resolver);\n    }).catch(function(e) {\n        if (resolver) window.removeEventListener(\"load\", resolver);\n        throw e;\n    });\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ var $07e48e70fcf53a6e$var$ConfirmationResultImpl = /*#__PURE__*/ function() {\n    \"use strict\";\n    function ConfirmationResultImpl(verificationId, onConfirmation) {\n        (0, $juqrk._)(this, ConfirmationResultImpl);\n        this.verificationId = verificationId;\n        this.onConfirmation = onConfirmation;\n    }\n    (0, $bNI6E._)(ConfirmationResultImpl, [\n        {\n            key: \"confirm\",\n            value: function confirm(verificationCode) {\n                var authCredential = $07e48e70fcf53a6e$export$3a1a48c8f6ef640e._fromVerification(this.verificationId, verificationCode);\n                return this.onConfirmation(authCredential);\n            }\n        }\n    ]);\n    return ConfirmationResultImpl;\n}();\nfunction $07e48e70fcf53a6e$export$2408f22a0fab9ae5(auth, phoneNumber, appVerifier) {\n    return $07e48e70fcf53a6e$var$_signInWithPhoneNumber.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_signInWithPhoneNumber() {\n    $07e48e70fcf53a6e$var$_signInWithPhoneNumber = /**\r\n * Asynchronously signs in using a phone number.\r\n *\r\n * @remarks\r\n * This method sends a code via SMS to the given\r\n * phone number, and returns a {@link ConfirmationResult}. After the user\r\n * provides the code sent to their phone, call {@link ConfirmationResult.confirm}\r\n * with the code to sign the user in.\r\n *\r\n * For abuse prevention, this method also requires a {@link ApplicationVerifier}.\r\n * This SDK includes a reCAPTCHA-based implementation, {@link RecaptchaVerifier}.\r\n * This function can work on other platforms that do not support the\r\n * {@link RecaptchaVerifier} (like React Native), but you need to use a\r\n * third-party {@link ApplicationVerifier} implementation.\r\n *\r\n * @example\r\n * ```javascript\r\n * // 'recaptcha-container' is the ID of an element in the DOM.\r\n * const applicationVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container');\r\n * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\r\n * // Obtain a verificationCode from the user.\r\n * const credential = await confirmationResult.confirm(verificationCode);\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\r\n * @param appVerifier - The {@link ApplicationVerifier}.\r\n *\r\n * @public\r\n */ (0, $i7mVp._)(function(auth, phoneNumber, appVerifier) {\n        var authInternal, verificationId;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    authInternal = $07e48e70fcf53a6e$export$a33b77bbdbb8366c(auth);\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$_verifyPhoneNumber(authInternal, phoneNumber, (0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(appVerifier))\n                    ];\n                case 1:\n                    verificationId = _state.sent();\n                    return [\n                        2,\n                        new $07e48e70fcf53a6e$var$ConfirmationResultImpl(verificationId, function(cred) {\n                            return $07e48e70fcf53a6e$export$3d8c2f653ac9d0b9(authInternal, cred);\n                        })\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$_signInWithPhoneNumber.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$export$882b5998b3b9117c(user, phoneNumber, appVerifier) {\n    return $07e48e70fcf53a6e$var$_linkWithPhoneNumber.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_linkWithPhoneNumber() {\n    $07e48e70fcf53a6e$var$_linkWithPhoneNumber = /**\r\n * Links the user account with the given phone number.\r\n *\r\n * @param user - The user.\r\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\r\n * @param appVerifier - The {@link ApplicationVerifier}.\r\n *\r\n * @public\r\n */ (0, $i7mVp._)(function(user, phoneNumber, appVerifier) {\n        var userInternal, verificationId;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    userInternal = (0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(user);\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$_assertLinkedStatus(false, userInternal, \"phone\" /* ProviderId.PHONE */ )\n                    ];\n                case 1:\n                    _state.sent();\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$_verifyPhoneNumber(userInternal.auth, phoneNumber, (0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(appVerifier))\n                    ];\n                case 2:\n                    verificationId = _state.sent();\n                    return [\n                        2,\n                        new $07e48e70fcf53a6e$var$ConfirmationResultImpl(verificationId, function(cred) {\n                            return $07e48e70fcf53a6e$export$34aec0b863436764(userInternal, cred);\n                        })\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$_linkWithPhoneNumber.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$export$43caf9889c228507(user, phoneNumber, appVerifier) {\n    return $07e48e70fcf53a6e$var$_reauthenticateWithPhoneNumber.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_reauthenticateWithPhoneNumber() {\n    $07e48e70fcf53a6e$var$_reauthenticateWithPhoneNumber = /**\r\n * Re-authenticates a user using a fresh phone credential.\r\n *\r\n * @remarks Use before operations such as {@link updatePassword} that require tokens from recent sign-in attempts.\r\n *\r\n * @param user - The user.\r\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\r\n * @param appVerifier - The {@link ApplicationVerifier}.\r\n *\r\n * @public\r\n */ (0, $i7mVp._)(function(user, phoneNumber, appVerifier) {\n        var userInternal, verificationId;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    userInternal = (0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(user);\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$_verifyPhoneNumber(userInternal.auth, phoneNumber, (0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(appVerifier))\n                    ];\n                case 1:\n                    verificationId = _state.sent();\n                    return [\n                        2,\n                        new $07e48e70fcf53a6e$var$ConfirmationResultImpl(verificationId, function(cred) {\n                            return $07e48e70fcf53a6e$export$3c2fa207a37baaea(userInternal, cred);\n                        })\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$_reauthenticateWithPhoneNumber.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_verifyPhoneNumber(auth, options, verifier) {\n    return $07e48e70fcf53a6e$var$__verifyPhoneNumber.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$__verifyPhoneNumber() {\n    $07e48e70fcf53a6e$var$__verifyPhoneNumber = /**\r\n * Returns a verification ID to be used in conjunction with the SMS code that is sent.\r\n *\r\n */ (0, $i7mVp._)(function(auth, options, verifier) {\n        var _a, recaptchaToken, phoneInfoOptions, session, response, mfaEnrollmentId, response1, sessionInfo;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    return [\n                        4,\n                        verifier.verify()\n                    ];\n                case 1:\n                    recaptchaToken = _state.sent();\n                    _state.label = 2;\n                case 2:\n                    _state.trys.push([\n                        2,\n                        ,\n                        10,\n                        11\n                    ]);\n                    $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(typeof recaptchaToken === \"string\", auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */ );\n                    $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(verifier.type === $07e48e70fcf53a6e$var$RECAPTCHA_VERIFIER_TYPE, auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */ );\n                    if (typeof options === \"string\") phoneInfoOptions = {\n                        phoneNumber: options\n                    };\n                    else phoneInfoOptions = options;\n                    if (!(\"session\" in phoneInfoOptions)) return [\n                        3,\n                        7\n                    ];\n                    session = phoneInfoOptions.session;\n                    if (!(\"phoneNumber\" in phoneInfoOptions)) return [\n                        3,\n                        4\n                    ];\n                    $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(session.type === \"enroll\" /* MultiFactorSessionType.ENROLL */ , auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$startEnrollPhoneMfa(auth, {\n                            idToken: session.credential,\n                            phoneEnrollmentInfo: {\n                                phoneNumber: phoneInfoOptions.phoneNumber,\n                                recaptchaToken: recaptchaToken\n                            }\n                        })\n                    ];\n                case 3:\n                    response = _state.sent();\n                    return [\n                        2,\n                        response.phoneSessionInfo.sessionInfo\n                    ];\n                case 4:\n                    $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(session.type === \"signin\" /* MultiFactorSessionType.SIGN_IN */ , auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n                    mfaEnrollmentId = ((_a = phoneInfoOptions.multiFactorHint) === null || _a === void 0 ? void 0 : _a.uid) || phoneInfoOptions.multiFactorUid;\n                    $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(mfaEnrollmentId, auth, \"missing-multi-factor-info\" /* AuthErrorCode.MISSING_MFA_INFO */ );\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$startSignInPhoneMfa(auth, {\n                            mfaPendingCredential: session.credential,\n                            mfaEnrollmentId: mfaEnrollmentId,\n                            phoneSignInInfo: {\n                                recaptchaToken: recaptchaToken\n                            }\n                        })\n                    ];\n                case 5:\n                    response1 = _state.sent();\n                    return [\n                        2,\n                        response1.phoneResponseInfo.sessionInfo\n                    ];\n                case 6:\n                    return [\n                        3,\n                        9\n                    ];\n                case 7:\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$sendPhoneVerificationCode(auth, {\n                            phoneNumber: phoneInfoOptions.phoneNumber,\n                            recaptchaToken: recaptchaToken\n                        })\n                    ];\n                case 8:\n                    sessionInfo = _state.sent().sessionInfo;\n                    return [\n                        2,\n                        sessionInfo\n                    ];\n                case 9:\n                    return [\n                        3,\n                        11\n                    ];\n                case 10:\n                    verifier._reset();\n                    return [\n                        7\n                    ];\n                case 11:\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$__verifyPhoneNumber.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$export$3b14a55fb2447963(user, credential) {\n    return $07e48e70fcf53a6e$var$_updatePhoneNumber.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_updatePhoneNumber() {\n    $07e48e70fcf53a6e$var$_updatePhoneNumber = /**\r\n * Updates the user's phone number.\r\n *\r\n * @example\r\n * ```\r\n * // 'recaptcha-container' is the ID of an element in the DOM.\r\n * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');\r\n * const provider = new PhoneAuthProvider(auth);\r\n * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);\r\n * // Obtain the verificationCode from the user.\r\n * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\r\n * await updatePhoneNumber(user, phoneCredential);\r\n * ```\r\n *\r\n * @param user - The user.\r\n * @param credential - A credential authenticating the new phone number.\r\n *\r\n * @public\r\n */ (0, $i7mVp._)(function(user, credential) {\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$_link$1((0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(user), credential)\n                    ];\n                case 1:\n                    _state.sent();\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$_updatePhoneNumber.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Provider for generating an {@link PhoneAuthCredential}.\r\n *\r\n * @example\r\n * ```javascript\r\n * // 'recaptcha-container' is the ID of an element in the DOM.\r\n * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');\r\n * const provider = new PhoneAuthProvider(auth);\r\n * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);\r\n * // Obtain the verificationCode from the user.\r\n * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\r\n * const userCredential = await signInWithCredential(auth, phoneCredential);\r\n * ```\r\n *\r\n * @public\r\n */ var $07e48e70fcf53a6e$export$56c0d5a1e737357d = /*#__PURE__*/ function() {\n    \"use strict\";\n    function PhoneAuthProvider(auth) {\n        (0, $juqrk._)(this, PhoneAuthProvider);\n        /** Always set to {@link ProviderId}.PHONE. */ this.providerId = PhoneAuthProvider.PROVIDER_ID;\n        this.auth = $07e48e70fcf53a6e$export$a33b77bbdbb8366c(auth);\n    }\n    (0, $bNI6E._)(PhoneAuthProvider, [\n        {\n            /**\r\n     *\r\n     * Starts a phone number authentication flow by sending a verification code to the given phone\r\n     * number.\r\n     *\r\n     * @example\r\n     * ```javascript\r\n     * const provider = new PhoneAuthProvider(auth);\r\n     * const verificationId = await provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\r\n     * // Obtain verificationCode from the user.\r\n     * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\r\n     * const userCredential = await signInWithCredential(auth, authCredential);\r\n     * ```\r\n     *\r\n     * @example\r\n     * An alternative flow is provided using the `signInWithPhoneNumber` method.\r\n     * ```javascript\r\n     * const confirmationResult = signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\r\n     * // Obtain verificationCode from the user.\r\n     * const userCredential = confirmationResult.confirm(verificationCode);\r\n     * ```\r\n     *\r\n     * @param phoneInfoOptions - The user's {@link PhoneInfoOptions}. The phone number should be in\r\n     * E.164 format (e.g. +16505550101).\r\n     * @param applicationVerifier - For abuse prevention, this method also requires a\r\n     * {@link ApplicationVerifier}. This SDK includes a reCAPTCHA-based implementation,\r\n     * {@link RecaptchaVerifier}.\r\n     *\r\n     * @returns A Promise for a verification ID that can be passed to\r\n     * {@link PhoneAuthProvider.credential} to identify this flow..\r\n     */ key: \"verifyPhoneNumber\",\n            value: function verifyPhoneNumber(phoneOptions, applicationVerifier) {\n                return $07e48e70fcf53a6e$var$_verifyPhoneNumber(this.auth, phoneOptions, (0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(applicationVerifier));\n            }\n        }\n    ], [\n        {\n            key: \"credential\",\n            value: /**\r\n     * Creates a phone auth credential, given the verification ID from\r\n     * {@link PhoneAuthProvider.verifyPhoneNumber} and the code that was sent to the user's\r\n     * mobile device.\r\n     *\r\n     * @example\r\n     * ```javascript\r\n     * const provider = new PhoneAuthProvider(auth);\r\n     * const verificationId = provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\r\n     * // Obtain verificationCode from the user.\r\n     * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\r\n     * const userCredential = signInWithCredential(auth, authCredential);\r\n     * ```\r\n     *\r\n     * @example\r\n     * An alternative flow is provided using the `signInWithPhoneNumber` method.\r\n     * ```javascript\r\n     * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\r\n     * // Obtain verificationCode from the user.\r\n     * const userCredential = await confirmationResult.confirm(verificationCode);\r\n     * ```\r\n     *\r\n     * @param verificationId - The verification ID returned from {@link PhoneAuthProvider.verifyPhoneNumber}.\r\n     * @param verificationCode - The verification code sent to the user's mobile device.\r\n     *\r\n     * @returns The auth provider credential.\r\n     */ function credential(verificationId, verificationCode) {\n                return $07e48e70fcf53a6e$export$3a1a48c8f6ef640e._fromVerification(verificationId, verificationCode);\n            }\n        },\n        {\n            key: \"credentialFromResult\",\n            value: /**\r\n     * Generates an {@link AuthCredential} from a {@link UserCredential}.\r\n     * @param userCredential - The user credential.\r\n     */ function credentialFromResult(userCredential) {\n                var credential = userCredential;\n                return PhoneAuthProvider.credentialFromTaggedObject(credential);\n            }\n        },\n        {\n            key: \"credentialFromError\",\n            value: /**\r\n     * Returns an {@link AuthCredential} when passed an error.\r\n     *\r\n     * @remarks\r\n     *\r\n     * This method works for errors like\r\n     * `auth/account-exists-with-different-credentials`. This is useful for\r\n     * recovering when attempting to set a user's phone number but the number\r\n     * in question is already tied to another account. For example, the following\r\n     * code tries to update the current user's phone number, and if that\r\n     * fails, links the user with the account associated with that number:\r\n     *\r\n     * ```js\r\n     * const provider = new PhoneAuthProvider(auth);\r\n     * const verificationId = await provider.verifyPhoneNumber(number, verifier);\r\n     * try {\r\n     *   const code = ''; // Prompt the user for the verification code\r\n     *   await updatePhoneNumber(\r\n     *       auth.currentUser,\r\n     *       PhoneAuthProvider.credential(verificationId, code));\r\n     * } catch (e) {\r\n     *   if ((e as FirebaseError)?.code === 'auth/account-exists-with-different-credential') {\r\n     *     const cred = PhoneAuthProvider.credentialFromError(e);\r\n     *     await linkWithCredential(auth.currentUser, cred);\r\n     *   }\r\n     * }\r\n     *\r\n     * // At this point, auth.currentUser.phoneNumber === number.\r\n     * ```\r\n     *\r\n     * @param error - The error to generate a credential from.\r\n     */ function credentialFromError(error) {\n                return PhoneAuthProvider.credentialFromTaggedObject(error.customData || {});\n            }\n        },\n        {\n            key: \"credentialFromTaggedObject\",\n            value: function credentialFromTaggedObject(param) {\n                var tokenResponse = param._tokenResponse;\n                if (!tokenResponse) return null;\n                var phoneNumber = tokenResponse.phoneNumber, temporaryProof = tokenResponse.temporaryProof;\n                if (phoneNumber && temporaryProof) return $07e48e70fcf53a6e$export$3a1a48c8f6ef640e._fromTokenResponse(phoneNumber, temporaryProof);\n                return null;\n            }\n        }\n    ]);\n    return PhoneAuthProvider;\n}();\n/** Always set to {@link ProviderId}.PHONE. */ $07e48e70fcf53a6e$export$56c0d5a1e737357d.PROVIDER_ID = \"phone\" /* ProviderId.PHONE */ ;\n/** Always set to {@link SignInMethod}.PHONE. */ $07e48e70fcf53a6e$export$56c0d5a1e737357d.PHONE_SIGN_IN_METHOD = \"phone\" /* SignInMethod.PHONE */ ;\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Chooses a popup/redirect resolver to use. This prefers the override (which\r\n * is directly passed in), and falls back to the property set on the auth\r\n * object. If neither are available, this function errors w/ an argument error.\r\n */ function $07e48e70fcf53a6e$var$_withDefaultResolver(auth, resolverOverride) {\n    if (resolverOverride) return $07e48e70fcf53a6e$export$890c4ad488842ce7(resolverOverride);\n    $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(auth._popupRedirectResolver, auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */ );\n    return auth._popupRedirectResolver;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ var $07e48e70fcf53a6e$var$IdpCredential = /*#__PURE__*/ function(AuthCredential) {\n    \"use strict\";\n    (0, $jqfyu._)(IdpCredential, AuthCredential);\n    var _super = (0, $50zho._)(IdpCredential);\n    function IdpCredential(params) {\n        (0, $juqrk._)(this, IdpCredential);\n        var _this;\n        _this = _super.call(this, \"custom\" /* ProviderId.CUSTOM */ , \"custom\" /* ProviderId.CUSTOM */ );\n        _this.params = params;\n        return _this;\n    }\n    (0, $bNI6E._)(IdpCredential, [\n        {\n            key: \"_getIdTokenResponse\",\n            value: function _getIdTokenResponse(auth) {\n                return $07e48e70fcf53a6e$var$signInWithIdp(auth, this._buildIdpRequest());\n            }\n        },\n        {\n            key: \"_linkToIdToken\",\n            value: function _linkToIdToken(auth, idToken) {\n                return $07e48e70fcf53a6e$var$signInWithIdp(auth, this._buildIdpRequest(idToken));\n            }\n        },\n        {\n            key: \"_getReauthenticationResolver\",\n            value: function _getReauthenticationResolver(auth) {\n                return $07e48e70fcf53a6e$var$signInWithIdp(auth, this._buildIdpRequest());\n            }\n        },\n        {\n            key: \"_buildIdpRequest\",\n            value: function _buildIdpRequest(idToken) {\n                var request = {\n                    requestUri: this.params.requestUri,\n                    sessionId: this.params.sessionId,\n                    postBody: this.params.postBody,\n                    tenantId: this.params.tenantId,\n                    pendingToken: this.params.pendingToken,\n                    returnSecureToken: true,\n                    returnIdpCredential: true\n                };\n                if (idToken) request.idToken = idToken;\n                return request;\n            }\n        }\n    ]);\n    return IdpCredential;\n}($07e48e70fcf53a6e$export$b4171a6734a65d42);\nfunction $07e48e70fcf53a6e$var$_signIn(params) {\n    return $07e48e70fcf53a6e$var$_signInWithCredential(params.auth, new $07e48e70fcf53a6e$var$IdpCredential(params), params.bypassAuthState);\n}\nfunction $07e48e70fcf53a6e$var$_reauth(params) {\n    var auth = params.auth, user = params.user;\n    $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(user, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n    return $07e48e70fcf53a6e$var$_reauthenticate(user, new $07e48e70fcf53a6e$var$IdpCredential(params), params.bypassAuthState);\n}\nfunction $07e48e70fcf53a6e$var$_link(params) {\n    return $07e48e70fcf53a6e$var$__link.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$__link() {\n    $07e48e70fcf53a6e$var$__link = (0, $i7mVp._)(function(params) {\n        var auth, user;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            auth = params.auth, user = params.user;\n            $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(user, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n            return [\n                2,\n                $07e48e70fcf53a6e$var$_link$1(user, new $07e48e70fcf53a6e$var$IdpCredential(params), params.bypassAuthState)\n            ];\n        });\n    });\n    return $07e48e70fcf53a6e$var$__link.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Popup event manager. Handles the popup's entire lifecycle; listens to auth\r\n * events\r\n */ var $07e48e70fcf53a6e$var$AbstractPopupRedirectOperation = /*#__PURE__*/ function() {\n    \"use strict\";\n    function AbstractPopupRedirectOperation(auth, filter, resolver, user) {\n        var bypassAuthState = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;\n        (0, $juqrk._)(this, AbstractPopupRedirectOperation);\n        this.auth = auth;\n        this.resolver = resolver;\n        this.user = user;\n        this.bypassAuthState = bypassAuthState;\n        this.pendingPromise = null;\n        this.eventManager = null;\n        this.filter = Array.isArray(filter) ? filter : [\n            filter\n        ];\n    }\n    (0, $bNI6E._)(AbstractPopupRedirectOperation, [\n        {\n            key: \"execute\",\n            value: function execute() {\n                var _this = this;\n                return new Promise(function() {\n                    var _ref = (0, $i7mVp._)(function(resolve, reject) {\n                        var e;\n                        return (0, $4tSb9.__generator)(this, function(_state) {\n                            switch(_state.label){\n                                case 0:\n                                    _this.pendingPromise = {\n                                        resolve: resolve,\n                                        reject: reject\n                                    };\n                                    _state.label = 1;\n                                case 1:\n                                    _state.trys.push([\n                                        1,\n                                        4,\n                                        ,\n                                        5\n                                    ]);\n                                    return [\n                                        4,\n                                        _this.resolver._initialize(_this.auth)\n                                    ];\n                                case 2:\n                                    _this.eventManager = _state.sent();\n                                    return [\n                                        4,\n                                        _this.onExecution()\n                                    ];\n                                case 3:\n                                    _state.sent();\n                                    _this.eventManager.registerConsumer(_this);\n                                    return [\n                                        3,\n                                        5\n                                    ];\n                                case 4:\n                                    e = _state.sent();\n                                    _this.reject(e);\n                                    return [\n                                        3,\n                                        5\n                                    ];\n                                case 5:\n                                    return [\n                                        2\n                                    ];\n                            }\n                        });\n                    });\n                    return function(resolve, reject) {\n                        return _ref.apply(this, arguments);\n                    };\n                }());\n            }\n        },\n        {\n            key: \"onAuthEvent\",\n            value: function onAuthEvent(event) {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var urlResponse, sessionId, postBody, tenantId, error, type, params, _, e;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                urlResponse = event.urlResponse, sessionId = event.sessionId, postBody = event.postBody, tenantId = event.tenantId, error = event.error, type = event.type;\n                                if (error) {\n                                    _this.reject(error);\n                                    return [\n                                        2\n                                    ];\n                                }\n                                params = {\n                                    auth: _this.auth,\n                                    requestUri: urlResponse,\n                                    sessionId: sessionId,\n                                    tenantId: tenantId || undefined,\n                                    postBody: postBody || undefined,\n                                    user: _this.user,\n                                    bypassAuthState: _this.bypassAuthState\n                                };\n                                _state.label = 1;\n                            case 1:\n                                _state.trys.push([\n                                    1,\n                                    3,\n                                    ,\n                                    4\n                                ]);\n                                _ = _this.resolve;\n                                return [\n                                    4,\n                                    _this.getIdpTask(type)(params)\n                                ];\n                            case 2:\n                                _.apply(_this, [\n                                    _state.sent()\n                                ]);\n                                return [\n                                    3,\n                                    4\n                                ];\n                            case 3:\n                                e = _state.sent();\n                                _this.reject(e);\n                                return [\n                                    3,\n                                    4\n                                ];\n                            case 4:\n                                return [\n                                    2\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"onError\",\n            value: function onError(error) {\n                this.reject(error);\n            }\n        },\n        {\n            key: \"getIdpTask\",\n            value: function getIdpTask(type) {\n                switch(type){\n                    case \"signInViaPopup\" /* AuthEventType.SIGN_IN_VIA_POPUP */ :\n                    case \"signInViaRedirect\" /* AuthEventType.SIGN_IN_VIA_REDIRECT */ :\n                        return $07e48e70fcf53a6e$var$_signIn;\n                    case \"linkViaPopup\" /* AuthEventType.LINK_VIA_POPUP */ :\n                    case \"linkViaRedirect\" /* AuthEventType.LINK_VIA_REDIRECT */ :\n                        return $07e48e70fcf53a6e$var$_link;\n                    case \"reauthViaPopup\" /* AuthEventType.REAUTH_VIA_POPUP */ :\n                    case \"reauthViaRedirect\" /* AuthEventType.REAUTH_VIA_REDIRECT */ :\n                        return $07e48e70fcf53a6e$var$_reauth;\n                    default:\n                        $07e48e70fcf53a6e$export$d66dc83d8cfc8dd(this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n                }\n            }\n        },\n        {\n            key: \"resolve\",\n            value: function resolve(cred) {\n                $07e48e70fcf53a6e$export$6554612db691658e(this.pendingPromise, \"Pending promise was never set\");\n                this.pendingPromise.resolve(cred);\n                this.unregisterAndCleanUp();\n            }\n        },\n        {\n            key: \"reject\",\n            value: function reject(error) {\n                $07e48e70fcf53a6e$export$6554612db691658e(this.pendingPromise, \"Pending promise was never set\");\n                this.pendingPromise.reject(error);\n                this.unregisterAndCleanUp();\n            }\n        },\n        {\n            key: \"unregisterAndCleanUp\",\n            value: function unregisterAndCleanUp() {\n                if (this.eventManager) this.eventManager.unregisterConsumer(this);\n                this.pendingPromise = null;\n                this.cleanUp();\n            }\n        }\n    ]);\n    return AbstractPopupRedirectOperation;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ var $07e48e70fcf53a6e$var$_POLL_WINDOW_CLOSE_TIMEOUT = new $07e48e70fcf53a6e$var$Delay(2000, 10000);\nfunction $07e48e70fcf53a6e$export$db3b6bfb95261072(auth, provider, resolver) {\n    return $07e48e70fcf53a6e$var$_signInWithPopup.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_signInWithPopup() {\n    $07e48e70fcf53a6e$var$_signInWithPopup = /**\r\n * Authenticates a Firebase client using a popup-based OAuth authentication flow.\r\n *\r\n * @remarks\r\n * If succeeds, returns the signed in user along with the provider's credential. If sign in was\r\n * unsuccessful, returns an error object containing additional information about the error.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a popup.\r\n * const provider = new FacebookAuthProvider();\r\n * const result = await signInWithPopup(auth, provider);\r\n *\r\n * // The signed-in user info.\r\n * const user = result.user;\r\n * // This gives you a Facebook Access Token.\r\n * const credential = provider.credentialFromResult(auth, result);\r\n * const token = credential.accessToken;\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\r\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\r\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\r\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\r\n *\r\n *\r\n * @public\r\n */ (0, $i7mVp._)(function(auth, provider, resolver) {\n        var authInternal, resolverInternal, action;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            authInternal = $07e48e70fcf53a6e$export$a33b77bbdbb8366c(auth);\n            $07e48e70fcf53a6e$var$_assertInstanceOf(auth, provider, $07e48e70fcf53a6e$var$FederatedAuthProvider);\n            resolverInternal = $07e48e70fcf53a6e$var$_withDefaultResolver(authInternal, resolver);\n            action = new $07e48e70fcf53a6e$var$PopupOperation(authInternal, \"signInViaPopup\" /* AuthEventType.SIGN_IN_VIA_POPUP */ , provider, resolverInternal);\n            return [\n                2,\n                action.executeNotNull()\n            ];\n        });\n    });\n    return $07e48e70fcf53a6e$var$_signInWithPopup.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$export$f1e1789686576879(user, provider, resolver) {\n    return $07e48e70fcf53a6e$var$_reauthenticateWithPopup.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_reauthenticateWithPopup() {\n    $07e48e70fcf53a6e$var$_reauthenticateWithPopup = /**\r\n * Reauthenticates the current user with the specified {@link OAuthProvider} using a pop-up based\r\n * OAuth flow.\r\n *\r\n * @remarks\r\n * If the reauthentication is successful, the returned result will contain the user and the\r\n * provider's credential.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a popup.\r\n * const provider = new FacebookAuthProvider();\r\n * const result = await signInWithPopup(auth, provider);\r\n * // Reauthenticate using a popup.\r\n * await reauthenticateWithPopup(result.user, provider);\r\n * ```\r\n *\r\n * @param user - The user.\r\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\r\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\r\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\r\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\r\n *\r\n * @public\r\n */ (0, $i7mVp._)(function(user, provider, resolver) {\n        var userInternal, resolverInternal, action;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            userInternal = (0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(user);\n            $07e48e70fcf53a6e$var$_assertInstanceOf(userInternal.auth, provider, $07e48e70fcf53a6e$var$FederatedAuthProvider);\n            resolverInternal = $07e48e70fcf53a6e$var$_withDefaultResolver(userInternal.auth, resolver);\n            action = new $07e48e70fcf53a6e$var$PopupOperation(userInternal.auth, \"reauthViaPopup\" /* AuthEventType.REAUTH_VIA_POPUP */ , provider, resolverInternal, userInternal);\n            return [\n                2,\n                action.executeNotNull()\n            ];\n        });\n    });\n    return $07e48e70fcf53a6e$var$_reauthenticateWithPopup.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$export$4368d992c4eafac0(user, provider, resolver) {\n    return $07e48e70fcf53a6e$var$_linkWithPopup.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_linkWithPopup() {\n    $07e48e70fcf53a6e$var$_linkWithPopup = /**\r\n * Links the authenticated provider to the user account using a pop-up based OAuth flow.\r\n *\r\n * @remarks\r\n * If the linking is successful, the returned result will contain the user and the provider's credential.\r\n *\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using some other provider.\r\n * const result = await signInWithEmailAndPassword(auth, email, password);\r\n * // Link using a popup.\r\n * const provider = new FacebookAuthProvider();\r\n * await linkWithPopup(result.user, provider);\r\n * ```\r\n *\r\n * @param user - The user.\r\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\r\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\r\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\r\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\r\n *\r\n * @public\r\n */ (0, $i7mVp._)(function(user, provider, resolver) {\n        var userInternal, resolverInternal, action;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            userInternal = (0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(user);\n            $07e48e70fcf53a6e$var$_assertInstanceOf(userInternal.auth, provider, $07e48e70fcf53a6e$var$FederatedAuthProvider);\n            resolverInternal = $07e48e70fcf53a6e$var$_withDefaultResolver(userInternal.auth, resolver);\n            action = new $07e48e70fcf53a6e$var$PopupOperation(userInternal.auth, \"linkViaPopup\" /* AuthEventType.LINK_VIA_POPUP */ , provider, resolverInternal, userInternal);\n            return [\n                2,\n                action.executeNotNull()\n            ];\n        });\n    });\n    return $07e48e70fcf53a6e$var$_linkWithPopup.apply(this, arguments);\n}\n/**\r\n * Popup event manager. Handles the popup's entire lifecycle; listens to auth\r\n * events\r\n *\r\n */ var $07e48e70fcf53a6e$var$PopupOperation = /*#__PURE__*/ function(AbstractPopupRedirectOperation) {\n    \"use strict\";\n    (0, $jqfyu._)(PopupOperation, AbstractPopupRedirectOperation);\n    var _super = (0, $50zho._)(PopupOperation);\n    function PopupOperation(auth, filter, provider, resolver, user) {\n        (0, $juqrk._)(this, PopupOperation);\n        var _this;\n        _this = _super.call(this, auth, filter, resolver, user);\n        _this.provider = provider;\n        _this.authWindow = null;\n        _this.pollId = null;\n        if (PopupOperation.currentPopupAction) PopupOperation.currentPopupAction.cancel();\n        PopupOperation.currentPopupAction = (0, $cquyX._)(_this);\n        return _this;\n    }\n    (0, $bNI6E._)(PopupOperation, [\n        {\n            key: \"executeNotNull\",\n            value: function executeNotNull() {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var result;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                return [\n                                    4,\n                                    _this.execute()\n                                ];\n                            case 1:\n                                result = _state.sent();\n                                $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(result, _this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n                                return [\n                                    2,\n                                    result\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"onExecution\",\n            value: function onExecution() {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var eventId;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                $07e48e70fcf53a6e$export$6554612db691658e(_this.filter.length === 1, \"Popup operations only handle one event\");\n                                eventId = $07e48e70fcf53a6e$export$91477dc880baac21();\n                                return [\n                                    4,\n                                    _this.resolver._openPopup(_this.auth, _this.provider, _this.filter[0], eventId)\n                                ];\n                            case 1:\n                                _this.authWindow = _state.sent();\n                                _this.authWindow.associatedEvent = eventId;\n                                // Check for web storage support and origin validation _after_ the popup is\n                                // loaded. These operations are slow (~1 second or so) Rather than\n                                // waiting on them before opening the window, optimistically open the popup\n                                // and check for storage support at the same time. If storage support is\n                                // not available, this will cause the whole thing to reject properly. It\n                                // will also close the popup, but since the promise has already rejected,\n                                // the popup closed by user poll will reject into the void.\n                                _this.resolver._originValidation(_this.auth).catch(function(e) {\n                                    _this.reject(e);\n                                });\n                                _this.resolver._isIframeWebStorageSupported(_this.auth, function(isSupported) {\n                                    if (!isSupported) _this.reject($07e48e70fcf53a6e$export$3d12bd131bb975d1(_this.auth, \"web-storage-unsupported\" /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */ ));\n                                });\n                                // Handle user closure. Notice this does *not* use await\n                                _this.pollUserCancellation();\n                                return [\n                                    2\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"eventId\",\n            get: function get() {\n                var _a;\n                return ((_a = this.authWindow) === null || _a === void 0 ? void 0 : _a.associatedEvent) || null;\n            }\n        },\n        {\n            key: \"cancel\",\n            value: function cancel() {\n                this.reject($07e48e70fcf53a6e$export$3d12bd131bb975d1(this.auth, \"cancelled-popup-request\" /* AuthErrorCode.EXPIRED_POPUP_REQUEST */ ));\n            }\n        },\n        {\n            key: \"cleanUp\",\n            value: function cleanUp() {\n                if (this.authWindow) this.authWindow.close();\n                if (this.pollId) window.clearTimeout(this.pollId);\n                this.authWindow = null;\n                this.pollId = null;\n                PopupOperation.currentPopupAction = null;\n            }\n        },\n        {\n            key: \"pollUserCancellation\",\n            value: function pollUserCancellation() {\n                var _this = this;\n                var poll = function() {\n                    var _a, _b;\n                    if ((_b = (_a = _this.authWindow) === null || _a === void 0 ? void 0 : _a.window) === null || _b === void 0 ? void 0 : _b.closed) {\n                        // Make sure that there is sufficient time for whatever action to\n                        // complete. The window could have closed but the sign in network\n                        // call could still be in flight. This is specifically true for\n                        // Firefox or if the opener is in an iframe, in which case the oauth\n                        // helper closes the popup.\n                        _this.pollId = window.setTimeout(function() {\n                            _this.pollId = null;\n                            _this.reject($07e48e70fcf53a6e$export$3d12bd131bb975d1(_this.auth, \"popup-closed-by-user\" /* AuthErrorCode.POPUP_CLOSED_BY_USER */ ));\n                        }, 8000 /* _Timeout.AUTH_EVENT */ );\n                        return;\n                    }\n                    _this.pollId = window.setTimeout(poll, $07e48e70fcf53a6e$var$_POLL_WINDOW_CLOSE_TIMEOUT.get());\n                };\n                poll();\n            }\n        }\n    ]);\n    return PopupOperation;\n}($07e48e70fcf53a6e$var$AbstractPopupRedirectOperation);\n// Only one popup is ever shown at once. The lifecycle of the current popup\n// can be managed / cancelled by the constructor.\n$07e48e70fcf53a6e$var$PopupOperation.currentPopupAction = null;\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ var $07e48e70fcf53a6e$var$PENDING_REDIRECT_KEY = \"pendingRedirect\";\n// We only get one redirect outcome for any one auth, so just store it\n// in here.\nvar $07e48e70fcf53a6e$var$redirectOutcomeMap = new Map();\nvar $07e48e70fcf53a6e$var$RedirectAction = /*#__PURE__*/ function(AbstractPopupRedirectOperation) {\n    \"use strict\";\n    (0, $jqfyu._)(RedirectAction, AbstractPopupRedirectOperation);\n    var _super = (0, $50zho._)(RedirectAction);\n    function RedirectAction(auth, resolver) {\n        var bypassAuthState = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n        (0, $juqrk._)(this, RedirectAction);\n        var _this;\n        _this = _super.call(this, auth, [\n            \"signInViaRedirect\" /* AuthEventType.SIGN_IN_VIA_REDIRECT */ ,\n            \"linkViaRedirect\" /* AuthEventType.LINK_VIA_REDIRECT */ ,\n            \"reauthViaRedirect\" /* AuthEventType.REAUTH_VIA_REDIRECT */ ,\n            \"unknown\" /* AuthEventType.UNKNOWN */ \n        ], resolver, undefined, bypassAuthState);\n        _this.eventId = null;\n        return _this;\n    }\n    (0, $bNI6E._)(RedirectAction, [\n        {\n            key: \"execute\",\n            value: /**\r\n     * Override the execute function; if we already have a redirect result, then\r\n     * just return it.\r\n     */ function execute() {\n                var _this = this;\n                var _this1 = this, _superprop_get_execute = function() {\n                    return (0, $e6962c1d2fca547a$export$afb3516d9d608401)((0, $5yT7U._)(RedirectAction.prototype), \"execute\", _this);\n                };\n                return (0, $i7mVp._)(function() {\n                    var readyOutcome, hasPendingRedirect, result, _tmp, e;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                readyOutcome = $07e48e70fcf53a6e$var$redirectOutcomeMap.get(_this1.auth._key());\n                                if (!!readyOutcome) return [\n                                    3,\n                                    8\n                                ];\n                                _state.label = 1;\n                            case 1:\n                                _state.trys.push([\n                                    1,\n                                    6,\n                                    ,\n                                    7\n                                ]);\n                                return [\n                                    4,\n                                    $07e48e70fcf53a6e$var$_getAndClearPendingRedirectStatus(_this1.resolver, _this1.auth)\n                                ];\n                            case 2:\n                                hasPendingRedirect = _state.sent();\n                                if (!hasPendingRedirect) return [\n                                    3,\n                                    4\n                                ];\n                                return [\n                                    4,\n                                    _superprop_get_execute().call(_this1)\n                                ];\n                            case 3:\n                                _tmp = _state.sent();\n                                return [\n                                    3,\n                                    5\n                                ];\n                            case 4:\n                                _tmp = null;\n                                _state.label = 5;\n                            case 5:\n                                result = _tmp;\n                                readyOutcome = function() {\n                                    return Promise.resolve(result);\n                                };\n                                return [\n                                    3,\n                                    7\n                                ];\n                            case 6:\n                                e = _state.sent();\n                                readyOutcome = function() {\n                                    return Promise.reject(e);\n                                };\n                                return [\n                                    3,\n                                    7\n                                ];\n                            case 7:\n                                $07e48e70fcf53a6e$var$redirectOutcomeMap.set(_this1.auth._key(), readyOutcome);\n                                _state.label = 8;\n                            case 8:\n                                // If we're not bypassing auth state, the ready outcome should be set to\n                                // null.\n                                if (!_this1.bypassAuthState) $07e48e70fcf53a6e$var$redirectOutcomeMap.set(_this1.auth._key(), function() {\n                                    return Promise.resolve(null);\n                                });\n                                return [\n                                    2,\n                                    readyOutcome()\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"onAuthEvent\",\n            value: function onAuthEvent(event) {\n                var _this = this;\n                var _this1 = this, _superprop_get_onAuthEvent = function() {\n                    return (0, $e6962c1d2fca547a$export$afb3516d9d608401)((0, $5yT7U._)(RedirectAction.prototype), \"onAuthEvent\", _this);\n                };\n                return (0, $i7mVp._)(function() {\n                    var user;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                if (event.type === \"signInViaRedirect\" /* AuthEventType.SIGN_IN_VIA_REDIRECT */ ) return [\n                                    2,\n                                    _superprop_get_onAuthEvent().call(_this1, event)\n                                ];\n                                else if (event.type === \"unknown\" /* AuthEventType.UNKNOWN */ ) {\n                                    // This is a sentinel value indicating there's no pending redirect\n                                    _this1.resolve(null);\n                                    return [\n                                        2\n                                    ];\n                                }\n                                if (!event.eventId) return [\n                                    3,\n                                    2\n                                ];\n                                return [\n                                    4,\n                                    _this1.auth._redirectUserForId(event.eventId)\n                                ];\n                            case 1:\n                                user = _state.sent();\n                                if (user) {\n                                    _this1.user = user;\n                                    return [\n                                        2,\n                                        _superprop_get_onAuthEvent().call(_this1, event)\n                                    ];\n                                } else _this1.resolve(null);\n                                _state.label = 2;\n                            case 2:\n                                return [\n                                    2\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"onExecution\",\n            value: function onExecution() {\n                return (0, $i7mVp._)(function() {\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        return [\n                            2\n                        ];\n                    });\n                })();\n            }\n        },\n        {\n            key: \"cleanUp\",\n            value: function cleanUp() {}\n        }\n    ]);\n    return RedirectAction;\n}($07e48e70fcf53a6e$var$AbstractPopupRedirectOperation);\nfunction $07e48e70fcf53a6e$var$_getAndClearPendingRedirectStatus(resolver, auth) {\n    return $07e48e70fcf53a6e$var$__getAndClearPendingRedirectStatus.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$__getAndClearPendingRedirectStatus() {\n    $07e48e70fcf53a6e$var$__getAndClearPendingRedirectStatus = (0, $i7mVp._)(function(resolver, auth) {\n        var key, persistence, hasPendingRedirect;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    key = $07e48e70fcf53a6e$var$pendingRedirectKey(auth);\n                    persistence = $07e48e70fcf53a6e$var$resolverPersistence(resolver);\n                    return [\n                        4,\n                        persistence._isAvailable()\n                    ];\n                case 1:\n                    if (!_state.sent()) return [\n                        2,\n                        false\n                    ];\n                    return [\n                        4,\n                        persistence._get(key)\n                    ];\n                case 2:\n                    hasPendingRedirect = _state.sent() === \"true\";\n                    return [\n                        4,\n                        persistence._remove(key)\n                    ];\n                case 3:\n                    _state.sent();\n                    return [\n                        2,\n                        hasPendingRedirect\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$__getAndClearPendingRedirectStatus.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_setPendingRedirectStatus(resolver, auth) {\n    return $07e48e70fcf53a6e$var$__setPendingRedirectStatus.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$__setPendingRedirectStatus() {\n    $07e48e70fcf53a6e$var$__setPendingRedirectStatus = (0, $i7mVp._)(function(resolver, auth) {\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            return [\n                2,\n                $07e48e70fcf53a6e$var$resolverPersistence(resolver)._set($07e48e70fcf53a6e$var$pendingRedirectKey(auth), \"true\")\n            ];\n        });\n    });\n    return $07e48e70fcf53a6e$var$__setPendingRedirectStatus.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$export$53a70dd1ebbae346() {\n    $07e48e70fcf53a6e$var$redirectOutcomeMap.clear();\n}\nfunction $07e48e70fcf53a6e$export$cf2f7c5792f80b46(auth, result) {\n    $07e48e70fcf53a6e$var$redirectOutcomeMap.set(auth._key(), result);\n}\nfunction $07e48e70fcf53a6e$var$resolverPersistence(resolver) {\n    return $07e48e70fcf53a6e$export$890c4ad488842ce7(resolver._redirectPersistence);\n}\nfunction $07e48e70fcf53a6e$var$pendingRedirectKey(auth) {\n    return $07e48e70fcf53a6e$export$24baa2b76016ce0e($07e48e70fcf53a6e$var$PENDING_REDIRECT_KEY, auth.config.apiKey, auth.name);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Authenticates a Firebase client using a full-page redirect flow.\r\n *\r\n * @remarks\r\n * To handle the results and errors for this operation, refer to {@link getRedirectResult}.\r\n * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices\r\n * | best practices} when using {@link signInWithRedirect}.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new FacebookAuthProvider();\r\n * // You can add additional scopes to the provider:\r\n * provider.addScope('user_birthday');\r\n * // Start a sign in process for an unauthenticated user.\r\n * await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * if (result) {\r\n *   // This is the signed-in user\r\n *   const user = result.user;\r\n *   // This gives you a Facebook Access Token.\r\n *   const credential = provider.credentialFromResult(auth, result);\r\n *   const token = credential.accessToken;\r\n * }\r\n * // As this API can be used for sign-in, linking and reauthentication,\r\n * // check the operationType to determine what triggered this redirect\r\n * // operation.\r\n * const operationType = result.operationType;\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\r\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\r\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\r\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\r\n *\r\n * @public\r\n */ function $07e48e70fcf53a6e$export$2d1720544b23b823(auth, provider, resolver) {\n    return $07e48e70fcf53a6e$var$_signInWithRedirect(auth, provider, resolver);\n}\nfunction $07e48e70fcf53a6e$var$_signInWithRedirect(auth, provider, resolver) {\n    return $07e48e70fcf53a6e$var$__signInWithRedirect.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$__signInWithRedirect() {\n    $07e48e70fcf53a6e$var$__signInWithRedirect = (0, $i7mVp._)(function(auth, provider, resolver) {\n        var authInternal, resolverInternal;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    authInternal = $07e48e70fcf53a6e$export$a33b77bbdbb8366c(auth);\n                    $07e48e70fcf53a6e$var$_assertInstanceOf(auth, provider, $07e48e70fcf53a6e$var$FederatedAuthProvider);\n                    // Wait for auth initialization to complete, this will process pending redirects and clear the\n                    // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new\n                    // redirect and creating a PENDING_REDIRECT_KEY entry.\n                    return [\n                        4,\n                        authInternal._initializationPromise\n                    ];\n                case 1:\n                    _state.sent();\n                    resolverInternal = $07e48e70fcf53a6e$var$_withDefaultResolver(authInternal, resolver);\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$_setPendingRedirectStatus(resolverInternal, authInternal)\n                    ];\n                case 2:\n                    _state.sent();\n                    return [\n                        2,\n                        resolverInternal._openRedirect(authInternal, provider, \"signInViaRedirect\" /* AuthEventType.SIGN_IN_VIA_REDIRECT */ )\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$__signInWithRedirect.apply(this, arguments);\n}\n/**\r\n * Reauthenticates the current user with the specified {@link OAuthProvider} using a full-page redirect flow.\r\n * @remarks\r\n * To handle the results and errors for this operation, refer to {@link getRedirectResult}.\r\n * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices\r\n * | best practices} when using {@link reauthenticateWithRedirect}.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new FacebookAuthProvider();\r\n * const result = await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * // Reauthenticate using a redirect.\r\n * await reauthenticateWithRedirect(result.user, provider);\r\n * // This will again trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * ```\r\n *\r\n * @param user - The user.\r\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\r\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\r\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\r\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\r\n *\r\n * @public\r\n */ function $07e48e70fcf53a6e$export$dda1d9f60106f0e9(user, provider, resolver) {\n    return $07e48e70fcf53a6e$var$_reauthenticateWithRedirect(user, provider, resolver);\n}\nfunction $07e48e70fcf53a6e$var$_reauthenticateWithRedirect(user, provider, resolver) {\n    return $07e48e70fcf53a6e$var$__reauthenticateWithRedirect.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$__reauthenticateWithRedirect() {\n    $07e48e70fcf53a6e$var$__reauthenticateWithRedirect = (0, $i7mVp._)(function(user, provider, resolver) {\n        var userInternal, resolverInternal, eventId;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    userInternal = (0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(user);\n                    $07e48e70fcf53a6e$var$_assertInstanceOf(userInternal.auth, provider, $07e48e70fcf53a6e$var$FederatedAuthProvider);\n                    // Wait for auth initialization to complete, this will process pending redirects and clear the\n                    // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new\n                    // redirect and creating a PENDING_REDIRECT_KEY entry.\n                    return [\n                        4,\n                        userInternal.auth._initializationPromise\n                    ];\n                case 1:\n                    _state.sent();\n                    resolverInternal = $07e48e70fcf53a6e$var$_withDefaultResolver(userInternal.auth, resolver);\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$_setPendingRedirectStatus(resolverInternal, userInternal.auth)\n                    ];\n                case 2:\n                    _state.sent();\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$prepareUserForRedirect(userInternal)\n                    ];\n                case 3:\n                    eventId = _state.sent();\n                    return [\n                        2,\n                        resolverInternal._openRedirect(userInternal.auth, provider, \"reauthViaRedirect\" /* AuthEventType.REAUTH_VIA_REDIRECT */ , eventId)\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$__reauthenticateWithRedirect.apply(this, arguments);\n}\n/**\r\n * Links the {@link OAuthProvider} to the user account using a full-page redirect flow.\r\n * @remarks\r\n * To handle the results and errors for this operation, refer to {@link getRedirectResult}.\r\n * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices\r\n * | best practices} when using {@link linkWithRedirect}.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using some other provider.\r\n * const result = await signInWithEmailAndPassword(auth, email, password);\r\n * // Link using a redirect.\r\n * const provider = new FacebookAuthProvider();\r\n * await linkWithRedirect(result.user, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * ```\r\n *\r\n * @param user - The user.\r\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\r\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\r\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\r\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\r\n *\r\n *\r\n * @public\r\n */ function $07e48e70fcf53a6e$export$39b482c5e57630a8(user, provider, resolver) {\n    return $07e48e70fcf53a6e$var$_linkWithRedirect(user, provider, resolver);\n}\nfunction $07e48e70fcf53a6e$var$_linkWithRedirect(user, provider, resolver) {\n    return $07e48e70fcf53a6e$var$__linkWithRedirect.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$__linkWithRedirect() {\n    $07e48e70fcf53a6e$var$__linkWithRedirect = (0, $i7mVp._)(function(user, provider, resolver) {\n        var userInternal, resolverInternal, eventId;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    userInternal = (0, $1d9d263a787f8021$export$4befe9b5fa509a1b)(user);\n                    $07e48e70fcf53a6e$var$_assertInstanceOf(userInternal.auth, provider, $07e48e70fcf53a6e$var$FederatedAuthProvider);\n                    // Wait for auth initialization to complete, this will process pending redirects and clear the\n                    // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new\n                    // redirect and creating a PENDING_REDIRECT_KEY entry.\n                    return [\n                        4,\n                        userInternal.auth._initializationPromise\n                    ];\n                case 1:\n                    _state.sent();\n                    resolverInternal = $07e48e70fcf53a6e$var$_withDefaultResolver(userInternal.auth, resolver);\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$_assertLinkedStatus(false, userInternal, provider.providerId)\n                    ];\n                case 2:\n                    _state.sent();\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$_setPendingRedirectStatus(resolverInternal, userInternal.auth)\n                    ];\n                case 3:\n                    _state.sent();\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$prepareUserForRedirect(userInternal)\n                    ];\n                case 4:\n                    eventId = _state.sent();\n                    return [\n                        2,\n                        resolverInternal._openRedirect(userInternal.auth, provider, \"linkViaRedirect\" /* AuthEventType.LINK_VIA_REDIRECT */ , eventId)\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$__linkWithRedirect.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$export$35e795649ee09318(auth, resolver) {\n    return $07e48e70fcf53a6e$var$_getRedirectResult.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_getRedirectResult() {\n    $07e48e70fcf53a6e$var$_getRedirectResult = /**\r\n * Returns a {@link UserCredential} from the redirect-based sign-in flow.\r\n *\r\n * @remarks\r\n * If sign-in succeeded, returns the signed in user. If sign-in was unsuccessful, fails with an\r\n * error. If no redirect operation was called, returns `null`.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new FacebookAuthProvider();\r\n * // You can add additional scopes to the provider:\r\n * provider.addScope('user_birthday');\r\n * // Start a sign in process for an unauthenticated user.\r\n * await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * if (result) {\r\n *   // This is the signed-in user\r\n *   const user = result.user;\r\n *   // This gives you a Facebook Access Token.\r\n *   const credential = provider.credentialFromResult(auth, result);\r\n *   const token = credential.accessToken;\r\n * }\r\n * // As this API can be used for sign-in, linking and reauthentication,\r\n * // check the operationType to determine what triggered this redirect\r\n * // operation.\r\n * const operationType = result.operationType;\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\r\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\r\n *\r\n * @public\r\n */ (0, $i7mVp._)(function(auth, resolver) {\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$export$a33b77bbdbb8366c(auth)._initializationPromise\n                    ];\n                case 1:\n                    _state.sent();\n                    return [\n                        2,\n                        $07e48e70fcf53a6e$export$158acd800e1ef08b(auth, resolver, false)\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$_getRedirectResult.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$export$158acd800e1ef08b(auth, resolverExtern) {\n    return $07e48e70fcf53a6e$var$__getRedirectResult.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$__getRedirectResult() {\n    $07e48e70fcf53a6e$var$__getRedirectResult = (0, $i7mVp._)(function(auth, resolverExtern) {\n        var bypassAuthState, authInternal, resolver, action, result;\n        var _arguments = arguments;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    bypassAuthState = _arguments.length > 2 && _arguments[2] !== void 0 ? _arguments[2] : false;\n                    authInternal = $07e48e70fcf53a6e$export$a33b77bbdbb8366c(auth);\n                    resolver = $07e48e70fcf53a6e$var$_withDefaultResolver(authInternal, resolverExtern);\n                    action = new $07e48e70fcf53a6e$var$RedirectAction(authInternal, resolver, bypassAuthState);\n                    return [\n                        4,\n                        action.execute()\n                    ];\n                case 1:\n                    result = _state.sent();\n                    if (!(result && !bypassAuthState)) return [\n                        3,\n                        4\n                    ];\n                    delete result.user._redirectEventId;\n                    return [\n                        4,\n                        authInternal._persistUserIfCurrent(result.user)\n                    ];\n                case 2:\n                    _state.sent();\n                    return [\n                        4,\n                        authInternal._setRedirectUser(null, resolverExtern)\n                    ];\n                case 3:\n                    _state.sent();\n                    _state.label = 4;\n                case 4:\n                    return [\n                        2,\n                        result\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$__getRedirectResult.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$prepareUserForRedirect(user) {\n    return $07e48e70fcf53a6e$var$_prepareUserForRedirect.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$_prepareUserForRedirect() {\n    $07e48e70fcf53a6e$var$_prepareUserForRedirect = (0, $i7mVp._)(function(user) {\n        var eventId;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    eventId = $07e48e70fcf53a6e$export$91477dc880baac21(\"\".concat(user.uid, \":::\"));\n                    user._redirectEventId = eventId;\n                    return [\n                        4,\n                        user.auth._setRedirectUser(user)\n                    ];\n                case 1:\n                    _state.sent();\n                    return [\n                        4,\n                        user.auth._persistUserIfCurrent(user)\n                    ];\n                case 2:\n                    _state.sent();\n                    return [\n                        2,\n                        eventId\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$_prepareUserForRedirect.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ // The amount of time to store the UIDs of seen events; this is\n// set to 10 min by default\nvar $07e48e70fcf53a6e$var$EVENT_DUPLICATION_CACHE_DURATION_MS = 600000;\nvar $07e48e70fcf53a6e$export$9d398bebfec1c039 = /*#__PURE__*/ function() {\n    \"use strict\";\n    function AuthEventManager(auth) {\n        (0, $juqrk._)(this, AuthEventManager);\n        this.auth = auth;\n        this.cachedEventUids = new Set();\n        this.consumers = new Set();\n        this.queuedRedirectEvent = null;\n        this.hasHandledPotentialRedirect = false;\n        this.lastProcessedEventTime = Date.now();\n    }\n    (0, $bNI6E._)(AuthEventManager, [\n        {\n            key: \"registerConsumer\",\n            value: function registerConsumer(authEventConsumer) {\n                this.consumers.add(authEventConsumer);\n                if (this.queuedRedirectEvent && this.isEventForConsumer(this.queuedRedirectEvent, authEventConsumer)) {\n                    this.sendToConsumer(this.queuedRedirectEvent, authEventConsumer);\n                    this.saveEventToCache(this.queuedRedirectEvent);\n                    this.queuedRedirectEvent = null;\n                }\n            }\n        },\n        {\n            key: \"unregisterConsumer\",\n            value: function unregisterConsumer(authEventConsumer) {\n                this.consumers.delete(authEventConsumer);\n            }\n        },\n        {\n            key: \"onEvent\",\n            value: function onEvent(event) {\n                var _this = this;\n                // Check if the event has already been handled\n                if (this.hasEventBeenHandled(event)) return false;\n                var handled = false;\n                this.consumers.forEach(function(consumer) {\n                    if (_this.isEventForConsumer(event, consumer)) {\n                        handled = true;\n                        _this.sendToConsumer(event, consumer);\n                        _this.saveEventToCache(event);\n                    }\n                });\n                if (this.hasHandledPotentialRedirect || !$07e48e70fcf53a6e$var$isRedirectEvent(event)) // If we've already seen a redirect before, or this is a popup event,\n                // bail now\n                return handled;\n                this.hasHandledPotentialRedirect = true;\n                // If the redirect wasn't handled, hang on to it\n                if (!handled) {\n                    this.queuedRedirectEvent = event;\n                    handled = true;\n                }\n                return handled;\n            }\n        },\n        {\n            key: \"sendToConsumer\",\n            value: function sendToConsumer(event, consumer) {\n                var _a;\n                if (event.error && !$07e48e70fcf53a6e$var$isNullRedirectEvent(event)) {\n                    var code = ((_a = event.error.code) === null || _a === void 0 ? void 0 : _a.split(\"auth/\")[1]) || \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ ;\n                    consumer.onError($07e48e70fcf53a6e$export$3d12bd131bb975d1(this.auth, code));\n                } else consumer.onAuthEvent(event);\n            }\n        },\n        {\n            key: \"isEventForConsumer\",\n            value: function isEventForConsumer(event, consumer) {\n                var eventIdMatches = consumer.eventId === null || !!event.eventId && event.eventId === consumer.eventId;\n                return consumer.filter.includes(event.type) && eventIdMatches;\n            }\n        },\n        {\n            key: \"hasEventBeenHandled\",\n            value: function hasEventBeenHandled(event) {\n                if (Date.now() - this.lastProcessedEventTime >= $07e48e70fcf53a6e$var$EVENT_DUPLICATION_CACHE_DURATION_MS) this.cachedEventUids.clear();\n                return this.cachedEventUids.has($07e48e70fcf53a6e$var$eventUid(event));\n            }\n        },\n        {\n            key: \"saveEventToCache\",\n            value: function saveEventToCache(event) {\n                this.cachedEventUids.add($07e48e70fcf53a6e$var$eventUid(event));\n                this.lastProcessedEventTime = Date.now();\n            }\n        }\n    ]);\n    return AuthEventManager;\n}();\nfunction $07e48e70fcf53a6e$var$eventUid(e) {\n    return [\n        e.type,\n        e.eventId,\n        e.sessionId,\n        e.tenantId\n    ].filter(function(v) {\n        return v;\n    }).join(\"-\");\n}\nfunction $07e48e70fcf53a6e$var$isNullRedirectEvent(param) {\n    var type = param.type, error = param.error;\n    return type === \"unknown\" /* AuthEventType.UNKNOWN */  && (error === null || error === void 0 ? void 0 : error.code) === \"auth/no-auth-event\" /* AuthErrorCode.NO_AUTH_EVENT */ ;\n}\nfunction $07e48e70fcf53a6e$var$isRedirectEvent(event) {\n    switch(event.type){\n        case \"signInViaRedirect\" /* AuthEventType.SIGN_IN_VIA_REDIRECT */ :\n        case \"linkViaRedirect\" /* AuthEventType.LINK_VIA_REDIRECT */ :\n        case \"reauthViaRedirect\" /* AuthEventType.REAUTH_VIA_REDIRECT */ :\n            return true;\n        case \"unknown\" /* AuthEventType.UNKNOWN */ :\n            return $07e48e70fcf53a6e$var$isNullRedirectEvent(event);\n        default:\n            return false;\n    }\n}\nfunction $07e48e70fcf53a6e$export$9fa96a7d116ea3ce(auth) {\n    return $07e48e70fcf53a6e$var$__getProjectConfig.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$__getProjectConfig() {\n    $07e48e70fcf53a6e$var$__getProjectConfig = /**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ (0, $i7mVp._)(function(auth) {\n        var request;\n        var _arguments = arguments;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            request = _arguments.length > 1 && _arguments[1] !== void 0 ? _arguments[1] : {};\n            return [\n                2,\n                $07e48e70fcf53a6e$var$_performApiRequest(auth, \"GET\" /* HttpMethod.GET */ , \"/v1/projects\" /* Endpoint.GET_PROJECT_CONFIG */ , request)\n            ];\n        });\n    });\n    return $07e48e70fcf53a6e$var$__getProjectConfig.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ var $07e48e70fcf53a6e$var$IP_ADDRESS_REGEX = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/;\nvar $07e48e70fcf53a6e$var$HTTP_REGEX = /^https?/;\nfunction $07e48e70fcf53a6e$var$_validateOrigin(auth) {\n    return $07e48e70fcf53a6e$var$__validateOrigin.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$__validateOrigin() {\n    $07e48e70fcf53a6e$var$__validateOrigin = (0, $i7mVp._)(function(auth) {\n        var authorizedDomains, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, domain;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    // Skip origin validation if we are in an emulated environment\n                    if (auth.config.emulator) return [\n                        2\n                    ];\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$export$9fa96a7d116ea3ce(auth)\n                    ];\n                case 1:\n                    authorizedDomains = _state.sent().authorizedDomains;\n                    _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                    try {\n                        for(_iterator = authorizedDomains[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                            domain = _step.value;\n                            try {\n                                if ($07e48e70fcf53a6e$var$matchDomain(domain)) return [\n                                    2\n                                ];\n                            } catch (_a) {\n                            // Do nothing if there's a URL error; just continue searching\n                            }\n                        }\n                    } catch (err) {\n                        _didIteratorError = true;\n                        _iteratorError = err;\n                    } finally{\n                        try {\n                            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                                _iterator.return();\n                            }\n                        } finally{\n                            if (_didIteratorError) {\n                                throw _iteratorError;\n                            }\n                        }\n                    }\n                    // In the old SDK, this error also provides helpful messages.\n                    $07e48e70fcf53a6e$export$d66dc83d8cfc8dd(auth, \"unauthorized-domain\" /* AuthErrorCode.INVALID_ORIGIN */ );\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$__validateOrigin.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$matchDomain(expected) {\n    var currentUrl = $07e48e70fcf53a6e$var$_getCurrentUrl();\n    var _ref = new URL(currentUrl), protocol = _ref.protocol, hostname = _ref.hostname;\n    if (expected.startsWith(\"chrome-extension://\")) {\n        var ceUrl = new URL(expected);\n        if (ceUrl.hostname === \"\" && hostname === \"\") // For some reason we're not parsing chrome URLs properly\n        return protocol === \"chrome-extension:\" && expected.replace(\"chrome-extension://\", \"\") === currentUrl.replace(\"chrome-extension://\", \"\");\n        return protocol === \"chrome-extension:\" && ceUrl.hostname === hostname;\n    }\n    if (!$07e48e70fcf53a6e$var$HTTP_REGEX.test(protocol)) return false;\n    if ($07e48e70fcf53a6e$var$IP_ADDRESS_REGEX.test(expected)) // The domain has to be exactly equal to the pattern, as an IP domain will\n    // only contain the IP, no extra character.\n    return hostname === expected;\n    // Dots in pattern should be escaped.\n    var escapedDomainPattern = expected.replace(/\\./g, \"\\\\.\");\n    // Non ip address domains.\n    // domain.com = *.domain.com OR domain.com\n    var re = new RegExp(\"^(.+\\\\.\" + escapedDomainPattern + \"|\" + escapedDomainPattern + \")$\", \"i\");\n    return re.test(hostname);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ var $07e48e70fcf53a6e$var$NETWORK_TIMEOUT = new $07e48e70fcf53a6e$var$Delay(30000, 60000);\n/**\r\n * Reset unlaoded GApi modules. If gapi.load fails due to a network error,\r\n * it will stop working after a retrial. This is a hack to fix this issue.\r\n */ function $07e48e70fcf53a6e$var$resetUnloadedGapiModules() {\n    // Clear last failed gapi.load state to force next gapi.load to first\n    // load the failed gapi.iframes module.\n    // Get gapix.beacon context.\n    var beacon = $07e48e70fcf53a6e$var$_window().___jsl;\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    // Get current hint.\n    if (beacon === null || beacon === void 0 ? void 0 : beacon.H) try {\n        // Get gapi hint.\n        for(var _iterator = Object.keys(beacon.H)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var hint = _step.value;\n            // Requested modules.\n            beacon.H[hint].r = beacon.H[hint].r || [];\n            // Loaded modules.\n            beacon.H[hint].L = beacon.H[hint].L || [];\n            // Set requested modules to a copy of the loaded modules.\n            beacon.H[hint].r = (0, $aYXpI._)(beacon.H[hint].L);\n            // Clear pending callbacks.\n            if (beacon.CP) for(var i = 0; i < beacon.CP.length; i++)// Remove all failed pending callbacks.\n            beacon.CP[i] = null;\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n}\nfunction $07e48e70fcf53a6e$var$loadGapi(auth) {\n    return new Promise(function(resolve, reject) {\n        var _a, _b, _c;\n        // Function to run when gapi.load is ready.\n        function loadGapiIframe() {\n            // The developer may have tried to previously run gapi.load and failed.\n            // Run this to fix that.\n            $07e48e70fcf53a6e$var$resetUnloadedGapiModules();\n            gapi.load(\"gapi.iframes\", {\n                callback: function() {\n                    resolve(gapi.iframes.getContext());\n                },\n                ontimeout: function() {\n                    // The above reset may be sufficient, but having this reset after\n                    // failure ensures that if the developer calls gapi.load after the\n                    // connection is re-established and before another attempt to embed\n                    // the iframe, it would work and would not be broken because of our\n                    // failed attempt.\n                    // Timeout when gapi.iframes.Iframe not loaded.\n                    $07e48e70fcf53a6e$var$resetUnloadedGapiModules();\n                    reject($07e48e70fcf53a6e$export$3d12bd131bb975d1(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */ ));\n                },\n                timeout: $07e48e70fcf53a6e$var$NETWORK_TIMEOUT.get()\n            });\n        }\n        if ((_b = (_a = $07e48e70fcf53a6e$var$_window().gapi) === null || _a === void 0 ? void 0 : _a.iframes) === null || _b === void 0 ? void 0 : _b.Iframe) // If gapi.iframes.Iframe available, resolve.\n        resolve(gapi.iframes.getContext());\n        else if (!!((_c = $07e48e70fcf53a6e$var$_window().gapi) === null || _c === void 0 ? void 0 : _c.load)) // Gapi loader ready, load gapi.iframes.\n        loadGapiIframe();\n        else {\n            // Create a new iframe callback when this is called so as not to overwrite\n            // any previous defined callback. This happens if this method is called\n            // multiple times in parallel and could result in the later callback\n            // overwriting the previous one. This would end up with a iframe\n            // timeout.\n            var cbName = $07e48e70fcf53a6e$var$_generateCallbackName(\"iframefcb\");\n            // GApi loader not available, dynamically load platform.js.\n            $07e48e70fcf53a6e$var$_window()[cbName] = function() {\n                // GApi loader should be ready.\n                if (!!gapi.load) loadGapiIframe();\n                else // Gapi loader failed, throw error.\n                reject($07e48e70fcf53a6e$export$3d12bd131bb975d1(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */ ));\n            };\n            // Load GApi loader.\n            return $07e48e70fcf53a6e$var$_loadJS(\"https://apis.google.com/js/api.js?onload=\".concat(cbName)).catch(function(e) {\n                return reject(e);\n            });\n        }\n    }).catch(function(error) {\n        // Reset cached promise to allow for retrial.\n        $07e48e70fcf53a6e$var$cachedGApiLoader = null;\n        throw error;\n    });\n}\nvar $07e48e70fcf53a6e$var$cachedGApiLoader = null;\nfunction $07e48e70fcf53a6e$var$_loadGapi(auth) {\n    $07e48e70fcf53a6e$var$cachedGApiLoader = $07e48e70fcf53a6e$var$cachedGApiLoader || $07e48e70fcf53a6e$var$loadGapi(auth);\n    return $07e48e70fcf53a6e$var$cachedGApiLoader;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ var $07e48e70fcf53a6e$var$PING_TIMEOUT = new $07e48e70fcf53a6e$var$Delay(5000, 15000);\nvar $07e48e70fcf53a6e$var$IFRAME_PATH = \"__/auth/iframe\";\nvar $07e48e70fcf53a6e$var$EMULATED_IFRAME_PATH = \"emulator/auth/iframe\";\nvar $07e48e70fcf53a6e$var$IFRAME_ATTRIBUTES = {\n    style: {\n        position: \"absolute\",\n        top: \"-100px\",\n        width: \"1px\",\n        height: \"1px\"\n    },\n    \"aria-hidden\": \"true\",\n    tabindex: \"-1\"\n};\n// Map from apiHost to endpoint ID for passing into iframe. In current SDK, apiHost can be set to\n// anything (not from a list of endpoints with IDs as in legacy), so this is the closest we can get.\nvar $07e48e70fcf53a6e$var$EID_FROM_APIHOST = new Map([\n    [\n        \"identitytoolkit.googleapis.com\" /* DefaultConfig.API_HOST */ ,\n        \"p\"\n    ],\n    [\n        \"staging-identitytoolkit.sandbox.googleapis.com\",\n        \"s\"\n    ],\n    [\n        \"test-identitytoolkit.sandbox.googleapis.com\",\n        \"t\"\n    ] // test\n]);\nfunction $07e48e70fcf53a6e$var$getIframeUrl(auth) {\n    var config = auth.config;\n    $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(config.authDomain, auth, \"auth-domain-config-required\" /* AuthErrorCode.MISSING_AUTH_DOMAIN */ );\n    var url = config.emulator ? $07e48e70fcf53a6e$var$_emulatorUrl(config, $07e48e70fcf53a6e$var$EMULATED_IFRAME_PATH) : \"https://\".concat(auth.config.authDomain, \"/\").concat($07e48e70fcf53a6e$var$IFRAME_PATH);\n    var params = {\n        apiKey: config.apiKey,\n        appName: auth.name,\n        v: (0, $0913f93b5b3c9bac$export$31499a9cd224b78c)\n    };\n    var eid = $07e48e70fcf53a6e$var$EID_FROM_APIHOST.get(auth.config.apiHost);\n    if (eid) params.eid = eid;\n    var frameworks = auth._getFrameworks();\n    if (frameworks.length) params.fw = frameworks.join(\",\");\n    return \"\".concat(url, \"?\").concat((0, $1d9d263a787f8021$export$ac4103b836844853)(params).slice(1));\n}\nfunction $07e48e70fcf53a6e$var$_openIframe(auth) {\n    return $07e48e70fcf53a6e$var$__openIframe.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$__openIframe() {\n    $07e48e70fcf53a6e$var$__openIframe = (0, $i7mVp._)(function(auth) {\n        var context, gapi1;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    return [\n                        4,\n                        $07e48e70fcf53a6e$var$_loadGapi(auth)\n                    ];\n                case 1:\n                    context = _state.sent();\n                    gapi1 = $07e48e70fcf53a6e$var$_window().gapi;\n                    $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(gapi1, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n                    return [\n                        2,\n                        context.open({\n                            where: document.body,\n                            url: $07e48e70fcf53a6e$var$getIframeUrl(auth),\n                            messageHandlersFilter: gapi1.iframes.CROSS_ORIGIN_IFRAMES_FILTER,\n                            attributes: $07e48e70fcf53a6e$var$IFRAME_ATTRIBUTES,\n                            dontclear: true\n                        }, function(iframe) {\n                            return new Promise(function() {\n                                var _ref = (0, $i7mVp._)(function(resolve, reject) {\n                                    var networkError, networkErrorTimer;\n                                    // Clear timer and resolve pending iframe ready promise.\n                                    function clearTimerAndResolve() {\n                                        $07e48e70fcf53a6e$var$_window().clearTimeout(networkErrorTimer);\n                                        resolve(iframe);\n                                    }\n                                    return (0, $4tSb9.__generator)(this, function(_state) {\n                                        switch(_state.label){\n                                            case 0:\n                                                return [\n                                                    4,\n                                                    iframe.restyle({\n                                                        // Prevent iframe from closing on mouse out.\n                                                        setHideOnLeave: false\n                                                    })\n                                                ];\n                                            case 1:\n                                                _state.sent();\n                                                networkError = $07e48e70fcf53a6e$export$3d12bd131bb975d1(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */ );\n                                                networkErrorTimer = $07e48e70fcf53a6e$var$_window().setTimeout(function() {\n                                                    reject(networkError);\n                                                }, $07e48e70fcf53a6e$var$PING_TIMEOUT.get());\n                                                // This returns an IThenable. However the reject part does not call\n                                                // when the iframe is not loaded.\n                                                iframe.ping(clearTimerAndResolve).then(clearTimerAndResolve, function() {\n                                                    reject(networkError);\n                                                });\n                                                return [\n                                                    2\n                                                ];\n                                        }\n                                    });\n                                });\n                                return function(resolve, reject) {\n                                    return _ref.apply(this, arguments);\n                                };\n                            }());\n                        })\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$__openIframe.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ var $07e48e70fcf53a6e$var$BASE_POPUP_OPTIONS = {\n    location: \"yes\",\n    resizable: \"yes\",\n    statusbar: \"yes\",\n    toolbar: \"no\"\n};\nvar $07e48e70fcf53a6e$var$DEFAULT_WIDTH = 500;\nvar $07e48e70fcf53a6e$var$DEFAULT_HEIGHT = 600;\nvar $07e48e70fcf53a6e$var$TARGET_BLANK = \"_blank\";\nvar $07e48e70fcf53a6e$var$FIREFOX_EMPTY_URL = \"http://localhost\";\nvar $07e48e70fcf53a6e$export$9f4f30ee63539e24 = /*#__PURE__*/ function() {\n    \"use strict\";\n    function AuthPopup(window1) {\n        (0, $juqrk._)(this, AuthPopup);\n        this.window = window1;\n        this.associatedEvent = null;\n    }\n    (0, $bNI6E._)(AuthPopup, [\n        {\n            key: \"close\",\n            value: function close() {\n                if (this.window) try {\n                    this.window.close();\n                } catch (e) {}\n            }\n        }\n    ]);\n    return AuthPopup;\n}();\nfunction $07e48e70fcf53a6e$var$_open(auth, url, name) {\n    var width = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : $07e48e70fcf53a6e$var$DEFAULT_WIDTH, height = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : $07e48e70fcf53a6e$var$DEFAULT_HEIGHT;\n    var top = Math.max((window.screen.availHeight - height) / 2, 0).toString();\n    var left = Math.max((window.screen.availWidth - width) / 2, 0).toString();\n    var target = \"\";\n    var options = Object.assign(Object.assign({}, $07e48e70fcf53a6e$var$BASE_POPUP_OPTIONS), {\n        width: width.toString(),\n        height: height.toString(),\n        top: top,\n        left: left\n    });\n    // Chrome iOS 7 and 8 is returning an undefined popup win when target is\n    // specified, even though the popup is not necessarily blocked.\n    var ua = (0, $1d9d263a787f8021$export$c36915b22ce77c19)().toLowerCase();\n    if (name) target = $07e48e70fcf53a6e$var$_isChromeIOS(ua) ? $07e48e70fcf53a6e$var$TARGET_BLANK : name;\n    if ($07e48e70fcf53a6e$var$_isFirefox(ua)) {\n        // Firefox complains when invalid URLs are popped out. Hacky way to bypass.\n        url = url || $07e48e70fcf53a6e$var$FIREFOX_EMPTY_URL;\n        // Firefox disables by default scrolling on popup windows, which can create\n        // issues when the user has many Google accounts, for instance.\n        options.scrollbars = \"yes\";\n    }\n    var optionsString = Object.entries(options).reduce(function(accum, param) {\n        var _param = (0, $fGQt0._)(param, 2), key = _param[0], value = _param[1];\n        return \"\".concat(accum).concat(key, \"=\").concat(value, \",\");\n    }, \"\");\n    if ($07e48e70fcf53a6e$var$_isIOSStandalone(ua) && target !== \"_self\") {\n        $07e48e70fcf53a6e$var$openAsNewWindowIOS(url || \"\", target);\n        return new $07e48e70fcf53a6e$export$9f4f30ee63539e24(null);\n    }\n    // about:blank getting sanitized causing browsers like IE/Edge to display\n    // brief error message before redirecting to handler.\n    var newWin = window.open(url || \"\", target, optionsString);\n    $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(newWin, auth, \"popup-blocked\" /* AuthErrorCode.POPUP_BLOCKED */ );\n    // Flaky on IE edge, encapsulate with a try and catch.\n    try {\n        newWin.focus();\n    } catch (e) {}\n    return new $07e48e70fcf53a6e$export$9f4f30ee63539e24(newWin);\n}\nfunction $07e48e70fcf53a6e$var$openAsNewWindowIOS(url, target) {\n    var el = document.createElement(\"a\");\n    el.href = url;\n    el.target = target;\n    var click = document.createEvent(\"MouseEvent\");\n    click.initMouseEvent(\"click\", true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 1, null);\n    el.dispatchEvent(click);\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * URL for Authentication widget which will initiate the OAuth handshake\r\n *\r\n * @internal\r\n */ var $07e48e70fcf53a6e$var$WIDGET_PATH = \"__/auth/handler\";\n/**\r\n * URL for emulated environment\r\n *\r\n * @internal\r\n */ var $07e48e70fcf53a6e$var$EMULATOR_WIDGET_PATH = \"emulator/auth/handler\";\n/**\r\n * Fragment name for the App Check token that gets passed to the widget\r\n *\r\n * @internal\r\n */ var $07e48e70fcf53a6e$var$FIREBASE_APP_CHECK_FRAGMENT_ID = encodeURIComponent(\"fac\");\nfunction $07e48e70fcf53a6e$export$92108d983e8ee699(auth, provider, authType, redirectUrl, eventId, additionalParams) {\n    return $07e48e70fcf53a6e$var$__getRedirectUrl.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$__getRedirectUrl() {\n    $07e48e70fcf53a6e$var$__getRedirectUrl = (0, $i7mVp._)(function(auth, provider, authType, redirectUrl, eventId, additionalParams) {\n        var params, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step_value, key, value, scopes, paramsDict, _iteratorNormalCompletion1, _didIteratorError1, _iteratorError1, _iterator1, _step1, key1, appCheckToken, appCheckTokenFragment;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(auth.config.authDomain, auth, \"auth-domain-config-required\" /* AuthErrorCode.MISSING_AUTH_DOMAIN */ );\n                    $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(auth.config.apiKey, auth, \"invalid-api-key\" /* AuthErrorCode.INVALID_API_KEY */ );\n                    params = {\n                        apiKey: auth.config.apiKey,\n                        appName: auth.name,\n                        authType: authType,\n                        redirectUrl: redirectUrl,\n                        v: (0, $0913f93b5b3c9bac$export$31499a9cd224b78c),\n                        eventId: eventId\n                    };\n                    if (provider instanceof $07e48e70fcf53a6e$var$FederatedAuthProvider) {\n                        provider.setDefaultLanguage(auth.languageCode);\n                        params.providerId = provider.providerId || \"\";\n                        if (!(0, $1d9d263a787f8021$export$dd1bc94b04021eeb)(provider.getCustomParameters())) params.customParameters = JSON.stringify(provider.getCustomParameters());\n                        _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                        try {\n                            // TODO set additionalParams from the provider as well?\n                            for(_iterator = Object.entries(additionalParams || {})[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                                _step_value = (0, $fGQt0._)(_step.value, 2), key = _step_value[0], value = _step_value[1];\n                                params[key] = value;\n                            }\n                        } catch (err) {\n                            _didIteratorError = true;\n                            _iteratorError = err;\n                        } finally{\n                            try {\n                                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                                    _iterator.return();\n                                }\n                            } finally{\n                                if (_didIteratorError) {\n                                    throw _iteratorError;\n                                }\n                            }\n                        }\n                    }\n                    if (provider instanceof $07e48e70fcf53a6e$var$BaseOAuthProvider) {\n                        scopes = provider.getScopes().filter(function(scope) {\n                            return scope !== \"\";\n                        });\n                        if (scopes.length > 0) params.scopes = scopes.join(\",\");\n                    }\n                    if (auth.tenantId) params.tid = auth.tenantId;\n                    paramsDict = params;\n                    _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n                    try {\n                        for(_iterator1 = Object.keys(paramsDict)[Symbol.iterator](); !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){\n                            key1 = _step1.value;\n                            if (paramsDict[key1] === undefined) delete paramsDict[key1];\n                        }\n                    } catch (err) {\n                        _didIteratorError1 = true;\n                        _iteratorError1 = err;\n                    } finally{\n                        try {\n                            if (!_iteratorNormalCompletion1 && _iterator1.return != null) {\n                                _iterator1.return();\n                            }\n                        } finally{\n                            if (_didIteratorError1) {\n                                throw _iteratorError1;\n                            }\n                        }\n                    }\n                    return [\n                        4,\n                        auth._getAppCheckToken()\n                    ];\n                case 1:\n                    appCheckToken = _state.sent();\n                    appCheckTokenFragment = appCheckToken ? \"#\".concat($07e48e70fcf53a6e$var$FIREBASE_APP_CHECK_FRAGMENT_ID, \"=\").concat(encodeURIComponent(appCheckToken)) : \"\";\n                    // Start at index 1 to skip the leading '&' in the query string\n                    return [\n                        2,\n                        \"\".concat($07e48e70fcf53a6e$var$getHandlerBase(auth), \"?\").concat((0, $1d9d263a787f8021$export$ac4103b836844853)(paramsDict).slice(1)).concat(appCheckTokenFragment)\n                    ];\n            }\n        });\n    });\n    return $07e48e70fcf53a6e$var$__getRedirectUrl.apply(this, arguments);\n}\nfunction $07e48e70fcf53a6e$var$getHandlerBase(param) {\n    var config = param.config;\n    if (!config.emulator) return \"https://\".concat(config.authDomain, \"/\").concat($07e48e70fcf53a6e$var$WIDGET_PATH);\n    return $07e48e70fcf53a6e$var$_emulatorUrl(config, $07e48e70fcf53a6e$var$EMULATOR_WIDGET_PATH);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * The special web storage event\r\n *\r\n */ var $07e48e70fcf53a6e$var$WEB_STORAGE_SUPPORT_KEY = \"webStorageSupport\";\nvar $07e48e70fcf53a6e$var$BrowserPopupRedirectResolver = /*#__PURE__*/ function() {\n    \"use strict\";\n    function BrowserPopupRedirectResolver() {\n        (0, $juqrk._)(this, BrowserPopupRedirectResolver);\n        this.eventManagers = {};\n        this.iframes = {};\n        this.originValidationPromises = {};\n        this._redirectPersistence = $07e48e70fcf53a6e$export$407448d2b89b1813;\n        this._completeRedirectFn = $07e48e70fcf53a6e$export$158acd800e1ef08b;\n        this._overrideRedirectResult = $07e48e70fcf53a6e$export$cf2f7c5792f80b46;\n    }\n    (0, $bNI6E._)(BrowserPopupRedirectResolver, [\n        {\n            key: \"_openPopup\",\n            value: // Wrapping in async even though we don't await anywhere in order\n            // to make sure errors are raised as promise rejections\n            function _openPopup(auth, provider, authType, eventId) {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var _a, url;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                $07e48e70fcf53a6e$export$6554612db691658e((_a = _this.eventManagers[auth._key()]) === null || _a === void 0 ? void 0 : _a.manager, \"_initialize() not called before _openPopup()\");\n                                return [\n                                    4,\n                                    $07e48e70fcf53a6e$export$92108d983e8ee699(auth, provider, authType, $07e48e70fcf53a6e$var$_getCurrentUrl(), eventId)\n                                ];\n                            case 1:\n                                url = _state.sent();\n                                return [\n                                    2,\n                                    $07e48e70fcf53a6e$var$_open(auth, url, $07e48e70fcf53a6e$export$91477dc880baac21())\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"_openRedirect\",\n            value: function _openRedirect(auth, provider, authType, eventId) {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var url;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                return [\n                                    4,\n                                    _this._originValidation(auth)\n                                ];\n                            case 1:\n                                _state.sent();\n                                return [\n                                    4,\n                                    $07e48e70fcf53a6e$export$92108d983e8ee699(auth, provider, authType, $07e48e70fcf53a6e$var$_getCurrentUrl(), eventId)\n                                ];\n                            case 2:\n                                url = _state.sent();\n                                $07e48e70fcf53a6e$var$_setWindowLocation(url);\n                                return [\n                                    2,\n                                    new Promise(function() {})\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"_initialize\",\n            value: function _initialize(auth) {\n                var _this = this;\n                var key = auth._key();\n                if (this.eventManagers[key]) {\n                    var _this_eventManagers_key = this.eventManagers[key], manager = _this_eventManagers_key.manager, promise = _this_eventManagers_key.promise;\n                    if (manager) return Promise.resolve(manager);\n                    else {\n                        $07e48e70fcf53a6e$export$6554612db691658e(promise, \"If manager is not set, promise should be\");\n                        return promise;\n                    }\n                }\n                var promise1 = this.initAndGetManager(auth);\n                this.eventManagers[key] = {\n                    promise: promise1\n                };\n                // If the promise is rejected, the key should be removed so that the\n                // operation can be retried later.\n                promise1.catch(function() {\n                    delete _this.eventManagers[key];\n                });\n                return promise1;\n            }\n        },\n        {\n            key: \"initAndGetManager\",\n            value: function initAndGetManager(auth) {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var iframe, manager;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                return [\n                                    4,\n                                    $07e48e70fcf53a6e$var$_openIframe(auth)\n                                ];\n                            case 1:\n                                iframe = _state.sent();\n                                manager = new $07e48e70fcf53a6e$export$9d398bebfec1c039(auth);\n                                iframe.register(\"authEvent\", function(iframeEvent) {\n                                    $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(iframeEvent === null || iframeEvent === void 0 ? void 0 : iframeEvent.authEvent, auth, \"invalid-auth-event\" /* AuthErrorCode.INVALID_AUTH_EVENT */ );\n                                    // TODO: Consider splitting redirect and popup events earlier on\n                                    var handled = manager.onEvent(iframeEvent.authEvent);\n                                    return {\n                                        status: handled ? \"ACK\" /* GapiOutcome.ACK */  : \"ERROR\" /* GapiOutcome.ERROR */ \n                                    };\n                                }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);\n                                _this.eventManagers[auth._key()] = {\n                                    manager: manager\n                                };\n                                _this.iframes[auth._key()] = iframe;\n                                return [\n                                    2,\n                                    manager\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"_isIframeWebStorageSupported\",\n            value: function _isIframeWebStorageSupported(auth, cb) {\n                var iframe = this.iframes[auth._key()];\n                iframe.send($07e48e70fcf53a6e$var$WEB_STORAGE_SUPPORT_KEY, {\n                    type: $07e48e70fcf53a6e$var$WEB_STORAGE_SUPPORT_KEY\n                }, function(result) {\n                    var _a;\n                    var isSupported = (_a = result === null || result === void 0 ? void 0 : result[0]) === null || _a === void 0 ? void 0 : _a[$07e48e70fcf53a6e$var$WEB_STORAGE_SUPPORT_KEY];\n                    if (isSupported !== undefined) cb(!!isSupported);\n                    $07e48e70fcf53a6e$export$d66dc83d8cfc8dd(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n                }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);\n            }\n        },\n        {\n            key: \"_originValidation\",\n            value: function _originValidation(auth) {\n                var key = auth._key();\n                if (!this.originValidationPromises[key]) this.originValidationPromises[key] = $07e48e70fcf53a6e$var$_validateOrigin(auth);\n                return this.originValidationPromises[key];\n            }\n        },\n        {\n            key: \"_shouldInitProactively\",\n            get: function get() {\n                // Mobile browsers and Safari need to optimistically initialize\n                return $07e48e70fcf53a6e$var$_isMobileBrowser() || $07e48e70fcf53a6e$var$_isSafari() || $07e48e70fcf53a6e$export$493d36ec626b6698();\n            }\n        }\n    ]);\n    return BrowserPopupRedirectResolver;\n}();\n/**\r\n * An implementation of {@link PopupRedirectResolver} suitable for browser\r\n * based applications.\r\n *\r\n * @public\r\n */ var $07e48e70fcf53a6e$export$342063e11d6c3cad = $07e48e70fcf53a6e$var$BrowserPopupRedirectResolver;\nvar $07e48e70fcf53a6e$var$MultiFactorAssertionImpl = /*#__PURE__*/ function() {\n    \"use strict\";\n    function MultiFactorAssertionImpl(factorId) {\n        (0, $juqrk._)(this, MultiFactorAssertionImpl);\n        this.factorId = factorId;\n    }\n    (0, $bNI6E._)(MultiFactorAssertionImpl, [\n        {\n            key: \"_process\",\n            value: function _process(auth, session, displayName) {\n                switch(session.type){\n                    case \"enroll\" /* MultiFactorSessionType.ENROLL */ :\n                        return this._finalizeEnroll(auth, session.credential, displayName);\n                    case \"signin\" /* MultiFactorSessionType.SIGN_IN */ :\n                        return this._finalizeSignIn(auth, session.credential);\n                    default:\n                        return $07e48e70fcf53a6e$var$debugFail(\"unexpected MultiFactorSessionType\");\n                }\n            }\n        }\n    ]);\n    return MultiFactorAssertionImpl;\n}();\n/**\r\n * {@inheritdoc PhoneMultiFactorAssertion}\r\n *\r\n * @public\r\n */ var $07e48e70fcf53a6e$var$PhoneMultiFactorAssertionImpl = /*#__PURE__*/ function(MultiFactorAssertionImpl) {\n    \"use strict\";\n    (0, $jqfyu._)(PhoneMultiFactorAssertionImpl, MultiFactorAssertionImpl);\n    var _super = (0, $50zho._)(PhoneMultiFactorAssertionImpl);\n    function PhoneMultiFactorAssertionImpl(credential) {\n        (0, $juqrk._)(this, PhoneMultiFactorAssertionImpl);\n        var _this;\n        _this = _super.call(this, \"phone\" /* FactorId.PHONE */ );\n        _this.credential = credential;\n        return _this;\n    }\n    (0, $bNI6E._)(PhoneMultiFactorAssertionImpl, [\n        {\n            /** @internal */ key: \"_finalizeEnroll\",\n            value: function _finalizeEnroll(auth, idToken, displayName) {\n                return $07e48e70fcf53a6e$var$finalizeEnrollPhoneMfa(auth, {\n                    idToken: idToken,\n                    displayName: displayName,\n                    phoneVerificationInfo: this.credential._makeVerificationRequest()\n                });\n            }\n        },\n        {\n            /** @internal */ key: \"_finalizeSignIn\",\n            value: function _finalizeSignIn(auth, mfaPendingCredential) {\n                return $07e48e70fcf53a6e$var$finalizeSignInPhoneMfa(auth, {\n                    mfaPendingCredential: mfaPendingCredential,\n                    phoneVerificationInfo: this.credential._makeVerificationRequest()\n                });\n            }\n        }\n    ], [\n        {\n            key: \"_fromCredential\",\n            value: /** @internal */ function _fromCredential(credential) {\n                return new PhoneMultiFactorAssertionImpl(credential);\n            }\n        }\n    ]);\n    return PhoneMultiFactorAssertionImpl;\n}($07e48e70fcf53a6e$var$MultiFactorAssertionImpl);\n/**\r\n * Provider for generating a {@link PhoneMultiFactorAssertion}.\r\n *\r\n * @public\r\n */ var $07e48e70fcf53a6e$export$953cecd6e717a553 = /*#__PURE__*/ function() {\n    \"use strict\";\n    function PhoneMultiFactorGenerator() {\n        (0, $juqrk._)(this, PhoneMultiFactorGenerator);\n    }\n    (0, $bNI6E._)(PhoneMultiFactorGenerator, null, [\n        {\n            key: \"assertion\",\n            value: /**\r\n     * Provides a {@link PhoneMultiFactorAssertion} to confirm ownership of the phone second factor.\r\n     *\r\n     * @param phoneAuthCredential - A credential provided by {@link PhoneAuthProvider.credential}.\r\n     * @returns A {@link PhoneMultiFactorAssertion} which can be used with\r\n     * {@link MultiFactorResolver.resolveSignIn}\r\n     */ function assertion(credential) {\n                return $07e48e70fcf53a6e$var$PhoneMultiFactorAssertionImpl._fromCredential(credential);\n            }\n        }\n    ]);\n    return PhoneMultiFactorGenerator;\n}();\n/**\r\n * The identifier of the phone second factor: `phone`.\r\n */ $07e48e70fcf53a6e$export$953cecd6e717a553.FACTOR_ID = \"phone\";\n/**\r\n * Provider for generating a {@link TotpMultiFactorAssertion}.\r\n *\r\n * @public\r\n */ var $07e48e70fcf53a6e$export$971d5caa766a69d7 = /*#__PURE__*/ function() {\n    \"use strict\";\n    function TotpMultiFactorGenerator() {\n        (0, $juqrk._)(this, TotpMultiFactorGenerator);\n    }\n    (0, $bNI6E._)(TotpMultiFactorGenerator, null, [\n        {\n            key: \"assertionForEnrollment\",\n            value: /**\r\n     * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of\r\n     * the TOTP (time-based one-time password) second factor.\r\n     * This assertion is used to complete enrollment in TOTP second factor.\r\n     *\r\n     * @param secret A {@link TotpSecret} containing the shared secret key and other TOTP parameters.\r\n     * @param oneTimePassword One-time password from TOTP App.\r\n     * @returns A {@link TotpMultiFactorAssertion} which can be used with\r\n     * {@link MultiFactorUser.enroll}.\r\n     */ function assertionForEnrollment(secret, oneTimePassword) {\n                return $07e48e70fcf53a6e$var$TotpMultiFactorAssertionImpl._fromSecret(secret, oneTimePassword);\n            }\n        },\n        {\n            key: \"assertionForSignIn\",\n            value: /**\r\n     * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of the TOTP second factor.\r\n     * This assertion is used to complete signIn with TOTP as the second factor.\r\n     *\r\n     * @param enrollmentId identifies the enrolled TOTP second factor.\r\n     * @param oneTimePassword One-time password from TOTP App.\r\n     * @returns A {@link TotpMultiFactorAssertion} which can be used with\r\n     * {@link MultiFactorResolver.resolveSignIn}.\r\n     */ function assertionForSignIn(enrollmentId, oneTimePassword) {\n                return $07e48e70fcf53a6e$var$TotpMultiFactorAssertionImpl._fromEnrollmentId(enrollmentId, oneTimePassword);\n            }\n        },\n        {\n            key: \"generateSecret\",\n            value: /**\r\n     * Returns a promise to {@link TotpSecret} which contains the TOTP shared secret key and other parameters.\r\n     * Creates a TOTP secret as part of enrolling a TOTP second factor.\r\n     * Used for generating a QR code URL or inputting into a TOTP app.\r\n     * This method uses the auth instance corresponding to the user in the multiFactorSession.\r\n     *\r\n     * @param session The {@link MultiFactorSession} that the user is part of.\r\n     * @returns A promise to {@link TotpSecret}.\r\n     */ function generateSecret(session) {\n                return (0, $i7mVp._)(function() {\n                    var mfaSession, response;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                mfaSession = session;\n                                $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(typeof mfaSession.auth !== \"undefined\", \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */ );\n                                return [\n                                    4,\n                                    $07e48e70fcf53a6e$var$startEnrollTotpMfa(mfaSession.auth, {\n                                        idToken: mfaSession.credential,\n                                        totpEnrollmentInfo: {}\n                                    })\n                                ];\n                            case 1:\n                                response = _state.sent();\n                                return [\n                                    2,\n                                    $07e48e70fcf53a6e$export$7ccc53e8f1e7dfc5._fromStartTotpMfaEnrollmentResponse(response, mfaSession.auth)\n                                ];\n                        }\n                    });\n                })();\n            }\n        }\n    ]);\n    return TotpMultiFactorGenerator;\n}();\n/**\r\n * The identifier of the TOTP second factor: `totp`.\r\n */ $07e48e70fcf53a6e$export$971d5caa766a69d7.FACTOR_ID = \"totp\" /* FactorId.TOTP */ ;\nvar $07e48e70fcf53a6e$var$TotpMultiFactorAssertionImpl = /*#__PURE__*/ function(MultiFactorAssertionImpl) {\n    \"use strict\";\n    (0, $jqfyu._)(TotpMultiFactorAssertionImpl, MultiFactorAssertionImpl);\n    var _super = (0, $50zho._)(TotpMultiFactorAssertionImpl);\n    function TotpMultiFactorAssertionImpl(otp, enrollmentId, secret) {\n        (0, $juqrk._)(this, TotpMultiFactorAssertionImpl);\n        var _this;\n        _this = _super.call(this, \"totp\" /* FactorId.TOTP */ );\n        _this.otp = otp;\n        _this.enrollmentId = enrollmentId;\n        _this.secret = secret;\n        return _this;\n    }\n    (0, $bNI6E._)(TotpMultiFactorAssertionImpl, [\n        {\n            key: \"_finalizeEnroll\",\n            value: /** @internal */ function _finalizeEnroll(auth, idToken, displayName) {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(typeof _this.secret !== \"undefined\", auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */ );\n                        return [\n                            2,\n                            $07e48e70fcf53a6e$var$finalizeEnrollTotpMfa(auth, {\n                                idToken: idToken,\n                                displayName: displayName,\n                                totpVerificationInfo: _this.secret._makeTotpVerificationInfo(_this.otp)\n                            })\n                        ];\n                    });\n                })();\n            }\n        },\n        {\n            key: \"_finalizeSignIn\",\n            value: /** @internal */ function _finalizeSignIn(auth, mfaPendingCredential) {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var totpVerificationInfo;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(_this.enrollmentId !== undefined && _this.otp !== undefined, auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */ );\n                        totpVerificationInfo = {\n                            verificationCode: _this.otp\n                        };\n                        return [\n                            2,\n                            $07e48e70fcf53a6e$var$finalizeSignInTotpMfa(auth, {\n                                mfaPendingCredential: mfaPendingCredential,\n                                mfaEnrollmentId: _this.enrollmentId,\n                                totpVerificationInfo: totpVerificationInfo\n                            })\n                        ];\n                    });\n                })();\n            }\n        }\n    ], [\n        {\n            key: \"_fromSecret\",\n            value: /** @internal */ function _fromSecret(secret, otp) {\n                return new TotpMultiFactorAssertionImpl(otp, undefined, secret);\n            }\n        },\n        {\n            key: \"_fromEnrollmentId\",\n            value: /** @internal */ function _fromEnrollmentId(enrollmentId, otp) {\n                return new TotpMultiFactorAssertionImpl(otp, enrollmentId);\n            }\n        }\n    ]);\n    return TotpMultiFactorAssertionImpl;\n}($07e48e70fcf53a6e$var$MultiFactorAssertionImpl);\n/**\r\n * Provider for generating a {@link TotpMultiFactorAssertion}.\r\n *\r\n * Stores the shared secret key and other parameters to generate time-based OTPs.\r\n * Implements methods to retrieve the shared secret key and generate a QR code URL.\r\n * @public\r\n */ var $07e48e70fcf53a6e$export$7ccc53e8f1e7dfc5 = /*#__PURE__*/ function() {\n    \"use strict\";\n    function TotpSecret(secretKey, hashingAlgorithm, codeLength, codeIntervalSeconds, enrollmentCompletionDeadline, sessionInfo, auth) {\n        (0, $juqrk._)(this, TotpSecret);\n        this.sessionInfo = sessionInfo;\n        this.auth = auth;\n        this.secretKey = secretKey;\n        this.hashingAlgorithm = hashingAlgorithm;\n        this.codeLength = codeLength;\n        this.codeIntervalSeconds = codeIntervalSeconds;\n        this.enrollmentCompletionDeadline = enrollmentCompletionDeadline;\n    }\n    (0, $bNI6E._)(TotpSecret, [\n        {\n            /** @internal */ key: \"_makeTotpVerificationInfo\",\n            value: function _makeTotpVerificationInfo(otp) {\n                return {\n                    sessionInfo: this.sessionInfo,\n                    verificationCode: otp\n                };\n            }\n        },\n        {\n            /**\r\n     * Returns a QR code URL as described in\r\n     * https://github.com/google/google-authenticator/wiki/Key-Uri-Format\r\n     * This can be displayed to the user as a QR code to be scanned into a TOTP app like Google Authenticator.\r\n     * If the optional parameters are unspecified, an accountName of <userEmail> and issuer of <firebaseAppName> are used.\r\n     *\r\n     * @param accountName the name of the account/app along with a user identifier.\r\n     * @param issuer issuer of the TOTP (likely the app name).\r\n     * @returns A QR code URL string.\r\n     */ key: \"generateQrCodeUrl\",\n            value: function generateQrCodeUrl(accountName, issuer) {\n                var _a;\n                var useDefaults = false;\n                if ($07e48e70fcf53a6e$var$_isEmptyString(accountName) || $07e48e70fcf53a6e$var$_isEmptyString(issuer)) useDefaults = true;\n                if (useDefaults) {\n                    if ($07e48e70fcf53a6e$var$_isEmptyString(accountName)) accountName = ((_a = this.auth.currentUser) === null || _a === void 0 ? void 0 : _a.email) || \"unknownuser\";\n                    if ($07e48e70fcf53a6e$var$_isEmptyString(issuer)) issuer = this.auth.name;\n                }\n                return \"otpauth://totp/\".concat(issuer, \":\").concat(accountName, \"?secret=\").concat(this.secretKey, \"&issuer=\").concat(issuer, \"&algorithm=\").concat(this.hashingAlgorithm, \"&digits=\").concat(this.codeLength);\n            }\n        }\n    ], [\n        {\n            key: \"_fromStartTotpMfaEnrollmentResponse\",\n            value: /** @internal */ function _fromStartTotpMfaEnrollmentResponse(response, auth) {\n                return new TotpSecret(response.totpSessionInfo.sharedSecretKey, response.totpSessionInfo.hashingAlgorithm, response.totpSessionInfo.verificationCodeLength, response.totpSessionInfo.periodSec, new Date(response.totpSessionInfo.finalizeEnrollmentTime).toUTCString(), response.totpSessionInfo.sessionInfo, auth);\n            }\n        }\n    ]);\n    return TotpSecret;\n}();\n/** @internal */ function $07e48e70fcf53a6e$var$_isEmptyString(input) {\n    return typeof input === \"undefined\" || (input === null || input === void 0 ? void 0 : input.length) === 0;\n}\nvar $07e48e70fcf53a6e$var$name = \"@firebase/auth\";\nvar $07e48e70fcf53a6e$var$version = \"0.23.2\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ var $07e48e70fcf53a6e$var$AuthInterop = /*#__PURE__*/ function() {\n    \"use strict\";\n    function AuthInterop(auth) {\n        (0, $juqrk._)(this, AuthInterop);\n        this.auth = auth;\n        this.internalListeners = new Map();\n    }\n    (0, $bNI6E._)(AuthInterop, [\n        {\n            key: \"getUid\",\n            value: function getUid() {\n                var _a;\n                this.assertAuthConfigured();\n                return ((_a = this.auth.currentUser) === null || _a === void 0 ? void 0 : _a.uid) || null;\n            }\n        },\n        {\n            key: \"getToken\",\n            value: function getToken(forceRefresh) {\n                var _this = this;\n                return (0, $i7mVp._)(function() {\n                    var accessToken;\n                    return (0, $4tSb9.__generator)(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                _this.assertAuthConfigured();\n                                return [\n                                    4,\n                                    _this.auth._initializationPromise\n                                ];\n                            case 1:\n                                _state.sent();\n                                if (!_this.auth.currentUser) return [\n                                    2,\n                                    null\n                                ];\n                                return [\n                                    4,\n                                    _this.auth.currentUser.getIdToken(forceRefresh)\n                                ];\n                            case 2:\n                                accessToken = _state.sent();\n                                return [\n                                    2,\n                                    {\n                                        accessToken: accessToken\n                                    }\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"addAuthTokenListener\",\n            value: function addAuthTokenListener(listener) {\n                this.assertAuthConfigured();\n                if (this.internalListeners.has(listener)) return;\n                var unsubscribe = this.auth.onIdTokenChanged(function(user) {\n                    listener((user === null || user === void 0 ? void 0 : user.stsTokenManager.accessToken) || null);\n                });\n                this.internalListeners.set(listener, unsubscribe);\n                this.updateProactiveRefresh();\n            }\n        },\n        {\n            key: \"removeAuthTokenListener\",\n            value: function removeAuthTokenListener(listener) {\n                this.assertAuthConfigured();\n                var unsubscribe = this.internalListeners.get(listener);\n                if (!unsubscribe) return;\n                this.internalListeners.delete(listener);\n                unsubscribe();\n                this.updateProactiveRefresh();\n            }\n        },\n        {\n            key: \"assertAuthConfigured\",\n            value: function assertAuthConfigured() {\n                $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(this.auth._initializationPromise, \"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */ );\n            }\n        },\n        {\n            key: \"updateProactiveRefresh\",\n            value: function updateProactiveRefresh() {\n                if (this.internalListeners.size > 0) this.auth._startProactiveRefresh();\n                else this.auth._stopProactiveRefresh();\n            }\n        }\n    ]);\n    return AuthInterop;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ function $07e48e70fcf53a6e$var$getVersionForPlatform(clientPlatform) {\n    switch(clientPlatform){\n        case \"Node\" /* ClientPlatform.NODE */ :\n            return \"node\";\n        case \"ReactNative\" /* ClientPlatform.REACT_NATIVE */ :\n            return \"rn\";\n        case \"Worker\" /* ClientPlatform.WORKER */ :\n            return \"webworker\";\n        case \"Cordova\" /* ClientPlatform.CORDOVA */ :\n            return \"cordova\";\n        default:\n            return undefined;\n    }\n}\n/** @internal */ function $07e48e70fcf53a6e$var$registerAuth(clientPlatform) {\n    (0, $0913f93b5b3c9bac$export$c930050e7bb63965)(new (0, $4d80d01579d5bd6a$export$16fa2f45be04daa8)(\"auth\" /* _ComponentName.AUTH */ , function(container, param) {\n        var deps = param.options;\n        var app = container.getProvider(\"app\").getImmediate();\n        var heartbeatServiceProvider = container.getProvider(\"heartbeat\");\n        var appCheckServiceProvider = container.getProvider(\"app-check-internal\");\n        var _app_options = app.options, apiKey = _app_options.apiKey, authDomain = _app_options.authDomain;\n        $07e48e70fcf53a6e$export$91c6e00c14e7e6fd(apiKey && !apiKey.includes(\":\"), \"invalid-api-key\" /* AuthErrorCode.INVALID_API_KEY */ , {\n            appName: app.name\n        });\n        var config = {\n            apiKey: apiKey,\n            authDomain: authDomain,\n            clientPlatform: clientPlatform,\n            apiHost: \"identitytoolkit.googleapis.com\" /* DefaultConfig.API_HOST */ ,\n            tokenApiHost: \"securetoken.googleapis.com\" /* DefaultConfig.TOKEN_API_HOST */ ,\n            apiScheme: \"https\" /* DefaultConfig.API_SCHEME */ ,\n            sdkClientVersion: $07e48e70fcf53a6e$export$23ebac1979863676(clientPlatform)\n        };\n        var authInstance = new $07e48e70fcf53a6e$export$a05254e7c3aeba6e(app, heartbeatServiceProvider, appCheckServiceProvider, config);\n        $07e48e70fcf53a6e$var$_initializeAuthInstance(authInstance, deps);\n        return authInstance;\n    }, \"PUBLIC\" /* ComponentType.PUBLIC */ )/**\r\n         * Auth can only be initialized by explicitly calling getAuth() or initializeAuth()\r\n         * For why we do this, See go/firebase-next-auth-init\r\n         */ .setInstantiationMode(\"EXPLICIT\" /* InstantiationMode.EXPLICIT */ )/**\r\n         * Because all firebase products that depend on auth depend on auth-internal directly,\r\n         * we need to initialize auth-internal after auth is initialized to make it available to other firebase products.\r\n         */ .setInstanceCreatedCallback(function(container, _instanceIdentifier, _instance) {\n        var authInternalProvider = container.getProvider(\"auth-internal\" /* _ComponentName.AUTH_INTERNAL */ );\n        authInternalProvider.initialize();\n    }));\n    (0, $0913f93b5b3c9bac$export$c930050e7bb63965)(new (0, $4d80d01579d5bd6a$export$16fa2f45be04daa8)(\"auth-internal\" /* _ComponentName.AUTH_INTERNAL */ , function(container) {\n        var auth = $07e48e70fcf53a6e$export$a33b77bbdbb8366c(container.getProvider(\"auth\" /* _ComponentName.AUTH */ ).getImmediate());\n        return function(auth) {\n            return new $07e48e70fcf53a6e$var$AuthInterop(auth);\n        }(auth);\n    }, \"PRIVATE\" /* ComponentType.PRIVATE */ ).setInstantiationMode(\"EXPLICIT\" /* InstantiationMode.EXPLICIT */ ));\n    (0, $0913f93b5b3c9bac$export$d29d5299a7137abc)($07e48e70fcf53a6e$var$name, $07e48e70fcf53a6e$var$version, $07e48e70fcf53a6e$var$getVersionForPlatform(clientPlatform));\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n    (0, $0913f93b5b3c9bac$export$d29d5299a7137abc)($07e48e70fcf53a6e$var$name, $07e48e70fcf53a6e$var$version, \"esm2017\");\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ var $07e48e70fcf53a6e$var$DEFAULT_ID_TOKEN_MAX_AGE = 300;\nvar $07e48e70fcf53a6e$var$authIdTokenMaxAge = (0, $1d9d263a787f8021$export$5539a1a3afe87d6)(\"authIdTokenMaxAge\") || $07e48e70fcf53a6e$var$DEFAULT_ID_TOKEN_MAX_AGE;\nvar $07e48e70fcf53a6e$var$lastPostedIdToken = null;\nvar $07e48e70fcf53a6e$var$mintCookieFactory = function(url) {\n    return function() {\n        var _ref = (0, $i7mVp._)(function(user) {\n            var idTokenResult, _tmp, idTokenAge, idToken;\n            return (0, $4tSb9.__generator)(this, function(_state) {\n                switch(_state.label){\n                    case 0:\n                        _tmp = user;\n                        if (!_tmp) return [\n                            3,\n                            2\n                        ];\n                        return [\n                            4,\n                            user.getIdTokenResult()\n                        ];\n                    case 1:\n                        _tmp = _state.sent();\n                        _state.label = 2;\n                    case 2:\n                        idTokenResult = _tmp;\n                        idTokenAge = idTokenResult && (new Date().getTime() - Date.parse(idTokenResult.issuedAtTime)) / 1000;\n                        if (idTokenAge && idTokenAge > $07e48e70fcf53a6e$var$authIdTokenMaxAge) return [\n                            2\n                        ];\n                        idToken = idTokenResult === null || idTokenResult === void 0 ? void 0 : idTokenResult.token;\n                        if ($07e48e70fcf53a6e$var$lastPostedIdToken === idToken) return [\n                            2\n                        ];\n                        $07e48e70fcf53a6e$var$lastPostedIdToken = idToken;\n                        return [\n                            4,\n                            fetch(url, {\n                                method: idToken ? \"POST\" : \"DELETE\",\n                                headers: idToken ? {\n                                    \"Authorization\": \"Bearer \".concat(idToken)\n                                } : {}\n                            })\n                        ];\n                    case 3:\n                        _state.sent();\n                        return [\n                            2\n                        ];\n                }\n            });\n        });\n        return function(user) {\n            return _ref.apply(this, arguments);\n        };\n    }();\n};\n/**\r\n * Returns the Auth instance associated with the provided {@link @firebase/app#FirebaseApp}.\r\n * If no instance exists, initializes an Auth instance with platform-specific default dependencies.\r\n *\r\n * @param app - The Firebase App.\r\n *\r\n * @public\r\n */ function $07e48e70fcf53a6e$export$ae1af26003f05816() {\n    var app = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : (0, $0913f93b5b3c9bac$export$f9962582c9e66d99)();\n    var provider = (0, $0913f93b5b3c9bac$export$fa0d6da0f5838f50)(app, \"auth\");\n    if (provider.isInitialized()) return provider.getImmediate();\n    var auth = $07e48e70fcf53a6e$export$7f8ddf7c7c20b3cd(app, {\n        popupRedirectResolver: $07e48e70fcf53a6e$export$342063e11d6c3cad,\n        persistence: [\n            $07e48e70fcf53a6e$export$23f2a1d2818174ef,\n            $07e48e70fcf53a6e$export$8b22cf2602fb60ce,\n            $07e48e70fcf53a6e$export$407448d2b89b1813\n        ]\n    });\n    var authTokenSyncUrl = (0, $1d9d263a787f8021$export$5539a1a3afe87d6)(\"authTokenSyncURL\");\n    if (authTokenSyncUrl) {\n        var mintCookie = $07e48e70fcf53a6e$var$mintCookieFactory(authTokenSyncUrl);\n        $07e48e70fcf53a6e$export$efccba1c4a2ef57b(auth, mintCookie, function() {\n            return mintCookie(auth.currentUser);\n        });\n        $07e48e70fcf53a6e$export$90a7f3efeed30595(auth, function(user) {\n            return mintCookie(user);\n        });\n    }\n    var authEmulatorHost = (0, $1d9d263a787f8021$export$9c11895284c8adad)(\"auth\");\n    if (authEmulatorHost) $07e48e70fcf53a6e$export$9bb611d729802a56(auth, \"http://\".concat(authEmulatorHost));\n    return auth;\n}\n$07e48e70fcf53a6e$var$registerAuth(\"Browser\" /* ClientPlatform.BROWSER */ );\n\n\n\n\n\n\n\n\n\n\n\nvar $45c499f577ee3690$var$firebaseConfig = {\n    apiKey: \"AIzaSyD9NB5XIyAUxiHCb5iMCpbLPbfSTuKHScU\",\n    authDomain: \"teamproject-559fc.firebaseapp.com\",\n    projectId: \"teamproject-559fc\",\n    storageBucket: \"teamproject-559fc.appspot.com\",\n    messagingSenderId: \"551725301236\",\n    appId: \"1:551725301236:web:8687d29db3ac7fb7894da1\"\n};\nvar $45c499f577ee3690$var$app = (0, $0913f93b5b3c9bac$export$c55cfd413944906d)($45c499f577ee3690$var$firebaseConfig);\nvar $45c499f577ee3690$export$3493b8991d49f558 = function() {\n    var _ref = (0, $i7mVp._)(function(email, password) {\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            return [\n                2,\n                (0, $07e48e70fcf53a6e$export$c3950d9923825c02)((0, $07e48e70fcf53a6e$export$ae1af26003f05816)($45c499f577ee3690$var$app), email, password)\n            ];\n        });\n    });\n    return function createUser(email, password) {\n        return _ref.apply(this, arguments);\n    };\n}();\nvar $45c499f577ee3690$export$745b26d8c003724a = function() {\n    var _ref = (0, $i7mVp._)(function(email, password) {\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            return [\n                2,\n                (0, $07e48e70fcf53a6e$export$a9c996f45e5784d0)((0, $07e48e70fcf53a6e$export$ae1af26003f05816)($45c499f577ee3690$var$app), email, password)\n            ];\n        });\n    });\n    return function signInUser(email, password) {\n        return _ref.apply(this, arguments);\n    };\n}();\n\n\nvar $43867dc939e5f558$export$c0d84948cecf78d8 = function(user) {\n    sessionStorage.setItem(\"email\", user.email);\n    sessionStorage.setItem(\"accessToken\", user.accessToken);\n};\nvar $43867dc939e5f558$export$12151e9ef3722552 = function() {\n    return {\n        email: sessionStorage.getItem(\"email\"),\n        accessToken: sessionStorage.getItem(\"accessToken\")\n    };\n};\nvar $43867dc939e5f558$export$17a5be43989a0bc1 = function() {\n    sessionStorage.clear();\n};\nvar $43867dc939e5f558$export$256a5a3564694cfc = function() {\n    return $43867dc939e5f558$export$12151e9ef3722552().accessToken;\n};\n\n\nvar $59736801ee551fe7$var$loginBtn = document.querySelector(\".sign-up-btn\");\nvar $59736801ee551fe7$var$backdropModalLogin = document.querySelector(\".backdrop_login\");\nvar $59736801ee551fe7$var$closeloginModalBtn = document.querySelector(\".modal_login-close\");\nvar $59736801ee551fe7$var$formLogin = document.querySelector(\".login_form\");\n$59736801ee551fe7$var$loginBtn.addEventListener(\"click\", $59736801ee551fe7$var$onClickBtnlogin);\n$59736801ee551fe7$var$closeloginModalBtn.addEventListener(\"click\", $59736801ee551fe7$var$onClickBtnlogin);\n$59736801ee551fe7$var$backdropModalLogin.addEventListener(\"click\", $59736801ee551fe7$var$closeClickBackdrop);\n$59736801ee551fe7$var$formLogin.addEventListener(\"submit\", $59736801ee551fe7$var$onSubmit);\nfunction $59736801ee551fe7$var$onClickBtnlogin() {\n    document.addEventListener(\"keydown\", $59736801ee551fe7$var$onCloseModalEsc);\n    $59736801ee551fe7$var$onToggleModal();\n}\nfunction $59736801ee551fe7$var$closeClickBackdrop(e) {\n    if (e.currentTarget === e.target) $59736801ee551fe7$var$onToggleModal();\n}\nfunction $59736801ee551fe7$var$onCloseModalEsc(e) {\n    if (e.key === \"Escape\") {\n        $59736801ee551fe7$var$onToggleModal();\n        document.removeEventListener(\"keydown\", $59736801ee551fe7$var$onCloseModalEsc);\n    }\n}\nfunction $59736801ee551fe7$var$onToggleModal() {\n    $59736801ee551fe7$var$backdropModalLogin.classList.toggle(\"js-backdrop-login\");\n}\nfunction $59736801ee551fe7$var$onSubmit(e) {\n    return $59736801ee551fe7$var$_onSubmit.apply(this, arguments);\n}\nfunction $59736801ee551fe7$var$_onSubmit() {\n    $59736801ee551fe7$var$_onSubmit = (0, $i7mVp._)(function(e) {\n        var email, password, loginResponse, error;\n        return (0, $4tSb9.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    e.preventDefault();\n                    email = e.currentTarget.email.value;\n                    password = e.currentTarget.password.value;\n                    _state.label = 1;\n                case 1:\n                    _state.trys.push([\n                        1,\n                        3,\n                        ,\n                        4\n                    ]);\n                    return [\n                        4,\n                        (0, $45c499f577ee3690$export$745b26d8c003724a)(email, password)\n                    ];\n                case 2:\n                    loginResponse = _state.sent();\n                    (0, $43867dc939e5f558$export$c0d84948cecf78d8)(loginResponse.user);\n                    console.log(loginResponse);\n                    $59736801ee551fe7$var$onToggleModal();\n                    return [\n                        3,\n                        4\n                    ];\n                case 3:\n                    error = _state.sent();\n                    console.error(error.message);\n                    setError(error.message);\n                    return [\n                        3,\n                        4\n                    ];\n                case 4:\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return $59736801ee551fe7$var$_onSubmit.apply(this, arguments);\n}\n\n\nparcelRequire(\"xpKCW\");\nparcelRequire(\"cs7FV\");\n\n\n})();\n//# sourceMappingURL=index.e39e4eab.js.map\n","// Modals\nimport './js/skroll.js';\nimport './js/modals.js';\nimport './js/firebase/login-modal.js';\n\nimport './js/support.js';\nimport './js/mobile-menu.js';\nimport './js/sidebarmaincontent.js';\n","import {\n  marckModal,\n  marckCategorieItem,\n  marckAllCategories,\n  marckUpSideCategories,\n} from './marckupcategories.js';\nimport { booksView } from './sidebarmaincontent.js';\nimport { fetchBook } from './fetchapis.js';\nimport { addToLocalStorage } from './firebase/addLocal.js'\nconst modalCardBtn = document.querySelector('.add-book-button');\n\nconst overlay = document.querySelector('#overlay-modal');\nconst closeButton = document.querySelector('.js-modal-close');\nconst modal = document.querySelector('.modal');\nconst modalContent = document.querySelector('.modal-content');\nlet bookId = ''\nfunction closeModal() {\n  modal.classList.remove('active');\n  overlay.classList.remove('active');\n  document.body.style.overflow = '';\n\n  closeButton.removeEventListener('click', closeModal);\n  overlay.removeEventListener('click', closeModal);\n  document.removeEventListener('keydown', handleKeyPress);\n}\n\nfunction handleKeyPress(event) {\n  if (event.key === 'Escape') {\n    closeModal();\n  }\n}\n\nasync function createMarckModal(bookId) {\n  const mark = await marckModal(bookId);\n  modalContent.innerHTML = mark;\n}\nbooksView.addEventListener('click', onBook);\n\nasync function onBook(e) {\n  try {\n    bookId = e.target.closest('.outlineli').dataset.id;\n  } catch (error) {\n    return;\n  }\n  if (!bookId) {\n    return;\n  }\n  await createMarckModal(bookId);\n\n// const addButton = document.querySelector('.add-book-button');\n// addButton.addEventListener('click', changeBtnText);\n\n// function changeBtnText() {\n//     if (this.textContent === 'add to shopping list') {\n//       this.textContent = 'remove from the shopping list';\n//     } else {\n//       this.textContent = 'Add to shopping list';\n//     } return\n//   };\n  async function addClass() {\n    modal.classList.add('active');\n    overlay.classList.add('active');\n    document.body.style.overflow = 'hidden';\n\n    closeButton.addEventListener('click', closeModal);\n    overlay.addEventListener('click', closeModal);\n    document.addEventListener('keydown', handleKeyPress);\n    closeButton.removeEventListener('click', onBook);\n    overlay.removeEventListener('click', onBook);\n  }\n  addClass();\n}\n\n\n\nmodalCardBtn.addEventListener('click', onClickBtnAddCard);\n\n  function onClickBtnAddCard() {\n const booksId = document.querySelector('.book');\n    const id = booksId.getAttribute('data-book-id');\n\n    fetchBook(id)\n      .then(({ book_image, title, author, description, _id, list_name, buy_links }) => {\n        const bookCard = {\n          book_image,\n          title,\n          author,\n          description,\n          _id,\n          list_name,\n         buy_links\n        };\n        addToLocalStorage(bookCard)\n        // modalCardBtn.textContent = 'remove from the shopping list'\n      });\n}\n","import {\n  marckUpSideCategories,\n  marckAllCategories,\n  marckCategorieItem,\n  marckModal,\n  marckCategorieItemMore,\n} from './marckupcategories.js';\n\nconst sideCategoriesList = document.querySelector('.js_side_categories_list');\nconst loader = document.querySelector('.wrap');\nconst categoriesTitle = document.querySelector('.title_categories');\n\nfunction addLoader() {\n  loader.classList.remove('hidden');\n  categoriesTitle.classList.add('hidden');\n}\nfunction removeLoader() {\n  loader.classList.add('hidden');\n  categoriesTitle.classList.remove('hidden');\n}\n\nexport const booksView = document.querySelector('.js_books_view');\n\nasync function createMarckUpSideCategories() {\n  const mark = await marckUpSideCategories();\n  sideCategoriesList.insertAdjacentHTML('beforeend', mark);\n}\ncreateMarckUpSideCategories();\n\nasync function createMarckAllCategories() {\n  booksView.innerHTML = '';\n  addLoader();\n  const mark = await marckAllCategories();\n  booksView.innerHTML = mark;\n  removeLoader();\n}\ncreateMarckAllCategories();\n\nasync function createMarckCategorieItem(target) {\n  booksView.innerHTML = '';\n  addLoader();\n  const mark = await marckCategorieItem(target);\n  booksView.innerHTML = mark;\n  removeLoader();\n}\n\nfunction createModal(bookId) {\n  const mark = marckModal(bookId);\n  return mark;\n}\n\nsideCategoriesList.addEventListener('click', onClick);\n\nasync function onClick(e) {\n  e.preventDefault();\n  let target = e.target.textContent;\n\n  if (!(e.target.tagName === 'A')) {\n    return;\n  }\n  if (target === 'All categories') {\n    createMarckAllCategories();\n  } else {\n    createMarckCategorieItem(target);\n  }\n  [...e.currentTarget.children].map(el =>\n    el.classList.remove('selected-category')\n  );\n  e.target.parentNode.classList.add('selected-category');\n}\n\n// Отрисовка на кнопку See More\nbooksView.addEventListener('click', onSeeMore);\nasync function onSeeMore(e) {\n  let targetBtn = e.target.classList.contains('load-more-books');\n  if (!targetBtn) {\n    return;\n  }\n  let fetchtitle = e.target.closest('.category-books').firstChild.textContent;\n  await createMarckCategorieItemMore(fetchtitle);\n  e.target.classList.add('no-btn');\n  [...e.target.previousSibling.children].map(el =>\n    el.classList.remove('hidden')\n  );\n}\n\nasync function createMarckCategorieItemMore(target) {\n  const listBooks = document.querySelectorAll('.list-books');\n  const a = [...listBooks].filter(el => el.dataset.category === target);\n  const mark = await marckCategorieItemMore(target);\n  a[0].innerHTML = mark;\n}\n","export function addToLocalStorage(bookCard) {\n  const all = getBookCardToLocalStorage();\n  all.push(bookCard);\n  localStorage.setItem('bookCard', JSON.stringify(all));\n}\n\nexport function getBookCardToLocalStorage() {\n  return JSON.parse(localStorage.getItem('bookCard') || '[]');\n}","import {signInUser, createUser} from \"./firebaseApi\";\nimport {startSession} from \"./session\";\n\nconst loginBtn = document.querySelector('.sign-up-btn');\nconst backdropModalLogin = document.querySelector('.backdrop_login');\nconst closeloginModalBtn = document.querySelector('.modal_login-close');\nconst formLogin = document.querySelector('.login_form');\n\n\nloginBtn.addEventListener('click', onClickBtnlogin);\ncloseloginModalBtn.addEventListener('click', onClickBtnlogin);\nbackdropModalLogin.addEventListener('click', closeClickBackdrop)\nformLogin.addEventListener('submit', onSubmit);\n\n\nfunction onClickBtnlogin() {\ndocument.addEventListener('keydown', onCloseModalEsc);\n    onToggleModal()\n}\n\nfunction closeClickBackdrop(e) {\n  if (e.currentTarget === e.target) {\n    onToggleModal()\n  }\n}\n\nfunction onCloseModalEsc(e) {\n  if (e.key === 'Escape') {\n    onToggleModal()\n    document.removeEventListener('keydown', onCloseModalEsc);\n  }\n}\n\n\nfunction onToggleModal() {\n    backdropModalLogin.classList.toggle('js-backdrop-login');\n}\n\n\nasync function onSubmit(e) {\n  e.preventDefault();\n\n  const email = e.currentTarget.email.value;\n  const password = e.currentTarget.password.value\n  \n    try {\n    let loginResponse = await signInUser(email, password);\n    startSession(loginResponse.user);\n      console.log(loginResponse);\n      onToggleModal()\n  } catch (error) {\n    console.error(error.message);\n    setError(error.message);\n  }\n}\n","\nimport { initializeApp } from \"firebase/app\";\nimport {createUserWithEmailAndPassword, signInWithEmailAndPassword, getAuth} from \"firebase/auth\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD9NB5XIyAUxiHCb5iMCpbLPbfSTuKHScU\",\n  authDomain: \"teamproject-559fc.firebaseapp.com\",\n  projectId: \"teamproject-559fc\",\n  storageBucket: \"teamproject-559fc.appspot.com\",\n  messagingSenderId: \"551725301236\",\n  appId: \"1:551725301236:web:8687d29db3ac7fb7894da1\"\n};\n\nconst app = initializeApp(firebaseConfig);\n\n\nexport const createUser = async (email, password) => {\n  return createUserWithEmailAndPassword(getAuth(app), email, password);\n}\n\nexport const signInUser = async (email, password) => {\n  return signInWithEmailAndPassword(getAuth(app), email, password);\n}","import { registerVersion } from '@firebase/app';\nexport * from '@firebase/app';\n\nvar name = \"firebase\";\nvar version = \"9.23.0\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nregisterVersion(name, version, 'app');\n//# sourceMappingURL=index.esm.js.map\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { registerVersion } from '@firebase/app';\nimport { name, version } from '../package.json';\n\nregisterVersion(name, version, 'app');\nexport * from '@firebase/app';\n","import { Component, ComponentContainer } from '@firebase/component';\nimport { Logger, setUserLogHandler, setLogLevel as setLogLevel$1 } from '@firebase/logger';\nimport { ErrorFactory, getDefaultAppConfig, deepEqual, FirebaseError, base64urlEncodeWithoutPadding, isIndexedDBAvailable, validateIndexedDBOpenable } from '@firebase/util';\nexport { FirebaseError } from '@firebase/util';\nimport { openDB } from 'idb';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PlatformLoggerServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n    }\r\n    // In initial implementation, this will be called by installations on\r\n    // auth token refresh, and installations will send this string.\r\n    getPlatformInfoString() {\r\n        const providers = this.container.getProviders();\r\n        // Loop through providers and get library/version pairs from any that are\r\n        // version components.\r\n        return providers\r\n            .map(provider => {\r\n            if (isVersionServiceProvider(provider)) {\r\n                const service = provider.getImmediate();\r\n                return `${service.library}/${service.version}`;\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        })\r\n            .filter(logString => logString)\r\n            .join(' ');\r\n    }\r\n}\r\n/**\r\n *\r\n * @param provider check if this provider provides a VersionService\r\n *\r\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\r\n * provides VersionService. The provider is not necessarily a 'app-version'\r\n * provider.\r\n */\r\nfunction isVersionServiceProvider(provider) {\r\n    const component = provider.getComponent();\r\n    return (component === null || component === void 0 ? void 0 : component.type) === \"VERSION\" /* ComponentType.VERSION */;\r\n}\n\nconst name$o = \"@firebase/app\";\nconst version$1 = \"0.9.13\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logger = new Logger('@firebase/app');\n\nconst name$n = \"@firebase/app-compat\";\n\nconst name$m = \"@firebase/analytics-compat\";\n\nconst name$l = \"@firebase/analytics\";\n\nconst name$k = \"@firebase/app-check-compat\";\n\nconst name$j = \"@firebase/app-check\";\n\nconst name$i = \"@firebase/auth\";\n\nconst name$h = \"@firebase/auth-compat\";\n\nconst name$g = \"@firebase/database\";\n\nconst name$f = \"@firebase/database-compat\";\n\nconst name$e = \"@firebase/functions\";\n\nconst name$d = \"@firebase/functions-compat\";\n\nconst name$c = \"@firebase/installations\";\n\nconst name$b = \"@firebase/installations-compat\";\n\nconst name$a = \"@firebase/messaging\";\n\nconst name$9 = \"@firebase/messaging-compat\";\n\nconst name$8 = \"@firebase/performance\";\n\nconst name$7 = \"@firebase/performance-compat\";\n\nconst name$6 = \"@firebase/remote-config\";\n\nconst name$5 = \"@firebase/remote-config-compat\";\n\nconst name$4 = \"@firebase/storage\";\n\nconst name$3 = \"@firebase/storage-compat\";\n\nconst name$2 = \"@firebase/firestore\";\n\nconst name$1 = \"@firebase/firestore-compat\";\n\nconst name = \"firebase\";\nconst version = \"9.23.0\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The default app name\r\n *\r\n * @internal\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\r\nconst PLATFORM_LOG_STRING = {\r\n    [name$o]: 'fire-core',\r\n    [name$n]: 'fire-core-compat',\r\n    [name$l]: 'fire-analytics',\r\n    [name$m]: 'fire-analytics-compat',\r\n    [name$j]: 'fire-app-check',\r\n    [name$k]: 'fire-app-check-compat',\r\n    [name$i]: 'fire-auth',\r\n    [name$h]: 'fire-auth-compat',\r\n    [name$g]: 'fire-rtdb',\r\n    [name$f]: 'fire-rtdb-compat',\r\n    [name$e]: 'fire-fn',\r\n    [name$d]: 'fire-fn-compat',\r\n    [name$c]: 'fire-iid',\r\n    [name$b]: 'fire-iid-compat',\r\n    [name$a]: 'fire-fcm',\r\n    [name$9]: 'fire-fcm-compat',\r\n    [name$8]: 'fire-perf',\r\n    [name$7]: 'fire-perf-compat',\r\n    [name$6]: 'fire-rc',\r\n    [name$5]: 'fire-rc-compat',\r\n    [name$4]: 'fire-gcs',\r\n    [name$3]: 'fire-gcs-compat',\r\n    [name$2]: 'fire-fst',\r\n    [name$1]: 'fire-fst-compat',\r\n    'fire-js': 'fire-js',\r\n    [name]: 'fire-js-all'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nconst _apps = new Map();\r\n/**\r\n * Registered components.\r\n *\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst _components = new Map();\r\n/**\r\n * @param component - the component being added to this app's container\r\n *\r\n * @internal\r\n */\r\nfunction _addComponent(app, component) {\r\n    try {\r\n        app.container.addComponent(component);\r\n    }\r\n    catch (e) {\r\n        logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);\r\n    }\r\n}\r\n/**\r\n *\r\n * @internal\r\n */\r\nfunction _addOrOverwriteComponent(app, component) {\r\n    app.container.addOrOverwriteComponent(component);\r\n}\r\n/**\r\n *\r\n * @param component - the component to register\r\n * @returns whether or not the component is registered successfully\r\n *\r\n * @internal\r\n */\r\nfunction _registerComponent(component) {\r\n    const componentName = component.name;\r\n    if (_components.has(componentName)) {\r\n        logger.debug(`There were multiple attempts to register component ${componentName}.`);\r\n        return false;\r\n    }\r\n    _components.set(componentName, component);\r\n    // add the component to existing app instances\r\n    for (const app of _apps.values()) {\r\n        _addComponent(app, component);\r\n    }\r\n    return true;\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n *\r\n * @returns the provider for the service with the matching name\r\n *\r\n * @internal\r\n */\r\nfunction _getProvider(app, name) {\r\n    const heartbeatController = app.container\r\n        .getProvider('heartbeat')\r\n        .getImmediate({ optional: true });\r\n    if (heartbeatController) {\r\n        void heartbeatController.triggerHeartbeat();\r\n    }\r\n    return app.container.getProvider(name);\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\r\n *\r\n * @internal\r\n */\r\nfunction _removeServiceInstance(app, name, instanceIdentifier = DEFAULT_ENTRY_NAME) {\r\n    _getProvider(app, name).clearInstance(instanceIdentifier);\r\n}\r\n/**\r\n * Test only\r\n *\r\n * @internal\r\n */\r\nfunction _clearComponents() {\r\n    _components.clear();\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERRORS = {\r\n    [\"no-app\" /* AppError.NO_APP */]: \"No Firebase App '{$appName}' has been created - \" +\r\n        'call initializeApp() first',\r\n    [\"bad-app-name\" /* AppError.BAD_APP_NAME */]: \"Illegal App name: '{$appName}\",\r\n    [\"duplicate-app\" /* AppError.DUPLICATE_APP */]: \"Firebase App named '{$appName}' already exists with different options or config\",\r\n    [\"app-deleted\" /* AppError.APP_DELETED */]: \"Firebase App named '{$appName}' already deleted\",\r\n    [\"no-options\" /* AppError.NO_OPTIONS */]: 'Need to provide options, when not being deployed to hosting via source.',\r\n    [\"invalid-app-argument\" /* AppError.INVALID_APP_ARGUMENT */]: 'firebase.{$appName}() takes either no argument or a ' +\r\n        'Firebase App instance.',\r\n    [\"invalid-log-argument\" /* AppError.INVALID_LOG_ARGUMENT */]: 'First argument to `onLog` must be null or a function.',\r\n    [\"idb-open\" /* AppError.IDB_OPEN */]: 'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\r\n    [\"idb-get\" /* AppError.IDB_GET */]: 'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\r\n    [\"idb-set\" /* AppError.IDB_WRITE */]: 'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\r\n    [\"idb-delete\" /* AppError.IDB_DELETE */]: 'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.'\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass FirebaseAppImpl {\r\n    constructor(options, config, container) {\r\n        this._isDeleted = false;\r\n        this._options = Object.assign({}, options);\r\n        this._config = Object.assign({}, config);\r\n        this._name = config.name;\r\n        this._automaticDataCollectionEnabled =\r\n            config.automaticDataCollectionEnabled;\r\n        this._container = container;\r\n        this.container.addComponent(new Component('app', () => this, \"PUBLIC\" /* ComponentType.PUBLIC */));\r\n    }\r\n    get automaticDataCollectionEnabled() {\r\n        this.checkDestroyed();\r\n        return this._automaticDataCollectionEnabled;\r\n    }\r\n    set automaticDataCollectionEnabled(val) {\r\n        this.checkDestroyed();\r\n        this._automaticDataCollectionEnabled = val;\r\n    }\r\n    get name() {\r\n        this.checkDestroyed();\r\n        return this._name;\r\n    }\r\n    get options() {\r\n        this.checkDestroyed();\r\n        return this._options;\r\n    }\r\n    get config() {\r\n        this.checkDestroyed();\r\n        return this._config;\r\n    }\r\n    get container() {\r\n        return this._container;\r\n    }\r\n    get isDeleted() {\r\n        return this._isDeleted;\r\n    }\r\n    set isDeleted(val) {\r\n        this._isDeleted = val;\r\n    }\r\n    /**\r\n     * This function will throw an Error if the App has already been deleted -\r\n     * use before performing API actions on the App.\r\n     */\r\n    checkDestroyed() {\r\n        if (this.isDeleted) {\r\n            throw ERROR_FACTORY.create(\"app-deleted\" /* AppError.APP_DELETED */, { appName: this._name });\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The current SDK version.\r\n *\r\n * @public\r\n */\r\nconst SDK_VERSION = version;\r\nfunction initializeApp(_options, rawConfig = {}) {\r\n    let options = _options;\r\n    if (typeof rawConfig !== 'object') {\r\n        const name = rawConfig;\r\n        rawConfig = { name };\r\n    }\r\n    const config = Object.assign({ name: DEFAULT_ENTRY_NAME, automaticDataCollectionEnabled: false }, rawConfig);\r\n    const name = config.name;\r\n    if (typeof name !== 'string' || !name) {\r\n        throw ERROR_FACTORY.create(\"bad-app-name\" /* AppError.BAD_APP_NAME */, {\r\n            appName: String(name)\r\n        });\r\n    }\r\n    options || (options = getDefaultAppConfig());\r\n    if (!options) {\r\n        throw ERROR_FACTORY.create(\"no-options\" /* AppError.NO_OPTIONS */);\r\n    }\r\n    const existingApp = _apps.get(name);\r\n    if (existingApp) {\r\n        // return the existing app if options and config deep equal the ones in the existing app.\r\n        if (deepEqual(options, existingApp.options) &&\r\n            deepEqual(config, existingApp.config)) {\r\n            return existingApp;\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"duplicate-app\" /* AppError.DUPLICATE_APP */, { appName: name });\r\n        }\r\n    }\r\n    const container = new ComponentContainer(name);\r\n    for (const component of _components.values()) {\r\n        container.addComponent(component);\r\n    }\r\n    const newApp = new FirebaseAppImpl(options, config, container);\r\n    _apps.set(name, newApp);\r\n    return newApp;\r\n}\r\n/**\r\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * When called with no arguments, the default app is returned. When an app name\r\n * is provided, the app corresponding to that name is returned.\r\n *\r\n * An exception is thrown if the app being retrieved has not yet been\r\n * initialized.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return the default app\r\n * const app = getApp();\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return a named app\r\n * const otherApp = getApp(\"otherApp\");\r\n * ```\r\n *\r\n * @param name - Optional name of the app to return. If no name is\r\n *   provided, the default is `\"[DEFAULT]\"`.\r\n *\r\n * @returns The app corresponding to the provided app name.\r\n *   If no app name is provided, the default app is returned.\r\n *\r\n * @public\r\n */\r\nfunction getApp(name = DEFAULT_ENTRY_NAME) {\r\n    const app = _apps.get(name);\r\n    if (!app && name === DEFAULT_ENTRY_NAME && getDefaultAppConfig()) {\r\n        return initializeApp();\r\n    }\r\n    if (!app) {\r\n        throw ERROR_FACTORY.create(\"no-app\" /* AppError.NO_APP */, { appName: name });\r\n    }\r\n    return app;\r\n}\r\n/**\r\n * A (read-only) array of all initialized apps.\r\n * @public\r\n */\r\nfunction getApps() {\r\n    return Array.from(_apps.values());\r\n}\r\n/**\r\n * Renders this app unusable and frees the resources of all associated\r\n * services.\r\n *\r\n * @example\r\n * ```javascript\r\n * deleteApp(app)\r\n *   .then(function() {\r\n *     console.log(\"App deleted successfully\");\r\n *   })\r\n *   .catch(function(error) {\r\n *     console.log(\"Error deleting app:\", error);\r\n *   });\r\n * ```\r\n *\r\n * @public\r\n */\r\nasync function deleteApp(app) {\r\n    const name = app.name;\r\n    if (_apps.has(name)) {\r\n        _apps.delete(name);\r\n        await Promise.all(app.container\r\n            .getProviders()\r\n            .map(provider => provider.delete()));\r\n        app.isDeleted = true;\r\n    }\r\n}\r\n/**\r\n * Registers a library's name and version for platform logging purposes.\r\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\r\n * @param version - Current version of that library.\r\n * @param variant - Bundle variant, e.g., node, rn, etc.\r\n *\r\n * @public\r\n */\r\nfunction registerVersion(libraryKeyOrName, version, variant) {\r\n    var _a;\r\n    // TODO: We can use this check to whitelist strings when/if we set up\r\n    // a good whitelist system.\r\n    let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;\r\n    if (variant) {\r\n        library += `-${variant}`;\r\n    }\r\n    const libraryMismatch = library.match(/\\s|\\//);\r\n    const versionMismatch = version.match(/\\s|\\//);\r\n    if (libraryMismatch || versionMismatch) {\r\n        const warning = [\r\n            `Unable to register library \"${library}\" with version \"${version}\":`\r\n        ];\r\n        if (libraryMismatch) {\r\n            warning.push(`library name \"${library}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        if (libraryMismatch && versionMismatch) {\r\n            warning.push('and');\r\n        }\r\n        if (versionMismatch) {\r\n            warning.push(`version name \"${version}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        logger.warn(warning.join(' '));\r\n        return;\r\n    }\r\n    _registerComponent(new Component(`${library}-version`, () => ({ library, version }), \"VERSION\" /* ComponentType.VERSION */));\r\n}\r\n/**\r\n * Sets log handler for all Firebase SDKs.\r\n * @param logCallback - An optional custom log handler that executes user code whenever\r\n * the Firebase SDK makes a logging call.\r\n *\r\n * @public\r\n */\r\nfunction onLog(logCallback, options) {\r\n    if (logCallback !== null && typeof logCallback !== 'function') {\r\n        throw ERROR_FACTORY.create(\"invalid-log-argument\" /* AppError.INVALID_LOG_ARGUMENT */);\r\n    }\r\n    setUserLogHandler(logCallback, options);\r\n}\r\n/**\r\n * Sets log level for all Firebase SDKs.\r\n *\r\n * All of the log types above the current log level are captured (i.e. if\r\n * you set the log level to `info`, errors are logged, but `debug` and\r\n * `verbose` logs are not).\r\n *\r\n * @public\r\n */\r\nfunction setLogLevel(logLevel) {\r\n    setLogLevel$1(logLevel);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DB_NAME = 'firebase-heartbeat-database';\r\nconst DB_VERSION = 1;\r\nconst STORE_NAME = 'firebase-heartbeat-store';\r\nlet dbPromise = null;\r\nfunction getDbPromise() {\r\n    if (!dbPromise) {\r\n        dbPromise = openDB(DB_NAME, DB_VERSION, {\r\n            upgrade: (db, oldVersion) => {\r\n                // We don't use 'break' in this switch statement, the fall-through\r\n                // behavior is what we want, because if there are multiple versions between\r\n                // the old version and the current version, we want ALL the migrations\r\n                // that correspond to those versions to run, not only the last one.\r\n                // eslint-disable-next-line default-case\r\n                switch (oldVersion) {\r\n                    case 0:\r\n                        db.createObjectStore(STORE_NAME);\r\n                }\r\n            }\r\n        }).catch(e => {\r\n            throw ERROR_FACTORY.create(\"idb-open\" /* AppError.IDB_OPEN */, {\r\n                originalErrorMessage: e.message\r\n            });\r\n        });\r\n    }\r\n    return dbPromise;\r\n}\r\nasync function readHeartbeatsFromIndexedDB(app) {\r\n    try {\r\n        const db = await getDbPromise();\r\n        const result = await db\r\n            .transaction(STORE_NAME)\r\n            .objectStore(STORE_NAME)\r\n            .get(computeKey(app));\r\n        return result;\r\n    }\r\n    catch (e) {\r\n        if (e instanceof FirebaseError) {\r\n            logger.warn(e.message);\r\n        }\r\n        else {\r\n            const idbGetError = ERROR_FACTORY.create(\"idb-get\" /* AppError.IDB_GET */, {\r\n                originalErrorMessage: e === null || e === void 0 ? void 0 : e.message\r\n            });\r\n            logger.warn(idbGetError.message);\r\n        }\r\n    }\r\n}\r\nasync function writeHeartbeatsToIndexedDB(app, heartbeatObject) {\r\n    try {\r\n        const db = await getDbPromise();\r\n        const tx = db.transaction(STORE_NAME, 'readwrite');\r\n        const objectStore = tx.objectStore(STORE_NAME);\r\n        await objectStore.put(heartbeatObject, computeKey(app));\r\n        await tx.done;\r\n    }\r\n    catch (e) {\r\n        if (e instanceof FirebaseError) {\r\n            logger.warn(e.message);\r\n        }\r\n        else {\r\n            const idbGetError = ERROR_FACTORY.create(\"idb-set\" /* AppError.IDB_WRITE */, {\r\n                originalErrorMessage: e === null || e === void 0 ? void 0 : e.message\r\n            });\r\n            logger.warn(idbGetError.message);\r\n        }\r\n    }\r\n}\r\nfunction computeKey(app) {\r\n    return `${app.name}!${app.options.appId}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst MAX_HEADER_BYTES = 1024;\r\n// 30 days\r\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\r\nclass HeartbeatServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n        /**\r\n         * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\r\n         * the header string.\r\n         * Stores one record per date. This will be consolidated into the standard\r\n         * format of one record per user agent string before being sent as a header.\r\n         * Populated from indexedDB when the controller is instantiated and should\r\n         * be kept in sync with indexedDB.\r\n         * Leave public for easier testing.\r\n         */\r\n        this._heartbeatsCache = null;\r\n        const app = this.container.getProvider('app').getImmediate();\r\n        this._storage = new HeartbeatStorageImpl(app);\r\n        this._heartbeatsCachePromise = this._storage.read().then(result => {\r\n            this._heartbeatsCache = result;\r\n            return result;\r\n        });\r\n    }\r\n    /**\r\n     * Called to report a heartbeat. The function will generate\r\n     * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\r\n     * to IndexedDB.\r\n     * Note that we only store one heartbeat per day. So if a heartbeat for today is\r\n     * already logged, subsequent calls to this function in the same day will be ignored.\r\n     */\r\n    async triggerHeartbeat() {\r\n        const platformLogger = this.container\r\n            .getProvider('platform-logger')\r\n            .getImmediate();\r\n        // This is the \"Firebase user agent\" string from the platform logger\r\n        // service, not the browser user agent.\r\n        const agent = platformLogger.getPlatformInfoString();\r\n        const date = getUTCDateString();\r\n        if (this._heartbeatsCache === null) {\r\n            this._heartbeatsCache = await this._heartbeatsCachePromise;\r\n        }\r\n        // Do not store a heartbeat if one is already stored for this day\r\n        // or if a header has already been sent today.\r\n        if (this._heartbeatsCache.lastSentHeartbeatDate === date ||\r\n            this._heartbeatsCache.heartbeats.some(singleDateHeartbeat => singleDateHeartbeat.date === date)) {\r\n            return;\r\n        }\r\n        else {\r\n            // There is no entry for this date. Create one.\r\n            this._heartbeatsCache.heartbeats.push({ date, agent });\r\n        }\r\n        // Remove entries older than 30 days.\r\n        this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(singleDateHeartbeat => {\r\n            const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\r\n            const now = Date.now();\r\n            return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\r\n        });\r\n        return this._storage.overwrite(this._heartbeatsCache);\r\n    }\r\n    /**\r\n     * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\r\n     * It also clears all heartbeats from memory as well as in IndexedDB.\r\n     *\r\n     * NOTE: Consuming product SDKs should not send the header if this method\r\n     * returns an empty string.\r\n     */\r\n    async getHeartbeatsHeader() {\r\n        if (this._heartbeatsCache === null) {\r\n            await this._heartbeatsCachePromise;\r\n        }\r\n        // If it's still null or the array is empty, there is no data to send.\r\n        if (this._heartbeatsCache === null ||\r\n            this._heartbeatsCache.heartbeats.length === 0) {\r\n            return '';\r\n        }\r\n        const date = getUTCDateString();\r\n        // Extract as many heartbeats from the cache as will fit under the size limit.\r\n        const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);\r\n        const headerString = base64urlEncodeWithoutPadding(JSON.stringify({ version: 2, heartbeats: heartbeatsToSend }));\r\n        // Store last sent date to prevent another being logged/sent for the same day.\r\n        this._heartbeatsCache.lastSentHeartbeatDate = date;\r\n        if (unsentEntries.length > 0) {\r\n            // Store any unsent entries if they exist.\r\n            this._heartbeatsCache.heartbeats = unsentEntries;\r\n            // This seems more likely than emptying the array (below) to lead to some odd state\r\n            // since the cache isn't empty and this will be called again on the next request,\r\n            // and is probably safest if we await it.\r\n            await this._storage.overwrite(this._heartbeatsCache);\r\n        }\r\n        else {\r\n            this._heartbeatsCache.heartbeats = [];\r\n            // Do not wait for this, to reduce latency.\r\n            void this._storage.overwrite(this._heartbeatsCache);\r\n        }\r\n        return headerString;\r\n    }\r\n}\r\nfunction getUTCDateString() {\r\n    const today = new Date();\r\n    // Returns date format 'YYYY-MM-DD'\r\n    return today.toISOString().substring(0, 10);\r\n}\r\nfunction extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {\r\n    // Heartbeats grouped by user agent in the standard format to be sent in\r\n    // the header.\r\n    const heartbeatsToSend = [];\r\n    // Single date format heartbeats that are not sent.\r\n    let unsentEntries = heartbeatsCache.slice();\r\n    for (const singleDateHeartbeat of heartbeatsCache) {\r\n        // Look for an existing entry with the same user agent.\r\n        const heartbeatEntry = heartbeatsToSend.find(hb => hb.agent === singleDateHeartbeat.agent);\r\n        if (!heartbeatEntry) {\r\n            // If no entry for this user agent exists, create one.\r\n            heartbeatsToSend.push({\r\n                agent: singleDateHeartbeat.agent,\r\n                dates: [singleDateHeartbeat.date]\r\n            });\r\n            if (countBytes(heartbeatsToSend) > maxSize) {\r\n                // If the header would exceed max size, remove the added heartbeat\r\n                // entry and stop adding to the header.\r\n                heartbeatsToSend.pop();\r\n                break;\r\n            }\r\n        }\r\n        else {\r\n            heartbeatEntry.dates.push(singleDateHeartbeat.date);\r\n            // If the header would exceed max size, remove the added date\r\n            // and stop adding to the header.\r\n            if (countBytes(heartbeatsToSend) > maxSize) {\r\n                heartbeatEntry.dates.pop();\r\n                break;\r\n            }\r\n        }\r\n        // Pop unsent entry from queue. (Skipped if adding the entry exceeded\r\n        // quota and the loop breaks early.)\r\n        unsentEntries = unsentEntries.slice(1);\r\n    }\r\n    return {\r\n        heartbeatsToSend,\r\n        unsentEntries\r\n    };\r\n}\r\nclass HeartbeatStorageImpl {\r\n    constructor(app) {\r\n        this.app = app;\r\n        this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\r\n    }\r\n    async runIndexedDBEnvironmentCheck() {\r\n        if (!isIndexedDBAvailable()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return validateIndexedDBOpenable()\r\n                .then(() => true)\r\n                .catch(() => false);\r\n        }\r\n    }\r\n    /**\r\n     * Read all heartbeats.\r\n     */\r\n    async read() {\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return { heartbeats: [] };\r\n        }\r\n        else {\r\n            const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\r\n            return idbHeartbeatObject || { heartbeats: [] };\r\n        }\r\n    }\r\n    // overwrite the storage with the provided heartbeats\r\n    async overwrite(heartbeatsObject) {\r\n        var _a;\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            const existingHeartbeatsObject = await this.read();\r\n            return writeHeartbeatsToIndexedDB(this.app, {\r\n                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\r\n                heartbeats: heartbeatsObject.heartbeats\r\n            });\r\n        }\r\n    }\r\n    // add heartbeats\r\n    async add(heartbeatsObject) {\r\n        var _a;\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            const existingHeartbeatsObject = await this.read();\r\n            return writeHeartbeatsToIndexedDB(this.app, {\r\n                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\r\n                heartbeats: [\r\n                    ...existingHeartbeatsObject.heartbeats,\r\n                    ...heartbeatsObject.heartbeats\r\n                ]\r\n            });\r\n        }\r\n    }\r\n}\r\n/**\r\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\r\n * in a platform logging header JSON object, stringified, and converted\r\n * to base 64.\r\n */\r\nfunction countBytes(heartbeatsCache) {\r\n    // base64 has a restricted set of characters, all of which should be 1 byte.\r\n    return base64urlEncodeWithoutPadding(\r\n    // heartbeatsCache wrapper properties\r\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })).length;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerCoreComponents(variant) {\r\n    _registerComponent(new Component('platform-logger', container => new PlatformLoggerServiceImpl(container), \"PRIVATE\" /* ComponentType.PRIVATE */));\r\n    _registerComponent(new Component('heartbeat', container => new HeartbeatServiceImpl(container), \"PRIVATE\" /* ComponentType.PRIVATE */));\r\n    // Register `app` package.\r\n    registerVersion(name$o, version$1, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name$o, version$1, 'esm2017');\r\n    // Register platform SDK identifier (no version).\r\n    registerVersion('fire-js', '');\r\n}\n\n/**\r\n * Firebase App\r\n *\r\n * @remarks This package coordinates the communication between the different Firebase components\r\n * @packageDocumentation\r\n */\r\nregisterCoreComponents('');\n\nexport { SDK_VERSION, DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME, _addComponent, _addOrOverwriteComponent, _apps, _clearComponents, _components, _getProvider, _registerComponent, _removeServiceInstance, deleteApp, getApp, getApps, initializeApp, onLog, registerVersion, setLogLevel };\n//# sourceMappingURL=index.esm2017.js.map\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ComponentContainer,\n  ComponentType,\n  Provider,\n  Name\n} from '@firebase/component';\nimport { PlatformLoggerService, VersionService } from './types';\n\nexport class PlatformLoggerServiceImpl implements PlatformLoggerService {\n  constructor(private readonly container: ComponentContainer) {}\n  // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n  getPlatformInfoString(): string {\n    const providers = this.container.getProviders();\n    // Loop through providers and get library/version pairs from any that are\n    // version components.\n    return providers\n      .map(provider => {\n        if (isVersionServiceProvider(provider)) {\n          const service = provider.getImmediate() as VersionService;\n          return `${service.library}/${service.version}`;\n        } else {\n          return null;\n        }\n      })\n      .filter(logString => logString)\n      .join(' ');\n  }\n}\n/**\n *\n * @param provider check if this provider provides a VersionService\n *\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\n * provides VersionService. The provider is not necessarily a 'app-version'\n * provider.\n */\nfunction isVersionServiceProvider(provider: Provider<Name>): boolean {\n  const component = provider.getComponent();\n  return component?.type === ComponentType.VERSION;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/app');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { name as appName } from '../package.json';\nimport { name as appCompatName } from '../../app-compat/package.json';\nimport { name as analyticsCompatName } from '../../../packages/analytics-compat/package.json';\nimport { name as analyticsName } from '../../../packages/analytics/package.json';\nimport { name as appCheckCompatName } from '../../../packages/app-check-compat/package.json';\nimport { name as appCheckName } from '../../../packages/app-check/package.json';\nimport { name as authName } from '../../../packages/auth/package.json';\nimport { name as authCompatName } from '../../../packages/auth-compat/package.json';\nimport { name as databaseName } from '../../../packages/database/package.json';\nimport { name as databaseCompatName } from '../../../packages/database-compat/package.json';\nimport { name as functionsName } from '../../../packages/functions/package.json';\nimport { name as functionsCompatName } from '../../../packages/functions-compat/package.json';\nimport { name as installationsName } from '../../../packages/installations/package.json';\nimport { name as installationsCompatName } from '../../../packages/installations-compat/package.json';\nimport { name as messagingName } from '../../../packages/messaging/package.json';\nimport { name as messagingCompatName } from '../../../packages/messaging-compat/package.json';\nimport { name as performanceName } from '../../../packages/performance/package.json';\nimport { name as performanceCompatName } from '../../../packages/performance-compat/package.json';\nimport { name as remoteConfigName } from '../../../packages/remote-config/package.json';\nimport { name as remoteConfigCompatName } from '../../../packages/remote-config-compat/package.json';\nimport { name as storageName } from '../../../packages/storage/package.json';\nimport { name as storageCompatName } from '../../../packages/storage-compat/package.json';\nimport { name as firestoreName } from '../../../packages/firestore/package.json';\nimport { name as firestoreCompatName } from '../../../packages/firestore-compat/package.json';\nimport { name as packageName } from '../../../packages/firebase/package.json';\n\n/**\n * The default app name\n *\n * @internal\n */\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\nexport const PLATFORM_LOG_STRING = {\n  [appName]: 'fire-core',\n  [appCompatName]: 'fire-core-compat',\n  [analyticsName]: 'fire-analytics',\n  [analyticsCompatName]: 'fire-analytics-compat',\n  [appCheckName]: 'fire-app-check',\n  [appCheckCompatName]: 'fire-app-check-compat',\n  [authName]: 'fire-auth',\n  [authCompatName]: 'fire-auth-compat',\n  [databaseName]: 'fire-rtdb',\n  [databaseCompatName]: 'fire-rtdb-compat',\n  [functionsName]: 'fire-fn',\n  [functionsCompatName]: 'fire-fn-compat',\n  [installationsName]: 'fire-iid',\n  [installationsCompatName]: 'fire-iid-compat',\n  [messagingName]: 'fire-fcm',\n  [messagingCompatName]: 'fire-fcm-compat',\n  [performanceName]: 'fire-perf',\n  [performanceCompatName]: 'fire-perf-compat',\n  [remoteConfigName]: 'fire-rc',\n  [remoteConfigCompatName]: 'fire-rc-compat',\n  [storageName]: 'fire-gcs',\n  [storageCompatName]: 'fire-gcs-compat',\n  [firestoreName]: 'fire-fst',\n  [firestoreCompatName]: 'fire-fst-compat',\n  'fire-js': 'fire-js', // Platform identifier for JS SDK.\n  [packageName]: 'fire-js-all'\n} as const;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from './public-types';\nimport { Component, Provider, Name } from '@firebase/component';\nimport { logger } from './logger';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport { FirebaseAppImpl } from './firebaseApp';\n\n/**\n * @internal\n */\nexport const _apps = new Map<string, FirebaseApp>();\n\n/**\n * Registered components.\n *\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const _components = new Map<string, Component<any>>();\n\n/**\n * @param component - the component being added to this app's container\n *\n * @internal\n */\nexport function _addComponent<T extends Name>(\n  app: FirebaseApp,\n  component: Component<T>\n): void {\n  try {\n    (app as FirebaseAppImpl).container.addComponent(component);\n  } catch (e) {\n    logger.debug(\n      `Component ${component.name} failed to register with FirebaseApp ${app.name}`,\n      e\n    );\n  }\n}\n\n/**\n *\n * @internal\n */\nexport function _addOrOverwriteComponent(\n  app: FirebaseApp,\n  component: Component\n): void {\n  (app as FirebaseAppImpl).container.addOrOverwriteComponent(component);\n}\n\n/**\n *\n * @param component - the component to register\n * @returns whether or not the component is registered successfully\n *\n * @internal\n */\nexport function _registerComponent<T extends Name>(\n  component: Component<T>\n): boolean {\n  const componentName = component.name;\n  if (_components.has(componentName)) {\n    logger.debug(\n      `There were multiple attempts to register component ${componentName}.`\n    );\n\n    return false;\n  }\n\n  _components.set(componentName, component);\n\n  // add the component to existing app instances\n  for (const app of _apps.values()) {\n    _addComponent(app as FirebaseAppImpl, component);\n  }\n\n  return true;\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n *\n * @returns the provider for the service with the matching name\n *\n * @internal\n */\nexport function _getProvider<T extends Name>(\n  app: FirebaseApp,\n  name: T\n): Provider<T> {\n  const heartbeatController = (app as FirebaseAppImpl).container\n    .getProvider('heartbeat')\n    .getImmediate({ optional: true });\n  if (heartbeatController) {\n    void heartbeatController.triggerHeartbeat();\n  }\n  return (app as FirebaseAppImpl).container.getProvider(name);\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\n *\n * @internal\n */\nexport function _removeServiceInstance<T extends Name>(\n  app: FirebaseApp,\n  name: T,\n  instanceIdentifier: string = DEFAULT_ENTRY_NAME\n): void {\n  _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n\n/**\n * Test only\n *\n * @internal\n */\nexport function _clearComponents(): void {\n  _components.clear();\n}\n\n/**\n * Exported in order to be used in app-compat package\n */\nexport { DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppError {\n  NO_APP = 'no-app',\n  BAD_APP_NAME = 'bad-app-name',\n  DUPLICATE_APP = 'duplicate-app',\n  APP_DELETED = 'app-deleted',\n  NO_OPTIONS = 'no-options',\n  INVALID_APP_ARGUMENT = 'invalid-app-argument',\n  INVALID_LOG_ARGUMENT = 'invalid-log-argument',\n  IDB_OPEN = 'idb-open',\n  IDB_GET = 'idb-get',\n  IDB_WRITE = 'idb-set',\n  IDB_DELETE = 'idb-delete'\n}\n\nconst ERRORS: ErrorMap<AppError> = {\n  [AppError.NO_APP]:\n    \"No Firebase App '{$appName}' has been created - \" +\n    'call initializeApp() first',\n  [AppError.BAD_APP_NAME]: \"Illegal App name: '{$appName}\",\n  [AppError.DUPLICATE_APP]:\n    \"Firebase App named '{$appName}' already exists with different options or config\",\n  [AppError.APP_DELETED]: \"Firebase App named '{$appName}' already deleted\",\n  [AppError.NO_OPTIONS]:\n    'Need to provide options, when not being deployed to hosting via source.',\n  [AppError.INVALID_APP_ARGUMENT]:\n    'firebase.{$appName}() takes either no argument or a ' +\n    'Firebase App instance.',\n  [AppError.INVALID_LOG_ARGUMENT]:\n    'First argument to `onLog` must be null or a function.',\n  [AppError.IDB_OPEN]:\n    'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_GET]:\n    'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_WRITE]:\n    'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_DELETE]:\n    'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.'\n};\n\ninterface ErrorParams {\n  [AppError.NO_APP]: { appName: string };\n  [AppError.BAD_APP_NAME]: { appName: string };\n  [AppError.DUPLICATE_APP]: { appName: string };\n  [AppError.APP_DELETED]: { appName: string };\n  [AppError.INVALID_APP_ARGUMENT]: { appName: string };\n  [AppError.IDB_OPEN]: { originalErrorMessage?: string };\n  [AppError.IDB_GET]: { originalErrorMessage?: string };\n  [AppError.IDB_WRITE]: { originalErrorMessage?: string };\n  [AppError.IDB_DELETE]: { originalErrorMessage?: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppError, ErrorParams>(\n  'app',\n  'Firebase',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport {\n  ComponentContainer,\n  Component,\n  ComponentType\n} from '@firebase/component';\nimport { ERROR_FACTORY, AppError } from './errors';\n\nexport class FirebaseAppImpl implements FirebaseApp {\n  private readonly _options: FirebaseOptions;\n  private readonly _name: string;\n  /**\n   * Original config values passed in as a constructor parameter.\n   * It is only used to compare with another config object to support idempotent initializeApp().\n   *\n   * Updating automaticDataCollectionEnabled on the App instance will not change its value in _config.\n   */\n  private readonly _config: Required<FirebaseAppSettings>;\n  private _automaticDataCollectionEnabled: boolean;\n  private _isDeleted = false;\n  private readonly _container: ComponentContainer;\n\n  constructor(\n    options: FirebaseOptions,\n    config: Required<FirebaseAppSettings>,\n    container: ComponentContainer\n  ) {\n    this._options = { ...options };\n    this._config = { ...config };\n    this._name = config.name;\n    this._automaticDataCollectionEnabled =\n      config.automaticDataCollectionEnabled;\n    this._container = container;\n    this.container.addComponent(\n      new Component('app', () => this, ComponentType.PUBLIC)\n    );\n  }\n\n  get automaticDataCollectionEnabled(): boolean {\n    this.checkDestroyed();\n    return this._automaticDataCollectionEnabled;\n  }\n\n  set automaticDataCollectionEnabled(val: boolean) {\n    this.checkDestroyed();\n    this._automaticDataCollectionEnabled = val;\n  }\n\n  get name(): string {\n    this.checkDestroyed();\n    return this._name;\n  }\n\n  get options(): FirebaseOptions {\n    this.checkDestroyed();\n    return this._options;\n  }\n\n  get config(): Required<FirebaseAppSettings> {\n    this.checkDestroyed();\n    return this._config;\n  }\n\n  get container(): ComponentContainer {\n    return this._container;\n  }\n\n  get isDeleted(): boolean {\n    return this._isDeleted;\n  }\n\n  set isDeleted(val: boolean) {\n    this._isDeleted = val;\n  }\n\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n  private checkDestroyed(): void {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(AppError.APP_DELETED, { appName: this._name });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport { DEFAULT_ENTRY_NAME, PLATFORM_LOG_STRING } from './constants';\nimport { ERROR_FACTORY, AppError } from './errors';\nimport {\n  ComponentContainer,\n  Component,\n  Name,\n  ComponentType\n} from '@firebase/component';\nimport { version } from '../../firebase/package.json';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { _apps, _components, _registerComponent } from './internal';\nimport { logger } from './logger';\nimport {\n  LogLevelString,\n  setLogLevel as setLogLevelImpl,\n  LogCallback,\n  LogOptions,\n  setUserLogHandler\n} from '@firebase/logger';\nimport { deepEqual, getDefaultAppConfig } from '@firebase/util';\n\nexport { FirebaseError } from '@firebase/util';\n\n/**\n * The current SDK version.\n *\n * @public\n */\nexport const SDK_VERSION = version;\n\n/**\n * Creates and initializes a {@link @firebase/app#FirebaseApp} instance.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/web/setup#add_firebase_to_your_app\n *   | Add Firebase to your app} and\n * {@link\n *   https://firebase.google.com/docs/web/setup#multiple-projects\n *   | Initialize multiple projects} for detailed documentation.\n *\n * @example\n * ```javascript\n *\n * // Initialize default app\n * // Retrieve your own options values by adding a web app on\n * // https://console.firebase.google.com\n * initializeApp({\n *   apiKey: \"AIza....\",                             // Auth / General Use\n *   authDomain: \"YOUR_APP.firebaseapp.com\",         // Auth with popup/redirect\n *   databaseURL: \"https://YOUR_APP.firebaseio.com\", // Realtime Database\n *   storageBucket: \"YOUR_APP.appspot.com\",          // Storage\n *   messagingSenderId: \"123456789\"                  // Cloud Messaging\n * });\n * ```\n *\n * @example\n * ```javascript\n *\n * // Initialize another app\n * const otherApp = initializeApp({\n *   databaseURL: \"https://<OTHER_DATABASE_NAME>.firebaseio.com\",\n *   storageBucket: \"<OTHER_STORAGE_BUCKET>.appspot.com\"\n * }, \"otherApp\");\n * ```\n *\n * @param options - Options to configure the app's services.\n * @param name - Optional name of the app to initialize. If no name\n *   is provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The initialized app.\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  name?: string\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @param options - Options to configure the app's services.\n * @param config - FirebaseApp Configuration\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  config?: FirebaseAppSettings\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @public\n */\nexport function initializeApp(): FirebaseApp;\nexport function initializeApp(\n  _options?: FirebaseOptions,\n  rawConfig = {}\n): FirebaseApp {\n  let options = _options;\n\n  if (typeof rawConfig !== 'object') {\n    const name = rawConfig;\n    rawConfig = { name };\n  }\n\n  const config: Required<FirebaseAppSettings> = {\n    name: DEFAULT_ENTRY_NAME,\n    automaticDataCollectionEnabled: false,\n    ...rawConfig\n  };\n  const name = config.name;\n\n  if (typeof name !== 'string' || !name) {\n    throw ERROR_FACTORY.create(AppError.BAD_APP_NAME, {\n      appName: String(name)\n    });\n  }\n\n  options ||= getDefaultAppConfig();\n\n  if (!options) {\n    throw ERROR_FACTORY.create(AppError.NO_OPTIONS);\n  }\n\n  const existingApp = _apps.get(name) as FirebaseAppImpl;\n  if (existingApp) {\n    // return the existing app if options and config deep equal the ones in the existing app.\n    if (\n      deepEqual(options, existingApp.options) &&\n      deepEqual(config, existingApp.config)\n    ) {\n      return existingApp;\n    } else {\n      throw ERROR_FACTORY.create(AppError.DUPLICATE_APP, { appName: name });\n    }\n  }\n\n  const container = new ComponentContainer(name);\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseAppImpl(options, config, container);\n\n  _apps.set(name, newApp);\n\n  return newApp;\n}\n\n/**\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\n *\n * When called with no arguments, the default app is returned. When an app name\n * is provided, the app corresponding to that name is returned.\n *\n * An exception is thrown if the app being retrieved has not yet been\n * initialized.\n *\n * @example\n * ```javascript\n * // Return the default app\n * const app = getApp();\n * ```\n *\n * @example\n * ```javascript\n * // Return a named app\n * const otherApp = getApp(\"otherApp\");\n * ```\n *\n * @param name - Optional name of the app to return. If no name is\n *   provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The app corresponding to the provided app name.\n *   If no app name is provided, the default app is returned.\n *\n * @public\n */\nexport function getApp(name: string = DEFAULT_ENTRY_NAME): FirebaseApp {\n  const app = _apps.get(name);\n  if (!app && name === DEFAULT_ENTRY_NAME && getDefaultAppConfig()) {\n    return initializeApp();\n  }\n  if (!app) {\n    throw ERROR_FACTORY.create(AppError.NO_APP, { appName: name });\n  }\n\n  return app;\n}\n\n/**\n * A (read-only) array of all initialized apps.\n * @public\n */\nexport function getApps(): FirebaseApp[] {\n  return Array.from(_apps.values());\n}\n\n/**\n * Renders this app unusable and frees the resources of all associated\n * services.\n *\n * @example\n * ```javascript\n * deleteApp(app)\n *   .then(function() {\n *     console.log(\"App deleted successfully\");\n *   })\n *   .catch(function(error) {\n *     console.log(\"Error deleting app:\", error);\n *   });\n * ```\n *\n * @public\n */\nexport async function deleteApp(app: FirebaseApp): Promise<void> {\n  const name = app.name;\n  if (_apps.has(name)) {\n    _apps.delete(name);\n    await Promise.all(\n      (app as FirebaseAppImpl).container\n        .getProviders()\n        .map(provider => provider.delete())\n    );\n    (app as FirebaseAppImpl).isDeleted = true;\n  }\n}\n\n/**\n * Registers a library's name and version for platform logging purposes.\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\n * @param version - Current version of that library.\n * @param variant - Bundle variant, e.g., node, rn, etc.\n *\n * @public\n */\nexport function registerVersion(\n  libraryKeyOrName: string,\n  version: string,\n  variant?: string\n): void {\n  // TODO: We can use this check to whitelist strings when/if we set up\n  // a good whitelist system.\n  let library = PLATFORM_LOG_STRING[libraryKeyOrName] ?? libraryKeyOrName;\n  if (variant) {\n    library += `-${variant}`;\n  }\n  const libraryMismatch = library.match(/\\s|\\//);\n  const versionMismatch = version.match(/\\s|\\//);\n  if (libraryMismatch || versionMismatch) {\n    const warning = [\n      `Unable to register library \"${library}\" with version \"${version}\":`\n    ];\n    if (libraryMismatch) {\n      warning.push(\n        `library name \"${library}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    if (libraryMismatch && versionMismatch) {\n      warning.push('and');\n    }\n    if (versionMismatch) {\n      warning.push(\n        `version name \"${version}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    logger.warn(warning.join(' '));\n    return;\n  }\n  _registerComponent(\n    new Component(\n      `${library}-version` as Name,\n      () => ({ library, version }),\n      ComponentType.VERSION\n    )\n  );\n}\n\n/**\n * Sets log handler for all Firebase SDKs.\n * @param logCallback - An optional custom log handler that executes user code whenever\n * the Firebase SDK makes a logging call.\n *\n * @public\n */\nexport function onLog(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  if (logCallback !== null && typeof logCallback !== 'function') {\n    throw ERROR_FACTORY.create(AppError.INVALID_LOG_ARGUMENT);\n  }\n  setUserLogHandler(logCallback, options);\n}\n\n/**\n * Sets log level for all Firebase SDKs.\n *\n * All of the log types above the current log level are captured (i.e. if\n * you set the log level to `info`, errors are logged, but `debug` and\n * `verbose` logs are not).\n *\n * @public\n */\nexport function setLogLevel(logLevel: LogLevelString): void {\n  setLogLevelImpl(logLevel);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { DBSchema, openDB, IDBPDatabase } from 'idb';\nimport { AppError, ERROR_FACTORY } from './errors';\nimport { FirebaseApp } from './public-types';\nimport { HeartbeatsInIndexedDB } from './types';\nimport { logger } from './logger';\n\nconst DB_NAME = 'firebase-heartbeat-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-heartbeat-store';\n\ninterface AppDB extends DBSchema {\n  'firebase-heartbeat-store': {\n    key: string;\n    value: HeartbeatsInIndexedDB;\n  };\n}\n\nlet dbPromise: Promise<IDBPDatabase<AppDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<AppDB>> {\n  if (!dbPromise) {\n    dbPromise = openDB<AppDB>(DB_NAME, DB_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME);\n        }\n      }\n    }).catch(e => {\n      throw ERROR_FACTORY.create(AppError.IDB_OPEN, {\n        originalErrorMessage: e.message\n      });\n    });\n  }\n  return dbPromise;\n}\n\nexport async function readHeartbeatsFromIndexedDB(\n  app: FirebaseApp\n): Promise<HeartbeatsInIndexedDB | undefined> {\n  try {\n    const db = await getDbPromise();\n    const result = await db\n      .transaction(STORE_NAME)\n      .objectStore(STORE_NAME)\n      .get(computeKey(app));\n    return result;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_GET, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nexport async function writeHeartbeatsToIndexedDB(\n  app: FirebaseApp,\n  heartbeatObject: HeartbeatsInIndexedDB\n): Promise<void> {\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME, 'readwrite');\n    const objectStore = tx.objectStore(STORE_NAME);\n    await objectStore.put(heartbeatObject, computeKey(app));\n    await tx.done;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_WRITE, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.name}!${app.options.appId}`;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ComponentContainer } from '@firebase/component';\nimport {\n  base64urlEncodeWithoutPadding,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport {\n  readHeartbeatsFromIndexedDB,\n  writeHeartbeatsToIndexedDB\n} from './indexeddb';\nimport { FirebaseApp } from './public-types';\nimport {\n  HeartbeatsByUserAgent,\n  HeartbeatService,\n  HeartbeatsInIndexedDB,\n  HeartbeatStorage,\n  SingleDateHeartbeat\n} from './types';\n\nconst MAX_HEADER_BYTES = 1024;\n// 30 days\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\n\nexport class HeartbeatServiceImpl implements HeartbeatService {\n  /**\n   * The persistence layer for heartbeats\n   * Leave public for easier testing.\n   */\n  _storage: HeartbeatStorageImpl;\n\n  /**\n   * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\n   * the header string.\n   * Stores one record per date. This will be consolidated into the standard\n   * format of one record per user agent string before being sent as a header.\n   * Populated from indexedDB when the controller is instantiated and should\n   * be kept in sync with indexedDB.\n   * Leave public for easier testing.\n   */\n  _heartbeatsCache: HeartbeatsInIndexedDB | null = null;\n\n  /**\n   * the initialization promise for populating heartbeatCache.\n   * If getHeartbeatsHeader() is called before the promise resolves\n   * (hearbeatsCache == null), it should wait for this promise\n   * Leave public for easier testing.\n   */\n  _heartbeatsCachePromise: Promise<HeartbeatsInIndexedDB>;\n  constructor(private readonly container: ComponentContainer) {\n    const app = this.container.getProvider('app').getImmediate();\n    this._storage = new HeartbeatStorageImpl(app);\n    this._heartbeatsCachePromise = this._storage.read().then(result => {\n      this._heartbeatsCache = result;\n      return result;\n    });\n  }\n\n  /**\n   * Called to report a heartbeat. The function will generate\n   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\n   * to IndexedDB.\n   * Note that we only store one heartbeat per day. So if a heartbeat for today is\n   * already logged, subsequent calls to this function in the same day will be ignored.\n   */\n  async triggerHeartbeat(): Promise<void> {\n    const platformLogger = this.container\n      .getProvider('platform-logger')\n      .getImmediate();\n\n    // This is the \"Firebase user agent\" string from the platform logger\n    // service, not the browser user agent.\n    const agent = platformLogger.getPlatformInfoString();\n    const date = getUTCDateString();\n    if (this._heartbeatsCache === null) {\n      this._heartbeatsCache = await this._heartbeatsCachePromise;\n    }\n    // Do not store a heartbeat if one is already stored for this day\n    // or if a header has already been sent today.\n    if (\n      this._heartbeatsCache.lastSentHeartbeatDate === date ||\n      this._heartbeatsCache.heartbeats.some(\n        singleDateHeartbeat => singleDateHeartbeat.date === date\n      )\n    ) {\n      return;\n    } else {\n      // There is no entry for this date. Create one.\n      this._heartbeatsCache.heartbeats.push({ date, agent });\n    }\n    // Remove entries older than 30 days.\n    this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(\n      singleDateHeartbeat => {\n        const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\n        const now = Date.now();\n        return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\n      }\n    );\n    return this._storage.overwrite(this._heartbeatsCache);\n  }\n\n  /**\n   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\n   * It also clears all heartbeats from memory as well as in IndexedDB.\n   *\n   * NOTE: Consuming product SDKs should not send the header if this method\n   * returns an empty string.\n   */\n  async getHeartbeatsHeader(): Promise<string> {\n    if (this._heartbeatsCache === null) {\n      await this._heartbeatsCachePromise;\n    }\n    // If it's still null or the array is empty, there is no data to send.\n    if (\n      this._heartbeatsCache === null ||\n      this._heartbeatsCache.heartbeats.length === 0\n    ) {\n      return '';\n    }\n    const date = getUTCDateString();\n    // Extract as many heartbeats from the cache as will fit under the size limit.\n    const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(\n      this._heartbeatsCache.heartbeats\n    );\n    const headerString = base64urlEncodeWithoutPadding(\n      JSON.stringify({ version: 2, heartbeats: heartbeatsToSend })\n    );\n    // Store last sent date to prevent another being logged/sent for the same day.\n    this._heartbeatsCache.lastSentHeartbeatDate = date;\n    if (unsentEntries.length > 0) {\n      // Store any unsent entries if they exist.\n      this._heartbeatsCache.heartbeats = unsentEntries;\n      // This seems more likely than emptying the array (below) to lead to some odd state\n      // since the cache isn't empty and this will be called again on the next request,\n      // and is probably safest if we await it.\n      await this._storage.overwrite(this._heartbeatsCache);\n    } else {\n      this._heartbeatsCache.heartbeats = [];\n      // Do not wait for this, to reduce latency.\n      void this._storage.overwrite(this._heartbeatsCache);\n    }\n    return headerString;\n  }\n}\n\nfunction getUTCDateString(): string {\n  const today = new Date();\n  // Returns date format 'YYYY-MM-DD'\n  return today.toISOString().substring(0, 10);\n}\n\nexport function extractHeartbeatsForHeader(\n  heartbeatsCache: SingleDateHeartbeat[],\n  maxSize = MAX_HEADER_BYTES\n): {\n  heartbeatsToSend: HeartbeatsByUserAgent[];\n  unsentEntries: SingleDateHeartbeat[];\n} {\n  // Heartbeats grouped by user agent in the standard format to be sent in\n  // the header.\n  const heartbeatsToSend: HeartbeatsByUserAgent[] = [];\n  // Single date format heartbeats that are not sent.\n  let unsentEntries = heartbeatsCache.slice();\n  for (const singleDateHeartbeat of heartbeatsCache) {\n    // Look for an existing entry with the same user agent.\n    const heartbeatEntry = heartbeatsToSend.find(\n      hb => hb.agent === singleDateHeartbeat.agent\n    );\n    if (!heartbeatEntry) {\n      // If no entry for this user agent exists, create one.\n      heartbeatsToSend.push({\n        agent: singleDateHeartbeat.agent,\n        dates: [singleDateHeartbeat.date]\n      });\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        // If the header would exceed max size, remove the added heartbeat\n        // entry and stop adding to the header.\n        heartbeatsToSend.pop();\n        break;\n      }\n    } else {\n      heartbeatEntry.dates.push(singleDateHeartbeat.date);\n      // If the header would exceed max size, remove the added date\n      // and stop adding to the header.\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        heartbeatEntry.dates.pop();\n        break;\n      }\n    }\n    // Pop unsent entry from queue. (Skipped if adding the entry exceeded\n    // quota and the loop breaks early.)\n    unsentEntries = unsentEntries.slice(1);\n  }\n  return {\n    heartbeatsToSend,\n    unsentEntries\n  };\n}\n\nexport class HeartbeatStorageImpl implements HeartbeatStorage {\n  private _canUseIndexedDBPromise: Promise<boolean>;\n  constructor(public app: FirebaseApp) {\n    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\n  }\n  async runIndexedDBEnvironmentCheck(): Promise<boolean> {\n    if (!isIndexedDBAvailable()) {\n      return false;\n    } else {\n      return validateIndexedDBOpenable()\n        .then(() => true)\n        .catch(() => false);\n    }\n  }\n  /**\n   * Read all heartbeats.\n   */\n  async read(): Promise<HeartbeatsInIndexedDB> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return { heartbeats: [] };\n    } else {\n      const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\n      return idbHeartbeatObject || { heartbeats: [] };\n    }\n  }\n  // overwrite the storage with the provided heartbeats\n  async overwrite(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: heartbeatsObject.heartbeats\n      });\n    }\n  }\n  // add heartbeats\n  async add(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: [\n          ...existingHeartbeatsObject.heartbeats,\n          ...heartbeatsObject.heartbeats\n        ]\n      });\n    }\n  }\n}\n\n/**\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\n * in a platform logging header JSON object, stringified, and converted\n * to base 64.\n */\nexport function countBytes(heartbeatsCache: HeartbeatsByUserAgent[]): number {\n  // base64 has a restricted set of characters, all of which should be 1 byte.\n  return base64urlEncodeWithoutPadding(\n    // heartbeatsCache wrapper properties\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })\n  ).length;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ComponentType } from '@firebase/component';\nimport { PlatformLoggerServiceImpl } from './platformLoggerService';\nimport { name, version } from '../package.json';\nimport { _registerComponent } from './internal';\nimport { registerVersion } from './api';\nimport { HeartbeatServiceImpl } from './heartbeatService';\n\nexport function registerCoreComponents(variant?: string): void {\n  _registerComponent(\n    new Component(\n      'platform-logger',\n      container => new PlatformLoggerServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n  _registerComponent(\n    new Component(\n      'heartbeat',\n      container => new HeartbeatServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n\n  // Register `app` package.\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n  // Register platform SDK identifier (no version).\n  registerVersion('fire-js', '');\n}\n","/**\n * Firebase App\n *\n * @remarks This package coordinates the communication between the different Firebase components\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerCoreComponents } from './registerCoreComponents';\n\nexport * from './api';\nexport * from './internal';\nexport * from './public-types';\n\nregisterCoreComponents('__RUNTIME_ENV__');\n","export function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n    } else obj[key] = value;\n\n    return obj;\n}\nexport { _define_property as _ };\n","import { Deferred } from '@firebase/util';\n\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass Component {\r\n    /**\r\n     *\r\n     * @param name The public service name, e.g. app, auth, firestore, database\r\n     * @param instanceFactory Service factory responsible for creating the public interface\r\n     * @param type whether the service provided by the component is public or private\r\n     */\r\n    constructor(name, instanceFactory, type) {\r\n        this.name = name;\r\n        this.instanceFactory = instanceFactory;\r\n        this.type = type;\r\n        this.multipleInstances = false;\r\n        /**\r\n         * Properties to be added to the service namespace\r\n         */\r\n        this.serviceProps = {};\r\n        this.instantiationMode = \"LAZY\" /* InstantiationMode.LAZY */;\r\n        this.onInstanceCreated = null;\r\n    }\r\n    setInstantiationMode(mode) {\r\n        this.instantiationMode = mode;\r\n        return this;\r\n    }\r\n    setMultipleInstances(multipleInstances) {\r\n        this.multipleInstances = multipleInstances;\r\n        return this;\r\n    }\r\n    setServiceProps(props) {\r\n        this.serviceProps = props;\r\n        return this;\r\n    }\r\n    setInstanceCreatedCallback(callback) {\r\n        this.onInstanceCreated = callback;\r\n        return this;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */\r\nclass Provider {\r\n    constructor(name, container) {\r\n        this.name = name;\r\n        this.container = container;\r\n        this.component = null;\r\n        this.instances = new Map();\r\n        this.instancesDeferred = new Map();\r\n        this.instancesOptions = new Map();\r\n        this.onInitCallbacks = new Map();\r\n    }\r\n    /**\r\n     * @param identifier A provider can provide mulitple instances of a service\r\n     * if this.component.multipleInstances is true.\r\n     */\r\n    get(identifier) {\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        if (!this.instancesDeferred.has(normalizedIdentifier)) {\r\n            const deferred = new Deferred();\r\n            this.instancesDeferred.set(normalizedIdentifier, deferred);\r\n            if (this.isInitialized(normalizedIdentifier) ||\r\n                this.shouldAutoInitialize()) {\r\n                // initialize the service if it can be auto-initialized\r\n                try {\r\n                    const instance = this.getOrInitializeService({\r\n                        instanceIdentifier: normalizedIdentifier\r\n                    });\r\n                    if (instance) {\r\n                        deferred.resolve(instance);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // when the instance factory throws an exception during get(), it should not cause\r\n                    // a fatal error. We just return the unresolved promise in this case.\r\n                }\r\n            }\r\n        }\r\n        return this.instancesDeferred.get(normalizedIdentifier).promise;\r\n    }\r\n    getImmediate(options) {\r\n        var _a;\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);\r\n        const optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;\r\n        if (this.isInitialized(normalizedIdentifier) ||\r\n            this.shouldAutoInitialize()) {\r\n            try {\r\n                return this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n            }\r\n            catch (e) {\r\n                if (optional) {\r\n                    return null;\r\n                }\r\n                else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\r\n            if (optional) {\r\n                return null;\r\n            }\r\n            else {\r\n                throw Error(`Service ${this.name} is not available`);\r\n            }\r\n        }\r\n    }\r\n    getComponent() {\r\n        return this.component;\r\n    }\r\n    setComponent(component) {\r\n        if (component.name !== this.name) {\r\n            throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);\r\n        }\r\n        if (this.component) {\r\n            throw Error(`Component for ${this.name} has already been provided`);\r\n        }\r\n        this.component = component;\r\n        // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\r\n        if (!this.shouldAutoInitialize()) {\r\n            return;\r\n        }\r\n        // if the service is eager, initialize the default instance\r\n        if (isComponentEager(component)) {\r\n            try {\r\n                this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\r\n            }\r\n            catch (e) {\r\n                // when the instance factory for an eager Component throws an exception during the eager\r\n                // initialization, it should not cause a fatal error.\r\n                // TODO: Investigate if we need to make it configurable, because some component may want to cause\r\n                // a fatal error in this case?\r\n            }\r\n        }\r\n        // Create service instances for the pending promises and resolve them\r\n        // NOTE: if this.multipleInstances is false, only the default instance will be created\r\n        // and all promises with resolve with it regardless of the identifier.\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            try {\r\n                // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\r\n                const instance = this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n            catch (e) {\r\n                // when the instance factory throws an exception, it should not cause\r\n                // a fatal error. We just leave the promise unresolved.\r\n            }\r\n        }\r\n    }\r\n    clearInstance(identifier = DEFAULT_ENTRY_NAME) {\r\n        this.instancesDeferred.delete(identifier);\r\n        this.instancesOptions.delete(identifier);\r\n        this.instances.delete(identifier);\r\n    }\r\n    // app.delete() will call this method on every provider to delete the services\r\n    // TODO: should we mark the provider as deleted?\r\n    async delete() {\r\n        const services = Array.from(this.instances.values());\r\n        await Promise.all([\r\n            ...services\r\n                .filter(service => 'INTERNAL' in service) // legacy services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service.INTERNAL.delete()),\r\n            ...services\r\n                .filter(service => '_delete' in service) // modularized services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service._delete())\r\n        ]);\r\n    }\r\n    isComponentSet() {\r\n        return this.component != null;\r\n    }\r\n    isInitialized(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instances.has(identifier);\r\n    }\r\n    getOptions(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instancesOptions.get(identifier) || {};\r\n    }\r\n    initialize(opts = {}) {\r\n        const { options = {} } = opts;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);\r\n        if (this.isInitialized(normalizedIdentifier)) {\r\n            throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);\r\n        }\r\n        if (!this.isComponentSet()) {\r\n            throw Error(`Component ${this.name} has not been registered yet`);\r\n        }\r\n        const instance = this.getOrInitializeService({\r\n            instanceIdentifier: normalizedIdentifier,\r\n            options\r\n        });\r\n        // resolve any pending promise waiting for the service instance\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            if (normalizedIdentifier === normalizedDeferredIdentifier) {\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n        }\r\n        return instance;\r\n    }\r\n    /**\r\n     *\r\n     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\r\n     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\r\n     *\r\n     * @param identifier An optional instance identifier\r\n     * @returns a function to unregister the callback\r\n     */\r\n    onInit(callback, identifier) {\r\n        var _a;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();\r\n        existingCallbacks.add(callback);\r\n        this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\r\n        const existingInstance = this.instances.get(normalizedIdentifier);\r\n        if (existingInstance) {\r\n            callback(existingInstance, normalizedIdentifier);\r\n        }\r\n        return () => {\r\n            existingCallbacks.delete(callback);\r\n        };\r\n    }\r\n    /**\r\n     * Invoke onInit callbacks synchronously\r\n     * @param instance the service instance`\r\n     */\r\n    invokeOnInitCallbacks(instance, identifier) {\r\n        const callbacks = this.onInitCallbacks.get(identifier);\r\n        if (!callbacks) {\r\n            return;\r\n        }\r\n        for (const callback of callbacks) {\r\n            try {\r\n                callback(instance, identifier);\r\n            }\r\n            catch (_a) {\r\n                // ignore errors in the onInit callback\r\n            }\r\n        }\r\n    }\r\n    getOrInitializeService({ instanceIdentifier, options = {} }) {\r\n        let instance = this.instances.get(instanceIdentifier);\r\n        if (!instance && this.component) {\r\n            instance = this.component.instanceFactory(this.container, {\r\n                instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\r\n                options\r\n            });\r\n            this.instances.set(instanceIdentifier, instance);\r\n            this.instancesOptions.set(instanceIdentifier, options);\r\n            /**\r\n             * Invoke onInit listeners.\r\n             * Note this.component.onInstanceCreated is different, which is used by the component creator,\r\n             * while onInit listeners are registered by consumers of the provider.\r\n             */\r\n            this.invokeOnInitCallbacks(instance, instanceIdentifier);\r\n            /**\r\n             * Order is important\r\n             * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\r\n             * makes `isInitialized()` return true.\r\n             */\r\n            if (this.component.onInstanceCreated) {\r\n                try {\r\n                    this.component.onInstanceCreated(this.container, instanceIdentifier, instance);\r\n                }\r\n                catch (_a) {\r\n                    // ignore errors in the onInstanceCreatedCallback\r\n                }\r\n            }\r\n        }\r\n        return instance || null;\r\n    }\r\n    normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME) {\r\n        if (this.component) {\r\n            return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\r\n        }\r\n        else {\r\n            return identifier; // assume multiple instances are supported before the component is provided.\r\n        }\r\n    }\r\n    shouldAutoInitialize() {\r\n        return (!!this.component &&\r\n            this.component.instantiationMode !== \"EXPLICIT\" /* InstantiationMode.EXPLICIT */);\r\n    }\r\n}\r\n// undefined should be passed to the service factory for the default instance\r\nfunction normalizeIdentifierForFactory(identifier) {\r\n    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\r\n}\r\nfunction isComponentEager(component) {\r\n    return component.instantiationMode === \"EAGER\" /* InstantiationMode.EAGER */;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass ComponentContainer {\r\n    constructor(name) {\r\n        this.name = name;\r\n        this.providers = new Map();\r\n    }\r\n    /**\r\n     *\r\n     * @param component Component being added\r\n     * @param overwrite When a component with the same name has already been registered,\r\n     * if overwrite is true: overwrite the existing component with the new component and create a new\r\n     * provider with the new component. It can be useful in tests where you want to use different mocks\r\n     * for different tests.\r\n     * if overwrite is false: throw an exception\r\n     */\r\n    addComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            throw new Error(`Component ${component.name} has already been registered with ${this.name}`);\r\n        }\r\n        provider.setComponent(component);\r\n    }\r\n    addOrOverwriteComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            // delete the existing provider from the container, so we can register the new component\r\n            this.providers.delete(component.name);\r\n        }\r\n        this.addComponent(component);\r\n    }\r\n    /**\r\n     * getProvider provides a type safe interface where it can only be called with a field name\r\n     * present in NameServiceMapping interface.\r\n     *\r\n     * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n     * themselves.\r\n     */\r\n    getProvider(name) {\r\n        if (this.providers.has(name)) {\r\n            return this.providers.get(name);\r\n        }\r\n        // create a Provider for a service that hasn't registered with Firebase\r\n        const provider = new Provider(name, this);\r\n        this.providers.set(name, provider);\r\n        return provider;\r\n    }\r\n    getProviders() {\r\n        return Array.from(this.providers.values());\r\n    }\r\n}\n\nexport { Component, ComponentContainer, Provider };\n//# sourceMappingURL=index.esm2017.js.map\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name,\n  onInstanceCreatedCallback\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> {\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = {};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  onInstanceCreated: onInstanceCreatedCallback<T> | null = null;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) {}\n\n  setInstantiationMode(mode: InstantiationMode): this {\n    this.instantiationMode = mode;\n    return this;\n  }\n\n  setMultipleInstances(multipleInstances: boolean): this {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n\n  setServiceProps(props: Dictionary): this {\n    this.serviceProps = props;\n    return this;\n  }\n\n  setInstanceCreatedCallback(callback: onInstanceCreatedCallback<T>): this {\n    this.onInstanceCreated = callback;\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\nimport { ComponentContainer } from './component_container';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport {\n  InitializeOptions,\n  InstantiationMode,\n  Name,\n  NameServiceMapping,\n  OnInitCallBack\n} from './types';\nimport { Component } from './component';\n\n/**\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\n * NameServiceMapping[T] is an alias for the type of the instance\n */\nexport class Provider<T extends Name> {\n  private component: Component<T> | null = null;\n  private readonly instances: Map<string, NameServiceMapping[T]> = new Map();\n  private readonly instancesDeferred: Map<\n    string,\n    Deferred<NameServiceMapping[T]>\n  > = new Map();\n  private readonly instancesOptions: Map<string, Record<string, unknown>> =\n    new Map();\n  private onInitCallbacks: Map<string, Set<OnInitCallBack<T>>> = new Map();\n\n  constructor(\n    private readonly name: T,\n    private readonly container: ComponentContainer\n  ) {}\n\n  /**\n   * @param identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   */\n  get(identifier?: string): Promise<NameServiceMapping[T]> {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      const deferred = new Deferred<NameServiceMapping[T]>();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n\n      if (\n        this.isInitialized(normalizedIdentifier) ||\n        this.shouldAutoInitialize()\n      ) {\n        // initialize the service if it can be auto-initialized\n        try {\n          const instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          if (instance) {\n            deferred.resolve(instance);\n          }\n        } catch (e) {\n          // when the instance factory throws an exception during get(), it should not cause\n          // a fatal error. We just return the unresolved promise in this case.\n        }\n      }\n    }\n\n    return this.instancesDeferred.get(normalizedIdentifier)!.promise;\n  }\n\n  /**\n   *\n   * @param options.identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   * @param options.optional If optional is false or not provided, the method throws an error when\n   * the service is not immediately available.\n   * If optional is true, the method returns null if the service is not immediately available.\n   */\n  getImmediate(options: {\n    identifier?: string;\n    optional: true;\n  }): NameServiceMapping[T] | null;\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: false;\n  }): NameServiceMapping[T];\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: boolean;\n  }): NameServiceMapping[T] | null {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      options?.identifier\n    );\n    const optional = options?.optional ?? false;\n\n    if (\n      this.isInitialized(normalizedIdentifier) ||\n      this.shouldAutoInitialize()\n    ) {\n      try {\n        return this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n      } catch (e) {\n        if (optional) {\n          return null;\n        } else {\n          throw e;\n        }\n      }\n    } else {\n      // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\n      if (optional) {\n        return null;\n      } else {\n        throw Error(`Service ${this.name} is not available`);\n      }\n    }\n  }\n\n  getComponent(): Component<T> | null {\n    return this.component;\n  }\n\n  setComponent(component: Component<T>): void {\n    if (component.name !== this.name) {\n      throw Error(\n        `Mismatching Component ${component.name} for Provider ${this.name}.`\n      );\n    }\n\n    if (this.component) {\n      throw Error(`Component for ${this.name} has already been provided`);\n    }\n\n    this.component = component;\n\n    // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n    if (!this.shouldAutoInitialize()) {\n      return;\n    }\n\n    // if the service is eager, initialize the default instance\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\n      } catch (e) {\n        // when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n\n    // Create service instances for the pending promises and resolve them\n    // NOTE: if this.multipleInstances is false, only the default instance will be created\n    // and all promises with resolve with it regardless of the identifier.\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n\n      try {\n        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n        const instance = this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        })!;\n        instanceDeferred.resolve(instance);\n      } catch (e) {\n        // when the instance factory throws an exception, it should not cause\n        // a fatal error. We just leave the promise unresolved.\n      }\n    }\n  }\n\n  clearInstance(identifier: string = DEFAULT_ENTRY_NAME): void {\n    this.instancesDeferred.delete(identifier);\n    this.instancesOptions.delete(identifier);\n    this.instances.delete(identifier);\n  }\n\n  // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n  async delete(): Promise<void> {\n    const services = Array.from(this.instances.values());\n\n    await Promise.all([\n      ...services\n        .filter(service => 'INTERNAL' in service) // legacy services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any).INTERNAL!.delete()),\n      ...services\n        .filter(service => '_delete' in service) // modularized services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any)._delete())\n    ]);\n  }\n\n  isComponentSet(): boolean {\n    return this.component != null;\n  }\n\n  isInitialized(identifier: string = DEFAULT_ENTRY_NAME): boolean {\n    return this.instances.has(identifier);\n  }\n\n  getOptions(identifier: string = DEFAULT_ENTRY_NAME): Record<string, unknown> {\n    return this.instancesOptions.get(identifier) || {};\n  }\n\n  initialize(opts: InitializeOptions = {}): NameServiceMapping[T] {\n    const { options = {} } = opts;\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      opts.instanceIdentifier\n    );\n    if (this.isInitialized(normalizedIdentifier)) {\n      throw Error(\n        `${this.name}(${normalizedIdentifier}) has already been initialized`\n      );\n    }\n\n    if (!this.isComponentSet()) {\n      throw Error(`Component ${this.name} has not been registered yet`);\n    }\n\n    const instance = this.getOrInitializeService({\n      instanceIdentifier: normalizedIdentifier,\n      options\n    })!;\n\n    // resolve any pending promise waiting for the service instance\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedDeferredIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n      if (normalizedIdentifier === normalizedDeferredIdentifier) {\n        instanceDeferred.resolve(instance);\n      }\n    }\n\n    return instance;\n  }\n\n  /**\n   *\n   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\n   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\n   *\n   * @param identifier An optional instance identifier\n   * @returns a function to unregister the callback\n   */\n  onInit(callback: OnInitCallBack<T>, identifier?: string): () => void {\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    const existingCallbacks =\n      this.onInitCallbacks.get(normalizedIdentifier) ??\n      new Set<OnInitCallBack<T>>();\n    existingCallbacks.add(callback);\n    this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n\n    const existingInstance = this.instances.get(normalizedIdentifier);\n    if (existingInstance) {\n      callback(existingInstance, normalizedIdentifier);\n    }\n\n    return () => {\n      existingCallbacks.delete(callback);\n    };\n  }\n\n  /**\n   * Invoke onInit callbacks synchronously\n   * @param instance the service instance`\n   */\n  private invokeOnInitCallbacks(\n    instance: NameServiceMapping[T],\n    identifier: string\n  ): void {\n    const callbacks = this.onInitCallbacks.get(identifier);\n    if (!callbacks) {\n      return;\n    }\n    for (const callback of callbacks) {\n      try {\n        callback(instance, identifier);\n      } catch {\n        // ignore errors in the onInit callback\n      }\n    }\n  }\n\n  private getOrInitializeService({\n    instanceIdentifier,\n    options = {}\n  }: {\n    instanceIdentifier: string;\n    options?: Record<string, unknown>;\n  }): NameServiceMapping[T] | null {\n    let instance = this.instances.get(instanceIdentifier);\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, {\n        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n        options\n      });\n      this.instances.set(instanceIdentifier, instance);\n      this.instancesOptions.set(instanceIdentifier, options);\n\n      /**\n       * Invoke onInit listeners.\n       * Note this.component.onInstanceCreated is different, which is used by the component creator,\n       * while onInit listeners are registered by consumers of the provider.\n       */\n      this.invokeOnInitCallbacks(instance, instanceIdentifier);\n\n      /**\n       * Order is important\n       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\n       * makes `isInitialized()` return true.\n       */\n      if (this.component.onInstanceCreated) {\n        try {\n          this.component.onInstanceCreated(\n            this.container,\n            instanceIdentifier,\n            instance\n          );\n        } catch {\n          // ignore errors in the onInstanceCreatedCallback\n        }\n      }\n    }\n\n    return instance || null;\n  }\n\n  private normalizeInstanceIdentifier(\n    identifier: string = DEFAULT_ENTRY_NAME\n  ): string {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  }\n\n  private shouldAutoInitialize(): boolean {\n    return (\n      !!this.component &&\n      this.component.instantiationMode !== InstantiationMode.EXPLICIT\n    );\n  }\n}\n\n// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier: string): string | undefined {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager<T extends Name>(component: Component<T>): boolean {\n  return component.instantiationMode === InstantiationMode.EAGER;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Provider } from './provider';\nimport { Component } from './component';\nimport { Name } from './types';\n\n/**\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\n */\nexport class ComponentContainer {\n  private readonly providers = new Map<string, Provider<Name>>();\n\n  constructor(private readonly name: string) {}\n\n  /**\n   *\n   * @param component Component being added\n   * @param overwrite When a component with the same name has already been registered,\n   * if overwrite is true: overwrite the existing component with the new component and create a new\n   * provider with the new component. It can be useful in tests where you want to use different mocks\n   * for different tests.\n   * if overwrite is false: throw an exception\n   */\n  addComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      throw new Error(\n        `Component ${component.name} has already been registered with ${this.name}`\n      );\n    }\n\n    provider.setComponent(component);\n  }\n\n  addOrOverwriteComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n\n    this.addComponent(component);\n  }\n\n  /**\n   * getProvider provides a type safe interface where it can only be called with a field name\n   * present in NameServiceMapping interface.\n   *\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\n   * themselves.\n   */\n  getProvider<T extends Name>(name: T): Provider<T> {\n    if (this.providers.has(name)) {\n      return this.providers.get(name) as unknown as Provider<T>;\n    }\n\n    // create a Provider for a service that hasn't registered with Firebase\n    const provider = new Provider<T>(name, this);\n    this.providers.set(name, provider as unknown as Provider<Name>);\n\n    return provider as Provider<T>;\n  }\n\n  getProviders(): Array<Provider<Name>> {\n    return Array.from(this.providers.values());\n  }\n}\n","/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\r\n */\r\nconst CONSTANTS = {\r\n    /**\r\n     * @define {boolean} Whether this is the client Node.js SDK.\r\n     */\r\n    NODE_CLIENT: false,\r\n    /**\r\n     * @define {boolean} Whether this is the Admin Node.js SDK.\r\n     */\r\n    NODE_ADMIN: false,\r\n    /**\r\n     * Firebase SDK Version\r\n     */\r\n    SDK_VERSION: '${JSCORE_VERSION}'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws an error if the provided assertion is falsy\r\n */\r\nconst assert = function (assertion, message) {\r\n    if (!assertion) {\r\n        throw assertionError(message);\r\n    }\r\n};\r\n/**\r\n * Returns an Error object suitable for throwing.\r\n */\r\nconst assertionError = function (message) {\r\n    return new Error('Firebase Database (' +\r\n        CONSTANTS.SDK_VERSION +\r\n        ') INTERNAL ASSERT FAILED: ' +\r\n        message);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst stringToByteArray$1 = function (str) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if ((c & 0xfc00) === 0xd800 &&\r\n            i + 1 < str.length &&\r\n            (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\r\n            // Surrogate Pair\r\n            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Turns an array of numbers into the string given by the concatenation of the\r\n * characters to which the numbers correspond.\r\n * @param bytes Array of numbers representing characters.\r\n * @return Stringification of the array.\r\n */\r\nconst byteArrayToString = function (bytes) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let pos = 0, c = 0;\r\n    while (pos < bytes.length) {\r\n        const c1 = bytes[pos++];\r\n        if (c1 < 128) {\r\n            out[c++] = String.fromCharCode(c1);\r\n        }\r\n        else if (c1 > 191 && c1 < 224) {\r\n            const c2 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\r\n        }\r\n        else if (c1 > 239 && c1 < 365) {\r\n            // Surrogate Pair\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            const c4 = bytes[pos++];\r\n            const u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\r\n                0x10000;\r\n            out[c++] = String.fromCharCode(0xd800 + (u >> 10));\r\n            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\r\n        }\r\n        else {\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n        }\r\n    }\r\n    return out.join('');\r\n};\r\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\r\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\r\n// Static lookup maps, lazily populated by init_()\r\nconst base64 = {\r\n    /**\r\n     * Maps bytes to characters.\r\n     */\r\n    byteToCharMap_: null,\r\n    /**\r\n     * Maps characters to bytes.\r\n     */\r\n    charToByteMap_: null,\r\n    /**\r\n     * Maps bytes to websafe characters.\r\n     * @private\r\n     */\r\n    byteToCharMapWebSafe_: null,\r\n    /**\r\n     * Maps websafe characters to bytes.\r\n     * @private\r\n     */\r\n    charToByteMapWebSafe_: null,\r\n    /**\r\n     * Our default alphabet, shared between\r\n     * ENCODED_VALS and ENCODED_VALS_WEBSAFE\r\n     */\r\n    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\r\n    /**\r\n     * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\r\n     */\r\n    get ENCODED_VALS() {\r\n        return this.ENCODED_VALS_BASE + '+/=';\r\n    },\r\n    /**\r\n     * Our websafe alphabet.\r\n     */\r\n    get ENCODED_VALS_WEBSAFE() {\r\n        return this.ENCODED_VALS_BASE + '-_.';\r\n    },\r\n    /**\r\n     * Whether this browser supports the atob and btoa functions. This extension\r\n     * started at Mozilla but is now implemented by many browsers. We use the\r\n     * ASSUME_* variables to avoid pulling in the full useragent detection library\r\n     * but still allowing the standard per-browser compilations.\r\n     *\r\n     */\r\n    HAS_NATIVE_SUPPORT: typeof atob === 'function',\r\n    /**\r\n     * Base64-encode an array of bytes.\r\n     *\r\n     * @param input An array of bytes (numbers with\r\n     *     value in [0, 255]) to encode.\r\n     * @param webSafe Boolean indicating we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeByteArray(input, webSafe) {\r\n        if (!Array.isArray(input)) {\r\n            throw Error('encodeByteArray takes an array as a parameter');\r\n        }\r\n        this.init_();\r\n        const byteToCharMap = webSafe\r\n            ? this.byteToCharMapWebSafe_\r\n            : this.byteToCharMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length; i += 3) {\r\n            const byte1 = input[i];\r\n            const haveByte2 = i + 1 < input.length;\r\n            const byte2 = haveByte2 ? input[i + 1] : 0;\r\n            const haveByte3 = i + 2 < input.length;\r\n            const byte3 = haveByte3 ? input[i + 2] : 0;\r\n            const outByte1 = byte1 >> 2;\r\n            const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\r\n            let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\r\n            let outByte4 = byte3 & 0x3f;\r\n            if (!haveByte3) {\r\n                outByte4 = 64;\r\n                if (!haveByte2) {\r\n                    outByte3 = 64;\r\n                }\r\n            }\r\n            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);\r\n        }\r\n        return output.join('');\r\n    },\r\n    /**\r\n     * Base64-encode a string.\r\n     *\r\n     * @param input A string to encode.\r\n     * @param webSafe If true, we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return btoa(input);\r\n        }\r\n        return this.encodeByteArray(stringToByteArray$1(input), webSafe);\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * @param input to decode.\r\n     * @param webSafe True if we should use the\r\n     *     alternative alphabet.\r\n     * @return string representing the decoded value.\r\n     */\r\n    decodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return atob(input);\r\n        }\r\n        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * In base-64 decoding, groups of four characters are converted into three\r\n     * bytes.  If the encoder did not apply padding, the input length may not\r\n     * be a multiple of 4.\r\n     *\r\n     * In this case, the last group will have fewer than 4 characters, and\r\n     * padding will be inferred.  If the group has one or two characters, it decodes\r\n     * to one byte.  If the group has three characters, it decodes to two bytes.\r\n     *\r\n     * @param input Input to decode.\r\n     * @param webSafe True if we should use the web-safe alphabet.\r\n     * @return bytes representing the decoded value.\r\n     */\r\n    decodeStringToByteArray(input, webSafe) {\r\n        this.init_();\r\n        const charToByteMap = webSafe\r\n            ? this.charToByteMapWebSafe_\r\n            : this.charToByteMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length;) {\r\n            const byte1 = charToByteMap[input.charAt(i++)];\r\n            const haveByte2 = i < input.length;\r\n            const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\r\n            ++i;\r\n            const haveByte3 = i < input.length;\r\n            const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            const haveByte4 = i < input.length;\r\n            const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\r\n                throw new DecodeBase64StringError();\r\n            }\r\n            const outByte1 = (byte1 << 2) | (byte2 >> 4);\r\n            output.push(outByte1);\r\n            if (byte3 !== 64) {\r\n                const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\r\n                output.push(outByte2);\r\n                if (byte4 !== 64) {\r\n                    const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\r\n                    output.push(outByte3);\r\n                }\r\n            }\r\n        }\r\n        return output;\r\n    },\r\n    /**\r\n     * Lazy static initialization function. Called before\r\n     * accessing any of the static map variables.\r\n     * @private\r\n     */\r\n    init_() {\r\n        if (!this.byteToCharMap_) {\r\n            this.byteToCharMap_ = {};\r\n            this.charToByteMap_ = {};\r\n            this.byteToCharMapWebSafe_ = {};\r\n            this.charToByteMapWebSafe_ = {};\r\n            // We want quick mappings back and forth, so we precompute two maps.\r\n            for (let i = 0; i < this.ENCODED_VALS.length; i++) {\r\n                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\r\n                this.charToByteMap_[this.byteToCharMap_[i]] = i;\r\n                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\r\n                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\r\n                // Be forgiving when decoding and correctly decode both encodings.\r\n                if (i >= this.ENCODED_VALS_BASE.length) {\r\n                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\r\n                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n/**\r\n * An error encountered while decoding base64 string.\r\n */\r\nclass DecodeBase64StringError extends Error {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = 'DecodeBase64StringError';\r\n    }\r\n}\r\n/**\r\n * URL-safe base64 encoding\r\n */\r\nconst base64Encode = function (str) {\r\n    const utf8Bytes = stringToByteArray$1(str);\r\n    return base64.encodeByteArray(utf8Bytes, true);\r\n};\r\n/**\r\n * URL-safe base64 encoding (without \".\" padding in the end).\r\n * e.g. Used in JSON Web Token (JWT) parts.\r\n */\r\nconst base64urlEncodeWithoutPadding = function (str) {\r\n    // Use base64url encoding and remove padding in the end (dot characters).\r\n    return base64Encode(str).replace(/\\./g, '');\r\n};\r\n/**\r\n * URL-safe base64 decoding\r\n *\r\n * NOTE: DO NOT use the global atob() function - it does NOT support the\r\n * base64Url variant encoding.\r\n *\r\n * @param str To be decoded\r\n * @return Decoded result, if possible\r\n */\r\nconst base64Decode = function (str) {\r\n    try {\r\n        return base64.decodeString(str, true);\r\n    }\r\n    catch (e) {\r\n        console.error('base64Decode failed: ', e);\r\n    }\r\n    return null;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Do a deep-copy of basic JavaScript Objects or Arrays.\r\n */\r\nfunction deepCopy(value) {\r\n    return deepExtend(undefined, value);\r\n}\r\n/**\r\n * Copy properties from source to target (recursively allows extension\r\n * of Objects and Arrays).  Scalar values in the target are over-written.\r\n * If target is undefined, an object of the appropriate type will be created\r\n * (and returned).\r\n *\r\n * We recursively copy all child properties of plain Objects in the source- so\r\n * that namespace- like dictionaries are merged.\r\n *\r\n * Note that the target can be a function, in which case the properties in\r\n * the source Object are copied onto it as static properties of the Function.\r\n *\r\n * Note: we don't merge __proto__ to prevent prototype pollution\r\n */\r\nfunction deepExtend(target, source) {\r\n    if (!(source instanceof Object)) {\r\n        return source;\r\n    }\r\n    switch (source.constructor) {\r\n        case Date:\r\n            // Treat Dates like scalars; if the target date object had any child\r\n            // properties - they will be lost!\r\n            const dateValue = source;\r\n            return new Date(dateValue.getTime());\r\n        case Object:\r\n            if (target === undefined) {\r\n                target = {};\r\n            }\r\n            break;\r\n        case Array:\r\n            // Always copy the array source and overwrite the target.\r\n            target = [];\r\n            break;\r\n        default:\r\n            // Not a plain Object - treat it as a scalar.\r\n            return source;\r\n    }\r\n    for (const prop in source) {\r\n        // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\r\n        if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {\r\n            continue;\r\n        }\r\n        target[prop] = deepExtend(target[prop], source[prop]);\r\n    }\r\n    return target;\r\n}\r\nfunction isValidKey(key) {\r\n    return key !== '__proto__';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Polyfill for `globalThis` object.\r\n * @returns the `globalThis` object for the given environment.\r\n * @public\r\n */\r\nfunction getGlobal() {\r\n    if (typeof self !== 'undefined') {\r\n        return self;\r\n    }\r\n    if (typeof window !== 'undefined') {\r\n        return window;\r\n    }\r\n    if (typeof global !== 'undefined') {\r\n        return global;\r\n    }\r\n    throw new Error('Unable to locate global object.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst getDefaultsFromGlobal = () => getGlobal().__FIREBASE_DEFAULTS__;\r\n/**\r\n * Attempt to read defaults from a JSON string provided to\r\n * process(.)env(.)__FIREBASE_DEFAULTS__ or a JSON file whose path is in\r\n * process(.)env(.)__FIREBASE_DEFAULTS_PATH__\r\n * The dots are in parens because certain compilers (Vite?) cannot\r\n * handle seeing that variable in comments.\r\n * See https://github.com/firebase/firebase-js-sdk/issues/6838\r\n */\r\nconst getDefaultsFromEnvVariable = () => {\r\n    if (typeof process === 'undefined' || typeof process.env === 'undefined') {\r\n        return;\r\n    }\r\n    const defaultsJsonString = process.env.__FIREBASE_DEFAULTS__;\r\n    if (defaultsJsonString) {\r\n        return JSON.parse(defaultsJsonString);\r\n    }\r\n};\r\nconst getDefaultsFromCookie = () => {\r\n    if (typeof document === 'undefined') {\r\n        return;\r\n    }\r\n    let match;\r\n    try {\r\n        match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);\r\n    }\r\n    catch (e) {\r\n        // Some environments such as Angular Universal SSR have a\r\n        // `document` object but error on accessing `document.cookie`.\r\n        return;\r\n    }\r\n    const decoded = match && base64Decode(match[1]);\r\n    return decoded && JSON.parse(decoded);\r\n};\r\n/**\r\n * Get the __FIREBASE_DEFAULTS__ object. It checks in order:\r\n * (1) if such an object exists as a property of `globalThis`\r\n * (2) if such an object was provided on a shell environment variable\r\n * (3) if such an object exists in a cookie\r\n * @public\r\n */\r\nconst getDefaults = () => {\r\n    try {\r\n        return (getDefaultsFromGlobal() ||\r\n            getDefaultsFromEnvVariable() ||\r\n            getDefaultsFromCookie());\r\n    }\r\n    catch (e) {\r\n        /**\r\n         * Catch-all for being unable to get __FIREBASE_DEFAULTS__ due\r\n         * to any environment case we have not accounted for. Log to\r\n         * info instead of swallowing so we can find these unknown cases\r\n         * and add paths for them if needed.\r\n         */\r\n        console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`);\r\n        return;\r\n    }\r\n};\r\n/**\r\n * Returns emulator host stored in the __FIREBASE_DEFAULTS__ object\r\n * for the given product.\r\n * @returns a URL host formatted like `127.0.0.1:9999` or `[::1]:4000` if available\r\n * @public\r\n */\r\nconst getDefaultEmulatorHost = (productName) => { var _a, _b; return (_b = (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.emulatorHosts) === null || _b === void 0 ? void 0 : _b[productName]; };\r\n/**\r\n * Returns emulator hostname and port stored in the __FIREBASE_DEFAULTS__ object\r\n * for the given product.\r\n * @returns a pair of hostname and port like `[\"::1\", 4000]` if available\r\n * @public\r\n */\r\nconst getDefaultEmulatorHostnameAndPort = (productName) => {\r\n    const host = getDefaultEmulatorHost(productName);\r\n    if (!host) {\r\n        return undefined;\r\n    }\r\n    const separatorIndex = host.lastIndexOf(':'); // Finding the last since IPv6 addr also has colons.\r\n    if (separatorIndex <= 0 || separatorIndex + 1 === host.length) {\r\n        throw new Error(`Invalid host ${host} with no separate hostname and port!`);\r\n    }\r\n    // eslint-disable-next-line no-restricted-globals\r\n    const port = parseInt(host.substring(separatorIndex + 1), 10);\r\n    if (host[0] === '[') {\r\n        // Bracket-quoted `[ipv6addr]:port` => return \"ipv6addr\" (without brackets).\r\n        return [host.substring(1, separatorIndex - 1), port];\r\n    }\r\n    else {\r\n        return [host.substring(0, separatorIndex), port];\r\n    }\r\n};\r\n/**\r\n * Returns Firebase app config stored in the __FIREBASE_DEFAULTS__ object.\r\n * @public\r\n */\r\nconst getDefaultAppConfig = () => { var _a; return (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.config; };\r\n/**\r\n * Returns an experimental setting on the __FIREBASE_DEFAULTS__ object (properties\r\n * prefixed by \"_\")\r\n * @public\r\n */\r\nconst getExperimentalSetting = (name) => { var _a; return (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a[`_${name}`]; };\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Deferred {\r\n    constructor() {\r\n        this.reject = () => { };\r\n        this.resolve = () => { };\r\n        this.promise = new Promise((resolve, reject) => {\r\n            this.resolve = resolve;\r\n            this.reject = reject;\r\n        });\r\n    }\r\n    /**\r\n     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\r\n     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\r\n     * and returns a node-style callback which will resolve or reject the Deferred's promise.\r\n     */\r\n    wrapCallback(callback) {\r\n        return (error, value) => {\r\n            if (error) {\r\n                this.reject(error);\r\n            }\r\n            else {\r\n                this.resolve(value);\r\n            }\r\n            if (typeof callback === 'function') {\r\n                // Attaching noop handler just in case developer wasn't expecting\r\n                // promises\r\n                this.promise.catch(() => { });\r\n                // Some of our callbacks don't expect a value and our own tests\r\n                // assert that the parameter length is 1\r\n                if (callback.length === 1) {\r\n                    callback(error);\r\n                }\r\n                else {\r\n                    callback(error, value);\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction createMockUserToken(token, projectId) {\r\n    if (token.uid) {\r\n        throw new Error('The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.');\r\n    }\r\n    // Unsecured JWTs use \"none\" as the algorithm.\r\n    const header = {\r\n        alg: 'none',\r\n        type: 'JWT'\r\n    };\r\n    const project = projectId || 'demo-project';\r\n    const iat = token.iat || 0;\r\n    const sub = token.sub || token.user_id;\r\n    if (!sub) {\r\n        throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\r\n    }\r\n    const payload = Object.assign({ \r\n        // Set all required fields to decent defaults\r\n        iss: `https://securetoken.google.com/${project}`, aud: project, iat, exp: iat + 3600, auth_time: iat, sub, user_id: sub, firebase: {\r\n            sign_in_provider: 'custom',\r\n            identities: {}\r\n        } }, token);\r\n    // Unsecured JWTs use the empty string as a signature.\r\n    const signature = '';\r\n    return [\r\n        base64urlEncodeWithoutPadding(JSON.stringify(header)),\r\n        base64urlEncodeWithoutPadding(JSON.stringify(payload)),\r\n        signature\r\n    ].join('.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns navigator.userAgent string or '' if it's not defined.\r\n * @return user agent string\r\n */\r\nfunction getUA() {\r\n    if (typeof navigator !== 'undefined' &&\r\n        typeof navigator['userAgent'] === 'string') {\r\n        return navigator['userAgent'];\r\n    }\r\n    else {\r\n        return '';\r\n    }\r\n}\r\n/**\r\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\r\n *\r\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\r\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\r\n * wait for a callback.\r\n */\r\nfunction isMobileCordova() {\r\n    return (typeof window !== 'undefined' &&\r\n        // @ts-ignore Setting up an broadly applicable index signature for Window\r\n        // just to deal with this case would probably be a bad idea.\r\n        !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\r\n        /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));\r\n}\r\n/**\r\n * Detect Node.js.\r\n *\r\n * @return true if Node.js environment is detected or specified.\r\n */\r\n// Node detection logic from: https://github.com/iliakan/detect-node/\r\nfunction isNode() {\r\n    var _a;\r\n    const forceEnvironment = (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.forceEnvironment;\r\n    if (forceEnvironment === 'node') {\r\n        return true;\r\n    }\r\n    else if (forceEnvironment === 'browser') {\r\n        return false;\r\n    }\r\n    try {\r\n        return (Object.prototype.toString.call(global.process) === '[object process]');\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Detect Browser Environment\r\n */\r\nfunction isBrowser() {\r\n    return typeof self === 'object' && self.self === self;\r\n}\r\nfunction isBrowserExtension() {\r\n    const runtime = typeof chrome === 'object'\r\n        ? chrome.runtime\r\n        : typeof browser === 'object'\r\n            ? browser.runtime\r\n            : undefined;\r\n    return typeof runtime === 'object' && runtime.id !== undefined;\r\n}\r\n/**\r\n * Detect React Native.\r\n *\r\n * @return true if ReactNative environment is detected.\r\n */\r\nfunction isReactNative() {\r\n    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');\r\n}\r\n/** Detects Electron apps. */\r\nfunction isElectron() {\r\n    return getUA().indexOf('Electron/') >= 0;\r\n}\r\n/** Detects Internet Explorer. */\r\nfunction isIE() {\r\n    const ua = getUA();\r\n    return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\r\n}\r\n/** Detects Universal Windows Platform apps. */\r\nfunction isUWP() {\r\n    return getUA().indexOf('MSAppHost/') >= 0;\r\n}\r\n/**\r\n * Detect whether the current SDK build is the Node version.\r\n *\r\n * @return true if it's the Node SDK build.\r\n */\r\nfunction isNodeSdk() {\r\n    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\r\n}\r\n/** Returns true if we are running in Safari. */\r\nfunction isSafari() {\r\n    return (!isNode() &&\r\n        navigator.userAgent.includes('Safari') &&\r\n        !navigator.userAgent.includes('Chrome'));\r\n}\r\n/**\r\n * This method checks if indexedDB is supported by current browser/service worker context\r\n * @return true if indexedDB is supported by current browser/service worker context\r\n */\r\nfunction isIndexedDBAvailable() {\r\n    try {\r\n        return typeof indexedDB === 'object';\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\r\n * if errors occur during the database open operation.\r\n *\r\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\r\n * private browsing)\r\n */\r\nfunction validateIndexedDBOpenable() {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            let preExist = true;\r\n            const DB_CHECK_NAME = 'validate-browser-context-for-indexeddb-analytics-module';\r\n            const request = self.indexedDB.open(DB_CHECK_NAME);\r\n            request.onsuccess = () => {\r\n                request.result.close();\r\n                // delete database only when it doesn't pre-exist\r\n                if (!preExist) {\r\n                    self.indexedDB.deleteDatabase(DB_CHECK_NAME);\r\n                }\r\n                resolve(true);\r\n            };\r\n            request.onupgradeneeded = () => {\r\n                preExist = false;\r\n            };\r\n            request.onerror = () => {\r\n                var _a;\r\n                reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || '');\r\n            };\r\n        }\r\n        catch (error) {\r\n            reject(error);\r\n        }\r\n    });\r\n}\r\n/**\r\n *\r\n * This method checks whether cookie is enabled within current browser\r\n * @return true if cookie is enabled within current browser\r\n */\r\nfunction areCookiesEnabled() {\r\n    if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Standardized Firebase Error.\r\n *\r\n * Usage:\r\n *\r\n *   // Typescript string literals for type-safe codes\r\n *   type Err =\r\n *     'unknown' |\r\n *     'object-not-found'\r\n *     ;\r\n *\r\n *   // Closure enum for type-safe error codes\r\n *   // at-enum {string}\r\n *   var Err = {\r\n *     UNKNOWN: 'unknown',\r\n *     OBJECT_NOT_FOUND: 'object-not-found',\r\n *   }\r\n *\r\n *   let errors: Map<Err, string> = {\r\n *     'generic-error': \"Unknown error\",\r\n *     'file-not-found': \"Could not find file: {$file}\",\r\n *   };\r\n *\r\n *   // Type-safe function - must pass a valid error code as param.\r\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\r\n *\r\n *   ...\r\n *   throw error.create(Err.GENERIC);\r\n *   ...\r\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\r\n *   ...\r\n *   // Service: Could not file file: foo.txt (service/file-not-found).\r\n *\r\n *   catch (e) {\r\n *     assert(e.message === \"Could not find file: foo.txt.\");\r\n *     if ((e as FirebaseError)?.code === 'service/file-not-found') {\r\n *       console.log(\"Could not read file: \" + e['file']);\r\n *     }\r\n *   }\r\n */\r\nconst ERROR_NAME = 'FirebaseError';\r\n// Based on code from:\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\r\nclass FirebaseError extends Error {\r\n    constructor(\r\n    /** The error code for this error. */\r\n    code, message, \r\n    /** Custom data for this error. */\r\n    customData) {\r\n        super(message);\r\n        this.code = code;\r\n        this.customData = customData;\r\n        /** The custom name for all FirebaseErrors. */\r\n        this.name = ERROR_NAME;\r\n        // Fix For ES5\r\n        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        Object.setPrototypeOf(this, FirebaseError.prototype);\r\n        // Maintains proper stack trace for where our error was thrown.\r\n        // Only available on V8.\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, ErrorFactory.prototype.create);\r\n        }\r\n    }\r\n}\r\nclass ErrorFactory {\r\n    constructor(service, serviceName, errors) {\r\n        this.service = service;\r\n        this.serviceName = serviceName;\r\n        this.errors = errors;\r\n    }\r\n    create(code, ...data) {\r\n        const customData = data[0] || {};\r\n        const fullCode = `${this.service}/${code}`;\r\n        const template = this.errors[code];\r\n        const message = template ? replaceTemplate(template, customData) : 'Error';\r\n        // Service Name: Error message (service/code).\r\n        const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\r\n        const error = new FirebaseError(fullCode, fullMessage, customData);\r\n        return error;\r\n    }\r\n}\r\nfunction replaceTemplate(template, data) {\r\n    return template.replace(PATTERN, (_, key) => {\r\n        const value = data[key];\r\n        return value != null ? String(value) : `<${key}?>`;\r\n    });\r\n}\r\nconst PATTERN = /\\{\\$([^}]+)}/g;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Evaluates a JSON string into a javascript object.\r\n *\r\n * @param {string} str A string containing JSON.\r\n * @return {*} The javascript object representing the specified JSON.\r\n */\r\nfunction jsonEval(str) {\r\n    return JSON.parse(str);\r\n}\r\n/**\r\n * Returns JSON representing a javascript object.\r\n * @param {*} data Javascript object to be stringified.\r\n * @return {string} The JSON contents of the object.\r\n */\r\nfunction stringify(data) {\r\n    return JSON.stringify(data);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Decodes a Firebase auth. token into constituent parts.\r\n *\r\n * Notes:\r\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst decode = function (token) {\r\n    let header = {}, claims = {}, data = {}, signature = '';\r\n    try {\r\n        const parts = token.split('.');\r\n        header = jsonEval(base64Decode(parts[0]) || '');\r\n        claims = jsonEval(base64Decode(parts[1]) || '');\r\n        signature = parts[2];\r\n        data = claims['d'] || {};\r\n        delete claims['d'];\r\n    }\r\n    catch (e) { }\r\n    return {\r\n        header,\r\n        claims,\r\n        data,\r\n        signature\r\n    };\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\r\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isValidTimestamp = function (token) {\r\n    const claims = decode(token).claims;\r\n    const now = Math.floor(new Date().getTime() / 1000);\r\n    let validSince = 0, validUntil = 0;\r\n    if (typeof claims === 'object') {\r\n        if (claims.hasOwnProperty('nbf')) {\r\n            validSince = claims['nbf'];\r\n        }\r\n        else if (claims.hasOwnProperty('iat')) {\r\n            validSince = claims['iat'];\r\n        }\r\n        if (claims.hasOwnProperty('exp')) {\r\n            validUntil = claims['exp'];\r\n        }\r\n        else {\r\n            // token will expire after 24h by default\r\n            validUntil = validSince + 86400;\r\n        }\r\n    }\r\n    return (!!now &&\r\n        !!validSince &&\r\n        !!validUntil &&\r\n        now >= validSince &&\r\n        now <= validUntil);\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\r\n *\r\n * Notes:\r\n * - May return null if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst issuedAtTime = function (token) {\r\n    const claims = decode(token).claims;\r\n    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\r\n        return claims['iat'];\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isValidFormat = function (token) {\r\n    const decoded = decode(token), claims = decoded.claims;\r\n    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\r\n};\r\n/**\r\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isAdmin = function (token) {\r\n    const claims = decode(token).claims;\r\n    return typeof claims === 'object' && claims['admin'] === true;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction contains(obj, key) {\r\n    return Object.prototype.hasOwnProperty.call(obj, key);\r\n}\r\nfunction safeGet(obj, key) {\r\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n}\r\nfunction isEmpty(obj) {\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction map(obj, fn, contextObj) {\r\n    const res = {};\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            res[key] = fn.call(contextObj, obj[key], key, obj);\r\n        }\r\n    }\r\n    return res;\r\n}\r\n/**\r\n * Deep equal two objects. Support Arrays and Objects.\r\n */\r\nfunction deepEqual(a, b) {\r\n    if (a === b) {\r\n        return true;\r\n    }\r\n    const aKeys = Object.keys(a);\r\n    const bKeys = Object.keys(b);\r\n    for (const k of aKeys) {\r\n        if (!bKeys.includes(k)) {\r\n            return false;\r\n        }\r\n        const aProp = a[k];\r\n        const bProp = b[k];\r\n        if (isObject(aProp) && isObject(bProp)) {\r\n            if (!deepEqual(aProp, bProp)) {\r\n                return false;\r\n            }\r\n        }\r\n        else if (aProp !== bProp) {\r\n            return false;\r\n        }\r\n    }\r\n    for (const k of bKeys) {\r\n        if (!aKeys.includes(k)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction isObject(thing) {\r\n    return thing !== null && typeof thing === 'object';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Rejects if the given promise doesn't resolve in timeInMS milliseconds.\r\n * @internal\r\n */\r\nfunction promiseWithTimeout(promise, timeInMS = 2000) {\r\n    const deferredPromise = new Deferred();\r\n    setTimeout(() => deferredPromise.reject('timeout!'), timeInMS);\r\n    promise.then(deferredPromise.resolve, deferredPromise.reject);\r\n    return deferredPromise.promise;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\r\n * params object (e.g. {arg: 'val', arg2: 'val2'})\r\n * Note: You must prepend it with ? when adding it to a URL.\r\n */\r\nfunction querystring(querystringParams) {\r\n    const params = [];\r\n    for (const [key, value] of Object.entries(querystringParams)) {\r\n        if (Array.isArray(value)) {\r\n            value.forEach(arrayVal => {\r\n                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));\r\n            });\r\n        }\r\n        else {\r\n            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\r\n        }\r\n    }\r\n    return params.length ? '&' + params.join('&') : '';\r\n}\r\n/**\r\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\r\n * (e.g. {arg: 'val', arg2: 'val2'})\r\n */\r\nfunction querystringDecode(querystring) {\r\n    const obj = {};\r\n    const tokens = querystring.replace(/^\\?/, '').split('&');\r\n    tokens.forEach(token => {\r\n        if (token) {\r\n            const [key, value] = token.split('=');\r\n            obj[decodeURIComponent(key)] = decodeURIComponent(value);\r\n        }\r\n    });\r\n    return obj;\r\n}\r\n/**\r\n * Extract the query string part of a URL, including the leading question mark (if present).\r\n */\r\nfunction extractQuerystring(url) {\r\n    const queryStart = url.indexOf('?');\r\n    if (!queryStart) {\r\n        return '';\r\n    }\r\n    const fragmentStart = url.indexOf('#', queryStart);\r\n    return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : undefined);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview SHA-1 cryptographic hash.\r\n * Variable names follow the notation in FIPS PUB 180-3:\r\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\r\n *\r\n * Usage:\r\n *   var sha1 = new sha1();\r\n *   sha1.update(bytes);\r\n *   var hash = sha1.digest();\r\n *\r\n * Performance:\r\n *   Chrome 23:   ~400 Mbit/s\r\n *   Firefox 16:  ~250 Mbit/s\r\n *\r\n */\r\n/**\r\n * SHA-1 cryptographic hash constructor.\r\n *\r\n * The properties declared here are discussed in the above algorithm document.\r\n * @constructor\r\n * @final\r\n * @struct\r\n */\r\nclass Sha1 {\r\n    constructor() {\r\n        /**\r\n         * Holds the previous values of accumulated variables a-e in the compress_\r\n         * function.\r\n         * @private\r\n         */\r\n        this.chain_ = [];\r\n        /**\r\n         * A buffer holding the partially computed hash result.\r\n         * @private\r\n         */\r\n        this.buf_ = [];\r\n        /**\r\n         * An array of 80 bytes, each a part of the message to be hashed.  Referred to\r\n         * as the message schedule in the docs.\r\n         * @private\r\n         */\r\n        this.W_ = [];\r\n        /**\r\n         * Contains data needed to pad messages less than 64 bytes.\r\n         * @private\r\n         */\r\n        this.pad_ = [];\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.inbuf_ = 0;\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.total_ = 0;\r\n        this.blockSize = 512 / 8;\r\n        this.pad_[0] = 128;\r\n        for (let i = 1; i < this.blockSize; ++i) {\r\n            this.pad_[i] = 0;\r\n        }\r\n        this.reset();\r\n    }\r\n    reset() {\r\n        this.chain_[0] = 0x67452301;\r\n        this.chain_[1] = 0xefcdab89;\r\n        this.chain_[2] = 0x98badcfe;\r\n        this.chain_[3] = 0x10325476;\r\n        this.chain_[4] = 0xc3d2e1f0;\r\n        this.inbuf_ = 0;\r\n        this.total_ = 0;\r\n    }\r\n    /**\r\n     * Internal compress helper function.\r\n     * @param buf Block to compress.\r\n     * @param offset Offset of the block in the buffer.\r\n     * @private\r\n     */\r\n    compress_(buf, offset) {\r\n        if (!offset) {\r\n            offset = 0;\r\n        }\r\n        const W = this.W_;\r\n        // get 16 big endian words\r\n        if (typeof buf === 'string') {\r\n            for (let i = 0; i < 16; i++) {\r\n                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\r\n                // have a bug that turns the post-increment ++ operator into pre-increment\r\n                // during JIT compilation.  We have code that depends heavily on SHA-1 for\r\n                // correctness and which is affected by this bug, so I've removed all uses\r\n                // of post-increment ++ in which the result value is used.  We can revert\r\n                // this change once the Safari bug\r\n                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\r\n                // most clients have been updated.\r\n                W[i] =\r\n                    (buf.charCodeAt(offset) << 24) |\r\n                        (buf.charCodeAt(offset + 1) << 16) |\r\n                        (buf.charCodeAt(offset + 2) << 8) |\r\n                        buf.charCodeAt(offset + 3);\r\n                offset += 4;\r\n            }\r\n        }\r\n        else {\r\n            for (let i = 0; i < 16; i++) {\r\n                W[i] =\r\n                    (buf[offset] << 24) |\r\n                        (buf[offset + 1] << 16) |\r\n                        (buf[offset + 2] << 8) |\r\n                        buf[offset + 3];\r\n                offset += 4;\r\n            }\r\n        }\r\n        // expand to 80 words\r\n        for (let i = 16; i < 80; i++) {\r\n            const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\r\n            W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\r\n        }\r\n        let a = this.chain_[0];\r\n        let b = this.chain_[1];\r\n        let c = this.chain_[2];\r\n        let d = this.chain_[3];\r\n        let e = this.chain_[4];\r\n        let f, k;\r\n        // TODO(user): Try to unroll this loop to speed up the computation.\r\n        for (let i = 0; i < 80; i++) {\r\n            if (i < 40) {\r\n                if (i < 20) {\r\n                    f = d ^ (b & (c ^ d));\r\n                    k = 0x5a827999;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0x6ed9eba1;\r\n                }\r\n            }\r\n            else {\r\n                if (i < 60) {\r\n                    f = (b & c) | (d & (b | c));\r\n                    k = 0x8f1bbcdc;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0xca62c1d6;\r\n                }\r\n            }\r\n            const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\r\n            e = d;\r\n            d = c;\r\n            c = ((b << 30) | (b >>> 2)) & 0xffffffff;\r\n            b = a;\r\n            a = t;\r\n        }\r\n        this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\r\n        this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\r\n        this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\r\n        this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\r\n        this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\r\n    }\r\n    update(bytes, length) {\r\n        // TODO(johnlenz): tighten the function signature and remove this check\r\n        if (bytes == null) {\r\n            return;\r\n        }\r\n        if (length === undefined) {\r\n            length = bytes.length;\r\n        }\r\n        const lengthMinusBlock = length - this.blockSize;\r\n        let n = 0;\r\n        // Using local instead of member variables gives ~5% speedup on Firefox 16.\r\n        const buf = this.buf_;\r\n        let inbuf = this.inbuf_;\r\n        // The outer while loop should execute at most twice.\r\n        while (n < length) {\r\n            // When we have no data in the block to top up, we can directly process the\r\n            // input buffer (assuming it contains sufficient data). This gives ~25%\r\n            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\r\n            // the data is provided in large chunks (or in multiples of 64 bytes).\r\n            if (inbuf === 0) {\r\n                while (n <= lengthMinusBlock) {\r\n                    this.compress_(bytes, n);\r\n                    n += this.blockSize;\r\n                }\r\n            }\r\n            if (typeof bytes === 'string') {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes.charCodeAt(n);\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes[n];\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.inbuf_ = inbuf;\r\n        this.total_ += length;\r\n    }\r\n    /** @override */\r\n    digest() {\r\n        const digest = [];\r\n        let totalBits = this.total_ * 8;\r\n        // Add pad 0x80 0x00*.\r\n        if (this.inbuf_ < 56) {\r\n            this.update(this.pad_, 56 - this.inbuf_);\r\n        }\r\n        else {\r\n            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\r\n        }\r\n        // Add # bits.\r\n        for (let i = this.blockSize - 1; i >= 56; i--) {\r\n            this.buf_[i] = totalBits & 255;\r\n            totalBits /= 256; // Don't use bit-shifting here!\r\n        }\r\n        this.compress_(this.buf_);\r\n        let n = 0;\r\n        for (let i = 0; i < 5; i++) {\r\n            for (let j = 24; j >= 0; j -= 8) {\r\n                digest[n] = (this.chain_[i] >> j) & 255;\r\n                ++n;\r\n            }\r\n        }\r\n        return digest;\r\n    }\r\n}\n\n/**\r\n * Helper to make a Subscribe function (just like Promise helps make a\r\n * Thenable).\r\n *\r\n * @param executor Function which can make calls to a single Observer\r\n *     as a proxy.\r\n * @param onNoObservers Callback when count of Observers goes to zero.\r\n */\r\nfunction createSubscribe(executor, onNoObservers) {\r\n    const proxy = new ObserverProxy(executor, onNoObservers);\r\n    return proxy.subscribe.bind(proxy);\r\n}\r\n/**\r\n * Implement fan-out for any number of Observers attached via a subscribe\r\n * function.\r\n */\r\nclass ObserverProxy {\r\n    /**\r\n     * @param executor Function which can make calls to a single Observer\r\n     *     as a proxy.\r\n     * @param onNoObservers Callback when count of Observers goes to zero.\r\n     */\r\n    constructor(executor, onNoObservers) {\r\n        this.observers = [];\r\n        this.unsubscribes = [];\r\n        this.observerCount = 0;\r\n        // Micro-task scheduling by calling task.then().\r\n        this.task = Promise.resolve();\r\n        this.finalized = false;\r\n        this.onNoObservers = onNoObservers;\r\n        // Call the executor asynchronously so subscribers that are called\r\n        // synchronously after the creation of the subscribe function\r\n        // can still receive the very first value generated in the executor.\r\n        this.task\r\n            .then(() => {\r\n            executor(this);\r\n        })\r\n            .catch(e => {\r\n            this.error(e);\r\n        });\r\n    }\r\n    next(value) {\r\n        this.forEachObserver((observer) => {\r\n            observer.next(value);\r\n        });\r\n    }\r\n    error(error) {\r\n        this.forEachObserver((observer) => {\r\n            observer.error(error);\r\n        });\r\n        this.close(error);\r\n    }\r\n    complete() {\r\n        this.forEachObserver((observer) => {\r\n            observer.complete();\r\n        });\r\n        this.close();\r\n    }\r\n    /**\r\n     * Subscribe function that can be used to add an Observer to the fan-out list.\r\n     *\r\n     * - We require that no event is sent to a subscriber sychronously to their\r\n     *   call to subscribe().\r\n     */\r\n    subscribe(nextOrObserver, error, complete) {\r\n        let observer;\r\n        if (nextOrObserver === undefined &&\r\n            error === undefined &&\r\n            complete === undefined) {\r\n            throw new Error('Missing Observer.');\r\n        }\r\n        // Assemble an Observer object when passed as callback functions.\r\n        if (implementsAnyMethods(nextOrObserver, [\r\n            'next',\r\n            'error',\r\n            'complete'\r\n        ])) {\r\n            observer = nextOrObserver;\r\n        }\r\n        else {\r\n            observer = {\r\n                next: nextOrObserver,\r\n                error,\r\n                complete\r\n            };\r\n        }\r\n        if (observer.next === undefined) {\r\n            observer.next = noop;\r\n        }\r\n        if (observer.error === undefined) {\r\n            observer.error = noop;\r\n        }\r\n        if (observer.complete === undefined) {\r\n            observer.complete = noop;\r\n        }\r\n        const unsub = this.unsubscribeOne.bind(this, this.observers.length);\r\n        // Attempt to subscribe to a terminated Observable - we\r\n        // just respond to the Observer with the final error or complete\r\n        // event.\r\n        if (this.finalized) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this.task.then(() => {\r\n                try {\r\n                    if (this.finalError) {\r\n                        observer.error(this.finalError);\r\n                    }\r\n                    else {\r\n                        observer.complete();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // nothing\r\n                }\r\n                return;\r\n            });\r\n        }\r\n        this.observers.push(observer);\r\n        return unsub;\r\n    }\r\n    // Unsubscribe is synchronous - we guarantee that no events are sent to\r\n    // any unsubscribed Observer.\r\n    unsubscribeOne(i) {\r\n        if (this.observers === undefined || this.observers[i] === undefined) {\r\n            return;\r\n        }\r\n        delete this.observers[i];\r\n        this.observerCount -= 1;\r\n        if (this.observerCount === 0 && this.onNoObservers !== undefined) {\r\n            this.onNoObservers(this);\r\n        }\r\n    }\r\n    forEachObserver(fn) {\r\n        if (this.finalized) {\r\n            // Already closed by previous event....just eat the additional values.\r\n            return;\r\n        }\r\n        // Since sendOne calls asynchronously - there is no chance that\r\n        // this.observers will become undefined.\r\n        for (let i = 0; i < this.observers.length; i++) {\r\n            this.sendOne(i, fn);\r\n        }\r\n    }\r\n    // Call the Observer via one of it's callback function. We are careful to\r\n    // confirm that the observe has not been unsubscribed since this asynchronous\r\n    // function had been queued.\r\n    sendOne(i, fn) {\r\n        // Execute the callback asynchronously\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(() => {\r\n            if (this.observers !== undefined && this.observers[i] !== undefined) {\r\n                try {\r\n                    fn(this.observers[i]);\r\n                }\r\n                catch (e) {\r\n                    // Ignore exceptions raised in Observers or missing methods of an\r\n                    // Observer.\r\n                    // Log error to console. b/31404806\r\n                    if (typeof console !== 'undefined' && console.error) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    close(err) {\r\n        if (this.finalized) {\r\n            return;\r\n        }\r\n        this.finalized = true;\r\n        if (err !== undefined) {\r\n            this.finalError = err;\r\n        }\r\n        // Proxy is no longer needed - garbage collect references\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(() => {\r\n            this.observers = undefined;\r\n            this.onNoObservers = undefined;\r\n        });\r\n    }\r\n}\r\n/** Turn synchronous function into one called asynchronously. */\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction async(fn, onError) {\r\n    return (...args) => {\r\n        Promise.resolve(true)\r\n            .then(() => {\r\n            fn(...args);\r\n        })\r\n            .catch((error) => {\r\n            if (onError) {\r\n                onError(error);\r\n            }\r\n        });\r\n    };\r\n}\r\n/**\r\n * Return true if the object passed in implements any of the named methods.\r\n */\r\nfunction implementsAnyMethods(obj, methods) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return false;\r\n    }\r\n    for (const method of methods) {\r\n        if (method in obj && typeof obj[method] === 'function') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction noop() {\r\n    // do nothing\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Check to make sure the appropriate number of arguments are provided for a public function.\r\n * Throws an error if it fails.\r\n *\r\n * @param fnName The function name\r\n * @param minCount The minimum number of arguments to allow for the function call\r\n * @param maxCount The maximum number of argument to allow for the function call\r\n * @param argCount The actual number of arguments provided.\r\n */\r\nconst validateArgCount = function (fnName, minCount, maxCount, argCount) {\r\n    let argError;\r\n    if (argCount < minCount) {\r\n        argError = 'at least ' + minCount;\r\n    }\r\n    else if (argCount > maxCount) {\r\n        argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\r\n    }\r\n    if (argError) {\r\n        const error = fnName +\r\n            ' failed: Was called with ' +\r\n            argCount +\r\n            (argCount === 1 ? ' argument.' : ' arguments.') +\r\n            ' Expects ' +\r\n            argError +\r\n            '.';\r\n        throw new Error(error);\r\n    }\r\n};\r\n/**\r\n * Generates a string to prefix an error message about failed argument validation\r\n *\r\n * @param fnName The function name\r\n * @param argName The name of the argument\r\n * @return The prefix to add to the error thrown for validation.\r\n */\r\nfunction errorPrefix(fnName, argName) {\r\n    return `${fnName} failed: ${argName} argument `;\r\n}\r\n/**\r\n * @param fnName\r\n * @param argumentNumber\r\n * @param namespace\r\n * @param optional\r\n */\r\nfunction validateNamespace(fnName, namespace, optional) {\r\n    if (optional && !namespace) {\r\n        return;\r\n    }\r\n    if (typeof namespace !== 'string') {\r\n        //TODO: I should do more validation here. We only allow certain chars in namespaces.\r\n        throw new Error(errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.');\r\n    }\r\n}\r\nfunction validateCallback(fnName, argumentName, \r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\ncallback, optional) {\r\n    if (optional && !callback) {\r\n        return;\r\n    }\r\n    if (typeof callback !== 'function') {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid function.');\r\n    }\r\n}\r\nfunction validateContextObject(fnName, argumentName, context, optional) {\r\n    if (optional && !context) {\r\n        return;\r\n    }\r\n    if (typeof context !== 'object' || context === null) {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid context object.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\r\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\r\n// so it's been modified.\r\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\r\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\r\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\r\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\r\n// pair).\r\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\r\n/**\r\n * @param {string} str\r\n * @return {Array}\r\n */\r\nconst stringToByteArray = function (str) {\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        // Is this the lead surrogate in a surrogate pair?\r\n        if (c >= 0xd800 && c <= 0xdbff) {\r\n            const high = c - 0xd800; // the high 10 bits.\r\n            i++;\r\n            assert(i < str.length, 'Surrogate pair missing trail surrogate.');\r\n            const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\r\n            c = 0x10000 + (high << 10) + low;\r\n        }\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if (c < 65536) {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Calculate length without actually converting; useful for doing cheaper validation.\r\n * @param {string} str\r\n * @return {number}\r\n */\r\nconst stringLength = function (str) {\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        const c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            p++;\r\n        }\r\n        else if (c < 2048) {\r\n            p += 2;\r\n        }\r\n        else if (c >= 0xd800 && c <= 0xdbff) {\r\n            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\r\n            p += 4;\r\n            i++; // skip trail surrogate.\r\n        }\r\n        else {\r\n            p += 3;\r\n        }\r\n    }\r\n    return p;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Copied from https://stackoverflow.com/a/2117523\r\n * Generates a new uuid.\r\n * @public\r\n */\r\nconst uuidv4 = function () {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\r\n        const r = (Math.random() * 16) | 0, v = c === 'x' ? r : (r & 0x3) | 0x8;\r\n        return v.toString(16);\r\n    });\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The amount of milliseconds to exponentially increase.\r\n */\r\nconst DEFAULT_INTERVAL_MILLIS = 1000;\r\n/**\r\n * The factor to backoff by.\r\n * Should be a number greater than 1.\r\n */\r\nconst DEFAULT_BACKOFF_FACTOR = 2;\r\n/**\r\n * The maximum milliseconds to increase to.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.\r\n/**\r\n * The percentage of backoff time to randomize by.\r\n * See\r\n * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic\r\n * for context.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst RANDOM_FACTOR = 0.5;\r\n/**\r\n * Based on the backoff method from\r\n * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.\r\n * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.\r\n */\r\nfunction calculateBackoffMillis(backoffCount, intervalMillis = DEFAULT_INTERVAL_MILLIS, backoffFactor = DEFAULT_BACKOFF_FACTOR) {\r\n    // Calculates an exponentially increasing value.\r\n    // Deviation: calculates value from count and a constant interval, so we only need to save value\r\n    // and count to restore state.\r\n    const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);\r\n    // A random \"fuzz\" to avoid waves of retries.\r\n    // Deviation: randomFactor is required.\r\n    const randomWait = Math.round(\r\n    // A fraction of the backoff value to add/subtract.\r\n    // Deviation: changes multiplication order to improve readability.\r\n    RANDOM_FACTOR *\r\n        currBaseValue *\r\n        // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines\r\n        // if we add or subtract.\r\n        (Math.random() - 0.5) *\r\n        2);\r\n    // Limits backoff to max to avoid effectively permanent backoff.\r\n    return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provide English ordinal letters after a number\r\n */\r\nfunction ordinal(i) {\r\n    if (!Number.isFinite(i)) {\r\n        return `${i}`;\r\n    }\r\n    return i + indicator(i);\r\n}\r\nfunction indicator(i) {\r\n    i = Math.abs(i);\r\n    const cent = i % 100;\r\n    if (cent >= 10 && cent <= 20) {\r\n        return 'th';\r\n    }\r\n    const dec = i % 10;\r\n    if (dec === 1) {\r\n        return 'st';\r\n    }\r\n    if (dec === 2) {\r\n        return 'nd';\r\n    }\r\n    if (dec === 3) {\r\n        return 'rd';\r\n    }\r\n    return 'th';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getModularInstance(service) {\r\n    if (service && service._delegate) {\r\n        return service._delegate;\r\n    }\r\n    else {\r\n        return service;\r\n    }\r\n}\n\nexport { CONSTANTS, DecodeBase64StringError, Deferred, ErrorFactory, FirebaseError, MAX_VALUE_MILLIS, RANDOM_FACTOR, Sha1, areCookiesEnabled, assert, assertionError, async, base64, base64Decode, base64Encode, base64urlEncodeWithoutPadding, calculateBackoffMillis, contains, createMockUserToken, createSubscribe, decode, deepCopy, deepEqual, deepExtend, errorPrefix, extractQuerystring, getDefaultAppConfig, getDefaultEmulatorHost, getDefaultEmulatorHostnameAndPort, getDefaults, getExperimentalSetting, getGlobal, getModularInstance, getUA, isAdmin, isBrowser, isBrowserExtension, isElectron, isEmpty, isIE, isIndexedDBAvailable, isMobileCordova, isNode, isNodeSdk, isReactNative, isSafari, isUWP, isValidFormat, isValidTimestamp, issuedAtTime, jsonEval, map, ordinal, promiseWithTimeout, querystring, querystringDecode, safeGet, stringLength, stringToByteArray, stringify, uuidv4, validateArgCount, validateCallback, validateContextObject, validateIndexedDBOpenable, validateNamespace };\n//# sourceMappingURL=index.esm2017.js.map\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\n */\n\nexport const CONSTANTS = {\n  /**\n   * @define {boolean} Whether this is the client Node.js SDK.\n   */\n  NODE_CLIENT: false,\n  /**\n   * @define {boolean} Whether this is the Admin Node.js SDK.\n   */\n  NODE_ADMIN: false,\n\n  /**\n   * Firebase SDK Version\n   */\n  SDK_VERSION: '${JSCORE_VERSION}'\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\n\n/**\n * Throws an error if the provided assertion is falsy\n */\nexport const assert = function (assertion: unknown, message: string): void {\n  if (!assertion) {\n    throw assertionError(message);\n  }\n};\n\n/**\n * Returns an Error object suitable for throwing.\n */\nexport const assertionError = function (message: string): Error {\n  return new Error(\n    'Firebase Database (' +\n      CONSTANTS.SDK_VERSION +\n      ') INTERNAL ASSERT FAILED: ' +\n      message\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst stringToByteArray = function (str: string): number[] {\n  // TODO(user): Use native implementations if/when available\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (\n      (c & 0xfc00) === 0xd800 &&\n      i + 1 < str.length &&\n      (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00\n    ) {\n      // Surrogate Pair\n      c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Turns an array of numbers into the string given by the concatenation of the\n * characters to which the numbers correspond.\n * @param bytes Array of numbers representing characters.\n * @return Stringification of the array.\n */\nconst byteArrayToString = function (bytes: number[]): string {\n  // TODO(user): Use native implementations if/when available\n  const out: string[] = [];\n  let pos = 0,\n    c = 0;\n  while (pos < bytes.length) {\n    const c1 = bytes[pos++];\n    if (c1 < 128) {\n      out[c++] = String.fromCharCode(c1);\n    } else if (c1 > 191 && c1 < 224) {\n      const c2 = bytes[pos++];\n      out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\n    } else if (c1 > 239 && c1 < 365) {\n      // Surrogate Pair\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      const c4 = bytes[pos++];\n      const u =\n        (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\n        0x10000;\n      out[c++] = String.fromCharCode(0xd800 + (u >> 10));\n      out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\n    } else {\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      out[c++] = String.fromCharCode(\n        ((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63)\n      );\n    }\n  }\n  return out.join('');\n};\n\ninterface Base64 {\n  byteToCharMap_: { [key: number]: string } | null;\n  charToByteMap_: { [key: string]: number } | null;\n  byteToCharMapWebSafe_: { [key: number]: string } | null;\n  charToByteMapWebSafe_: { [key: string]: number } | null;\n  ENCODED_VALS_BASE: string;\n  readonly ENCODED_VALS: string;\n  readonly ENCODED_VALS_WEBSAFE: string;\n  HAS_NATIVE_SUPPORT: boolean;\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string;\n  encodeString(input: string, webSafe?: boolean): string;\n  decodeString(input: string, webSafe: boolean): string;\n  decodeStringToByteArray(input: string, webSafe: boolean): number[];\n  init_(): void;\n}\n\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\n// Static lookup maps, lazily populated by init_()\nexport const base64: Base64 = {\n  /**\n   * Maps bytes to characters.\n   */\n  byteToCharMap_: null,\n\n  /**\n   * Maps characters to bytes.\n   */\n  charToByteMap_: null,\n\n  /**\n   * Maps bytes to websafe characters.\n   * @private\n   */\n  byteToCharMapWebSafe_: null,\n\n  /**\n   * Maps websafe characters to bytes.\n   * @private\n   */\n  charToByteMapWebSafe_: null,\n\n  /**\n   * Our default alphabet, shared between\n   * ENCODED_VALS and ENCODED_VALS_WEBSAFE\n   */\n  ENCODED_VALS_BASE:\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\n\n  /**\n   * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\n   */\n  get ENCODED_VALS() {\n    return this.ENCODED_VALS_BASE + '+/=';\n  },\n\n  /**\n   * Our websafe alphabet.\n   */\n  get ENCODED_VALS_WEBSAFE() {\n    return this.ENCODED_VALS_BASE + '-_.';\n  },\n\n  /**\n   * Whether this browser supports the atob and btoa functions. This extension\n   * started at Mozilla but is now implemented by many browsers. We use the\n   * ASSUME_* variables to avoid pulling in the full useragent detection library\n   * but still allowing the standard per-browser compilations.\n   *\n   */\n  HAS_NATIVE_SUPPORT: typeof atob === 'function',\n\n  /**\n   * Base64-encode an array of bytes.\n   *\n   * @param input An array of bytes (numbers with\n   *     value in [0, 255]) to encode.\n   * @param webSafe Boolean indicating we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string {\n    if (!Array.isArray(input)) {\n      throw Error('encodeByteArray takes an array as a parameter');\n    }\n\n    this.init_();\n\n    const byteToCharMap = webSafe\n      ? this.byteToCharMapWebSafe_!\n      : this.byteToCharMap_!;\n\n    const output = [];\n\n    for (let i = 0; i < input.length; i += 3) {\n      const byte1 = input[i];\n      const haveByte2 = i + 1 < input.length;\n      const byte2 = haveByte2 ? input[i + 1] : 0;\n      const haveByte3 = i + 2 < input.length;\n      const byte3 = haveByte3 ? input[i + 2] : 0;\n\n      const outByte1 = byte1 >> 2;\n      const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\n      let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\n      let outByte4 = byte3 & 0x3f;\n\n      if (!haveByte3) {\n        outByte4 = 64;\n\n        if (!haveByte2) {\n          outByte3 = 64;\n        }\n      }\n\n      output.push(\n        byteToCharMap[outByte1],\n        byteToCharMap[outByte2],\n        byteToCharMap[outByte3],\n        byteToCharMap[outByte4]\n      );\n    }\n\n    return output.join('');\n  },\n\n  /**\n   * Base64-encode a string.\n   *\n   * @param input A string to encode.\n   * @param webSafe If true, we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeString(input: string, webSafe?: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return btoa(input);\n    }\n    return this.encodeByteArray(stringToByteArray(input), webSafe);\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * @param input to decode.\n   * @param webSafe True if we should use the\n   *     alternative alphabet.\n   * @return string representing the decoded value.\n   */\n  decodeString(input: string, webSafe: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return atob(input);\n    }\n    return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * In base-64 decoding, groups of four characters are converted into three\n   * bytes.  If the encoder did not apply padding, the input length may not\n   * be a multiple of 4.\n   *\n   * In this case, the last group will have fewer than 4 characters, and\n   * padding will be inferred.  If the group has one or two characters, it decodes\n   * to one byte.  If the group has three characters, it decodes to two bytes.\n   *\n   * @param input Input to decode.\n   * @param webSafe True if we should use the web-safe alphabet.\n   * @return bytes representing the decoded value.\n   */\n  decodeStringToByteArray(input: string, webSafe: boolean): number[] {\n    this.init_();\n\n    const charToByteMap = webSafe\n      ? this.charToByteMapWebSafe_!\n      : this.charToByteMap_!;\n\n    const output: number[] = [];\n\n    for (let i = 0; i < input.length; ) {\n      const byte1 = charToByteMap[input.charAt(i++)];\n\n      const haveByte2 = i < input.length;\n      const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\n      ++i;\n\n      const haveByte3 = i < input.length;\n      const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      const haveByte4 = i < input.length;\n      const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\n        throw new DecodeBase64StringError();\n      }\n\n      const outByte1 = (byte1 << 2) | (byte2 >> 4);\n      output.push(outByte1);\n\n      if (byte3 !== 64) {\n        const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\n        output.push(outByte2);\n\n        if (byte4 !== 64) {\n          const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\n          output.push(outByte3);\n        }\n      }\n    }\n\n    return output;\n  },\n\n  /**\n   * Lazy static initialization function. Called before\n   * accessing any of the static map variables.\n   * @private\n   */\n  init_() {\n    if (!this.byteToCharMap_) {\n      this.byteToCharMap_ = {};\n      this.charToByteMap_ = {};\n      this.byteToCharMapWebSafe_ = {};\n      this.charToByteMapWebSafe_ = {};\n\n      // We want quick mappings back and forth, so we precompute two maps.\n      for (let i = 0; i < this.ENCODED_VALS.length; i++) {\n        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\n        this.charToByteMap_[this.byteToCharMap_[i]] = i;\n        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\n        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\n\n        // Be forgiving when decoding and correctly decode both encodings.\n        if (i >= this.ENCODED_VALS_BASE.length) {\n          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\n          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\n        }\n      }\n    }\n  }\n};\n\n/**\n * An error encountered while decoding base64 string.\n */\nexport class DecodeBase64StringError extends Error {\n  readonly name = 'DecodeBase64StringError';\n}\n\n/**\n * URL-safe base64 encoding\n */\nexport const base64Encode = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  return base64.encodeByteArray(utf8Bytes, true);\n};\n\n/**\n * URL-safe base64 encoding (without \".\" padding in the end).\n * e.g. Used in JSON Web Token (JWT) parts.\n */\nexport const base64urlEncodeWithoutPadding = function (str: string): string {\n  // Use base64url encoding and remove padding in the end (dot characters).\n  return base64Encode(str).replace(/\\./g, '');\n};\n\n/**\n * URL-safe base64 decoding\n *\n * NOTE: DO NOT use the global atob() function - it does NOT support the\n * base64Url variant encoding.\n *\n * @param str To be decoded\n * @return Decoded result, if possible\n */\nexport const base64Decode = function (str: string): string | null {\n  try {\n    return base64.decodeString(str, true);\n  } catch (e) {\n    console.error('base64Decode failed: ', e);\n  }\n  return null;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Do a deep-copy of basic JavaScript Objects or Arrays.\n */\nexport function deepCopy<T>(value: T): T {\n  return deepExtend(undefined, value) as T;\n}\n\n/**\n * Copy properties from source to target (recursively allows extension\n * of Objects and Arrays).  Scalar values in the target are over-written.\n * If target is undefined, an object of the appropriate type will be created\n * (and returned).\n *\n * We recursively copy all child properties of plain Objects in the source- so\n * that namespace- like dictionaries are merged.\n *\n * Note that the target can be a function, in which case the properties in\n * the source Object are copied onto it as static properties of the Function.\n *\n * Note: we don't merge __proto__ to prevent prototype pollution\n */\nexport function deepExtend(target: unknown, source: unknown): unknown {\n  if (!(source instanceof Object)) {\n    return source;\n  }\n\n  switch (source.constructor) {\n    case Date:\n      // Treat Dates like scalars; if the target date object had any child\n      // properties - they will be lost!\n      const dateValue = source as Date;\n      return new Date(dateValue.getTime());\n\n    case Object:\n      if (target === undefined) {\n        target = {};\n      }\n      break;\n    case Array:\n      // Always copy the array source and overwrite the target.\n      target = [];\n      break;\n\n    default:\n      // Not a plain Object - treat it as a scalar.\n      return source;\n  }\n\n  for (const prop in source) {\n    // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\n    if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {\n      continue;\n    }\n    (target as Record<string, unknown>)[prop] = deepExtend(\n      (target as Record<string, unknown>)[prop],\n      (source as Record<string, unknown>)[prop]\n    );\n  }\n\n  return target;\n}\n\nfunction isValidKey(key: string): boolean {\n  return key !== '__proto__';\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Polyfill for `globalThis` object.\n * @returns the `globalThis` object for the given environment.\n * @public\n */\nexport function getGlobal(): typeof globalThis {\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  throw new Error('Unable to locate global object.');\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Decode } from './crypt';\nimport { getGlobal } from './global';\n\n/**\n * Keys for experimental properties on the `FirebaseDefaults` object.\n * @public\n */\nexport type ExperimentalKey = 'authTokenSyncURL' | 'authIdTokenMaxAge';\n\n/**\n * An object that can be injected into the environment as __FIREBASE_DEFAULTS__,\n * either as a property of globalThis, a shell environment variable, or a\n * cookie.\n *\n * This object can be used to automatically configure and initialize\n * a Firebase app as well as any emulators.\n *\n * @public\n */\nexport interface FirebaseDefaults {\n  config?: Record<string, string>;\n  emulatorHosts?: Record<string, string>;\n  _authTokenSyncURL?: string;\n  _authIdTokenMaxAge?: number;\n  /**\n   * Override Firebase's runtime environment detection and\n   * force the SDK to act as if it were in the specified environment.\n   */\n  forceEnvironment?: 'browser' | 'node';\n  [key: string]: unknown;\n}\n\ndeclare global {\n  // Need `var` for this to work.\n  // eslint-disable-next-line no-var\n  var __FIREBASE_DEFAULTS__: FirebaseDefaults | undefined;\n}\n\nconst getDefaultsFromGlobal = (): FirebaseDefaults | undefined =>\n  getGlobal().__FIREBASE_DEFAULTS__;\n\n/**\n * Attempt to read defaults from a JSON string provided to\n * process(.)env(.)__FIREBASE_DEFAULTS__ or a JSON file whose path is in\n * process(.)env(.)__FIREBASE_DEFAULTS_PATH__\n * The dots are in parens because certain compilers (Vite?) cannot\n * handle seeing that variable in comments.\n * See https://github.com/firebase/firebase-js-sdk/issues/6838\n */\nconst getDefaultsFromEnvVariable = (): FirebaseDefaults | undefined => {\n  if (typeof process === 'undefined' || typeof process.env === 'undefined') {\n    return;\n  }\n  const defaultsJsonString = process.env.__FIREBASE_DEFAULTS__;\n  if (defaultsJsonString) {\n    return JSON.parse(defaultsJsonString);\n  }\n};\n\nconst getDefaultsFromCookie = (): FirebaseDefaults | undefined => {\n  if (typeof document === 'undefined') {\n    return;\n  }\n  let match;\n  try {\n    match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);\n  } catch (e) {\n    // Some environments such as Angular Universal SSR have a\n    // `document` object but error on accessing `document.cookie`.\n    return;\n  }\n  const decoded = match && base64Decode(match[1]);\n  return decoded && JSON.parse(decoded);\n};\n\n/**\n * Get the __FIREBASE_DEFAULTS__ object. It checks in order:\n * (1) if such an object exists as a property of `globalThis`\n * (2) if such an object was provided on a shell environment variable\n * (3) if such an object exists in a cookie\n * @public\n */\nexport const getDefaults = (): FirebaseDefaults | undefined => {\n  try {\n    return (\n      getDefaultsFromGlobal() ||\n      getDefaultsFromEnvVariable() ||\n      getDefaultsFromCookie()\n    );\n  } catch (e) {\n    /**\n     * Catch-all for being unable to get __FIREBASE_DEFAULTS__ due\n     * to any environment case we have not accounted for. Log to\n     * info instead of swallowing so we can find these unknown cases\n     * and add paths for them if needed.\n     */\n    console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`);\n    return;\n  }\n};\n\n/**\n * Returns emulator host stored in the __FIREBASE_DEFAULTS__ object\n * for the given product.\n * @returns a URL host formatted like `127.0.0.1:9999` or `[::1]:4000` if available\n * @public\n */\nexport const getDefaultEmulatorHost = (\n  productName: string\n): string | undefined => getDefaults()?.emulatorHosts?.[productName];\n\n/**\n * Returns emulator hostname and port stored in the __FIREBASE_DEFAULTS__ object\n * for the given product.\n * @returns a pair of hostname and port like `[\"::1\", 4000]` if available\n * @public\n */\nexport const getDefaultEmulatorHostnameAndPort = (\n  productName: string\n): [hostname: string, port: number] | undefined => {\n  const host = getDefaultEmulatorHost(productName);\n  if (!host) {\n    return undefined;\n  }\n  const separatorIndex = host.lastIndexOf(':'); // Finding the last since IPv6 addr also has colons.\n  if (separatorIndex <= 0 || separatorIndex + 1 === host.length) {\n    throw new Error(`Invalid host ${host} with no separate hostname and port!`);\n  }\n  // eslint-disable-next-line no-restricted-globals\n  const port = parseInt(host.substring(separatorIndex + 1), 10);\n  if (host[0] === '[') {\n    // Bracket-quoted `[ipv6addr]:port` => return \"ipv6addr\" (without brackets).\n    return [host.substring(1, separatorIndex - 1), port];\n  } else {\n    return [host.substring(0, separatorIndex), port];\n  }\n};\n\n/**\n * Returns Firebase app config stored in the __FIREBASE_DEFAULTS__ object.\n * @public\n */\nexport const getDefaultAppConfig = (): Record<string, string> | undefined =>\n  getDefaults()?.config;\n\n/**\n * Returns an experimental setting on the __FIREBASE_DEFAULTS__ object (properties\n * prefixed by \"_\")\n * @public\n */\nexport const getExperimentalSetting = <T extends ExperimentalKey>(\n  name: T\n): FirebaseDefaults[`_${T}`] =>\n  getDefaults()?.[`_${name}`] as FirebaseDefaults[`_${T}`];\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Deferred<R> {\n  promise: Promise<R>;\n  reject: (value?: unknown) => void = () => {};\n  resolve: (value?: unknown) => void = () => {};\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve as (value?: unknown) => void;\n      this.reject = reject as (value?: unknown) => void;\n    });\n  }\n\n  /**\n   * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\n   * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\n   * and returns a node-style callback which will resolve or reject the Deferred's promise.\n   */\n  wrapCallback(\n    callback?: (error?: unknown, value?: unknown) => void\n  ): (error: unknown, value?: unknown) => void {\n    return (error, value?) => {\n      if (error) {\n        this.reject(error);\n      } else {\n        this.resolve(value);\n      }\n      if (typeof callback === 'function') {\n        // Attaching noop handler just in case developer wasn't expecting\n        // promises\n        this.promise.catch(() => {});\n\n        // Some of our callbacks don't expect a value and our own tests\n        // assert that the parameter length is 1\n        if (callback.length === 1) {\n          callback(error);\n        } else {\n          callback(error, value);\n        }\n      }\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64urlEncodeWithoutPadding } from './crypt';\n\n// Firebase Auth tokens contain snake_case claims following the JWT standard / convention.\n/* eslint-disable camelcase */\n\nexport type FirebaseSignInProvider =\n  | 'custom'\n  | 'email'\n  | 'password'\n  | 'phone'\n  | 'anonymous'\n  | 'google.com'\n  | 'facebook.com'\n  | 'github.com'\n  | 'twitter.com'\n  | 'microsoft.com'\n  | 'apple.com';\n\ninterface FirebaseIdToken {\n  // Always set to https://securetoken.google.com/PROJECT_ID\n  iss: string;\n\n  // Always set to PROJECT_ID\n  aud: string;\n\n  // The user's unique ID\n  sub: string;\n\n  // The token issue time, in seconds since epoch\n  iat: number;\n\n  // The token expiry time, normally 'iat' + 3600\n  exp: number;\n\n  // The user's unique ID. Must be equal to 'sub'\n  user_id: string;\n\n  // The time the user authenticated, normally 'iat'\n  auth_time: number;\n\n  // The sign in provider, only set when the provider is 'anonymous'\n  provider_id?: 'anonymous';\n\n  // The user's primary email\n  email?: string;\n\n  // The user's email verification status\n  email_verified?: boolean;\n\n  // The user's primary phone number\n  phone_number?: string;\n\n  // The user's display name\n  name?: string;\n\n  // The user's profile photo URL\n  picture?: string;\n\n  // Information on all identities linked to this user\n  firebase: {\n    // The primary sign-in provider\n    sign_in_provider: FirebaseSignInProvider;\n\n    // A map of providers to the user's list of unique identifiers from\n    // each provider\n    identities?: { [provider in FirebaseSignInProvider]?: string[] };\n  };\n\n  // Custom claims set by the developer\n  [claim: string]: unknown;\n\n  uid?: never; // Try to catch a common mistake of \"uid\" (should be \"sub\" instead).\n}\n\nexport type EmulatorMockTokenOptions = ({ user_id: string } | { sub: string }) &\n  Partial<FirebaseIdToken>;\n\nexport function createMockUserToken(\n  token: EmulatorMockTokenOptions,\n  projectId?: string\n): string {\n  if (token.uid) {\n    throw new Error(\n      'The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.'\n    );\n  }\n  // Unsecured JWTs use \"none\" as the algorithm.\n  const header = {\n    alg: 'none',\n    type: 'JWT'\n  };\n\n  const project = projectId || 'demo-project';\n  const iat = token.iat || 0;\n  const sub = token.sub || token.user_id;\n  if (!sub) {\n    throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\n  }\n\n  const payload: FirebaseIdToken = {\n    // Set all required fields to decent defaults\n    iss: `https://securetoken.google.com/${project}`,\n    aud: project,\n    iat,\n    exp: iat + 3600,\n    auth_time: iat,\n    sub,\n    user_id: sub,\n    firebase: {\n      sign_in_provider: 'custom',\n      identities: {}\n    },\n\n    // Override with user options\n    ...token\n  };\n\n  // Unsecured JWTs use the empty string as a signature.\n  const signature = '';\n  return [\n    base64urlEncodeWithoutPadding(JSON.stringify(header)),\n    base64urlEncodeWithoutPadding(JSON.stringify(payload)),\n    signature\n  ].join('.');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\nimport { getDefaults } from './defaults';\n\n/**\n * Returns navigator.userAgent string or '' if it's not defined.\n * @return user agent string\n */\nexport function getUA(): string {\n  if (\n    typeof navigator !== 'undefined' &&\n    typeof navigator['userAgent'] === 'string'\n  ) {\n    return navigator['userAgent'];\n  } else {\n    return '';\n  }\n}\n\n/**\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\n *\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\n * wait for a callback.\n */\nexport function isMobileCordova(): boolean {\n  return (\n    typeof window !== 'undefined' &&\n    // @ts-ignore Setting up an broadly applicable index signature for Window\n    // just to deal with this case would probably be a bad idea.\n    !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\n    /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA())\n  );\n}\n\n/**\n * Detect Node.js.\n *\n * @return true if Node.js environment is detected or specified.\n */\n// Node detection logic from: https://github.com/iliakan/detect-node/\nexport function isNode(): boolean {\n  const forceEnvironment = getDefaults()?.forceEnvironment;\n  if (forceEnvironment === 'node') {\n    return true;\n  } else if (forceEnvironment === 'browser') {\n    return false;\n  }\n\n  try {\n    return (\n      Object.prototype.toString.call(global.process) === '[object process]'\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Detect Browser Environment\n */\nexport function isBrowser(): boolean {\n  return typeof self === 'object' && self.self === self;\n}\n\n/**\n * Detect browser extensions (Chrome and Firefox at least).\n */\ninterface BrowserRuntime {\n  id?: unknown;\n}\ndeclare const chrome: { runtime?: BrowserRuntime };\ndeclare const browser: { runtime?: BrowserRuntime };\nexport function isBrowserExtension(): boolean {\n  const runtime =\n    typeof chrome === 'object'\n      ? chrome.runtime\n      : typeof browser === 'object'\n      ? browser.runtime\n      : undefined;\n  return typeof runtime === 'object' && runtime.id !== undefined;\n}\n\n/**\n * Detect React Native.\n *\n * @return true if ReactNative environment is detected.\n */\nexport function isReactNative(): boolean {\n  return (\n    typeof navigator === 'object' && navigator['product'] === 'ReactNative'\n  );\n}\n\n/** Detects Electron apps. */\nexport function isElectron(): boolean {\n  return getUA().indexOf('Electron/') >= 0;\n}\n\n/** Detects Internet Explorer. */\nexport function isIE(): boolean {\n  const ua = getUA();\n  return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\n}\n\n/** Detects Universal Windows Platform apps. */\nexport function isUWP(): boolean {\n  return getUA().indexOf('MSAppHost/') >= 0;\n}\n\n/**\n * Detect whether the current SDK build is the Node version.\n *\n * @return true if it's the Node SDK build.\n */\nexport function isNodeSdk(): boolean {\n  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\n}\n\n/** Returns true if we are running in Safari. */\nexport function isSafari(): boolean {\n  return (\n    !isNode() &&\n    navigator.userAgent.includes('Safari') &&\n    !navigator.userAgent.includes('Chrome')\n  );\n}\n\n/**\n * This method checks if indexedDB is supported by current browser/service worker context\n * @return true if indexedDB is supported by current browser/service worker context\n */\nexport function isIndexedDBAvailable(): boolean {\n  try {\n    return typeof indexedDB === 'object';\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\n * if errors occur during the database open operation.\n *\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\n * private browsing)\n */\nexport function validateIndexedDBOpenable(): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    try {\n      let preExist: boolean = true;\n      const DB_CHECK_NAME =\n        'validate-browser-context-for-indexeddb-analytics-module';\n      const request = self.indexedDB.open(DB_CHECK_NAME);\n      request.onsuccess = () => {\n        request.result.close();\n        // delete database only when it doesn't pre-exist\n        if (!preExist) {\n          self.indexedDB.deleteDatabase(DB_CHECK_NAME);\n        }\n        resolve(true);\n      };\n      request.onupgradeneeded = () => {\n        preExist = false;\n      };\n\n      request.onerror = () => {\n        reject(request.error?.message || '');\n      };\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n/**\n *\n * This method checks whether cookie is enabled within current browser\n * @return true if cookie is enabled within current browser\n */\nexport function areCookiesEnabled(): boolean {\n  if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\n    return false;\n  }\n  return true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Standardized Firebase Error.\n *\n * Usage:\n *\n *   // Typescript string literals for type-safe codes\n *   type Err =\n *     'unknown' |\n *     'object-not-found'\n *     ;\n *\n *   // Closure enum for type-safe error codes\n *   // at-enum {string}\n *   var Err = {\n *     UNKNOWN: 'unknown',\n *     OBJECT_NOT_FOUND: 'object-not-found',\n *   }\n *\n *   let errors: Map<Err, string> = {\n *     'generic-error': \"Unknown error\",\n *     'file-not-found': \"Could not find file: {$file}\",\n *   };\n *\n *   // Type-safe function - must pass a valid error code as param.\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\n *\n *   ...\n *   throw error.create(Err.GENERIC);\n *   ...\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\n *   ...\n *   // Service: Could not file file: foo.txt (service/file-not-found).\n *\n *   catch (e) {\n *     assert(e.message === \"Could not find file: foo.txt.\");\n *     if ((e as FirebaseError)?.code === 'service/file-not-found') {\n *       console.log(\"Could not read file: \" + e['file']);\n *     }\n *   }\n */\n\nexport type ErrorMap<ErrorCode extends string> = {\n  readonly [K in ErrorCode]: string;\n};\n\nconst ERROR_NAME = 'FirebaseError';\n\nexport interface StringLike {\n  toString(): string;\n}\n\nexport interface ErrorData {\n  [key: string]: unknown;\n}\n\n// Based on code from:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\nexport class FirebaseError extends Error {\n  /** The custom name for all FirebaseErrors. */\n  readonly name: string = ERROR_NAME;\n\n  constructor(\n    /** The error code for this error. */\n    readonly code: string,\n    message: string,\n    /** Custom data for this error. */\n    public customData?: Record<string, unknown>\n  ) {\n    super(message);\n\n    // Fix For ES5\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, FirebaseError.prototype);\n\n    // Maintains proper stack trace for where our error was thrown.\n    // Only available on V8.\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ErrorFactory.prototype.create);\n    }\n  }\n}\n\nexport class ErrorFactory<\n  ErrorCode extends string,\n  ErrorParams extends { readonly [K in ErrorCode]?: ErrorData } = {}\n> {\n  constructor(\n    private readonly service: string,\n    private readonly serviceName: string,\n    private readonly errors: ErrorMap<ErrorCode>\n  ) {}\n\n  create<K extends ErrorCode>(\n    code: K,\n    ...data: K extends keyof ErrorParams ? [ErrorParams[K]] : []\n  ): FirebaseError {\n    const customData = (data[0] as ErrorData) || {};\n    const fullCode = `${this.service}/${code}`;\n    const template = this.errors[code];\n\n    const message = template ? replaceTemplate(template, customData) : 'Error';\n    // Service Name: Error message (service/code).\n    const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\n\n    const error = new FirebaseError(fullCode, fullMessage, customData);\n\n    return error;\n  }\n}\n\nfunction replaceTemplate(template: string, data: ErrorData): string {\n  return template.replace(PATTERN, (_, key) => {\n    const value = data[key];\n    return value != null ? String(value) : `<${key}?>`;\n  });\n}\n\nconst PATTERN = /\\{\\$([^}]+)}/g;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Evaluates a JSON string into a javascript object.\n *\n * @param {string} str A string containing JSON.\n * @return {*} The javascript object representing the specified JSON.\n */\nexport function jsonEval(str: string): unknown {\n  return JSON.parse(str);\n}\n\n/**\n * Returns JSON representing a javascript object.\n * @param {*} data Javascript object to be stringified.\n * @return {string} The JSON contents of the object.\n */\nexport function stringify(data: unknown): string {\n  return JSON.stringify(data);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Decode } from './crypt';\nimport { jsonEval } from './json';\n\ninterface Claims {\n  [key: string]: {};\n}\n\ninterface DecodedToken {\n  header: object;\n  claims: Claims;\n  data: object;\n  signature: string;\n}\n\n/**\n * Decodes a Firebase auth. token into constituent parts.\n *\n * Notes:\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const decode = function (token: string): DecodedToken {\n  let header = {},\n    claims: Claims = {},\n    data = {},\n    signature = '';\n\n  try {\n    const parts = token.split('.');\n    header = jsonEval(base64Decode(parts[0]) || '') as object;\n    claims = jsonEval(base64Decode(parts[1]) || '') as Claims;\n    signature = parts[2];\n    data = claims['d'] || {};\n    delete claims['d'];\n  } catch (e) {}\n\n  return {\n    header,\n    claims,\n    data,\n    signature\n  };\n};\n\ninterface DecodedToken {\n  header: object;\n  claims: Claims;\n  data: object;\n  signature: string;\n}\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isValidTimestamp = function (token: string): boolean {\n  const claims: Claims = decode(token).claims;\n  const now: number = Math.floor(new Date().getTime() / 1000);\n  let validSince: number = 0,\n    validUntil: number = 0;\n\n  if (typeof claims === 'object') {\n    if (claims.hasOwnProperty('nbf')) {\n      validSince = claims['nbf'] as number;\n    } else if (claims.hasOwnProperty('iat')) {\n      validSince = claims['iat'] as number;\n    }\n\n    if (claims.hasOwnProperty('exp')) {\n      validUntil = claims['exp'] as number;\n    } else {\n      // token will expire after 24h by default\n      validUntil = validSince + 86400;\n    }\n  }\n\n  return (\n    !!now &&\n    !!validSince &&\n    !!validUntil &&\n    now >= validSince &&\n    now <= validUntil\n  );\n};\n\n/**\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\n *\n * Notes:\n * - May return null if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const issuedAtTime = function (token: string): number | null {\n  const claims: Claims = decode(token).claims;\n  if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\n    return claims['iat'] as number;\n  }\n  return null;\n};\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isValidFormat = function (token: string): boolean {\n  const decoded = decode(token),\n    claims = decoded.claims;\n\n  return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\n};\n\n/**\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isAdmin = function (token: string): boolean {\n  const claims: Claims = decode(token).claims;\n  return typeof claims === 'object' && claims['admin'] === true;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function contains<T extends object>(obj: T, key: string): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexport function safeGet<T extends object, K extends keyof T>(\n  obj: T,\n  key: K\n): T[K] | undefined {\n  if (Object.prototype.hasOwnProperty.call(obj, key)) {\n    return obj[key];\n  } else {\n    return undefined;\n  }\n}\n\nexport function isEmpty(obj: object): obj is {} {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function map<K extends string, V, U>(\n  obj: { [key in K]: V },\n  fn: (value: V, key: K, obj: { [key in K]: V }) => U,\n  contextObj?: unknown\n): { [key in K]: U } {\n  const res: Partial<{ [key in K]: U }> = {};\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      res[key] = fn.call(contextObj, obj[key], key, obj);\n    }\n  }\n  return res as { [key in K]: U };\n}\n\n/**\n * Deep equal two objects. Support Arrays and Objects.\n */\nexport function deepEqual(a: object, b: object): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n  for (const k of aKeys) {\n    if (!bKeys.includes(k)) {\n      return false;\n    }\n\n    const aProp = (a as Record<string, unknown>)[k];\n    const bProp = (b as Record<string, unknown>)[k];\n    if (isObject(aProp) && isObject(bProp)) {\n      if (!deepEqual(aProp, bProp)) {\n        return false;\n      }\n    } else if (aProp !== bProp) {\n      return false;\n    }\n  }\n\n  for (const k of bKeys) {\n    if (!aKeys.includes(k)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction isObject(thing: unknown): thing is object {\n  return thing !== null && typeof thing === 'object';\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from './deferred';\n\n/**\n * Rejects if the given promise doesn't resolve in timeInMS milliseconds.\n * @internal\n */\nexport function promiseWithTimeout<T>(\n  promise: Promise<T>,\n  timeInMS = 2000\n): Promise<T> {\n  const deferredPromise = new Deferred<T>();\n  setTimeout(() => deferredPromise.reject('timeout!'), timeInMS);\n  promise.then(deferredPromise.resolve, deferredPromise.reject);\n  return deferredPromise.promise;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\n * params object (e.g. {arg: 'val', arg2: 'val2'})\n * Note: You must prepend it with ? when adding it to a URL.\n */\nexport function querystring(querystringParams: {\n  [key: string]: string | number;\n}): string {\n  const params = [];\n  for (const [key, value] of Object.entries(querystringParams)) {\n    if (Array.isArray(value)) {\n      value.forEach(arrayVal => {\n        params.push(\n          encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal)\n        );\n      });\n    } else {\n      params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n    }\n  }\n  return params.length ? '&' + params.join('&') : '';\n}\n\n/**\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\n * (e.g. {arg: 'val', arg2: 'val2'})\n */\nexport function querystringDecode(querystring: string): Record<string, string> {\n  const obj: Record<string, string> = {};\n  const tokens = querystring.replace(/^\\?/, '').split('&');\n\n  tokens.forEach(token => {\n    if (token) {\n      const [key, value] = token.split('=');\n      obj[decodeURIComponent(key)] = decodeURIComponent(value);\n    }\n  });\n  return obj;\n}\n\n/**\n * Extract the query string part of a URL, including the leading question mark (if present).\n */\nexport function extractQuerystring(url: string): string {\n  const queryStart = url.indexOf('?');\n  if (!queryStart) {\n    return '';\n  }\n  const fragmentStart = url.indexOf('#', queryStart);\n  return url.substring(\n    queryStart,\n    fragmentStart > 0 ? fragmentStart : undefined\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview SHA-1 cryptographic hash.\n * Variable names follow the notation in FIPS PUB 180-3:\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\n *\n * Usage:\n *   var sha1 = new sha1();\n *   sha1.update(bytes);\n *   var hash = sha1.digest();\n *\n * Performance:\n *   Chrome 23:   ~400 Mbit/s\n *   Firefox 16:  ~250 Mbit/s\n *\n */\n\n/**\n * SHA-1 cryptographic hash constructor.\n *\n * The properties declared here are discussed in the above algorithm document.\n * @constructor\n * @final\n * @struct\n */\nexport class Sha1 {\n  /**\n   * Holds the previous values of accumulated variables a-e in the compress_\n   * function.\n   * @private\n   */\n  private chain_: number[] = [];\n\n  /**\n   * A buffer holding the partially computed hash result.\n   * @private\n   */\n  private buf_: number[] = [];\n\n  /**\n   * An array of 80 bytes, each a part of the message to be hashed.  Referred to\n   * as the message schedule in the docs.\n   * @private\n   */\n  private W_: number[] = [];\n\n  /**\n   * Contains data needed to pad messages less than 64 bytes.\n   * @private\n   */\n  private pad_: number[] = [];\n\n  /**\n   * @private {number}\n   */\n  private inbuf_: number = 0;\n\n  /**\n   * @private {number}\n   */\n  private total_: number = 0;\n\n  blockSize: number;\n\n  constructor() {\n    this.blockSize = 512 / 8;\n\n    this.pad_[0] = 128;\n    for (let i = 1; i < this.blockSize; ++i) {\n      this.pad_[i] = 0;\n    }\n\n    this.reset();\n  }\n\n  reset(): void {\n    this.chain_[0] = 0x67452301;\n    this.chain_[1] = 0xefcdab89;\n    this.chain_[2] = 0x98badcfe;\n    this.chain_[3] = 0x10325476;\n    this.chain_[4] = 0xc3d2e1f0;\n\n    this.inbuf_ = 0;\n    this.total_ = 0;\n  }\n\n  /**\n   * Internal compress helper function.\n   * @param buf Block to compress.\n   * @param offset Offset of the block in the buffer.\n   * @private\n   */\n  compress_(buf: number[] | Uint8Array | string, offset?: number): void {\n    if (!offset) {\n      offset = 0;\n    }\n\n    const W = this.W_;\n\n    // get 16 big endian words\n    if (typeof buf === 'string') {\n      for (let i = 0; i < 16; i++) {\n        // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\n        // have a bug that turns the post-increment ++ operator into pre-increment\n        // during JIT compilation.  We have code that depends heavily on SHA-1 for\n        // correctness and which is affected by this bug, so I've removed all uses\n        // of post-increment ++ in which the result value is used.  We can revert\n        // this change once the Safari bug\n        // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\n        // most clients have been updated.\n        W[i] =\n          (buf.charCodeAt(offset) << 24) |\n          (buf.charCodeAt(offset + 1) << 16) |\n          (buf.charCodeAt(offset + 2) << 8) |\n          buf.charCodeAt(offset + 3);\n        offset += 4;\n      }\n    } else {\n      for (let i = 0; i < 16; i++) {\n        W[i] =\n          (buf[offset] << 24) |\n          (buf[offset + 1] << 16) |\n          (buf[offset + 2] << 8) |\n          buf[offset + 3];\n        offset += 4;\n      }\n    }\n\n    // expand to 80 words\n    for (let i = 16; i < 80; i++) {\n      const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n      W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\n    }\n\n    let a = this.chain_[0];\n    let b = this.chain_[1];\n    let c = this.chain_[2];\n    let d = this.chain_[3];\n    let e = this.chain_[4];\n    let f, k;\n\n    // TODO(user): Try to unroll this loop to speed up the computation.\n    for (let i = 0; i < 80; i++) {\n      if (i < 40) {\n        if (i < 20) {\n          f = d ^ (b & (c ^ d));\n          k = 0x5a827999;\n        } else {\n          f = b ^ c ^ d;\n          k = 0x6ed9eba1;\n        }\n      } else {\n        if (i < 60) {\n          f = (b & c) | (d & (b | c));\n          k = 0x8f1bbcdc;\n        } else {\n          f = b ^ c ^ d;\n          k = 0xca62c1d6;\n        }\n      }\n\n      const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\n      e = d;\n      d = c;\n      c = ((b << 30) | (b >>> 2)) & 0xffffffff;\n      b = a;\n      a = t;\n    }\n\n    this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\n    this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\n    this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\n    this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\n    this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\n  }\n\n  update(bytes?: number[] | Uint8Array | string, length?: number): void {\n    // TODO(johnlenz): tighten the function signature and remove this check\n    if (bytes == null) {\n      return;\n    }\n\n    if (length === undefined) {\n      length = bytes.length;\n    }\n\n    const lengthMinusBlock = length - this.blockSize;\n    let n = 0;\n    // Using local instead of member variables gives ~5% speedup on Firefox 16.\n    const buf = this.buf_;\n    let inbuf = this.inbuf_;\n\n    // The outer while loop should execute at most twice.\n    while (n < length) {\n      // When we have no data in the block to top up, we can directly process the\n      // input buffer (assuming it contains sufficient data). This gives ~25%\n      // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\n      // the data is provided in large chunks (or in multiples of 64 bytes).\n      if (inbuf === 0) {\n        while (n <= lengthMinusBlock) {\n          this.compress_(bytes, n);\n          n += this.blockSize;\n        }\n      }\n\n      if (typeof bytes === 'string') {\n        while (n < length) {\n          buf[inbuf] = bytes.charCodeAt(n);\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      } else {\n        while (n < length) {\n          buf[inbuf] = bytes[n];\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      }\n    }\n\n    this.inbuf_ = inbuf;\n    this.total_ += length;\n  }\n\n  /** @override */\n  digest(): number[] {\n    const digest: number[] = [];\n    let totalBits = this.total_ * 8;\n\n    // Add pad 0x80 0x00*.\n    if (this.inbuf_ < 56) {\n      this.update(this.pad_, 56 - this.inbuf_);\n    } else {\n      this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\n    }\n\n    // Add # bits.\n    for (let i = this.blockSize - 1; i >= 56; i--) {\n      this.buf_[i] = totalBits & 255;\n      totalBits /= 256; // Don't use bit-shifting here!\n    }\n\n    this.compress_(this.buf_);\n\n    let n = 0;\n    for (let i = 0; i < 5; i++) {\n      for (let j = 24; j >= 0; j -= 8) {\n        digest[n] = (this.chain_[i] >> j) & 255;\n        ++n;\n      }\n    }\n    return digest;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport type NextFn<T> = (value: T) => void;\nexport type ErrorFn = (error: Error) => void;\nexport type CompleteFn = () => void;\n\nexport interface Observer<T> {\n  // Called once for each value in a stream of values.\n  next: NextFn<T>;\n\n  // A stream terminates by a single call to EITHER error() or complete().\n  error: ErrorFn;\n\n  // No events will be sent to next() once complete() is called.\n  complete: CompleteFn;\n}\n\nexport type PartialObserver<T> = Partial<Observer<T>>;\n\n// TODO: Support also Unsubscribe.unsubscribe?\nexport type Unsubscribe = () => void;\n\n/**\n * The Subscribe interface has two forms - passing the inline function\n * callbacks, or a object interface with callback properties.\n */\nexport interface Subscribe<T> {\n  (next?: NextFn<T>, error?: ErrorFn, complete?: CompleteFn): Unsubscribe;\n  (observer: PartialObserver<T>): Unsubscribe;\n}\n\nexport interface Observable<T> {\n  // Subscribe method\n  subscribe: Subscribe<T>;\n}\n\nexport type Executor<T> = (observer: Observer<T>) => void;\n\n/**\n * Helper to make a Subscribe function (just like Promise helps make a\n * Thenable).\n *\n * @param executor Function which can make calls to a single Observer\n *     as a proxy.\n * @param onNoObservers Callback when count of Observers goes to zero.\n */\nexport function createSubscribe<T>(\n  executor: Executor<T>,\n  onNoObservers?: Executor<T>\n): Subscribe<T> {\n  const proxy = new ObserverProxy<T>(executor, onNoObservers);\n  return proxy.subscribe.bind(proxy);\n}\n\n/**\n * Implement fan-out for any number of Observers attached via a subscribe\n * function.\n */\nclass ObserverProxy<T> implements Observer<T> {\n  private observers: Array<Observer<T>> | undefined = [];\n  private unsubscribes: Unsubscribe[] = [];\n  private onNoObservers: Executor<T> | undefined;\n  private observerCount = 0;\n  // Micro-task scheduling by calling task.then().\n  private task = Promise.resolve();\n  private finalized = false;\n  private finalError?: Error;\n\n  /**\n   * @param executor Function which can make calls to a single Observer\n   *     as a proxy.\n   * @param onNoObservers Callback when count of Observers goes to zero.\n   */\n  constructor(executor: Executor<T>, onNoObservers?: Executor<T>) {\n    this.onNoObservers = onNoObservers;\n    // Call the executor asynchronously so subscribers that are called\n    // synchronously after the creation of the subscribe function\n    // can still receive the very first value generated in the executor.\n    this.task\n      .then(() => {\n        executor(this);\n      })\n      .catch(e => {\n        this.error(e);\n      });\n  }\n\n  next(value: T): void {\n    this.forEachObserver((observer: Observer<T>) => {\n      observer.next(value);\n    });\n  }\n\n  error(error: Error): void {\n    this.forEachObserver((observer: Observer<T>) => {\n      observer.error(error);\n    });\n    this.close(error);\n  }\n\n  complete(): void {\n    this.forEachObserver((observer: Observer<T>) => {\n      observer.complete();\n    });\n    this.close();\n  }\n\n  /**\n   * Subscribe function that can be used to add an Observer to the fan-out list.\n   *\n   * - We require that no event is sent to a subscriber sychronously to their\n   *   call to subscribe().\n   */\n  subscribe(\n    nextOrObserver?: NextFn<T> | PartialObserver<T>,\n    error?: ErrorFn,\n    complete?: CompleteFn\n  ): Unsubscribe {\n    let observer: Observer<T>;\n\n    if (\n      nextOrObserver === undefined &&\n      error === undefined &&\n      complete === undefined\n    ) {\n      throw new Error('Missing Observer.');\n    }\n\n    // Assemble an Observer object when passed as callback functions.\n    if (\n      implementsAnyMethods(nextOrObserver as { [key: string]: unknown }, [\n        'next',\n        'error',\n        'complete'\n      ])\n    ) {\n      observer = nextOrObserver as Observer<T>;\n    } else {\n      observer = {\n        next: nextOrObserver as NextFn<T>,\n        error,\n        complete\n      } as Observer<T>;\n    }\n\n    if (observer.next === undefined) {\n      observer.next = noop as NextFn<T>;\n    }\n    if (observer.error === undefined) {\n      observer.error = noop as ErrorFn;\n    }\n    if (observer.complete === undefined) {\n      observer.complete = noop as CompleteFn;\n    }\n\n    const unsub = this.unsubscribeOne.bind(this, this.observers!.length);\n\n    // Attempt to subscribe to a terminated Observable - we\n    // just respond to the Observer with the final error or complete\n    // event.\n    if (this.finalized) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.task.then(() => {\n        try {\n          if (this.finalError) {\n            observer.error(this.finalError);\n          } else {\n            observer.complete();\n          }\n        } catch (e) {\n          // nothing\n        }\n        return;\n      });\n    }\n\n    this.observers!.push(observer as Observer<T>);\n\n    return unsub;\n  }\n\n  // Unsubscribe is synchronous - we guarantee that no events are sent to\n  // any unsubscribed Observer.\n  private unsubscribeOne(i: number): void {\n    if (this.observers === undefined || this.observers[i] === undefined) {\n      return;\n    }\n\n    delete this.observers[i];\n\n    this.observerCount -= 1;\n    if (this.observerCount === 0 && this.onNoObservers !== undefined) {\n      this.onNoObservers(this);\n    }\n  }\n\n  private forEachObserver(fn: (observer: Observer<T>) => void): void {\n    if (this.finalized) {\n      // Already closed by previous event....just eat the additional values.\n      return;\n    }\n\n    // Since sendOne calls asynchronously - there is no chance that\n    // this.observers will become undefined.\n    for (let i = 0; i < this.observers!.length; i++) {\n      this.sendOne(i, fn);\n    }\n  }\n\n  // Call the Observer via one of it's callback function. We are careful to\n  // confirm that the observe has not been unsubscribed since this asynchronous\n  // function had been queued.\n  private sendOne(i: number, fn: (observer: Observer<T>) => void): void {\n    // Execute the callback asynchronously\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.task.then(() => {\n      if (this.observers !== undefined && this.observers[i] !== undefined) {\n        try {\n          fn(this.observers[i]);\n        } catch (e) {\n          // Ignore exceptions raised in Observers or missing methods of an\n          // Observer.\n          // Log error to console. b/31404806\n          if (typeof console !== 'undefined' && console.error) {\n            console.error(e);\n          }\n        }\n      }\n    });\n  }\n\n  private close(err?: Error): void {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    if (err !== undefined) {\n      this.finalError = err;\n    }\n    // Proxy is no longer needed - garbage collect references\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.task.then(() => {\n      this.observers = undefined;\n      this.onNoObservers = undefined;\n    });\n  }\n}\n\n/** Turn synchronous function into one called asynchronously. */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function async(fn: Function, onError?: ErrorFn): Function {\n  return (...args: unknown[]) => {\n    Promise.resolve(true)\n      .then(() => {\n        fn(...args);\n      })\n      .catch((error: Error) => {\n        if (onError) {\n          onError(error);\n        }\n      });\n  };\n}\n\n/**\n * Return true if the object passed in implements any of the named methods.\n */\nfunction implementsAnyMethods(\n  obj: { [key: string]: unknown },\n  methods: string[]\n): boolean {\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n\n  for (const method of methods) {\n    if (method in obj && typeof obj[method] === 'function') {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction noop(): void {\n  // do nothing\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Check to make sure the appropriate number of arguments are provided for a public function.\n * Throws an error if it fails.\n *\n * @param fnName The function name\n * @param minCount The minimum number of arguments to allow for the function call\n * @param maxCount The maximum number of argument to allow for the function call\n * @param argCount The actual number of arguments provided.\n */\nexport const validateArgCount = function (\n  fnName: string,\n  minCount: number,\n  maxCount: number,\n  argCount: number\n): void {\n  let argError;\n  if (argCount < minCount) {\n    argError = 'at least ' + minCount;\n  } else if (argCount > maxCount) {\n    argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\n  }\n  if (argError) {\n    const error =\n      fnName +\n      ' failed: Was called with ' +\n      argCount +\n      (argCount === 1 ? ' argument.' : ' arguments.') +\n      ' Expects ' +\n      argError +\n      '.';\n    throw new Error(error);\n  }\n};\n\n/**\n * Generates a string to prefix an error message about failed argument validation\n *\n * @param fnName The function name\n * @param argName The name of the argument\n * @return The prefix to add to the error thrown for validation.\n */\nexport function errorPrefix(fnName: string, argName: string): string {\n  return `${fnName} failed: ${argName} argument `;\n}\n\n/**\n * @param fnName\n * @param argumentNumber\n * @param namespace\n * @param optional\n */\nexport function validateNamespace(\n  fnName: string,\n  namespace: string,\n  optional: boolean\n): void {\n  if (optional && !namespace) {\n    return;\n  }\n  if (typeof namespace !== 'string') {\n    //TODO: I should do more validation here. We only allow certain chars in namespaces.\n    throw new Error(\n      errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.'\n    );\n  }\n}\n\nexport function validateCallback(\n  fnName: string,\n  argumentName: string,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback: Function,\n  optional: boolean\n): void {\n  if (optional && !callback) {\n    return;\n  }\n  if (typeof callback !== 'function') {\n    throw new Error(\n      errorPrefix(fnName, argumentName) + 'must be a valid function.'\n    );\n  }\n}\n\nexport function validateContextObject(\n  fnName: string,\n  argumentName: string,\n  context: unknown,\n  optional: boolean\n): void {\n  if (optional && !context) {\n    return;\n  }\n  if (typeof context !== 'object' || context === null) {\n    throw new Error(\n      errorPrefix(fnName, argumentName) + 'must be a valid context object.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from './assert';\n\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\n// so it's been modified.\n\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\n// pair).\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\n\n/**\n * @param {string} str\n * @return {Array}\n */\nexport const stringToByteArray = function (str: string): number[] {\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n\n    // Is this the lead surrogate in a surrogate pair?\n    if (c >= 0xd800 && c <= 0xdbff) {\n      const high = c - 0xd800; // the high 10 bits.\n      i++;\n      assert(i < str.length, 'Surrogate pair missing trail surrogate.');\n      const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\n      c = 0x10000 + (high << 10) + low;\n    }\n\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (c < 65536) {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Calculate length without actually converting; useful for doing cheaper validation.\n * @param {string} str\n * @return {number}\n */\nexport const stringLength = function (str: string): number {\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charCodeAt(i);\n    if (c < 128) {\n      p++;\n    } else if (c < 2048) {\n      p += 2;\n    } else if (c >= 0xd800 && c <= 0xdbff) {\n      // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\n      p += 4;\n      i++; // skip trail surrogate.\n    } else {\n      p += 3;\n    }\n  }\n  return p;\n};\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Copied from https://stackoverflow.com/a/2117523\n * Generates a new uuid.\n * @public\n */\nexport const uuidv4 = function (): string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16) | 0,\n      v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n};\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The amount of milliseconds to exponentially increase.\n */\nconst DEFAULT_INTERVAL_MILLIS = 1000;\n\n/**\n * The factor to backoff by.\n * Should be a number greater than 1.\n */\nconst DEFAULT_BACKOFF_FACTOR = 2;\n\n/**\n * The maximum milliseconds to increase to.\n *\n * <p>Visible for testing\n */\nexport const MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.\n\n/**\n * The percentage of backoff time to randomize by.\n * See\n * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic\n * for context.\n *\n * <p>Visible for testing\n */\nexport const RANDOM_FACTOR = 0.5;\n\n/**\n * Based on the backoff method from\n * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.\n * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.\n */\nexport function calculateBackoffMillis(\n  backoffCount: number,\n  intervalMillis: number = DEFAULT_INTERVAL_MILLIS,\n  backoffFactor: number = DEFAULT_BACKOFF_FACTOR\n): number {\n  // Calculates an exponentially increasing value.\n  // Deviation: calculates value from count and a constant interval, so we only need to save value\n  // and count to restore state.\n  const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);\n\n  // A random \"fuzz\" to avoid waves of retries.\n  // Deviation: randomFactor is required.\n  const randomWait = Math.round(\n    // A fraction of the backoff value to add/subtract.\n    // Deviation: changes multiplication order to improve readability.\n    RANDOM_FACTOR *\n      currBaseValue *\n      // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines\n      // if we add or subtract.\n      (Math.random() - 0.5) *\n      2\n  );\n\n  // Limits backoff to max to avoid effectively permanent backoff.\n  return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Provide English ordinal letters after a number\n */\nexport function ordinal(i: number): string {\n  if (!Number.isFinite(i)) {\n    return `${i}`;\n  }\n  return i + indicator(i);\n}\n\nfunction indicator(i: number): string {\n  i = Math.abs(i);\n  const cent = i % 100;\n  if (cent >= 10 && cent <= 20) {\n    return 'th';\n  }\n  const dec = i % 10;\n  if (dec === 1) {\n    return 'st';\n  }\n  if (dec === 2) {\n    return 'nd';\n  }\n  if (dec === 3) {\n    return 'rd';\n  }\n  return 'th';\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Compat<T> {\n  _delegate: T;\n}\n\nexport function getModularInstance<ExpService>(\n  service: Compat<ExpService> | ExpService\n): ExpService {\n  if (service && (service as Compat<ExpService>)._delegate) {\n    return (service as Compat<ExpService>)._delegate;\n  } else {\n    return service as ExpService;\n  }\n}\n","import { _construct } from \"./_construct.js\";\nimport { _get_prototype_of } from \"./_get_prototype_of.js\";\nimport { _is_native_function } from \"./_is_native_function.js\";\nimport { _set_prototype_of } from \"./_set_prototype_of.js\";\n\nexport function _wrap_native_super(Class) {\n    var _cache = typeof Map === \"function\" ? new Map() : undefined;\n    _wrap_native_super = function(Class) {\n        if (Class === null || !_is_native_function(Class)) return Class;\n        if (typeof Class !== \"function\") throw new TypeError(\"Super expression must either be null or a function\");\n        if (typeof _cache !== \"undefined\") {\n            if (_cache.has(Class)) return _cache.get(Class);\n            _cache.set(Class, Wrapper);\n        }\n\n        function Wrapper() {\n            return _construct(Class, arguments, _get_prototype_of(this).constructor);\n        }\n        Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } });\n\n        return _set_prototype_of(Wrapper, Class);\n    };\n\n    return _wrap_native_super(Class);\n}\nexport { _wrap_native_super as _ };\n","import { _is_native_reflect_construct } from \"./_is_native_reflect_construct.js\";\nimport { _set_prototype_of } from \"./_set_prototype_of.js\";\nexport function _construct(Parent, args, Class) {\n    if (_is_native_reflect_construct()) _construct = Reflect.construct;\n    else {\n        _construct = function construct(Parent, args, Class) {\n            var a = [null];\n            a.push.apply(a, args);\n            var Constructor = Function.bind.apply(Parent, a);\n            var instance = new Constructor();\n\n            if (Class) _set_prototype_of(instance, Class.prototype);\n\n            return instance;\n        };\n    }\n\n    return _construct.apply(null, arguments);\n}\nexport { _construct as _ };\n","export function _is_native_function(fn) {\n    return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\nexport { _is_native_function as _ };\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A container for all of the Logger instances\r\n */\r\nconst instances = [];\r\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\r\n    LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\r\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\r\n    LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\r\n    LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\r\n    LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\r\n})(LogLevel || (LogLevel = {}));\r\nconst levelStringToEnum = {\r\n    'debug': LogLevel.DEBUG,\r\n    'verbose': LogLevel.VERBOSE,\r\n    'info': LogLevel.INFO,\r\n    'warn': LogLevel.WARN,\r\n    'error': LogLevel.ERROR,\r\n    'silent': LogLevel.SILENT\r\n};\r\n/**\r\n * The default log level\r\n */\r\nconst defaultLogLevel = LogLevel.INFO;\r\n/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */\r\nconst ConsoleMethod = {\r\n    [LogLevel.DEBUG]: 'log',\r\n    [LogLevel.VERBOSE]: 'log',\r\n    [LogLevel.INFO]: 'info',\r\n    [LogLevel.WARN]: 'warn',\r\n    [LogLevel.ERROR]: 'error'\r\n};\r\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\r\nconst defaultLogHandler = (instance, logType, ...args) => {\r\n    if (logType < instance.logLevel) {\r\n        return;\r\n    }\r\n    const now = new Date().toISOString();\r\n    const method = ConsoleMethod[logType];\r\n    if (method) {\r\n        console[method](`[${now}]  ${instance.name}:`, ...args);\r\n    }\r\n    else {\r\n        throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);\r\n    }\r\n};\r\nclass Logger {\r\n    /**\r\n     * Gives you an instance of a Logger to capture messages according to\r\n     * Firebase's logging scheme.\r\n     *\r\n     * @param name The name that the logs will be associated with\r\n     */\r\n    constructor(name) {\r\n        this.name = name;\r\n        /**\r\n         * The log level of the given Logger instance.\r\n         */\r\n        this._logLevel = defaultLogLevel;\r\n        /**\r\n         * The main (internal) log handler for the Logger instance.\r\n         * Can be set to a new function in internal package code but not by user.\r\n         */\r\n        this._logHandler = defaultLogHandler;\r\n        /**\r\n         * The optional, additional, user-defined log handler for the Logger instance.\r\n         */\r\n        this._userLogHandler = null;\r\n        /**\r\n         * Capture the current instance for later use\r\n         */\r\n        instances.push(this);\r\n    }\r\n    get logLevel() {\r\n        return this._logLevel;\r\n    }\r\n    set logLevel(val) {\r\n        if (!(val in LogLevel)) {\r\n            throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\r\n        }\r\n        this._logLevel = val;\r\n    }\r\n    // Workaround for setter/getter having to be the same type.\r\n    setLogLevel(val) {\r\n        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\r\n    }\r\n    get logHandler() {\r\n        return this._logHandler;\r\n    }\r\n    set logHandler(val) {\r\n        if (typeof val !== 'function') {\r\n            throw new TypeError('Value assigned to `logHandler` must be a function');\r\n        }\r\n        this._logHandler = val;\r\n    }\r\n    get userLogHandler() {\r\n        return this._userLogHandler;\r\n    }\r\n    set userLogHandler(val) {\r\n        this._userLogHandler = val;\r\n    }\r\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\r\n    debug(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\r\n        this._logHandler(this, LogLevel.DEBUG, ...args);\r\n    }\r\n    log(...args) {\r\n        this._userLogHandler &&\r\n            this._userLogHandler(this, LogLevel.VERBOSE, ...args);\r\n        this._logHandler(this, LogLevel.VERBOSE, ...args);\r\n    }\r\n    info(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\r\n        this._logHandler(this, LogLevel.INFO, ...args);\r\n    }\r\n    warn(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\r\n        this._logHandler(this, LogLevel.WARN, ...args);\r\n    }\r\n    error(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\r\n        this._logHandler(this, LogLevel.ERROR, ...args);\r\n    }\r\n}\r\nfunction setLogLevel(level) {\r\n    instances.forEach(inst => {\r\n        inst.setLogLevel(level);\r\n    });\r\n}\r\nfunction setUserLogHandler(logCallback, options) {\r\n    for (const instance of instances) {\r\n        let customLogLevel = null;\r\n        if (options && options.level) {\r\n            customLogLevel = levelStringToEnum[options.level];\r\n        }\r\n        if (logCallback === null) {\r\n            instance.userLogHandler = null;\r\n        }\r\n        else {\r\n            instance.userLogHandler = (instance, level, ...args) => {\r\n                const message = args\r\n                    .map(arg => {\r\n                    if (arg == null) {\r\n                        return null;\r\n                    }\r\n                    else if (typeof arg === 'string') {\r\n                        return arg;\r\n                    }\r\n                    else if (typeof arg === 'number' || typeof arg === 'boolean') {\r\n                        return arg.toString();\r\n                    }\r\n                    else if (arg instanceof Error) {\r\n                        return arg.message;\r\n                    }\r\n                    else {\r\n                        try {\r\n                            return JSON.stringify(arg);\r\n                        }\r\n                        catch (ignored) {\r\n                            return null;\r\n                        }\r\n                    }\r\n                })\r\n                    .filter(arg => arg)\r\n                    .join(' ');\r\n                if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {\r\n                    logCallback({\r\n                        level: LogLevel[level].toLowerCase(),\r\n                        message,\r\n                        args,\r\n                        type: instance.name\r\n                    });\r\n                }\r\n            };\r\n        }\r\n    }\r\n}\n\nexport { LogLevel, Logger, setLogLevel, setUserLogHandler };\n//# sourceMappingURL=index.esm2017.js.map\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type LogLevelString =\n  | 'debug'\n  | 'verbose'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'silent';\n\nexport interface LogOptions {\n  level: LogLevelString;\n}\n\nexport type LogCallback = (callbackParams: LogCallbackParams) => void;\n\nexport interface LogCallbackParams {\n  level: LogLevelString;\n  message: string;\n  args: unknown[];\n  type: string;\n}\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel {\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\nconst levelStringToEnum: { [key in LogLevelString]: LogLevel } = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: unknown[]\n) => void;\n\n/**\n * By default, `console.debug` is not displayed in the developer console (in\n * chrome). To avoid forcing users to have to opt-in to these logs twice\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n * logs to the `console.log` function.\n */\nconst ConsoleMethod = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args): void => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType as keyof typeof ConsoleMethod];\n  if (method) {\n    console[method as 'log' | 'info' | 'warn' | 'error'](\n      `[${now}]  ${instance.name}:`,\n      ...args\n    );\n  } else {\n    throw new Error(\n      `Attempted to log a message with an invalid logType (value: ${logType})`\n    );\n  }\n};\n\nexport class Logger {\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) {\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n  }\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n    this._logLevel = val;\n  }\n\n  // Workaround for setter/getter having to be the same type.\n  setLogLevel(val: LogLevel | LogLevelString): void {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  }\n\n  /**\n   * The main (internal) log handler for the Logger instance.\n   * Can be set to a new function in internal package code but not by user.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler {\n    return this._logHandler;\n  }\n  set logHandler(val: LogHandler) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n\n  /**\n   * The optional, additional, user-defined log handler for the Logger instance.\n   */\n  private _userLogHandler: LogHandler | null = null;\n  get userLogHandler(): LogHandler | null {\n    return this._userLogHandler;\n  }\n  set userLogHandler(val: LogHandler | null) {\n    this._userLogHandler = val;\n  }\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args: unknown[]): void {\n    this._userLogHandler &&\n      this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\n\nexport function setLogLevel(level: LogLevelString | LogLevel): void {\n  instances.forEach(inst => {\n    inst.setLogLevel(level);\n  });\n}\n\nexport function setUserLogHandler(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  for (const instance of instances) {\n    let customLogLevel: LogLevel | null = null;\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = (\n        instance: Logger,\n        level: LogLevel,\n        ...args: unknown[]\n      ) => {\n        const message = args\n          .map(arg => {\n            if (arg == null) {\n              return null;\n            } else if (typeof arg === 'string') {\n              return arg;\n            } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n              return arg.toString();\n            } else if (arg instanceof Error) {\n              return arg.message;\n            } else {\n              try {\n                return JSON.stringify(arg);\n              } catch (ignored) {\n                return null;\n              }\n            }\n          })\n          .filter(arg => arg)\n          .join(' ');\n        if (level >= (customLogLevel ?? instance.logLevel)) {\n          logCallback({\n            level: LogLevel[level].toLowerCase() as LogLevelString,\n            message,\n            args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  }\n}\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","import { _define_property } from \"./_define_property.js\";\n\nexport function _object_spread(target) {\n    for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(\n                Object.getOwnPropertySymbols(source).filter(function(sym) {\n                    return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n                })\n            );\n        }\n\n        ownKeys.forEach(function(key) {\n            _define_property(target, key, source[key]);\n        });\n    }\n\n    return target;\n}\nexport { _object_spread as _ };\n","function ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n\n    return keys;\n}\nexport function _object_spread_props(target, source) {\n    source = source != null ? source : {};\n\n    if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    else {\n        ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n\n    return target;\n}\nexport { _object_spread_props as _ };\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { ErrorFactory, isBrowserExtension, isMobileCordova, isReactNative, FirebaseError, querystring, getModularInstance, base64Decode, getUA, isIE, createSubscribe, deepEqual, querystringDecode, extractQuerystring, isEmpty, getExperimentalSetting, getDefaultEmulatorHost } from '@firebase/util';\nimport { SDK_VERSION, _getProvider, _registerComponent, registerVersion, getApp } from '@firebase/app';\nimport { __rest } from 'tslib';\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An enum of factors that may be used for multifactor authentication.\r\n *\r\n * @public\r\n */\r\nconst FactorId = {\r\n    /** Phone as second factor */\r\n    PHONE: 'phone',\r\n    TOTP: 'totp'\r\n};\r\n/**\r\n * Enumeration of supported providers.\r\n *\r\n * @public\r\n */\r\nconst ProviderId = {\r\n    /** Facebook provider ID */\r\n    FACEBOOK: 'facebook.com',\r\n    /** GitHub provider ID */\r\n    GITHUB: 'github.com',\r\n    /** Google provider ID */\r\n    GOOGLE: 'google.com',\r\n    /** Password provider */\r\n    PASSWORD: 'password',\r\n    /** Phone provider */\r\n    PHONE: 'phone',\r\n    /** Twitter provider ID */\r\n    TWITTER: 'twitter.com'\r\n};\r\n/**\r\n * Enumeration of supported sign-in methods.\r\n *\r\n * @public\r\n */\r\nconst SignInMethod = {\r\n    /** Email link sign in method */\r\n    EMAIL_LINK: 'emailLink',\r\n    /** Email/password sign in method */\r\n    EMAIL_PASSWORD: 'password',\r\n    /** Facebook sign in method */\r\n    FACEBOOK: 'facebook.com',\r\n    /** GitHub sign in method */\r\n    GITHUB: 'github.com',\r\n    /** Google sign in method */\r\n    GOOGLE: 'google.com',\r\n    /** Phone sign in method */\r\n    PHONE: 'phone',\r\n    /** Twitter sign in method */\r\n    TWITTER: 'twitter.com'\r\n};\r\n/**\r\n * Enumeration of supported operation types.\r\n *\r\n * @public\r\n */\r\nconst OperationType = {\r\n    /** Operation involving linking an additional provider to an already signed-in user. */\r\n    LINK: 'link',\r\n    /** Operation involving using a provider to reauthenticate an already signed-in user. */\r\n    REAUTHENTICATE: 'reauthenticate',\r\n    /** Operation involving signing in a user. */\r\n    SIGN_IN: 'signIn'\r\n};\r\n/**\r\n * An enumeration of the possible email action types.\r\n *\r\n * @public\r\n */\r\nconst ActionCodeOperation = {\r\n    /** The email link sign-in action. */\r\n    EMAIL_SIGNIN: 'EMAIL_SIGNIN',\r\n    /** The password reset action. */\r\n    PASSWORD_RESET: 'PASSWORD_RESET',\r\n    /** The email revocation action. */\r\n    RECOVER_EMAIL: 'RECOVER_EMAIL',\r\n    /** The revert second factor addition email action. */\r\n    REVERT_SECOND_FACTOR_ADDITION: 'REVERT_SECOND_FACTOR_ADDITION',\r\n    /** The revert second factor addition email action. */\r\n    VERIFY_AND_CHANGE_EMAIL: 'VERIFY_AND_CHANGE_EMAIL',\r\n    /** The email verification action. */\r\n    VERIFY_EMAIL: 'VERIFY_EMAIL'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction _debugErrorMap() {\r\n    return {\r\n        [\"admin-restricted-operation\" /* AuthErrorCode.ADMIN_ONLY_OPERATION */]: 'This operation is restricted to administrators only.',\r\n        [\"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */]: '',\r\n        [\"app-not-authorized\" /* AuthErrorCode.APP_NOT_AUTHORIZED */]: \"This app, identified by the domain where it's hosted, is not \" +\r\n            'authorized to use Firebase Authentication with the provided API key. ' +\r\n            'Review your key configuration in the Google API console.',\r\n        [\"app-not-installed\" /* AuthErrorCode.APP_NOT_INSTALLED */]: 'The requested mobile application corresponding to the identifier (' +\r\n            'Android package name or iOS bundle ID) provided is not installed on ' +\r\n            'this device.',\r\n        [\"captcha-check-failed\" /* AuthErrorCode.CAPTCHA_CHECK_FAILED */]: 'The reCAPTCHA response token provided is either invalid, expired, ' +\r\n            'already used or the domain associated with it does not match the list ' +\r\n            'of whitelisted domains.',\r\n        [\"code-expired\" /* AuthErrorCode.CODE_EXPIRED */]: 'The SMS code has expired. Please re-send the verification code to try ' +\r\n            'again.',\r\n        [\"cordova-not-ready\" /* AuthErrorCode.CORDOVA_NOT_READY */]: 'Cordova framework is not ready.',\r\n        [\"cors-unsupported\" /* AuthErrorCode.CORS_UNSUPPORTED */]: 'This browser is not supported.',\r\n        [\"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */]: 'This credential is already associated with a different user account.',\r\n        [\"custom-token-mismatch\" /* AuthErrorCode.CREDENTIAL_MISMATCH */]: 'The custom token corresponds to a different audience.',\r\n        [\"requires-recent-login\" /* AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */]: 'This operation is sensitive and requires recent authentication. Log in ' +\r\n            'again before retrying this request.',\r\n        [\"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */]: 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' +\r\n            'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' +\r\n            'starting any other Firebase SDK.',\r\n        [\"dynamic-link-not-activated\" /* AuthErrorCode.DYNAMIC_LINK_NOT_ACTIVATED */]: 'Please activate Dynamic Links in the Firebase Console and agree to the terms and ' +\r\n            'conditions.',\r\n        [\"email-change-needs-verification\" /* AuthErrorCode.EMAIL_CHANGE_NEEDS_VERIFICATION */]: 'Multi-factor users must always have a verified email.',\r\n        [\"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */]: 'The email address is already in use by another account.',\r\n        [\"emulator-config-failed\" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */]: 'Auth instance has already been used to make a network call. Auth can ' +\r\n            'no longer be configured to use the emulator. Try calling ' +\r\n            '\"connectAuthEmulator()\" sooner.',\r\n        [\"expired-action-code\" /* AuthErrorCode.EXPIRED_OOB_CODE */]: 'The action code has expired.',\r\n        [\"cancelled-popup-request\" /* AuthErrorCode.EXPIRED_POPUP_REQUEST */]: 'This operation has been cancelled due to another conflicting popup being opened.',\r\n        [\"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */]: 'An internal AuthError has occurred.',\r\n        [\"invalid-app-credential\" /* AuthErrorCode.INVALID_APP_CREDENTIAL */]: 'The phone verification request contains an invalid application verifier.' +\r\n            ' The reCAPTCHA token response is either invalid or expired.',\r\n        [\"invalid-app-id\" /* AuthErrorCode.INVALID_APP_ID */]: 'The mobile app identifier is not registed for the current project.',\r\n        [\"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */]: \"This user's credential isn't valid for this project. This can happen \" +\r\n            \"if the user's token has been tampered with, or if the user isn't for \" +\r\n            'the project associated with this API key.',\r\n        [\"invalid-auth-event\" /* AuthErrorCode.INVALID_AUTH_EVENT */]: 'An internal AuthError has occurred.',\r\n        [\"invalid-verification-code\" /* AuthErrorCode.INVALID_CODE */]: 'The SMS verification code used to create the phone auth credential is ' +\r\n            'invalid. Please resend the verification code sms and be sure to use the ' +\r\n            'verification code provided by the user.',\r\n        [\"invalid-continue-uri\" /* AuthErrorCode.INVALID_CONTINUE_URI */]: 'The continue URL provided in the request is invalid.',\r\n        [\"invalid-cordova-configuration\" /* AuthErrorCode.INVALID_CORDOVA_CONFIGURATION */]: 'The following Cordova plugins must be installed to enable OAuth sign-in: ' +\r\n            'cordova-plugin-buildinfo, cordova-universal-links-plugin, ' +\r\n            'cordova-plugin-browsertab, cordova-plugin-inappbrowser and ' +\r\n            'cordova-plugin-customurlscheme.',\r\n        [\"invalid-custom-token\" /* AuthErrorCode.INVALID_CUSTOM_TOKEN */]: 'The custom token format is incorrect. Please check the documentation.',\r\n        [\"invalid-dynamic-link-domain\" /* AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN */]: 'The provided dynamic link domain is not configured or authorized for the current project.',\r\n        [\"invalid-email\" /* AuthErrorCode.INVALID_EMAIL */]: 'The email address is badly formatted.',\r\n        [\"invalid-emulator-scheme\" /* AuthErrorCode.INVALID_EMULATOR_SCHEME */]: 'Emulator URL must start with a valid scheme (http:// or https://).',\r\n        [\"invalid-api-key\" /* AuthErrorCode.INVALID_API_KEY */]: 'Your API key is invalid, please check you have copied it correctly.',\r\n        [\"invalid-cert-hash\" /* AuthErrorCode.INVALID_CERT_HASH */]: 'The SHA-1 certificate hash provided is invalid.',\r\n        [\"invalid-credential\" /* AuthErrorCode.INVALID_IDP_RESPONSE */]: 'The supplied auth credential is malformed or has expired.',\r\n        [\"invalid-message-payload\" /* AuthErrorCode.INVALID_MESSAGE_PAYLOAD */]: 'The email template corresponding to this action contains invalid characters in its message. ' +\r\n            'Please fix by going to the Auth email templates section in the Firebase Console.',\r\n        [\"invalid-multi-factor-session\" /* AuthErrorCode.INVALID_MFA_SESSION */]: 'The request does not contain a valid proof of first factor successful sign-in.',\r\n        [\"invalid-oauth-provider\" /* AuthErrorCode.INVALID_OAUTH_PROVIDER */]: 'EmailAuthProvider is not supported for this operation. This operation ' +\r\n            'only supports OAuth providers.',\r\n        [\"invalid-oauth-client-id\" /* AuthErrorCode.INVALID_OAUTH_CLIENT_ID */]: 'The OAuth client ID provided is either invalid or does not match the ' +\r\n            'specified API key.',\r\n        [\"unauthorized-domain\" /* AuthErrorCode.INVALID_ORIGIN */]: 'This domain is not authorized for OAuth operations for your Firebase ' +\r\n            'project. Edit the list of authorized domains from the Firebase console.',\r\n        [\"invalid-action-code\" /* AuthErrorCode.INVALID_OOB_CODE */]: 'The action code is invalid. This can happen if the code is malformed, ' +\r\n            'expired, or has already been used.',\r\n        [\"wrong-password\" /* AuthErrorCode.INVALID_PASSWORD */]: 'The password is invalid or the user does not have a password.',\r\n        [\"invalid-persistence-type\" /* AuthErrorCode.INVALID_PERSISTENCE */]: 'The specified persistence type is invalid. It can only be local, session or none.',\r\n        [\"invalid-phone-number\" /* AuthErrorCode.INVALID_PHONE_NUMBER */]: 'The format of the phone number provided is incorrect. Please enter the ' +\r\n            'phone number in a format that can be parsed into E.164 format. E.164 ' +\r\n            'phone numbers are written in the format [+][country code][subscriber ' +\r\n            'number including area code].',\r\n        [\"invalid-provider-id\" /* AuthErrorCode.INVALID_PROVIDER_ID */]: 'The specified provider ID is invalid.',\r\n        [\"invalid-recipient-email\" /* AuthErrorCode.INVALID_RECIPIENT_EMAIL */]: 'The email corresponding to this action failed to send as the provided ' +\r\n            'recipient email address is invalid.',\r\n        [\"invalid-sender\" /* AuthErrorCode.INVALID_SENDER */]: 'The email template corresponding to this action contains an invalid sender email or name. ' +\r\n            'Please fix by going to the Auth email templates section in the Firebase Console.',\r\n        [\"invalid-verification-id\" /* AuthErrorCode.INVALID_SESSION_INFO */]: 'The verification ID used to create the phone auth credential is invalid.',\r\n        [\"invalid-tenant-id\" /* AuthErrorCode.INVALID_TENANT_ID */]: \"The Auth instance's tenant ID is invalid.\",\r\n        [\"login-blocked\" /* AuthErrorCode.LOGIN_BLOCKED */]: 'Login blocked by user-provided method: {$originalMessage}',\r\n        [\"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */]: 'An Android Package Name must be provided if the Android App is required to be installed.',\r\n        [\"auth-domain-config-required\" /* AuthErrorCode.MISSING_AUTH_DOMAIN */]: 'Be sure to include authDomain when calling firebase.initializeApp(), ' +\r\n            'by following the instructions in the Firebase console.',\r\n        [\"missing-app-credential\" /* AuthErrorCode.MISSING_APP_CREDENTIAL */]: 'The phone verification request is missing an application verifier ' +\r\n            'assertion. A reCAPTCHA response token needs to be provided.',\r\n        [\"missing-verification-code\" /* AuthErrorCode.MISSING_CODE */]: 'The phone auth credential was created with an empty SMS verification code.',\r\n        [\"missing-continue-uri\" /* AuthErrorCode.MISSING_CONTINUE_URI */]: 'A continue URL must be provided in the request.',\r\n        [\"missing-iframe-start\" /* AuthErrorCode.MISSING_IFRAME_START */]: 'An internal AuthError has occurred.',\r\n        [\"missing-ios-bundle-id\" /* AuthErrorCode.MISSING_IOS_BUNDLE_ID */]: 'An iOS Bundle ID must be provided if an App Store ID is provided.',\r\n        [\"missing-or-invalid-nonce\" /* AuthErrorCode.MISSING_OR_INVALID_NONCE */]: 'The request does not contain a valid nonce. This can occur if the ' +\r\n            'SHA-256 hash of the provided raw nonce does not match the hashed nonce ' +\r\n            'in the ID token payload.',\r\n        [\"missing-password\" /* AuthErrorCode.MISSING_PASSWORD */]: 'A non-empty password must be provided',\r\n        [\"missing-multi-factor-info\" /* AuthErrorCode.MISSING_MFA_INFO */]: 'No second factor identifier is provided.',\r\n        [\"missing-multi-factor-session\" /* AuthErrorCode.MISSING_MFA_SESSION */]: 'The request is missing proof of first factor successful sign-in.',\r\n        [\"missing-phone-number\" /* AuthErrorCode.MISSING_PHONE_NUMBER */]: 'To send verification codes, provide a phone number for the recipient.',\r\n        [\"missing-verification-id\" /* AuthErrorCode.MISSING_SESSION_INFO */]: 'The phone auth credential was created with an empty verification ID.',\r\n        [\"app-deleted\" /* AuthErrorCode.MODULE_DESTROYED */]: 'This instance of FirebaseApp has been deleted.',\r\n        [\"multi-factor-info-not-found\" /* AuthErrorCode.MFA_INFO_NOT_FOUND */]: 'The user does not have a second factor matching the identifier provided.',\r\n        [\"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */]: 'Proof of ownership of a second factor is required to complete sign-in.',\r\n        [\"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */]: 'An account already exists with the same email address but different ' +\r\n            'sign-in credentials. Sign in using a provider associated with this ' +\r\n            'email address.',\r\n        [\"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */]: 'A network AuthError (such as timeout, interrupted connection or unreachable host) has occurred.',\r\n        [\"no-auth-event\" /* AuthErrorCode.NO_AUTH_EVENT */]: 'An internal AuthError has occurred.',\r\n        [\"no-such-provider\" /* AuthErrorCode.NO_SUCH_PROVIDER */]: 'User was not linked to an account with the given provider.',\r\n        [\"null-user\" /* AuthErrorCode.NULL_USER */]: 'A null user object was provided as the argument for an operation which ' +\r\n            'requires a non-null user object.',\r\n        [\"operation-not-allowed\" /* AuthErrorCode.OPERATION_NOT_ALLOWED */]: 'The given sign-in provider is disabled for this Firebase project. ' +\r\n            'Enable it in the Firebase console, under the sign-in method tab of the ' +\r\n            'Auth section.',\r\n        [\"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */]: 'This operation is not supported in the environment this application is ' +\r\n            'running on. \"location.protocol\" must be http, https or chrome-extension' +\r\n            ' and web storage must be enabled.',\r\n        [\"popup-blocked\" /* AuthErrorCode.POPUP_BLOCKED */]: 'Unable to establish a connection with the popup. It may have been blocked by the browser.',\r\n        [\"popup-closed-by-user\" /* AuthErrorCode.POPUP_CLOSED_BY_USER */]: 'The popup has been closed by the user before finalizing the operation.',\r\n        [\"provider-already-linked\" /* AuthErrorCode.PROVIDER_ALREADY_LINKED */]: 'User can only be linked to one identity for the given provider.',\r\n        [\"quota-exceeded\" /* AuthErrorCode.QUOTA_EXCEEDED */]: \"The project's quota for this operation has been exceeded.\",\r\n        [\"redirect-cancelled-by-user\" /* AuthErrorCode.REDIRECT_CANCELLED_BY_USER */]: 'The redirect operation has been cancelled by the user before finalizing.',\r\n        [\"redirect-operation-pending\" /* AuthErrorCode.REDIRECT_OPERATION_PENDING */]: 'A redirect sign-in operation is already pending.',\r\n        [\"rejected-credential\" /* AuthErrorCode.REJECTED_CREDENTIAL */]: 'The request contains malformed or mismatching credentials.',\r\n        [\"second-factor-already-in-use\" /* AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED */]: 'The second factor is already enrolled on this account.',\r\n        [\"maximum-second-factor-count-exceeded\" /* AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED */]: 'The maximum allowed number of second factors on a user has been exceeded.',\r\n        [\"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */]: \"The provided tenant ID does not match the Auth instance's tenant ID\",\r\n        [\"timeout\" /* AuthErrorCode.TIMEOUT */]: 'The operation has timed out.',\r\n        [\"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */]: \"The user's credential is no longer valid. The user must sign in again.\",\r\n        [\"too-many-requests\" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */]: 'We have blocked all requests from this device due to unusual activity. ' +\r\n            'Try again later.',\r\n        [\"unauthorized-continue-uri\" /* AuthErrorCode.UNAUTHORIZED_DOMAIN */]: 'The domain of the continue URL is not whitelisted.  Please whitelist ' +\r\n            'the domain in the Firebase console.',\r\n        [\"unsupported-first-factor\" /* AuthErrorCode.UNSUPPORTED_FIRST_FACTOR */]: 'Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.',\r\n        [\"unsupported-persistence-type\" /* AuthErrorCode.UNSUPPORTED_PERSISTENCE */]: 'The current environment does not support the specified persistence type.',\r\n        [\"unsupported-tenant-operation\" /* AuthErrorCode.UNSUPPORTED_TENANT_OPERATION */]: 'This operation is not supported in a multi-tenant context.',\r\n        [\"unverified-email\" /* AuthErrorCode.UNVERIFIED_EMAIL */]: 'The operation requires a verified email.',\r\n        [\"user-cancelled\" /* AuthErrorCode.USER_CANCELLED */]: 'The user did not grant your application the permissions it requested.',\r\n        [\"user-not-found\" /* AuthErrorCode.USER_DELETED */]: 'There is no user record corresponding to this identifier. The user may ' +\r\n            'have been deleted.',\r\n        [\"user-disabled\" /* AuthErrorCode.USER_DISABLED */]: 'The user account has been disabled by an administrator.',\r\n        [\"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */]: 'The supplied credentials do not correspond to the previously signed in user.',\r\n        [\"user-signed-out\" /* AuthErrorCode.USER_SIGNED_OUT */]: '',\r\n        [\"weak-password\" /* AuthErrorCode.WEAK_PASSWORD */]: 'The password must be 6 characters long or more.',\r\n        [\"web-storage-unsupported\" /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */]: 'This browser is not supported or 3rd party cookies and data may be disabled.',\r\n        [\"already-initialized\" /* AuthErrorCode.ALREADY_INITIALIZED */]: 'initializeAuth() has already been called with ' +\r\n            'different options. To avoid this error, call initializeAuth() with the ' +\r\n            'same options as when it was originally called, or call getAuth() to return the' +\r\n            ' already initialized instance.',\r\n        [\"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */]: 'The reCAPTCHA token is missing when sending request to the backend.',\r\n        [\"invalid-recaptcha-token\" /* AuthErrorCode.INVALID_RECAPTCHA_TOKEN */]: 'The reCAPTCHA token is invalid when sending request to the backend.',\r\n        [\"invalid-recaptcha-action\" /* AuthErrorCode.INVALID_RECAPTCHA_ACTION */]: 'The reCAPTCHA action is invalid when sending request to the backend.',\r\n        [\"recaptcha-not-enabled\" /* AuthErrorCode.RECAPTCHA_NOT_ENABLED */]: 'reCAPTCHA Enterprise integration is not enabled for this project.',\r\n        [\"missing-client-type\" /* AuthErrorCode.MISSING_CLIENT_TYPE */]: 'The reCAPTCHA client type is missing when sending request to the backend.',\r\n        [\"missing-recaptcha-version\" /* AuthErrorCode.MISSING_RECAPTCHA_VERSION */]: 'The reCAPTCHA version is missing when sending request to the backend.',\r\n        [\"invalid-req-type\" /* AuthErrorCode.INVALID_REQ_TYPE */]: 'Invalid request parameters.',\r\n        [\"invalid-recaptcha-version\" /* AuthErrorCode.INVALID_RECAPTCHA_VERSION */]: 'The reCAPTCHA version is invalid when sending request to the backend.'\r\n    };\r\n}\r\nfunction _prodErrorMap() {\r\n    // We will include this one message in the prod error map since by the very\r\n    // nature of this error, developers will never be able to see the message\r\n    // using the debugErrorMap (which is installed during auth initialization).\r\n    return {\r\n        [\"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */]: 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' +\r\n            'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' +\r\n            'starting any other Firebase SDK.'\r\n    };\r\n}\r\n/**\r\n * A verbose error map with detailed descriptions for most error codes.\r\n *\r\n * See discussion at {@link AuthErrorMap}\r\n *\r\n * @public\r\n */\r\nconst debugErrorMap = _debugErrorMap;\r\n/**\r\n * A minimal error map with all verbose error messages stripped.\r\n *\r\n * See discussion at {@link AuthErrorMap}\r\n *\r\n * @public\r\n */\r\nconst prodErrorMap = _prodErrorMap;\r\nconst _DEFAULT_AUTH_ERROR_FACTORY = new ErrorFactory('auth', 'Firebase', _prodErrorMap());\r\n/**\r\n * A map of potential `Auth` error codes, for easier comparison with errors\r\n * thrown by the SDK.\r\n *\r\n * @remarks\r\n * Note that you can't tree-shake individual keys\r\n * in the map, so by using the map you might substantially increase your\r\n * bundle size.\r\n *\r\n * @public\r\n */\r\nconst AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY = {\r\n    ADMIN_ONLY_OPERATION: 'auth/admin-restricted-operation',\r\n    ARGUMENT_ERROR: 'auth/argument-error',\r\n    APP_NOT_AUTHORIZED: 'auth/app-not-authorized',\r\n    APP_NOT_INSTALLED: 'auth/app-not-installed',\r\n    CAPTCHA_CHECK_FAILED: 'auth/captcha-check-failed',\r\n    CODE_EXPIRED: 'auth/code-expired',\r\n    CORDOVA_NOT_READY: 'auth/cordova-not-ready',\r\n    CORS_UNSUPPORTED: 'auth/cors-unsupported',\r\n    CREDENTIAL_ALREADY_IN_USE: 'auth/credential-already-in-use',\r\n    CREDENTIAL_MISMATCH: 'auth/custom-token-mismatch',\r\n    CREDENTIAL_TOO_OLD_LOGIN_AGAIN: 'auth/requires-recent-login',\r\n    DEPENDENT_SDK_INIT_BEFORE_AUTH: 'auth/dependent-sdk-initialized-before-auth',\r\n    DYNAMIC_LINK_NOT_ACTIVATED: 'auth/dynamic-link-not-activated',\r\n    EMAIL_CHANGE_NEEDS_VERIFICATION: 'auth/email-change-needs-verification',\r\n    EMAIL_EXISTS: 'auth/email-already-in-use',\r\n    EMULATOR_CONFIG_FAILED: 'auth/emulator-config-failed',\r\n    EXPIRED_OOB_CODE: 'auth/expired-action-code',\r\n    EXPIRED_POPUP_REQUEST: 'auth/cancelled-popup-request',\r\n    INTERNAL_ERROR: 'auth/internal-error',\r\n    INVALID_API_KEY: 'auth/invalid-api-key',\r\n    INVALID_APP_CREDENTIAL: 'auth/invalid-app-credential',\r\n    INVALID_APP_ID: 'auth/invalid-app-id',\r\n    INVALID_AUTH: 'auth/invalid-user-token',\r\n    INVALID_AUTH_EVENT: 'auth/invalid-auth-event',\r\n    INVALID_CERT_HASH: 'auth/invalid-cert-hash',\r\n    INVALID_CODE: 'auth/invalid-verification-code',\r\n    INVALID_CONTINUE_URI: 'auth/invalid-continue-uri',\r\n    INVALID_CORDOVA_CONFIGURATION: 'auth/invalid-cordova-configuration',\r\n    INVALID_CUSTOM_TOKEN: 'auth/invalid-custom-token',\r\n    INVALID_DYNAMIC_LINK_DOMAIN: 'auth/invalid-dynamic-link-domain',\r\n    INVALID_EMAIL: 'auth/invalid-email',\r\n    INVALID_EMULATOR_SCHEME: 'auth/invalid-emulator-scheme',\r\n    INVALID_IDP_RESPONSE: 'auth/invalid-credential',\r\n    INVALID_MESSAGE_PAYLOAD: 'auth/invalid-message-payload',\r\n    INVALID_MFA_SESSION: 'auth/invalid-multi-factor-session',\r\n    INVALID_OAUTH_CLIENT_ID: 'auth/invalid-oauth-client-id',\r\n    INVALID_OAUTH_PROVIDER: 'auth/invalid-oauth-provider',\r\n    INVALID_OOB_CODE: 'auth/invalid-action-code',\r\n    INVALID_ORIGIN: 'auth/unauthorized-domain',\r\n    INVALID_PASSWORD: 'auth/wrong-password',\r\n    INVALID_PERSISTENCE: 'auth/invalid-persistence-type',\r\n    INVALID_PHONE_NUMBER: 'auth/invalid-phone-number',\r\n    INVALID_PROVIDER_ID: 'auth/invalid-provider-id',\r\n    INVALID_RECIPIENT_EMAIL: 'auth/invalid-recipient-email',\r\n    INVALID_SENDER: 'auth/invalid-sender',\r\n    INVALID_SESSION_INFO: 'auth/invalid-verification-id',\r\n    INVALID_TENANT_ID: 'auth/invalid-tenant-id',\r\n    MFA_INFO_NOT_FOUND: 'auth/multi-factor-info-not-found',\r\n    MFA_REQUIRED: 'auth/multi-factor-auth-required',\r\n    MISSING_ANDROID_PACKAGE_NAME: 'auth/missing-android-pkg-name',\r\n    MISSING_APP_CREDENTIAL: 'auth/missing-app-credential',\r\n    MISSING_AUTH_DOMAIN: 'auth/auth-domain-config-required',\r\n    MISSING_CODE: 'auth/missing-verification-code',\r\n    MISSING_CONTINUE_URI: 'auth/missing-continue-uri',\r\n    MISSING_IFRAME_START: 'auth/missing-iframe-start',\r\n    MISSING_IOS_BUNDLE_ID: 'auth/missing-ios-bundle-id',\r\n    MISSING_OR_INVALID_NONCE: 'auth/missing-or-invalid-nonce',\r\n    MISSING_MFA_INFO: 'auth/missing-multi-factor-info',\r\n    MISSING_MFA_SESSION: 'auth/missing-multi-factor-session',\r\n    MISSING_PHONE_NUMBER: 'auth/missing-phone-number',\r\n    MISSING_SESSION_INFO: 'auth/missing-verification-id',\r\n    MODULE_DESTROYED: 'auth/app-deleted',\r\n    NEED_CONFIRMATION: 'auth/account-exists-with-different-credential',\r\n    NETWORK_REQUEST_FAILED: 'auth/network-request-failed',\r\n    NULL_USER: 'auth/null-user',\r\n    NO_AUTH_EVENT: 'auth/no-auth-event',\r\n    NO_SUCH_PROVIDER: 'auth/no-such-provider',\r\n    OPERATION_NOT_ALLOWED: 'auth/operation-not-allowed',\r\n    OPERATION_NOT_SUPPORTED: 'auth/operation-not-supported-in-this-environment',\r\n    POPUP_BLOCKED: 'auth/popup-blocked',\r\n    POPUP_CLOSED_BY_USER: 'auth/popup-closed-by-user',\r\n    PROVIDER_ALREADY_LINKED: 'auth/provider-already-linked',\r\n    QUOTA_EXCEEDED: 'auth/quota-exceeded',\r\n    REDIRECT_CANCELLED_BY_USER: 'auth/redirect-cancelled-by-user',\r\n    REDIRECT_OPERATION_PENDING: 'auth/redirect-operation-pending',\r\n    REJECTED_CREDENTIAL: 'auth/rejected-credential',\r\n    SECOND_FACTOR_ALREADY_ENROLLED: 'auth/second-factor-already-in-use',\r\n    SECOND_FACTOR_LIMIT_EXCEEDED: 'auth/maximum-second-factor-count-exceeded',\r\n    TENANT_ID_MISMATCH: 'auth/tenant-id-mismatch',\r\n    TIMEOUT: 'auth/timeout',\r\n    TOKEN_EXPIRED: 'auth/user-token-expired',\r\n    TOO_MANY_ATTEMPTS_TRY_LATER: 'auth/too-many-requests',\r\n    UNAUTHORIZED_DOMAIN: 'auth/unauthorized-continue-uri',\r\n    UNSUPPORTED_FIRST_FACTOR: 'auth/unsupported-first-factor',\r\n    UNSUPPORTED_PERSISTENCE: 'auth/unsupported-persistence-type',\r\n    UNSUPPORTED_TENANT_OPERATION: 'auth/unsupported-tenant-operation',\r\n    UNVERIFIED_EMAIL: 'auth/unverified-email',\r\n    USER_CANCELLED: 'auth/user-cancelled',\r\n    USER_DELETED: 'auth/user-not-found',\r\n    USER_DISABLED: 'auth/user-disabled',\r\n    USER_MISMATCH: 'auth/user-mismatch',\r\n    USER_SIGNED_OUT: 'auth/user-signed-out',\r\n    WEAK_PASSWORD: 'auth/weak-password',\r\n    WEB_STORAGE_UNSUPPORTED: 'auth/web-storage-unsupported',\r\n    ALREADY_INITIALIZED: 'auth/already-initialized',\r\n    RECAPTCHA_NOT_ENABLED: 'auth/recaptcha-not-enabled',\r\n    MISSING_RECAPTCHA_TOKEN: 'auth/missing-recaptcha-token',\r\n    INVALID_RECAPTCHA_TOKEN: 'auth/invalid-recaptcha-token',\r\n    INVALID_RECAPTCHA_ACTION: 'auth/invalid-recaptcha-action',\r\n    MISSING_CLIENT_TYPE: 'auth/missing-client-type',\r\n    MISSING_RECAPTCHA_VERSION: 'auth/missing-recaptcha-version',\r\n    INVALID_RECAPTCHA_VERSION: 'auth/invalid-recaptcha-version',\r\n    INVALID_REQ_TYPE: 'auth/invalid-req-type'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logClient = new Logger('@firebase/auth');\r\nfunction _logWarn(msg, ...args) {\r\n    if (logClient.logLevel <= LogLevel.WARN) {\r\n        logClient.warn(`Auth (${SDK_VERSION}): ${msg}`, ...args);\r\n    }\r\n}\r\nfunction _logError(msg, ...args) {\r\n    if (logClient.logLevel <= LogLevel.ERROR) {\r\n        logClient.error(`Auth (${SDK_VERSION}): ${msg}`, ...args);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction _fail(authOrCode, ...rest) {\r\n    throw createErrorInternal(authOrCode, ...rest);\r\n}\r\nfunction _createError(authOrCode, ...rest) {\r\n    return createErrorInternal(authOrCode, ...rest);\r\n}\r\nfunction _errorWithCustomMessage(auth, code, message) {\r\n    const errorMap = Object.assign(Object.assign({}, prodErrorMap()), { [code]: message });\r\n    const factory = new ErrorFactory('auth', 'Firebase', errorMap);\r\n    return factory.create(code, {\r\n        appName: auth.name\r\n    });\r\n}\r\nfunction _assertInstanceOf(auth, object, instance) {\r\n    const constructorInstance = instance;\r\n    if (!(object instanceof constructorInstance)) {\r\n        if (constructorInstance.name !== object.constructor.name) {\r\n            _fail(auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        }\r\n        throw _errorWithCustomMessage(auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */, `Type of ${object.constructor.name} does not match expected instance.` +\r\n            `Did you pass a reference from a different Auth SDK?`);\r\n    }\r\n}\r\nfunction createErrorInternal(authOrCode, ...rest) {\r\n    if (typeof authOrCode !== 'string') {\r\n        const code = rest[0];\r\n        const fullParams = [...rest.slice(1)];\r\n        if (fullParams[0]) {\r\n            fullParams[0].appName = authOrCode.name;\r\n        }\r\n        return authOrCode._errorFactory.create(code, ...fullParams);\r\n    }\r\n    return _DEFAULT_AUTH_ERROR_FACTORY.create(authOrCode, ...rest);\r\n}\r\nfunction _assert(assertion, authOrCode, ...rest) {\r\n    if (!assertion) {\r\n        throw createErrorInternal(authOrCode, ...rest);\r\n    }\r\n}\r\n/**\r\n * Unconditionally fails, throwing an internal error with the given message.\r\n *\r\n * @param failure type of failure encountered\r\n * @throws Error\r\n */\r\nfunction debugFail(failure) {\r\n    // Log the failure in addition to throw an exception, just in case the\r\n    // exception is swallowed.\r\n    const message = `INTERNAL ASSERTION FAILED: ` + failure;\r\n    _logError(message);\r\n    // NOTE: We don't use FirebaseError here because these are internal failures\r\n    // that cannot be handled by the user. (Also it would create a circular\r\n    // dependency between the error and assert modules which doesn't work.)\r\n    throw new Error(message);\r\n}\r\n/**\r\n * Fails if the given assertion condition is false, throwing an Error with the\r\n * given message if it did.\r\n *\r\n * @param assertion\r\n * @param message\r\n */\r\nfunction debugAssert(assertion, message) {\r\n    if (!assertion) {\r\n        debugFail(message);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction _getCurrentUrl() {\r\n    var _a;\r\n    return (typeof self !== 'undefined' && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.href)) || '';\r\n}\r\nfunction _isHttpOrHttps() {\r\n    return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';\r\n}\r\nfunction _getCurrentScheme() {\r\n    var _a;\r\n    return (typeof self !== 'undefined' && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.protocol)) || null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Determine whether the browser is working online\r\n */\r\nfunction _isOnline() {\r\n    if (typeof navigator !== 'undefined' &&\r\n        navigator &&\r\n        'onLine' in navigator &&\r\n        typeof navigator.onLine === 'boolean' &&\r\n        // Apply only for traditional web apps and Chrome extensions.\r\n        // This is especially true for Cordova apps which have unreliable\r\n        // navigator.onLine behavior unless cordova-plugin-network-information is\r\n        // installed which overwrites the native navigator.onLine value and\r\n        // defines navigator.connection.\r\n        (_isHttpOrHttps() || isBrowserExtension() || 'connection' in navigator)) {\r\n        return navigator.onLine;\r\n    }\r\n    // If we can't determine the state, assume it is online.\r\n    return true;\r\n}\r\nfunction _getUserLanguage() {\r\n    if (typeof navigator === 'undefined') {\r\n        return null;\r\n    }\r\n    const navigatorLanguage = navigator;\r\n    return (\r\n    // Most reliable, but only supported in Chrome/Firefox.\r\n    (navigatorLanguage.languages && navigatorLanguage.languages[0]) ||\r\n        // Supported in most browsers, but returns the language of the browser\r\n        // UI, not the language set in browser settings.\r\n        navigatorLanguage.language ||\r\n        // Couldn't determine language.\r\n        null);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A structure to help pick between a range of long and short delay durations\r\n * depending on the current environment. In general, the long delay is used for\r\n * mobile environments whereas short delays are used for desktop environments.\r\n */\r\nclass Delay {\r\n    constructor(shortDelay, longDelay) {\r\n        this.shortDelay = shortDelay;\r\n        this.longDelay = longDelay;\r\n        // Internal error when improperly initialized.\r\n        debugAssert(longDelay > shortDelay, 'Short delay should be less than long delay!');\r\n        this.isMobile = isMobileCordova() || isReactNative();\r\n    }\r\n    get() {\r\n        if (!_isOnline()) {\r\n            // Pick the shorter timeout.\r\n            return Math.min(5000 /* DelayMin.OFFLINE */, this.shortDelay);\r\n        }\r\n        // If running in a mobile environment, return the long delay, otherwise\r\n        // return the short delay.\r\n        // This could be improved in the future to dynamically change based on other\r\n        // variables instead of just reading the current environment.\r\n        return this.isMobile ? this.longDelay : this.shortDelay;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction _emulatorUrl(config, path) {\r\n    debugAssert(config.emulator, 'Emulator should always be set here');\r\n    const { url } = config.emulator;\r\n    if (!path) {\r\n        return url;\r\n    }\r\n    return `${url}${path.startsWith('/') ? path.slice(1) : path}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass FetchProvider {\r\n    static initialize(fetchImpl, headersImpl, responseImpl) {\r\n        this.fetchImpl = fetchImpl;\r\n        if (headersImpl) {\r\n            this.headersImpl = headersImpl;\r\n        }\r\n        if (responseImpl) {\r\n            this.responseImpl = responseImpl;\r\n        }\r\n    }\r\n    static fetch() {\r\n        if (this.fetchImpl) {\r\n            return this.fetchImpl;\r\n        }\r\n        if (typeof self !== 'undefined' && 'fetch' in self) {\r\n            return self.fetch;\r\n        }\r\n        debugFail('Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\r\n    }\r\n    static headers() {\r\n        if (this.headersImpl) {\r\n            return this.headersImpl;\r\n        }\r\n        if (typeof self !== 'undefined' && 'Headers' in self) {\r\n            return self.Headers;\r\n        }\r\n        debugFail('Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\r\n    }\r\n    static response() {\r\n        if (this.responseImpl) {\r\n            return this.responseImpl;\r\n        }\r\n        if (typeof self !== 'undefined' && 'Response' in self) {\r\n            return self.Response;\r\n        }\r\n        debugFail('Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Map from errors returned by the server to errors to developer visible errors\r\n */\r\nconst SERVER_ERROR_MAP = {\r\n    // Custom token errors.\r\n    [\"CREDENTIAL_MISMATCH\" /* ServerError.CREDENTIAL_MISMATCH */]: \"custom-token-mismatch\" /* AuthErrorCode.CREDENTIAL_MISMATCH */,\r\n    // This can only happen if the SDK sends a bad request.\r\n    [\"MISSING_CUSTOM_TOKEN\" /* ServerError.MISSING_CUSTOM_TOKEN */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\r\n    // Create Auth URI errors.\r\n    [\"INVALID_IDENTIFIER\" /* ServerError.INVALID_IDENTIFIER */]: \"invalid-email\" /* AuthErrorCode.INVALID_EMAIL */,\r\n    // This can only happen if the SDK sends a bad request.\r\n    [\"MISSING_CONTINUE_URI\" /* ServerError.MISSING_CONTINUE_URI */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\r\n    // Sign in with email and password errors (some apply to sign up too).\r\n    [\"INVALID_PASSWORD\" /* ServerError.INVALID_PASSWORD */]: \"wrong-password\" /* AuthErrorCode.INVALID_PASSWORD */,\r\n    // This can only happen if the SDK sends a bad request.\r\n    [\"MISSING_PASSWORD\" /* ServerError.MISSING_PASSWORD */]: \"missing-password\" /* AuthErrorCode.MISSING_PASSWORD */,\r\n    // Sign up with email and password errors.\r\n    [\"EMAIL_EXISTS\" /* ServerError.EMAIL_EXISTS */]: \"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */,\r\n    [\"PASSWORD_LOGIN_DISABLED\" /* ServerError.PASSWORD_LOGIN_DISABLED */]: \"operation-not-allowed\" /* AuthErrorCode.OPERATION_NOT_ALLOWED */,\r\n    // Verify assertion for sign in with credential errors:\r\n    [\"INVALID_IDP_RESPONSE\" /* ServerError.INVALID_IDP_RESPONSE */]: \"invalid-credential\" /* AuthErrorCode.INVALID_IDP_RESPONSE */,\r\n    [\"INVALID_PENDING_TOKEN\" /* ServerError.INVALID_PENDING_TOKEN */]: \"invalid-credential\" /* AuthErrorCode.INVALID_IDP_RESPONSE */,\r\n    [\"FEDERATED_USER_ID_ALREADY_LINKED\" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */]: \"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */,\r\n    // This can only happen if the SDK sends a bad request.\r\n    [\"MISSING_REQ_TYPE\" /* ServerError.MISSING_REQ_TYPE */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\r\n    // Send Password reset email errors:\r\n    [\"EMAIL_NOT_FOUND\" /* ServerError.EMAIL_NOT_FOUND */]: \"user-not-found\" /* AuthErrorCode.USER_DELETED */,\r\n    [\"RESET_PASSWORD_EXCEED_LIMIT\" /* ServerError.RESET_PASSWORD_EXCEED_LIMIT */]: \"too-many-requests\" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */,\r\n    [\"EXPIRED_OOB_CODE\" /* ServerError.EXPIRED_OOB_CODE */]: \"expired-action-code\" /* AuthErrorCode.EXPIRED_OOB_CODE */,\r\n    [\"INVALID_OOB_CODE\" /* ServerError.INVALID_OOB_CODE */]: \"invalid-action-code\" /* AuthErrorCode.INVALID_OOB_CODE */,\r\n    // This can only happen if the SDK sends a bad request.\r\n    [\"MISSING_OOB_CODE\" /* ServerError.MISSING_OOB_CODE */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\r\n    // Operations that require ID token in request:\r\n    [\"CREDENTIAL_TOO_OLD_LOGIN_AGAIN\" /* ServerError.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */]: \"requires-recent-login\" /* AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */,\r\n    [\"INVALID_ID_TOKEN\" /* ServerError.INVALID_ID_TOKEN */]: \"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */,\r\n    [\"TOKEN_EXPIRED\" /* ServerError.TOKEN_EXPIRED */]: \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */,\r\n    [\"USER_NOT_FOUND\" /* ServerError.USER_NOT_FOUND */]: \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */,\r\n    // Other errors.\r\n    [\"TOO_MANY_ATTEMPTS_TRY_LATER\" /* ServerError.TOO_MANY_ATTEMPTS_TRY_LATER */]: \"too-many-requests\" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */,\r\n    // Phone Auth related errors.\r\n    [\"INVALID_CODE\" /* ServerError.INVALID_CODE */]: \"invalid-verification-code\" /* AuthErrorCode.INVALID_CODE */,\r\n    [\"INVALID_SESSION_INFO\" /* ServerError.INVALID_SESSION_INFO */]: \"invalid-verification-id\" /* AuthErrorCode.INVALID_SESSION_INFO */,\r\n    [\"INVALID_TEMPORARY_PROOF\" /* ServerError.INVALID_TEMPORARY_PROOF */]: \"invalid-credential\" /* AuthErrorCode.INVALID_IDP_RESPONSE */,\r\n    [\"MISSING_SESSION_INFO\" /* ServerError.MISSING_SESSION_INFO */]: \"missing-verification-id\" /* AuthErrorCode.MISSING_SESSION_INFO */,\r\n    [\"SESSION_EXPIRED\" /* ServerError.SESSION_EXPIRED */]: \"code-expired\" /* AuthErrorCode.CODE_EXPIRED */,\r\n    // Other action code errors when additional settings passed.\r\n    // MISSING_CONTINUE_URI is getting mapped to INTERNAL_ERROR above.\r\n    // This is OK as this error will be caught by client side validation.\r\n    [\"MISSING_ANDROID_PACKAGE_NAME\" /* ServerError.MISSING_ANDROID_PACKAGE_NAME */]: \"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */,\r\n    [\"UNAUTHORIZED_DOMAIN\" /* ServerError.UNAUTHORIZED_DOMAIN */]: \"unauthorized-continue-uri\" /* AuthErrorCode.UNAUTHORIZED_DOMAIN */,\r\n    // getProjectConfig errors when clientId is passed.\r\n    [\"INVALID_OAUTH_CLIENT_ID\" /* ServerError.INVALID_OAUTH_CLIENT_ID */]: \"invalid-oauth-client-id\" /* AuthErrorCode.INVALID_OAUTH_CLIENT_ID */,\r\n    // User actions (sign-up or deletion) disabled errors.\r\n    [\"ADMIN_ONLY_OPERATION\" /* ServerError.ADMIN_ONLY_OPERATION */]: \"admin-restricted-operation\" /* AuthErrorCode.ADMIN_ONLY_OPERATION */,\r\n    // Multi factor related errors.\r\n    [\"INVALID_MFA_PENDING_CREDENTIAL\" /* ServerError.INVALID_MFA_PENDING_CREDENTIAL */]: \"invalid-multi-factor-session\" /* AuthErrorCode.INVALID_MFA_SESSION */,\r\n    [\"MFA_ENROLLMENT_NOT_FOUND\" /* ServerError.MFA_ENROLLMENT_NOT_FOUND */]: \"multi-factor-info-not-found\" /* AuthErrorCode.MFA_INFO_NOT_FOUND */,\r\n    [\"MISSING_MFA_ENROLLMENT_ID\" /* ServerError.MISSING_MFA_ENROLLMENT_ID */]: \"missing-multi-factor-info\" /* AuthErrorCode.MISSING_MFA_INFO */,\r\n    [\"MISSING_MFA_PENDING_CREDENTIAL\" /* ServerError.MISSING_MFA_PENDING_CREDENTIAL */]: \"missing-multi-factor-session\" /* AuthErrorCode.MISSING_MFA_SESSION */,\r\n    [\"SECOND_FACTOR_EXISTS\" /* ServerError.SECOND_FACTOR_EXISTS */]: \"second-factor-already-in-use\" /* AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED */,\r\n    [\"SECOND_FACTOR_LIMIT_EXCEEDED\" /* ServerError.SECOND_FACTOR_LIMIT_EXCEEDED */]: \"maximum-second-factor-count-exceeded\" /* AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED */,\r\n    // Blocking functions related errors.\r\n    [\"BLOCKING_FUNCTION_ERROR_RESPONSE\" /* ServerError.BLOCKING_FUNCTION_ERROR_RESPONSE */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\r\n    // Recaptcha related errors.\r\n    [\"RECAPTCHA_NOT_ENABLED\" /* ServerError.RECAPTCHA_NOT_ENABLED */]: \"recaptcha-not-enabled\" /* AuthErrorCode.RECAPTCHA_NOT_ENABLED */,\r\n    [\"MISSING_RECAPTCHA_TOKEN\" /* ServerError.MISSING_RECAPTCHA_TOKEN */]: \"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */,\r\n    [\"INVALID_RECAPTCHA_TOKEN\" /* ServerError.INVALID_RECAPTCHA_TOKEN */]: \"invalid-recaptcha-token\" /* AuthErrorCode.INVALID_RECAPTCHA_TOKEN */,\r\n    [\"INVALID_RECAPTCHA_ACTION\" /* ServerError.INVALID_RECAPTCHA_ACTION */]: \"invalid-recaptcha-action\" /* AuthErrorCode.INVALID_RECAPTCHA_ACTION */,\r\n    [\"MISSING_CLIENT_TYPE\" /* ServerError.MISSING_CLIENT_TYPE */]: \"missing-client-type\" /* AuthErrorCode.MISSING_CLIENT_TYPE */,\r\n    [\"MISSING_RECAPTCHA_VERSION\" /* ServerError.MISSING_RECAPTCHA_VERSION */]: \"missing-recaptcha-version\" /* AuthErrorCode.MISSING_RECAPTCHA_VERSION */,\r\n    [\"INVALID_RECAPTCHA_VERSION\" /* ServerError.INVALID_RECAPTCHA_VERSION */]: \"invalid-recaptcha-version\" /* AuthErrorCode.INVALID_RECAPTCHA_VERSION */,\r\n    [\"INVALID_REQ_TYPE\" /* ServerError.INVALID_REQ_TYPE */]: \"invalid-req-type\" /* AuthErrorCode.INVALID_REQ_TYPE */\r\n};\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_API_TIMEOUT_MS = new Delay(30000, 60000);\r\nfunction _addTidIfNecessary(auth, request) {\r\n    if (auth.tenantId && !request.tenantId) {\r\n        return Object.assign(Object.assign({}, request), { tenantId: auth.tenantId });\r\n    }\r\n    return request;\r\n}\r\nasync function _performApiRequest(auth, method, path, request, customErrorMap = {}) {\r\n    return _performFetchWithErrorHandling(auth, customErrorMap, async () => {\r\n        let body = {};\r\n        let params = {};\r\n        if (request) {\r\n            if (method === \"GET\" /* HttpMethod.GET */) {\r\n                params = request;\r\n            }\r\n            else {\r\n                body = {\r\n                    body: JSON.stringify(request)\r\n                };\r\n            }\r\n        }\r\n        const query = querystring(Object.assign({ key: auth.config.apiKey }, params)).slice(1);\r\n        const headers = await auth._getAdditionalHeaders();\r\n        headers[\"Content-Type\" /* HttpHeader.CONTENT_TYPE */] = 'application/json';\r\n        if (auth.languageCode) {\r\n            headers[\"X-Firebase-Locale\" /* HttpHeader.X_FIREBASE_LOCALE */] = auth.languageCode;\r\n        }\r\n        return FetchProvider.fetch()(_getFinalTarget(auth, auth.config.apiHost, path, query), Object.assign({ method,\r\n            headers, referrerPolicy: 'no-referrer' }, body));\r\n    });\r\n}\r\nasync function _performFetchWithErrorHandling(auth, customErrorMap, fetchFn) {\r\n    auth._canInitEmulator = false;\r\n    const errorMap = Object.assign(Object.assign({}, SERVER_ERROR_MAP), customErrorMap);\r\n    try {\r\n        const networkTimeout = new NetworkTimeout(auth);\r\n        const response = await Promise.race([\r\n            fetchFn(),\r\n            networkTimeout.promise\r\n        ]);\r\n        // If we've reached this point, the fetch succeeded and the networkTimeout\r\n        // didn't throw; clear the network timeout delay so that Node won't hang\r\n        networkTimeout.clearNetworkTimeout();\r\n        const json = await response.json();\r\n        if ('needConfirmation' in json) {\r\n            throw _makeTaggedError(auth, \"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */, json);\r\n        }\r\n        if (response.ok && !('errorMessage' in json)) {\r\n            return json;\r\n        }\r\n        else {\r\n            const errorMessage = response.ok ? json.errorMessage : json.error.message;\r\n            const [serverErrorCode, serverErrorMessage] = errorMessage.split(' : ');\r\n            if (serverErrorCode === \"FEDERATED_USER_ID_ALREADY_LINKED\" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */) {\r\n                throw _makeTaggedError(auth, \"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */, json);\r\n            }\r\n            else if (serverErrorCode === \"EMAIL_EXISTS\" /* ServerError.EMAIL_EXISTS */) {\r\n                throw _makeTaggedError(auth, \"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */, json);\r\n            }\r\n            else if (serverErrorCode === \"USER_DISABLED\" /* ServerError.USER_DISABLED */) {\r\n                throw _makeTaggedError(auth, \"user-disabled\" /* AuthErrorCode.USER_DISABLED */, json);\r\n            }\r\n            const authError = errorMap[serverErrorCode] ||\r\n                serverErrorCode\r\n                    .toLowerCase()\r\n                    .replace(/[_\\s]+/g, '-');\r\n            if (serverErrorMessage) {\r\n                throw _errorWithCustomMessage(auth, authError, serverErrorMessage);\r\n            }\r\n            else {\r\n                _fail(auth, authError);\r\n            }\r\n        }\r\n    }\r\n    catch (e) {\r\n        if (e instanceof FirebaseError) {\r\n            throw e;\r\n        }\r\n        // Changing this to a different error code will log user out when there is a network error\r\n        // because we treat any error other than NETWORK_REQUEST_FAILED as token is invalid.\r\n        // https://github.com/firebase/firebase-js-sdk/blob/4fbc73610d70be4e0852e7de63a39cb7897e8546/packages/auth/src/core/auth/auth_impl.ts#L309-L316\r\n        _fail(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */, { 'message': String(e) });\r\n    }\r\n}\r\nasync function _performSignInRequest(auth, method, path, request, customErrorMap = {}) {\r\n    const serverResponse = (await _performApiRequest(auth, method, path, request, customErrorMap));\r\n    if ('mfaPendingCredential' in serverResponse) {\r\n        _fail(auth, \"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */, {\r\n            _serverResponse: serverResponse\r\n        });\r\n    }\r\n    return serverResponse;\r\n}\r\nfunction _getFinalTarget(auth, host, path, query) {\r\n    const base = `${host}${path}?${query}`;\r\n    if (!auth.config.emulator) {\r\n        return `${auth.config.apiScheme}://${base}`;\r\n    }\r\n    return _emulatorUrl(auth.config, base);\r\n}\r\nclass NetworkTimeout {\r\n    constructor(auth) {\r\n        this.auth = auth;\r\n        // Node timers and browser timers are fundamentally incompatible, but we\r\n        // don't care about the value here\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        this.timer = null;\r\n        this.promise = new Promise((_, reject) => {\r\n            this.timer = setTimeout(() => {\r\n                return reject(_createError(this.auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));\r\n            }, DEFAULT_API_TIMEOUT_MS.get());\r\n        });\r\n    }\r\n    clearNetworkTimeout() {\r\n        clearTimeout(this.timer);\r\n    }\r\n}\r\nfunction _makeTaggedError(auth, code, response) {\r\n    const errorParams = {\r\n        appName: auth.name\r\n    };\r\n    if (response.email) {\r\n        errorParams.email = response.email;\r\n    }\r\n    if (response.phoneNumber) {\r\n        errorParams.phoneNumber = response.phoneNumber;\r\n    }\r\n    const error = _createError(auth, code, errorParams);\r\n    // We know customData is defined on error because errorParams is defined\r\n    error.customData._tokenResponse = response;\r\n    return error;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function deleteAccount(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:delete\" /* Endpoint.DELETE_ACCOUNT */, request);\r\n}\r\nasync function deleteLinkedAccounts(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, request);\r\n}\r\nasync function getAccountInfo(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:lookup\" /* Endpoint.GET_ACCOUNT_INFO */, request);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction utcTimestampToDateString(utcTimestamp) {\r\n    if (!utcTimestamp) {\r\n        return undefined;\r\n    }\r\n    try {\r\n        // Convert to date object.\r\n        const date = new Date(Number(utcTimestamp));\r\n        // Test date is valid.\r\n        if (!isNaN(date.getTime())) {\r\n            // Convert to UTC date string.\r\n            return date.toUTCString();\r\n        }\r\n    }\r\n    catch (e) {\r\n        // Do nothing. undefined will be returned.\r\n    }\r\n    return undefined;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a JSON Web Token (JWT) used to identify the user to a Firebase service.\r\n *\r\n * @remarks\r\n * Returns the current token if it has not expired or if it will not expire in the next five\r\n * minutes. Otherwise, this will refresh the token and return a new one.\r\n *\r\n * @param user - The user.\r\n * @param forceRefresh - Force refresh regardless of token expiration.\r\n *\r\n * @public\r\n */\r\nfunction getIdToken(user, forceRefresh = false) {\r\n    return getModularInstance(user).getIdToken(forceRefresh);\r\n}\r\n/**\r\n * Returns a deserialized JSON Web Token (JWT) used to identify the user to a Firebase service.\r\n *\r\n * @remarks\r\n * Returns the current token if it has not expired or if it will not expire in the next five\r\n * minutes. Otherwise, this will refresh the token and return a new one.\r\n *\r\n * @param user - The user.\r\n * @param forceRefresh - Force refresh regardless of token expiration.\r\n *\r\n * @public\r\n */\r\nasync function getIdTokenResult(user, forceRefresh = false) {\r\n    const userInternal = getModularInstance(user);\r\n    const token = await userInternal.getIdToken(forceRefresh);\r\n    const claims = _parseToken(token);\r\n    _assert(claims && claims.exp && claims.auth_time && claims.iat, userInternal.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n    const firebase = typeof claims.firebase === 'object' ? claims.firebase : undefined;\r\n    const signInProvider = firebase === null || firebase === void 0 ? void 0 : firebase['sign_in_provider'];\r\n    return {\r\n        claims,\r\n        token,\r\n        authTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.auth_time)),\r\n        issuedAtTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.iat)),\r\n        expirationTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.exp)),\r\n        signInProvider: signInProvider || null,\r\n        signInSecondFactor: (firebase === null || firebase === void 0 ? void 0 : firebase['sign_in_second_factor']) || null\r\n    };\r\n}\r\nfunction secondsStringToMilliseconds(seconds) {\r\n    return Number(seconds) * 1000;\r\n}\r\nfunction _parseToken(token) {\r\n    const [algorithm, payload, signature] = token.split('.');\r\n    if (algorithm === undefined ||\r\n        payload === undefined ||\r\n        signature === undefined) {\r\n        _logError('JWT malformed, contained fewer than 3 sections');\r\n        return null;\r\n    }\r\n    try {\r\n        const decoded = base64Decode(payload);\r\n        if (!decoded) {\r\n            _logError('Failed to decode base64 JWT payload');\r\n            return null;\r\n        }\r\n        return JSON.parse(decoded);\r\n    }\r\n    catch (e) {\r\n        _logError('Caught error parsing JWT payload as JSON', e === null || e === void 0 ? void 0 : e.toString());\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Extract expiresIn TTL from a token by subtracting the expiration from the issuance.\r\n */\r\nfunction _tokenExpiresIn(token) {\r\n    const parsedToken = _parseToken(token);\r\n    _assert(parsedToken, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n    _assert(typeof parsedToken.exp !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n    _assert(typeof parsedToken.iat !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n    return Number(parsedToken.exp) - Number(parsedToken.iat);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function _logoutIfInvalidated(user, promise, bypassAuthState = false) {\r\n    if (bypassAuthState) {\r\n        return promise;\r\n    }\r\n    try {\r\n        return await promise;\r\n    }\r\n    catch (e) {\r\n        if (e instanceof FirebaseError && isUserInvalidated(e)) {\r\n            if (user.auth.currentUser === user) {\r\n                await user.auth.signOut();\r\n            }\r\n        }\r\n        throw e;\r\n    }\r\n}\r\nfunction isUserInvalidated({ code }) {\r\n    return (code === `auth/${\"user-disabled\" /* AuthErrorCode.USER_DISABLED */}` ||\r\n        code === `auth/${\"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */}`);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ProactiveRefresh {\r\n    constructor(user) {\r\n        this.user = user;\r\n        this.isRunning = false;\r\n        // Node timers and browser timers return fundamentally different types.\r\n        // We don't actually care what the value is but TS won't accept unknown and\r\n        // we can't cast properly in both environments.\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        this.timerId = null;\r\n        this.errorBackoff = 30000 /* Duration.RETRY_BACKOFF_MIN */;\r\n    }\r\n    _start() {\r\n        if (this.isRunning) {\r\n            return;\r\n        }\r\n        this.isRunning = true;\r\n        this.schedule();\r\n    }\r\n    _stop() {\r\n        if (!this.isRunning) {\r\n            return;\r\n        }\r\n        this.isRunning = false;\r\n        if (this.timerId !== null) {\r\n            clearTimeout(this.timerId);\r\n        }\r\n    }\r\n    getInterval(wasError) {\r\n        var _a;\r\n        if (wasError) {\r\n            const interval = this.errorBackoff;\r\n            this.errorBackoff = Math.min(this.errorBackoff * 2, 960000 /* Duration.RETRY_BACKOFF_MAX */);\r\n            return interval;\r\n        }\r\n        else {\r\n            // Reset the error backoff\r\n            this.errorBackoff = 30000 /* Duration.RETRY_BACKOFF_MIN */;\r\n            const expTime = (_a = this.user.stsTokenManager.expirationTime) !== null && _a !== void 0 ? _a : 0;\r\n            const interval = expTime - Date.now() - 300000 /* Duration.OFFSET */;\r\n            return Math.max(0, interval);\r\n        }\r\n    }\r\n    schedule(wasError = false) {\r\n        if (!this.isRunning) {\r\n            // Just in case...\r\n            return;\r\n        }\r\n        const interval = this.getInterval(wasError);\r\n        this.timerId = setTimeout(async () => {\r\n            await this.iteration();\r\n        }, interval);\r\n    }\r\n    async iteration() {\r\n        try {\r\n            await this.user.getIdToken(true);\r\n        }\r\n        catch (e) {\r\n            // Only retry on network errors\r\n            if ((e === null || e === void 0 ? void 0 : e.code) ===\r\n                `auth/${\"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */}`) {\r\n                this.schedule(/* wasError */ true);\r\n            }\r\n            return;\r\n        }\r\n        this.schedule();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass UserMetadata {\r\n    constructor(createdAt, lastLoginAt) {\r\n        this.createdAt = createdAt;\r\n        this.lastLoginAt = lastLoginAt;\r\n        this._initializeTime();\r\n    }\r\n    _initializeTime() {\r\n        this.lastSignInTime = utcTimestampToDateString(this.lastLoginAt);\r\n        this.creationTime = utcTimestampToDateString(this.createdAt);\r\n    }\r\n    _copy(metadata) {\r\n        this.createdAt = metadata.createdAt;\r\n        this.lastLoginAt = metadata.lastLoginAt;\r\n        this._initializeTime();\r\n    }\r\n    toJSON() {\r\n        return {\r\n            createdAt: this.createdAt,\r\n            lastLoginAt: this.lastLoginAt\r\n        };\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function _reloadWithoutSaving(user) {\r\n    var _a;\r\n    const auth = user.auth;\r\n    const idToken = await user.getIdToken();\r\n    const response = await _logoutIfInvalidated(user, getAccountInfo(auth, { idToken }));\r\n    _assert(response === null || response === void 0 ? void 0 : response.users.length, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n    const coreAccount = response.users[0];\r\n    user._notifyReloadListener(coreAccount);\r\n    const newProviderData = ((_a = coreAccount.providerUserInfo) === null || _a === void 0 ? void 0 : _a.length)\r\n        ? extractProviderData(coreAccount.providerUserInfo)\r\n        : [];\r\n    const providerData = mergeProviderData(user.providerData, newProviderData);\r\n    // Preserves the non-nonymous status of the stored user, even if no more\r\n    // credentials (federated or email/password) are linked to the user. If\r\n    // the user was previously anonymous, then use provider data to update.\r\n    // On the other hand, if it was not anonymous before, it should never be\r\n    // considered anonymous now.\r\n    const oldIsAnonymous = user.isAnonymous;\r\n    const newIsAnonymous = !(user.email && coreAccount.passwordHash) && !(providerData === null || providerData === void 0 ? void 0 : providerData.length);\r\n    const isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;\r\n    const updates = {\r\n        uid: coreAccount.localId,\r\n        displayName: coreAccount.displayName || null,\r\n        photoURL: coreAccount.photoUrl || null,\r\n        email: coreAccount.email || null,\r\n        emailVerified: coreAccount.emailVerified || false,\r\n        phoneNumber: coreAccount.phoneNumber || null,\r\n        tenantId: coreAccount.tenantId || null,\r\n        providerData,\r\n        metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),\r\n        isAnonymous\r\n    };\r\n    Object.assign(user, updates);\r\n}\r\n/**\r\n * Reloads user account data, if signed in.\r\n *\r\n * @param user - The user.\r\n *\r\n * @public\r\n */\r\nasync function reload(user) {\r\n    const userInternal = getModularInstance(user);\r\n    await _reloadWithoutSaving(userInternal);\r\n    // Even though the current user hasn't changed, update\r\n    // current user will trigger a persistence update w/ the\r\n    // new info.\r\n    await userInternal.auth._persistUserIfCurrent(userInternal);\r\n    userInternal.auth._notifyListenersIfCurrent(userInternal);\r\n}\r\nfunction mergeProviderData(original, newData) {\r\n    const deduped = original.filter(o => !newData.some(n => n.providerId === o.providerId));\r\n    return [...deduped, ...newData];\r\n}\r\nfunction extractProviderData(providers) {\r\n    return providers.map((_a) => {\r\n        var { providerId } = _a, provider = __rest(_a, [\"providerId\"]);\r\n        return {\r\n            providerId,\r\n            uid: provider.rawId || '',\r\n            displayName: provider.displayName || null,\r\n            email: provider.email || null,\r\n            phoneNumber: provider.phoneNumber || null,\r\n            photoURL: provider.photoUrl || null\r\n        };\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function requestStsToken(auth, refreshToken) {\r\n    const response = await _performFetchWithErrorHandling(auth, {}, async () => {\r\n        const body = querystring({\r\n            'grant_type': 'refresh_token',\r\n            'refresh_token': refreshToken\r\n        }).slice(1);\r\n        const { tokenApiHost, apiKey } = auth.config;\r\n        const url = _getFinalTarget(auth, tokenApiHost, \"/v1/token\" /* Endpoint.TOKEN */, `key=${apiKey}`);\r\n        const headers = await auth._getAdditionalHeaders();\r\n        headers[\"Content-Type\" /* HttpHeader.CONTENT_TYPE */] = 'application/x-www-form-urlencoded';\r\n        return FetchProvider.fetch()(url, {\r\n            method: \"POST\" /* HttpMethod.POST */,\r\n            headers,\r\n            body\r\n        });\r\n    });\r\n    // The response comes back in snake_case. Convert to camel:\r\n    return {\r\n        accessToken: response.access_token,\r\n        expiresIn: response.expires_in,\r\n        refreshToken: response.refresh_token\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * We need to mark this class as internal explicitly to exclude it in the public typings, because\r\n * it references AuthInternal which has a circular dependency with UserInternal.\r\n *\r\n * @internal\r\n */\r\nclass StsTokenManager {\r\n    constructor() {\r\n        this.refreshToken = null;\r\n        this.accessToken = null;\r\n        this.expirationTime = null;\r\n    }\r\n    get isExpired() {\r\n        return (!this.expirationTime ||\r\n            Date.now() > this.expirationTime - 30000 /* Buffer.TOKEN_REFRESH */);\r\n    }\r\n    updateFromServerResponse(response) {\r\n        _assert(response.idToken, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        _assert(typeof response.idToken !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        _assert(typeof response.refreshToken !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        const expiresIn = 'expiresIn' in response && typeof response.expiresIn !== 'undefined'\r\n            ? Number(response.expiresIn)\r\n            : _tokenExpiresIn(response.idToken);\r\n        this.updateTokensAndExpiration(response.idToken, response.refreshToken, expiresIn);\r\n    }\r\n    async getToken(auth, forceRefresh = false) {\r\n        _assert(!this.accessToken || this.refreshToken, auth, \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */);\r\n        if (!forceRefresh && this.accessToken && !this.isExpired) {\r\n            return this.accessToken;\r\n        }\r\n        if (this.refreshToken) {\r\n            await this.refresh(auth, this.refreshToken);\r\n            return this.accessToken;\r\n        }\r\n        return null;\r\n    }\r\n    clearRefreshToken() {\r\n        this.refreshToken = null;\r\n    }\r\n    async refresh(auth, oldToken) {\r\n        const { accessToken, refreshToken, expiresIn } = await requestStsToken(auth, oldToken);\r\n        this.updateTokensAndExpiration(accessToken, refreshToken, Number(expiresIn));\r\n    }\r\n    updateTokensAndExpiration(accessToken, refreshToken, expiresInSec) {\r\n        this.refreshToken = refreshToken || null;\r\n        this.accessToken = accessToken || null;\r\n        this.expirationTime = Date.now() + expiresInSec * 1000;\r\n    }\r\n    static fromJSON(appName, object) {\r\n        const { refreshToken, accessToken, expirationTime } = object;\r\n        const manager = new StsTokenManager();\r\n        if (refreshToken) {\r\n            _assert(typeof refreshToken === 'string', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\r\n                appName\r\n            });\r\n            manager.refreshToken = refreshToken;\r\n        }\r\n        if (accessToken) {\r\n            _assert(typeof accessToken === 'string', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\r\n                appName\r\n            });\r\n            manager.accessToken = accessToken;\r\n        }\r\n        if (expirationTime) {\r\n            _assert(typeof expirationTime === 'number', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\r\n                appName\r\n            });\r\n            manager.expirationTime = expirationTime;\r\n        }\r\n        return manager;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            refreshToken: this.refreshToken,\r\n            accessToken: this.accessToken,\r\n            expirationTime: this.expirationTime\r\n        };\r\n    }\r\n    _assign(stsTokenManager) {\r\n        this.accessToken = stsTokenManager.accessToken;\r\n        this.refreshToken = stsTokenManager.refreshToken;\r\n        this.expirationTime = stsTokenManager.expirationTime;\r\n    }\r\n    _clone() {\r\n        return Object.assign(new StsTokenManager(), this.toJSON());\r\n    }\r\n    _performRefresh() {\r\n        return debugFail('not implemented');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction assertStringOrUndefined(assertion, appName) {\r\n    _assert(typeof assertion === 'string' || typeof assertion === 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, { appName });\r\n}\r\nclass UserImpl {\r\n    constructor(_a) {\r\n        var { uid, auth, stsTokenManager } = _a, opt = __rest(_a, [\"uid\", \"auth\", \"stsTokenManager\"]);\r\n        // For the user object, provider is always Firebase.\r\n        this.providerId = \"firebase\" /* ProviderId.FIREBASE */;\r\n        this.proactiveRefresh = new ProactiveRefresh(this);\r\n        this.reloadUserInfo = null;\r\n        this.reloadListener = null;\r\n        this.uid = uid;\r\n        this.auth = auth;\r\n        this.stsTokenManager = stsTokenManager;\r\n        this.accessToken = stsTokenManager.accessToken;\r\n        this.displayName = opt.displayName || null;\r\n        this.email = opt.email || null;\r\n        this.emailVerified = opt.emailVerified || false;\r\n        this.phoneNumber = opt.phoneNumber || null;\r\n        this.photoURL = opt.photoURL || null;\r\n        this.isAnonymous = opt.isAnonymous || false;\r\n        this.tenantId = opt.tenantId || null;\r\n        this.providerData = opt.providerData ? [...opt.providerData] : [];\r\n        this.metadata = new UserMetadata(opt.createdAt || undefined, opt.lastLoginAt || undefined);\r\n    }\r\n    async getIdToken(forceRefresh) {\r\n        const accessToken = await _logoutIfInvalidated(this, this.stsTokenManager.getToken(this.auth, forceRefresh));\r\n        _assert(accessToken, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        if (this.accessToken !== accessToken) {\r\n            this.accessToken = accessToken;\r\n            await this.auth._persistUserIfCurrent(this);\r\n            this.auth._notifyListenersIfCurrent(this);\r\n        }\r\n        return accessToken;\r\n    }\r\n    getIdTokenResult(forceRefresh) {\r\n        return getIdTokenResult(this, forceRefresh);\r\n    }\r\n    reload() {\r\n        return reload(this);\r\n    }\r\n    _assign(user) {\r\n        if (this === user) {\r\n            return;\r\n        }\r\n        _assert(this.uid === user.uid, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        this.displayName = user.displayName;\r\n        this.photoURL = user.photoURL;\r\n        this.email = user.email;\r\n        this.emailVerified = user.emailVerified;\r\n        this.phoneNumber = user.phoneNumber;\r\n        this.isAnonymous = user.isAnonymous;\r\n        this.tenantId = user.tenantId;\r\n        this.providerData = user.providerData.map(userInfo => (Object.assign({}, userInfo)));\r\n        this.metadata._copy(user.metadata);\r\n        this.stsTokenManager._assign(user.stsTokenManager);\r\n    }\r\n    _clone(auth) {\r\n        const newUser = new UserImpl(Object.assign(Object.assign({}, this), { auth, stsTokenManager: this.stsTokenManager._clone() }));\r\n        newUser.metadata._copy(this.metadata);\r\n        return newUser;\r\n    }\r\n    _onReload(callback) {\r\n        // There should only ever be one listener, and that is a single instance of MultiFactorUser\r\n        _assert(!this.reloadListener, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        this.reloadListener = callback;\r\n        if (this.reloadUserInfo) {\r\n            this._notifyReloadListener(this.reloadUserInfo);\r\n            this.reloadUserInfo = null;\r\n        }\r\n    }\r\n    _notifyReloadListener(userInfo) {\r\n        if (this.reloadListener) {\r\n            this.reloadListener(userInfo);\r\n        }\r\n        else {\r\n            // If no listener is subscribed yet, save the result so it's available when they do subscribe\r\n            this.reloadUserInfo = userInfo;\r\n        }\r\n    }\r\n    _startProactiveRefresh() {\r\n        this.proactiveRefresh._start();\r\n    }\r\n    _stopProactiveRefresh() {\r\n        this.proactiveRefresh._stop();\r\n    }\r\n    async _updateTokensIfNecessary(response, reload = false) {\r\n        let tokensRefreshed = false;\r\n        if (response.idToken &&\r\n            response.idToken !== this.stsTokenManager.accessToken) {\r\n            this.stsTokenManager.updateFromServerResponse(response);\r\n            tokensRefreshed = true;\r\n        }\r\n        if (reload) {\r\n            await _reloadWithoutSaving(this);\r\n        }\r\n        await this.auth._persistUserIfCurrent(this);\r\n        if (tokensRefreshed) {\r\n            this.auth._notifyListenersIfCurrent(this);\r\n        }\r\n    }\r\n    async delete() {\r\n        const idToken = await this.getIdToken();\r\n        await _logoutIfInvalidated(this, deleteAccount(this.auth, { idToken }));\r\n        this.stsTokenManager.clearRefreshToken();\r\n        // TODO: Determine if cancellable-promises are necessary to use in this class so that delete()\r\n        //       cancels pending actions...\r\n        return this.auth.signOut();\r\n    }\r\n    toJSON() {\r\n        return Object.assign(Object.assign({ uid: this.uid, email: this.email || undefined, emailVerified: this.emailVerified, displayName: this.displayName || undefined, isAnonymous: this.isAnonymous, photoURL: this.photoURL || undefined, phoneNumber: this.phoneNumber || undefined, tenantId: this.tenantId || undefined, providerData: this.providerData.map(userInfo => (Object.assign({}, userInfo))), stsTokenManager: this.stsTokenManager.toJSON(), \r\n            // Redirect event ID must be maintained in case there is a pending\r\n            // redirect event.\r\n            _redirectEventId: this._redirectEventId }, this.metadata.toJSON()), { \r\n            // Required for compatibility with the legacy SDK (go/firebase-auth-sdk-persistence-parsing):\r\n            apiKey: this.auth.config.apiKey, appName: this.auth.name });\r\n    }\r\n    get refreshToken() {\r\n        return this.stsTokenManager.refreshToken || '';\r\n    }\r\n    static _fromJSON(auth, object) {\r\n        var _a, _b, _c, _d, _e, _f, _g, _h;\r\n        const displayName = (_a = object.displayName) !== null && _a !== void 0 ? _a : undefined;\r\n        const email = (_b = object.email) !== null && _b !== void 0 ? _b : undefined;\r\n        const phoneNumber = (_c = object.phoneNumber) !== null && _c !== void 0 ? _c : undefined;\r\n        const photoURL = (_d = object.photoURL) !== null && _d !== void 0 ? _d : undefined;\r\n        const tenantId = (_e = object.tenantId) !== null && _e !== void 0 ? _e : undefined;\r\n        const _redirectEventId = (_f = object._redirectEventId) !== null && _f !== void 0 ? _f : undefined;\r\n        const createdAt = (_g = object.createdAt) !== null && _g !== void 0 ? _g : undefined;\r\n        const lastLoginAt = (_h = object.lastLoginAt) !== null && _h !== void 0 ? _h : undefined;\r\n        const { uid, emailVerified, isAnonymous, providerData, stsTokenManager: plainObjectTokenManager } = object;\r\n        _assert(uid && plainObjectTokenManager, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        const stsTokenManager = StsTokenManager.fromJSON(this.name, plainObjectTokenManager);\r\n        _assert(typeof uid === 'string', auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        assertStringOrUndefined(displayName, auth.name);\r\n        assertStringOrUndefined(email, auth.name);\r\n        _assert(typeof emailVerified === 'boolean', auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        _assert(typeof isAnonymous === 'boolean', auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        assertStringOrUndefined(phoneNumber, auth.name);\r\n        assertStringOrUndefined(photoURL, auth.name);\r\n        assertStringOrUndefined(tenantId, auth.name);\r\n        assertStringOrUndefined(_redirectEventId, auth.name);\r\n        assertStringOrUndefined(createdAt, auth.name);\r\n        assertStringOrUndefined(lastLoginAt, auth.name);\r\n        const user = new UserImpl({\r\n            uid,\r\n            auth,\r\n            email,\r\n            emailVerified,\r\n            displayName,\r\n            isAnonymous,\r\n            photoURL,\r\n            phoneNumber,\r\n            tenantId,\r\n            stsTokenManager,\r\n            createdAt,\r\n            lastLoginAt\r\n        });\r\n        if (providerData && Array.isArray(providerData)) {\r\n            user.providerData = providerData.map(userInfo => (Object.assign({}, userInfo)));\r\n        }\r\n        if (_redirectEventId) {\r\n            user._redirectEventId = _redirectEventId;\r\n        }\r\n        return user;\r\n    }\r\n    /**\r\n     * Initialize a User from an idToken server response\r\n     * @param auth\r\n     * @param idTokenResponse\r\n     */\r\n    static async _fromIdTokenResponse(auth, idTokenResponse, isAnonymous = false) {\r\n        const stsTokenManager = new StsTokenManager();\r\n        stsTokenManager.updateFromServerResponse(idTokenResponse);\r\n        // Initialize the Firebase Auth user.\r\n        const user = new UserImpl({\r\n            uid: idTokenResponse.localId,\r\n            auth,\r\n            stsTokenManager,\r\n            isAnonymous\r\n        });\r\n        // Updates the user info and data and resolves with a user instance.\r\n        await _reloadWithoutSaving(user);\r\n        return user;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst instanceCache = new Map();\r\nfunction _getInstance(cls) {\r\n    debugAssert(cls instanceof Function, 'Expected a class definition');\r\n    let instance = instanceCache.get(cls);\r\n    if (instance) {\r\n        debugAssert(instance instanceof cls, 'Instance stored in cache mismatched with class');\r\n        return instance;\r\n    }\r\n    instance = new cls();\r\n    instanceCache.set(cls, instance);\r\n    return instance;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass InMemoryPersistence {\r\n    constructor() {\r\n        this.type = \"NONE\" /* PersistenceType.NONE */;\r\n        this.storage = {};\r\n    }\r\n    async _isAvailable() {\r\n        return true;\r\n    }\r\n    async _set(key, value) {\r\n        this.storage[key] = value;\r\n    }\r\n    async _get(key) {\r\n        const value = this.storage[key];\r\n        return value === undefined ? null : value;\r\n    }\r\n    async _remove(key) {\r\n        delete this.storage[key];\r\n    }\r\n    _addListener(_key, _listener) {\r\n        // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\r\n        return;\r\n    }\r\n    _removeListener(_key, _listener) {\r\n        // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\r\n        return;\r\n    }\r\n}\r\nInMemoryPersistence.type = 'NONE';\r\n/**\r\n * An implementation of {@link Persistence} of type 'NONE'.\r\n *\r\n * @public\r\n */\r\nconst inMemoryPersistence = InMemoryPersistence;\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction _persistenceKeyName(key, apiKey, appName) {\r\n    return `${\"firebase\" /* Namespace.PERSISTENCE */}:${key}:${apiKey}:${appName}`;\r\n}\r\nclass PersistenceUserManager {\r\n    constructor(persistence, auth, userKey) {\r\n        this.persistence = persistence;\r\n        this.auth = auth;\r\n        this.userKey = userKey;\r\n        const { config, name } = this.auth;\r\n        this.fullUserKey = _persistenceKeyName(this.userKey, config.apiKey, name);\r\n        this.fullPersistenceKey = _persistenceKeyName(\"persistence\" /* KeyName.PERSISTENCE_USER */, config.apiKey, name);\r\n        this.boundEventHandler = auth._onStorageEvent.bind(auth);\r\n        this.persistence._addListener(this.fullUserKey, this.boundEventHandler);\r\n    }\r\n    setCurrentUser(user) {\r\n        return this.persistence._set(this.fullUserKey, user.toJSON());\r\n    }\r\n    async getCurrentUser() {\r\n        const blob = await this.persistence._get(this.fullUserKey);\r\n        return blob ? UserImpl._fromJSON(this.auth, blob) : null;\r\n    }\r\n    removeCurrentUser() {\r\n        return this.persistence._remove(this.fullUserKey);\r\n    }\r\n    savePersistenceForRedirect() {\r\n        return this.persistence._set(this.fullPersistenceKey, this.persistence.type);\r\n    }\r\n    async setPersistence(newPersistence) {\r\n        if (this.persistence === newPersistence) {\r\n            return;\r\n        }\r\n        const currentUser = await this.getCurrentUser();\r\n        await this.removeCurrentUser();\r\n        this.persistence = newPersistence;\r\n        if (currentUser) {\r\n            return this.setCurrentUser(currentUser);\r\n        }\r\n    }\r\n    delete() {\r\n        this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);\r\n    }\r\n    static async create(auth, persistenceHierarchy, userKey = \"authUser\" /* KeyName.AUTH_USER */) {\r\n        if (!persistenceHierarchy.length) {\r\n            return new PersistenceUserManager(_getInstance(inMemoryPersistence), auth, userKey);\r\n        }\r\n        // Eliminate any persistences that are not available\r\n        const availablePersistences = (await Promise.all(persistenceHierarchy.map(async (persistence) => {\r\n            if (await persistence._isAvailable()) {\r\n                return persistence;\r\n            }\r\n            return undefined;\r\n        }))).filter(persistence => persistence);\r\n        // Fall back to the first persistence listed, or in memory if none available\r\n        let selectedPersistence = availablePersistences[0] ||\r\n            _getInstance(inMemoryPersistence);\r\n        const key = _persistenceKeyName(userKey, auth.config.apiKey, auth.name);\r\n        // Pull out the existing user, setting the chosen persistence to that\r\n        // persistence if the user exists.\r\n        let userToMigrate = null;\r\n        // Note, here we check for a user in _all_ persistences, not just the\r\n        // ones deemed available. If we can migrate a user out of a broken\r\n        // persistence, we will (but only if that persistence supports migration).\r\n        for (const persistence of persistenceHierarchy) {\r\n            try {\r\n                const blob = await persistence._get(key);\r\n                if (blob) {\r\n                    const user = UserImpl._fromJSON(auth, blob); // throws for unparsable blob (wrong format)\r\n                    if (persistence !== selectedPersistence) {\r\n                        userToMigrate = user;\r\n                    }\r\n                    selectedPersistence = persistence;\r\n                    break;\r\n                }\r\n            }\r\n            catch (_a) { }\r\n        }\r\n        // If we find the user in a persistence that does support migration, use\r\n        // that migration path (of only persistences that support migration)\r\n        const migrationHierarchy = availablePersistences.filter(p => p._shouldAllowMigration);\r\n        // If the persistence does _not_ allow migration, just finish off here\r\n        if (!selectedPersistence._shouldAllowMigration ||\r\n            !migrationHierarchy.length) {\r\n            return new PersistenceUserManager(selectedPersistence, auth, userKey);\r\n        }\r\n        selectedPersistence = migrationHierarchy[0];\r\n        if (userToMigrate) {\r\n            // This normally shouldn't throw since chosenPersistence.isAvailable() is true, but if it does\r\n            // we'll just let it bubble to surface the error.\r\n            await selectedPersistence._set(key, userToMigrate.toJSON());\r\n        }\r\n        // Attempt to clear the key in other persistences but ignore errors. This helps prevent issues\r\n        // such as users getting stuck with a previous account after signing out and refreshing the tab.\r\n        await Promise.all(persistenceHierarchy.map(async (persistence) => {\r\n            if (persistence !== selectedPersistence) {\r\n                try {\r\n                    await persistence._remove(key);\r\n                }\r\n                catch (_a) { }\r\n            }\r\n        }));\r\n        return new PersistenceUserManager(selectedPersistence, auth, userKey);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Determine the browser for the purposes of reporting usage to the API\r\n */\r\nfunction _getBrowserName(userAgent) {\r\n    const ua = userAgent.toLowerCase();\r\n    if (ua.includes('opera/') || ua.includes('opr/') || ua.includes('opios/')) {\r\n        return \"Opera\" /* BrowserName.OPERA */;\r\n    }\r\n    else if (_isIEMobile(ua)) {\r\n        // Windows phone IEMobile browser.\r\n        return \"IEMobile\" /* BrowserName.IEMOBILE */;\r\n    }\r\n    else if (ua.includes('msie') || ua.includes('trident/')) {\r\n        return \"IE\" /* BrowserName.IE */;\r\n    }\r\n    else if (ua.includes('edge/')) {\r\n        return \"Edge\" /* BrowserName.EDGE */;\r\n    }\r\n    else if (_isFirefox(ua)) {\r\n        return \"Firefox\" /* BrowserName.FIREFOX */;\r\n    }\r\n    else if (ua.includes('silk/')) {\r\n        return \"Silk\" /* BrowserName.SILK */;\r\n    }\r\n    else if (_isBlackBerry(ua)) {\r\n        // Blackberry browser.\r\n        return \"Blackberry\" /* BrowserName.BLACKBERRY */;\r\n    }\r\n    else if (_isWebOS(ua)) {\r\n        // WebOS default browser.\r\n        return \"Webos\" /* BrowserName.WEBOS */;\r\n    }\r\n    else if (_isSafari(ua)) {\r\n        return \"Safari\" /* BrowserName.SAFARI */;\r\n    }\r\n    else if ((ua.includes('chrome/') || _isChromeIOS(ua)) &&\r\n        !ua.includes('edge/')) {\r\n        return \"Chrome\" /* BrowserName.CHROME */;\r\n    }\r\n    else if (_isAndroid(ua)) {\r\n        // Android stock browser.\r\n        return \"Android\" /* BrowserName.ANDROID */;\r\n    }\r\n    else {\r\n        // Most modern browsers have name/version at end of user agent string.\r\n        const re = /([a-zA-Z\\d\\.]+)\\/[a-zA-Z\\d\\.]*$/;\r\n        const matches = userAgent.match(re);\r\n        if ((matches === null || matches === void 0 ? void 0 : matches.length) === 2) {\r\n            return matches[1];\r\n        }\r\n    }\r\n    return \"Other\" /* BrowserName.OTHER */;\r\n}\r\nfunction _isFirefox(ua = getUA()) {\r\n    return /firefox\\//i.test(ua);\r\n}\r\nfunction _isSafari(userAgent = getUA()) {\r\n    const ua = userAgent.toLowerCase();\r\n    return (ua.includes('safari/') &&\r\n        !ua.includes('chrome/') &&\r\n        !ua.includes('crios/') &&\r\n        !ua.includes('android'));\r\n}\r\nfunction _isChromeIOS(ua = getUA()) {\r\n    return /crios\\//i.test(ua);\r\n}\r\nfunction _isIEMobile(ua = getUA()) {\r\n    return /iemobile/i.test(ua);\r\n}\r\nfunction _isAndroid(ua = getUA()) {\r\n    return /android/i.test(ua);\r\n}\r\nfunction _isBlackBerry(ua = getUA()) {\r\n    return /blackberry/i.test(ua);\r\n}\r\nfunction _isWebOS(ua = getUA()) {\r\n    return /webos/i.test(ua);\r\n}\r\nfunction _isIOS(ua = getUA()) {\r\n    return (/iphone|ipad|ipod/i.test(ua) ||\r\n        (/macintosh/i.test(ua) && /mobile/i.test(ua)));\r\n}\r\nfunction _isIOS7Or8(ua = getUA()) {\r\n    return (/(iPad|iPhone|iPod).*OS 7_\\d/i.test(ua) ||\r\n        /(iPad|iPhone|iPod).*OS 8_\\d/i.test(ua));\r\n}\r\nfunction _isIOSStandalone(ua = getUA()) {\r\n    var _a;\r\n    return _isIOS(ua) && !!((_a = window.navigator) === null || _a === void 0 ? void 0 : _a.standalone);\r\n}\r\nfunction _isIE10() {\r\n    return isIE() && document.documentMode === 10;\r\n}\r\nfunction _isMobileBrowser(ua = getUA()) {\r\n    // TODO: implement getBrowserName equivalent for OS.\r\n    return (_isIOS(ua) ||\r\n        _isAndroid(ua) ||\r\n        _isWebOS(ua) ||\r\n        _isBlackBerry(ua) ||\r\n        /windows phone/i.test(ua) ||\r\n        _isIEMobile(ua));\r\n}\r\nfunction _isIframe() {\r\n    try {\r\n        // Check that the current window is not the top window.\r\n        // If so, return true.\r\n        return !!(window && window !== window.top);\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/*\r\n * Determine the SDK version string\r\n */\r\nfunction _getClientVersion(clientPlatform, frameworks = []) {\r\n    let reportedPlatform;\r\n    switch (clientPlatform) {\r\n        case \"Browser\" /* ClientPlatform.BROWSER */:\r\n            // In a browser environment, report the browser name.\r\n            reportedPlatform = _getBrowserName(getUA());\r\n            break;\r\n        case \"Worker\" /* ClientPlatform.WORKER */:\r\n            // Technically a worker runs from a browser but we need to differentiate a\r\n            // worker from a browser.\r\n            // For example: Chrome-Worker/JsCore/4.9.1/FirebaseCore-web.\r\n            reportedPlatform = `${_getBrowserName(getUA())}-${clientPlatform}`;\r\n            break;\r\n        default:\r\n            reportedPlatform = clientPlatform;\r\n    }\r\n    const reportedFrameworks = frameworks.length\r\n        ? frameworks.join(',')\r\n        : 'FirebaseCore-web'; /* default value if no other framework is used */\r\n    return `${reportedPlatform}/${\"JsCore\" /* ClientImplementation.CORE */}/${SDK_VERSION}/${reportedFrameworks}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function getRecaptchaParams(auth) {\r\n    return ((await _performApiRequest(auth, \"GET\" /* HttpMethod.GET */, \"/v1/recaptchaParams\" /* Endpoint.GET_RECAPTCHA_PARAM */)).recaptchaSiteKey || '');\r\n}\r\nasync function getRecaptchaConfig(auth, request) {\r\n    return _performApiRequest(auth, \"GET\" /* HttpMethod.GET */, \"/v2/recaptchaConfig\" /* Endpoint.GET_RECAPTCHA_CONFIG */, _addTidIfNecessary(auth, request));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isV2(grecaptcha) {\r\n    return (grecaptcha !== undefined &&\r\n        grecaptcha.getResponse !== undefined);\r\n}\r\nfunction isEnterprise(grecaptcha) {\r\n    return (grecaptcha !== undefined &&\r\n        grecaptcha.enterprise !== undefined);\r\n}\r\nclass RecaptchaConfig {\r\n    constructor(response) {\r\n        /**\r\n         * The reCAPTCHA site key.\r\n         */\r\n        this.siteKey = '';\r\n        /**\r\n         * The reCAPTCHA enablement status of the {@link EmailAuthProvider} for the current tenant.\r\n         */\r\n        this.emailPasswordEnabled = false;\r\n        if (response.recaptchaKey === undefined) {\r\n            throw new Error('recaptchaKey undefined');\r\n        }\r\n        // Example response.recaptchaKey: \"projects/proj123/keys/sitekey123\"\r\n        this.siteKey = response.recaptchaKey.split('/')[3];\r\n        this.emailPasswordEnabled = response.recaptchaEnforcementState.some(enforcementState => enforcementState.provider === 'EMAIL_PASSWORD_PROVIDER' &&\r\n            enforcementState.enforcementState !== 'OFF');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getScriptParentElement() {\r\n    var _a, _b;\r\n    return (_b = (_a = document.getElementsByTagName('head')) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : document;\r\n}\r\nfunction _loadJS(url) {\r\n    // TODO: consider adding timeout support & cancellation\r\n    return new Promise((resolve, reject) => {\r\n        const el = document.createElement('script');\r\n        el.setAttribute('src', url);\r\n        el.onload = resolve;\r\n        el.onerror = e => {\r\n            const error = _createError(\"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n            error.customData = e;\r\n            reject(error);\r\n        };\r\n        el.type = 'text/javascript';\r\n        el.charset = 'UTF-8';\r\n        getScriptParentElement().appendChild(el);\r\n    });\r\n}\r\nfunction _generateCallbackName(prefix) {\r\n    return `__${prefix}${Math.floor(Math.random() * 1000000)}`;\r\n}\n\n/* eslint-disable @typescript-eslint/no-require-imports */\r\nconst RECAPTCHA_ENTERPRISE_URL = 'https://www.google.com/recaptcha/enterprise.js?render=';\r\nconst RECAPTCHA_ENTERPRISE_VERIFIER_TYPE = 'recaptcha-enterprise';\r\nconst FAKE_TOKEN = 'NO_RECAPTCHA';\r\nclass RecaptchaEnterpriseVerifier {\r\n    /**\r\n     *\r\n     * @param authExtern - The corresponding Firebase {@link Auth} instance.\r\n     *\r\n     */\r\n    constructor(authExtern) {\r\n        /**\r\n         * Identifies the type of application verifier (e.g. \"recaptcha-enterprise\").\r\n         */\r\n        this.type = RECAPTCHA_ENTERPRISE_VERIFIER_TYPE;\r\n        this.auth = _castAuth(authExtern);\r\n    }\r\n    /**\r\n     * Executes the verification process.\r\n     *\r\n     * @returns A Promise for a token that can be used to assert the validity of a request.\r\n     */\r\n    async verify(action = 'verify', forceRefresh = false) {\r\n        async function retrieveSiteKey(auth) {\r\n            if (!forceRefresh) {\r\n                if (auth.tenantId == null && auth._agentRecaptchaConfig != null) {\r\n                    return auth._agentRecaptchaConfig.siteKey;\r\n                }\r\n                if (auth.tenantId != null &&\r\n                    auth._tenantRecaptchaConfigs[auth.tenantId] !== undefined) {\r\n                    return auth._tenantRecaptchaConfigs[auth.tenantId].siteKey;\r\n                }\r\n            }\r\n            return new Promise(async (resolve, reject) => {\r\n                getRecaptchaConfig(auth, {\r\n                    clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\r\n                    version: \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\r\n                })\r\n                    .then(response => {\r\n                    if (response.recaptchaKey === undefined) {\r\n                        reject(new Error('recaptcha Enterprise site key undefined'));\r\n                    }\r\n                    else {\r\n                        const config = new RecaptchaConfig(response);\r\n                        if (auth.tenantId == null) {\r\n                            auth._agentRecaptchaConfig = config;\r\n                        }\r\n                        else {\r\n                            auth._tenantRecaptchaConfigs[auth.tenantId] = config;\r\n                        }\r\n                        return resolve(config.siteKey);\r\n                    }\r\n                })\r\n                    .catch(error => {\r\n                    reject(error);\r\n                });\r\n            });\r\n        }\r\n        function retrieveRecaptchaToken(siteKey, resolve, reject) {\r\n            const grecaptcha = window.grecaptcha;\r\n            if (isEnterprise(grecaptcha)) {\r\n                grecaptcha.enterprise.ready(() => {\r\n                    grecaptcha.enterprise\r\n                        .execute(siteKey, { action })\r\n                        .then(token => {\r\n                        resolve(token);\r\n                    })\r\n                        .catch(() => {\r\n                        resolve(FAKE_TOKEN);\r\n                    });\r\n                });\r\n            }\r\n            else {\r\n                reject(Error('No reCAPTCHA enterprise script loaded.'));\r\n            }\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            retrieveSiteKey(this.auth)\r\n                .then(siteKey => {\r\n                if (!forceRefresh && isEnterprise(window.grecaptcha)) {\r\n                    retrieveRecaptchaToken(siteKey, resolve, reject);\r\n                }\r\n                else {\r\n                    if (typeof window === 'undefined') {\r\n                        reject(new Error('RecaptchaVerifier is only supported in browser'));\r\n                        return;\r\n                    }\r\n                    _loadJS(RECAPTCHA_ENTERPRISE_URL + siteKey)\r\n                        .then(() => {\r\n                        retrieveRecaptchaToken(siteKey, resolve, reject);\r\n                    })\r\n                        .catch(error => {\r\n                        reject(error);\r\n                    });\r\n                }\r\n            })\r\n                .catch(error => {\r\n                reject(error);\r\n            });\r\n        });\r\n    }\r\n}\r\nasync function injectRecaptchaFields(auth, request, action, captchaResp = false) {\r\n    const verifier = new RecaptchaEnterpriseVerifier(auth);\r\n    let captchaResponse;\r\n    try {\r\n        captchaResponse = await verifier.verify(action);\r\n    }\r\n    catch (error) {\r\n        captchaResponse = await verifier.verify(action, true);\r\n    }\r\n    const newRequest = Object.assign({}, request);\r\n    if (!captchaResp) {\r\n        Object.assign(newRequest, { captchaResponse });\r\n    }\r\n    else {\r\n        Object.assign(newRequest, { 'captchaResp': captchaResponse });\r\n    }\r\n    Object.assign(newRequest, { 'clientType': \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */ });\r\n    Object.assign(newRequest, {\r\n        'recaptchaVersion': \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\r\n    });\r\n    return newRequest;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass AuthMiddlewareQueue {\r\n    constructor(auth) {\r\n        this.auth = auth;\r\n        this.queue = [];\r\n    }\r\n    pushCallback(callback, onAbort) {\r\n        // The callback could be sync or async. Wrap it into a\r\n        // function that is always async.\r\n        const wrappedCallback = (user) => new Promise((resolve, reject) => {\r\n            try {\r\n                const result = callback(user);\r\n                // Either resolve with existing promise or wrap a non-promise\r\n                // return value into a promise.\r\n                resolve(result);\r\n            }\r\n            catch (e) {\r\n                // Sync callback throws.\r\n                reject(e);\r\n            }\r\n        });\r\n        // Attach the onAbort if present\r\n        wrappedCallback.onAbort = onAbort;\r\n        this.queue.push(wrappedCallback);\r\n        const index = this.queue.length - 1;\r\n        return () => {\r\n            // Unsubscribe. Replace with no-op. Do not remove from array, or it will disturb\r\n            // indexing of other elements.\r\n            this.queue[index] = () => Promise.resolve();\r\n        };\r\n    }\r\n    async runMiddleware(nextUser) {\r\n        if (this.auth.currentUser === nextUser) {\r\n            return;\r\n        }\r\n        // While running the middleware, build a temporary stack of onAbort\r\n        // callbacks to call if one middleware callback rejects.\r\n        const onAbortStack = [];\r\n        try {\r\n            for (const beforeStateCallback of this.queue) {\r\n                await beforeStateCallback(nextUser);\r\n                // Only push the onAbort if the callback succeeds\r\n                if (beforeStateCallback.onAbort) {\r\n                    onAbortStack.push(beforeStateCallback.onAbort);\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            // Run all onAbort, with separate try/catch to ignore any errors and\r\n            // continue\r\n            onAbortStack.reverse();\r\n            for (const onAbort of onAbortStack) {\r\n                try {\r\n                    onAbort();\r\n                }\r\n                catch (_) {\r\n                    /* swallow error */\r\n                }\r\n            }\r\n            throw this.auth._errorFactory.create(\"login-blocked\" /* AuthErrorCode.LOGIN_BLOCKED */, {\r\n                originalMessage: e === null || e === void 0 ? void 0 : e.message\r\n            });\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass AuthImpl {\r\n    constructor(app, heartbeatServiceProvider, appCheckServiceProvider, config) {\r\n        this.app = app;\r\n        this.heartbeatServiceProvider = heartbeatServiceProvider;\r\n        this.appCheckServiceProvider = appCheckServiceProvider;\r\n        this.config = config;\r\n        this.currentUser = null;\r\n        this.emulatorConfig = null;\r\n        this.operations = Promise.resolve();\r\n        this.authStateSubscription = new Subscription(this);\r\n        this.idTokenSubscription = new Subscription(this);\r\n        this.beforeStateQueue = new AuthMiddlewareQueue(this);\r\n        this.redirectUser = null;\r\n        this.isProactiveRefreshEnabled = false;\r\n        // Any network calls will set this to true and prevent subsequent emulator\r\n        // initialization\r\n        this._canInitEmulator = true;\r\n        this._isInitialized = false;\r\n        this._deleted = false;\r\n        this._initializationPromise = null;\r\n        this._popupRedirectResolver = null;\r\n        this._errorFactory = _DEFAULT_AUTH_ERROR_FACTORY;\r\n        this._agentRecaptchaConfig = null;\r\n        this._tenantRecaptchaConfigs = {};\r\n        // Tracks the last notified UID for state change listeners to prevent\r\n        // repeated calls to the callbacks. Undefined means it's never been\r\n        // called, whereas null means it's been called with a signed out user\r\n        this.lastNotifiedUid = undefined;\r\n        this.languageCode = null;\r\n        this.tenantId = null;\r\n        this.settings = { appVerificationDisabledForTesting: false };\r\n        this.frameworks = [];\r\n        this.name = app.name;\r\n        this.clientVersion = config.sdkClientVersion;\r\n    }\r\n    _initializeWithPersistence(persistenceHierarchy, popupRedirectResolver) {\r\n        if (popupRedirectResolver) {\r\n            this._popupRedirectResolver = _getInstance(popupRedirectResolver);\r\n        }\r\n        // Have to check for app deletion throughout initialization (after each\r\n        // promise resolution)\r\n        this._initializationPromise = this.queue(async () => {\r\n            var _a, _b;\r\n            if (this._deleted) {\r\n                return;\r\n            }\r\n            this.persistenceManager = await PersistenceUserManager.create(this, persistenceHierarchy);\r\n            if (this._deleted) {\r\n                return;\r\n            }\r\n            // Initialize the resolver early if necessary (only applicable to web:\r\n            // this will cause the iframe to load immediately in certain cases)\r\n            if ((_a = this._popupRedirectResolver) === null || _a === void 0 ? void 0 : _a._shouldInitProactively) {\r\n                // If this fails, don't halt auth loading\r\n                try {\r\n                    await this._popupRedirectResolver._initialize(this);\r\n                }\r\n                catch (e) {\r\n                    /* Ignore the error */\r\n                }\r\n            }\r\n            await this.initializeCurrentUser(popupRedirectResolver);\r\n            this.lastNotifiedUid = ((_b = this.currentUser) === null || _b === void 0 ? void 0 : _b.uid) || null;\r\n            if (this._deleted) {\r\n                return;\r\n            }\r\n            this._isInitialized = true;\r\n        });\r\n        return this._initializationPromise;\r\n    }\r\n    /**\r\n     * If the persistence is changed in another window, the user manager will let us know\r\n     */\r\n    async _onStorageEvent() {\r\n        if (this._deleted) {\r\n            return;\r\n        }\r\n        const user = await this.assertedPersistence.getCurrentUser();\r\n        if (!this.currentUser && !user) {\r\n            // No change, do nothing (was signed out and remained signed out).\r\n            return;\r\n        }\r\n        // If the same user is to be synchronized.\r\n        if (this.currentUser && user && this.currentUser.uid === user.uid) {\r\n            // Data update, simply copy data changes.\r\n            this._currentUser._assign(user);\r\n            // If tokens changed from previous user tokens, this will trigger\r\n            // notifyAuthListeners_.\r\n            await this.currentUser.getIdToken();\r\n            return;\r\n        }\r\n        // Update current Auth state. Either a new login or logout.\r\n        // Skip blocking callbacks, they should not apply to a change in another tab.\r\n        await this._updateCurrentUser(user, /* skipBeforeStateCallbacks */ true);\r\n    }\r\n    async initializeCurrentUser(popupRedirectResolver) {\r\n        var _a;\r\n        // First check to see if we have a pending redirect event.\r\n        const previouslyStoredUser = (await this.assertedPersistence.getCurrentUser());\r\n        let futureCurrentUser = previouslyStoredUser;\r\n        let needsTocheckMiddleware = false;\r\n        if (popupRedirectResolver && this.config.authDomain) {\r\n            await this.getOrInitRedirectPersistenceManager();\r\n            const redirectUserEventId = (_a = this.redirectUser) === null || _a === void 0 ? void 0 : _a._redirectEventId;\r\n            const storedUserEventId = futureCurrentUser === null || futureCurrentUser === void 0 ? void 0 : futureCurrentUser._redirectEventId;\r\n            const result = await this.tryRedirectSignIn(popupRedirectResolver);\r\n            // If the stored user (i.e. the old \"currentUser\") has a redirectId that\r\n            // matches the redirect user, then we want to initially sign in with the\r\n            // new user object from result.\r\n            // TODO(samgho): More thoroughly test all of this\r\n            if ((!redirectUserEventId || redirectUserEventId === storedUserEventId) &&\r\n                (result === null || result === void 0 ? void 0 : result.user)) {\r\n                futureCurrentUser = result.user;\r\n                needsTocheckMiddleware = true;\r\n            }\r\n        }\r\n        // If no user in persistence, there is no current user. Set to null.\r\n        if (!futureCurrentUser) {\r\n            return this.directlySetCurrentUser(null);\r\n        }\r\n        if (!futureCurrentUser._redirectEventId) {\r\n            // This isn't a redirect link operation, we can reload and bail.\r\n            // First though, ensure that we check the middleware is happy.\r\n            if (needsTocheckMiddleware) {\r\n                try {\r\n                    await this.beforeStateQueue.runMiddleware(futureCurrentUser);\r\n                }\r\n                catch (e) {\r\n                    futureCurrentUser = previouslyStoredUser;\r\n                    // We know this is available since the bit is only set when the\r\n                    // resolver is available\r\n                    this._popupRedirectResolver._overrideRedirectResult(this, () => Promise.reject(e));\r\n                }\r\n            }\r\n            if (futureCurrentUser) {\r\n                return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);\r\n            }\r\n            else {\r\n                return this.directlySetCurrentUser(null);\r\n            }\r\n        }\r\n        _assert(this._popupRedirectResolver, this, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        await this.getOrInitRedirectPersistenceManager();\r\n        // If the redirect user's event ID matches the current user's event ID,\r\n        // DO NOT reload the current user, otherwise they'll be cleared from storage.\r\n        // This is important for the reauthenticateWithRedirect() flow.\r\n        if (this.redirectUser &&\r\n            this.redirectUser._redirectEventId === futureCurrentUser._redirectEventId) {\r\n            return this.directlySetCurrentUser(futureCurrentUser);\r\n        }\r\n        return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);\r\n    }\r\n    async tryRedirectSignIn(redirectResolver) {\r\n        // The redirect user needs to be checked (and signed in if available)\r\n        // during auth initialization. All of the normal sign in and link/reauth\r\n        // flows call back into auth and push things onto the promise queue. We\r\n        // need to await the result of the redirect sign in *inside the promise\r\n        // queue*. This presents a problem: we run into deadlock. See:\r\n        //    ┌> [Initialization] ─────┐\r\n        //    ┌> [<other queue tasks>] │\r\n        //    └─ [getRedirectResult] <─┘\r\n        //    where [] are tasks on the queue and arrows denote awaits\r\n        // Initialization will never complete because it's waiting on something\r\n        // that's waiting for initialization to complete!\r\n        //\r\n        // Instead, this method calls getRedirectResult() (stored in\r\n        // _completeRedirectFn) with an optional parameter that instructs all of\r\n        // the underlying auth operations to skip anything that mutates auth state.\r\n        let result = null;\r\n        try {\r\n            // We know this._popupRedirectResolver is set since redirectResolver\r\n            // is passed in. The _completeRedirectFn expects the unwrapped extern.\r\n            result = await this._popupRedirectResolver._completeRedirectFn(this, redirectResolver, true);\r\n        }\r\n        catch (e) {\r\n            // Swallow any errors here; the code can retrieve them in\r\n            // getRedirectResult().\r\n            await this._setRedirectUser(null);\r\n        }\r\n        return result;\r\n    }\r\n    async reloadAndSetCurrentUserOrClear(user) {\r\n        try {\r\n            await _reloadWithoutSaving(user);\r\n        }\r\n        catch (e) {\r\n            if ((e === null || e === void 0 ? void 0 : e.code) !==\r\n                `auth/${\"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */}`) {\r\n                // Something's wrong with the user's token. Log them out and remove\r\n                // them from storage\r\n                return this.directlySetCurrentUser(null);\r\n            }\r\n        }\r\n        return this.directlySetCurrentUser(user);\r\n    }\r\n    useDeviceLanguage() {\r\n        this.languageCode = _getUserLanguage();\r\n    }\r\n    async _delete() {\r\n        this._deleted = true;\r\n    }\r\n    async updateCurrentUser(userExtern) {\r\n        // The public updateCurrentUser method needs to make a copy of the user,\r\n        // and also check that the project matches\r\n        const user = userExtern\r\n            ? getModularInstance(userExtern)\r\n            : null;\r\n        if (user) {\r\n            _assert(user.auth.config.apiKey === this.config.apiKey, this, \"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */);\r\n        }\r\n        return this._updateCurrentUser(user && user._clone(this));\r\n    }\r\n    async _updateCurrentUser(user, skipBeforeStateCallbacks = false) {\r\n        if (this._deleted) {\r\n            return;\r\n        }\r\n        if (user) {\r\n            _assert(this.tenantId === user.tenantId, this, \"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */);\r\n        }\r\n        if (!skipBeforeStateCallbacks) {\r\n            await this.beforeStateQueue.runMiddleware(user);\r\n        }\r\n        return this.queue(async () => {\r\n            await this.directlySetCurrentUser(user);\r\n            this.notifyAuthListeners();\r\n        });\r\n    }\r\n    async signOut() {\r\n        // Run first, to block _setRedirectUser() if any callbacks fail.\r\n        await this.beforeStateQueue.runMiddleware(null);\r\n        // Clear the redirect user when signOut is called\r\n        if (this.redirectPersistenceManager || this._popupRedirectResolver) {\r\n            await this._setRedirectUser(null);\r\n        }\r\n        // Prevent callbacks from being called again in _updateCurrentUser, as\r\n        // they were already called in the first line.\r\n        return this._updateCurrentUser(null, /* skipBeforeStateCallbacks */ true);\r\n    }\r\n    setPersistence(persistence) {\r\n        return this.queue(async () => {\r\n            await this.assertedPersistence.setPersistence(_getInstance(persistence));\r\n        });\r\n    }\r\n    async initializeRecaptchaConfig() {\r\n        const response = await getRecaptchaConfig(this, {\r\n            clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\r\n            version: \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\r\n        });\r\n        const config = new RecaptchaConfig(response);\r\n        if (this.tenantId == null) {\r\n            this._agentRecaptchaConfig = config;\r\n        }\r\n        else {\r\n            this._tenantRecaptchaConfigs[this.tenantId] = config;\r\n        }\r\n        if (config.emailPasswordEnabled) {\r\n            const verifier = new RecaptchaEnterpriseVerifier(this);\r\n            void verifier.verify();\r\n        }\r\n    }\r\n    _getRecaptchaConfig() {\r\n        if (this.tenantId == null) {\r\n            return this._agentRecaptchaConfig;\r\n        }\r\n        else {\r\n            return this._tenantRecaptchaConfigs[this.tenantId];\r\n        }\r\n    }\r\n    _getPersistence() {\r\n        return this.assertedPersistence.persistence.type;\r\n    }\r\n    _updateErrorMap(errorMap) {\r\n        this._errorFactory = new ErrorFactory('auth', 'Firebase', errorMap());\r\n    }\r\n    onAuthStateChanged(nextOrObserver, error, completed) {\r\n        return this.registerStateListener(this.authStateSubscription, nextOrObserver, error, completed);\r\n    }\r\n    beforeAuthStateChanged(callback, onAbort) {\r\n        return this.beforeStateQueue.pushCallback(callback, onAbort);\r\n    }\r\n    onIdTokenChanged(nextOrObserver, error, completed) {\r\n        return this.registerStateListener(this.idTokenSubscription, nextOrObserver, error, completed);\r\n    }\r\n    toJSON() {\r\n        var _a;\r\n        return {\r\n            apiKey: this.config.apiKey,\r\n            authDomain: this.config.authDomain,\r\n            appName: this.name,\r\n            currentUser: (_a = this._currentUser) === null || _a === void 0 ? void 0 : _a.toJSON()\r\n        };\r\n    }\r\n    async _setRedirectUser(user, popupRedirectResolver) {\r\n        const redirectManager = await this.getOrInitRedirectPersistenceManager(popupRedirectResolver);\r\n        return user === null\r\n            ? redirectManager.removeCurrentUser()\r\n            : redirectManager.setCurrentUser(user);\r\n    }\r\n    async getOrInitRedirectPersistenceManager(popupRedirectResolver) {\r\n        if (!this.redirectPersistenceManager) {\r\n            const resolver = (popupRedirectResolver && _getInstance(popupRedirectResolver)) ||\r\n                this._popupRedirectResolver;\r\n            _assert(resolver, this, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n            this.redirectPersistenceManager = await PersistenceUserManager.create(this, [_getInstance(resolver._redirectPersistence)], \"redirectUser\" /* KeyName.REDIRECT_USER */);\r\n            this.redirectUser =\r\n                await this.redirectPersistenceManager.getCurrentUser();\r\n        }\r\n        return this.redirectPersistenceManager;\r\n    }\r\n    async _redirectUserForId(id) {\r\n        var _a, _b;\r\n        // Make sure we've cleared any pending persistence actions if we're not in\r\n        // the initializer\r\n        if (this._isInitialized) {\r\n            await this.queue(async () => { });\r\n        }\r\n        if (((_a = this._currentUser) === null || _a === void 0 ? void 0 : _a._redirectEventId) === id) {\r\n            return this._currentUser;\r\n        }\r\n        if (((_b = this.redirectUser) === null || _b === void 0 ? void 0 : _b._redirectEventId) === id) {\r\n            return this.redirectUser;\r\n        }\r\n        return null;\r\n    }\r\n    async _persistUserIfCurrent(user) {\r\n        if (user === this.currentUser) {\r\n            return this.queue(async () => this.directlySetCurrentUser(user));\r\n        }\r\n    }\r\n    /** Notifies listeners only if the user is current */\r\n    _notifyListenersIfCurrent(user) {\r\n        if (user === this.currentUser) {\r\n            this.notifyAuthListeners();\r\n        }\r\n    }\r\n    _key() {\r\n        return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;\r\n    }\r\n    _startProactiveRefresh() {\r\n        this.isProactiveRefreshEnabled = true;\r\n        if (this.currentUser) {\r\n            this._currentUser._startProactiveRefresh();\r\n        }\r\n    }\r\n    _stopProactiveRefresh() {\r\n        this.isProactiveRefreshEnabled = false;\r\n        if (this.currentUser) {\r\n            this._currentUser._stopProactiveRefresh();\r\n        }\r\n    }\r\n    /** Returns the current user cast as the internal type */\r\n    get _currentUser() {\r\n        return this.currentUser;\r\n    }\r\n    notifyAuthListeners() {\r\n        var _a, _b;\r\n        if (!this._isInitialized) {\r\n            return;\r\n        }\r\n        this.idTokenSubscription.next(this.currentUser);\r\n        const currentUid = (_b = (_a = this.currentUser) === null || _a === void 0 ? void 0 : _a.uid) !== null && _b !== void 0 ? _b : null;\r\n        if (this.lastNotifiedUid !== currentUid) {\r\n            this.lastNotifiedUid = currentUid;\r\n            this.authStateSubscription.next(this.currentUser);\r\n        }\r\n    }\r\n    registerStateListener(subscription, nextOrObserver, error, completed) {\r\n        if (this._deleted) {\r\n            return () => { };\r\n        }\r\n        const cb = typeof nextOrObserver === 'function'\r\n            ? nextOrObserver\r\n            : nextOrObserver.next.bind(nextOrObserver);\r\n        const promise = this._isInitialized\r\n            ? Promise.resolve()\r\n            : this._initializationPromise;\r\n        _assert(promise, this, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        // The callback needs to be called asynchronously per the spec.\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        promise.then(() => cb(this.currentUser));\r\n        if (typeof nextOrObserver === 'function') {\r\n            return subscription.addObserver(nextOrObserver, error, completed);\r\n        }\r\n        else {\r\n            return subscription.addObserver(nextOrObserver);\r\n        }\r\n    }\r\n    /**\r\n     * Unprotected (from race conditions) method to set the current user. This\r\n     * should only be called from within a queued callback. This is necessary\r\n     * because the queue shouldn't rely on another queued callback.\r\n     */\r\n    async directlySetCurrentUser(user) {\r\n        if (this.currentUser && this.currentUser !== user) {\r\n            this._currentUser._stopProactiveRefresh();\r\n        }\r\n        if (user && this.isProactiveRefreshEnabled) {\r\n            user._startProactiveRefresh();\r\n        }\r\n        this.currentUser = user;\r\n        if (user) {\r\n            await this.assertedPersistence.setCurrentUser(user);\r\n        }\r\n        else {\r\n            await this.assertedPersistence.removeCurrentUser();\r\n        }\r\n    }\r\n    queue(action) {\r\n        // In case something errors, the callback still should be called in order\r\n        // to keep the promise chain alive\r\n        this.operations = this.operations.then(action, action);\r\n        return this.operations;\r\n    }\r\n    get assertedPersistence() {\r\n        _assert(this.persistenceManager, this, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        return this.persistenceManager;\r\n    }\r\n    _logFramework(framework) {\r\n        if (!framework || this.frameworks.includes(framework)) {\r\n            return;\r\n        }\r\n        this.frameworks.push(framework);\r\n        // Sort alphabetically so that \"FirebaseCore-web,FirebaseUI-web\" and\r\n        // \"FirebaseUI-web,FirebaseCore-web\" aren't viewed as different.\r\n        this.frameworks.sort();\r\n        this.clientVersion = _getClientVersion(this.config.clientPlatform, this._getFrameworks());\r\n    }\r\n    _getFrameworks() {\r\n        return this.frameworks;\r\n    }\r\n    async _getAdditionalHeaders() {\r\n        var _a;\r\n        // Additional headers on every request\r\n        const headers = {\r\n            [\"X-Client-Version\" /* HttpHeader.X_CLIENT_VERSION */]: this.clientVersion\r\n        };\r\n        if (this.app.options.appId) {\r\n            headers[\"X-Firebase-gmpid\" /* HttpHeader.X_FIREBASE_GMPID */] = this.app.options.appId;\r\n        }\r\n        // If the heartbeat service exists, add the heartbeat string\r\n        const heartbeatsHeader = await ((_a = this.heartbeatServiceProvider\r\n            .getImmediate({\r\n            optional: true\r\n        })) === null || _a === void 0 ? void 0 : _a.getHeartbeatsHeader());\r\n        if (heartbeatsHeader) {\r\n            headers[\"X-Firebase-Client\" /* HttpHeader.X_FIREBASE_CLIENT */] = heartbeatsHeader;\r\n        }\r\n        // If the App Check service exists, add the App Check token in the headers\r\n        const appCheckToken = await this._getAppCheckToken();\r\n        if (appCheckToken) {\r\n            headers[\"X-Firebase-AppCheck\" /* HttpHeader.X_FIREBASE_APP_CHECK */] = appCheckToken;\r\n        }\r\n        return headers;\r\n    }\r\n    async _getAppCheckToken() {\r\n        var _a;\r\n        const appCheckTokenResult = await ((_a = this.appCheckServiceProvider\r\n            .getImmediate({ optional: true })) === null || _a === void 0 ? void 0 : _a.getToken());\r\n        if (appCheckTokenResult === null || appCheckTokenResult === void 0 ? void 0 : appCheckTokenResult.error) {\r\n            // Context: appCheck.getToken() will never throw even if an error happened.\r\n            // In the error case, a dummy token will be returned along with an error field describing\r\n            // the error. In general, we shouldn't care about the error condition and just use\r\n            // the token (actual or dummy) to send requests.\r\n            _logWarn(`Error while retrieving App Check token: ${appCheckTokenResult.error}`);\r\n        }\r\n        return appCheckTokenResult === null || appCheckTokenResult === void 0 ? void 0 : appCheckTokenResult.token;\r\n    }\r\n}\r\n/**\r\n * Method to be used to cast down to our private implmentation of Auth.\r\n * It will also handle unwrapping from the compat type if necessary\r\n *\r\n * @param auth Auth object passed in from developer\r\n */\r\nfunction _castAuth(auth) {\r\n    return getModularInstance(auth);\r\n}\r\n/** Helper class to wrap subscriber logic */\r\nclass Subscription {\r\n    constructor(auth) {\r\n        this.auth = auth;\r\n        this.observer = null;\r\n        this.addObserver = createSubscribe(observer => (this.observer = observer));\r\n    }\r\n    get next() {\r\n        _assert(this.observer, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        return this.observer.next.bind(this.observer);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Initializes an {@link Auth} instance with fine-grained control over\r\n * {@link Dependencies}.\r\n *\r\n * @remarks\r\n *\r\n * This function allows more control over the {@link Auth} instance than\r\n * {@link getAuth}. `getAuth` uses platform-specific defaults to supply\r\n * the {@link Dependencies}. In general, `getAuth` is the easiest way to\r\n * initialize Auth and works for most use cases. Use `initializeAuth` if you\r\n * need control over which persistence layer is used, or to minimize bundle\r\n * size if you're not using either `signInWithPopup` or `signInWithRedirect`.\r\n *\r\n * For example, if your app only uses anonymous accounts and you only want\r\n * accounts saved for the current session, initialize `Auth` with:\r\n *\r\n * ```js\r\n * const auth = initializeAuth(app, {\r\n *   persistence: browserSessionPersistence,\r\n *   popupRedirectResolver: undefined,\r\n * });\r\n * ```\r\n *\r\n * @public\r\n */\r\nfunction initializeAuth(app, deps) {\r\n    const provider = _getProvider(app, 'auth');\r\n    if (provider.isInitialized()) {\r\n        const auth = provider.getImmediate();\r\n        const initialOptions = provider.getOptions();\r\n        if (deepEqual(initialOptions, deps !== null && deps !== void 0 ? deps : {})) {\r\n            return auth;\r\n        }\r\n        else {\r\n            _fail(auth, \"already-initialized\" /* AuthErrorCode.ALREADY_INITIALIZED */);\r\n        }\r\n    }\r\n    const auth = provider.initialize({ options: deps });\r\n    return auth;\r\n}\r\nfunction _initializeAuthInstance(auth, deps) {\r\n    const persistence = (deps === null || deps === void 0 ? void 0 : deps.persistence) || [];\r\n    const hierarchy = (Array.isArray(persistence) ? persistence : [persistence]).map(_getInstance);\r\n    if (deps === null || deps === void 0 ? void 0 : deps.errorMap) {\r\n        auth._updateErrorMap(deps.errorMap);\r\n    }\r\n    // This promise is intended to float; auth initialization happens in the\r\n    // background, meanwhile the auth object may be used by the app.\r\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n    auth._initializeWithPersistence(hierarchy, deps === null || deps === void 0 ? void 0 : deps.popupRedirectResolver);\r\n}\n\n/**\r\n * Changes the {@link Auth} instance to communicate with the Firebase Auth Emulator, instead of production\r\n * Firebase Auth services.\r\n *\r\n * @remarks\r\n * This must be called synchronously immediately following the first call to\r\n * {@link initializeAuth}.  Do not use with production credentials as emulator\r\n * traffic is not encrypted.\r\n *\r\n *\r\n * @example\r\n * ```javascript\r\n * connectAuthEmulator(auth, 'http://127.0.0.1:9099', { disableWarnings: true });\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param url - The URL at which the emulator is running (eg, 'http://localhost:9099').\r\n * @param options - Optional. `options.disableWarnings` defaults to `false`. Set it to\r\n * `true` to disable the warning banner attached to the DOM.\r\n *\r\n * @public\r\n */\r\nfunction connectAuthEmulator(auth, url, options) {\r\n    const authInternal = _castAuth(auth);\r\n    _assert(authInternal._canInitEmulator, authInternal, \"emulator-config-failed\" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */);\r\n    _assert(/^https?:\\/\\//.test(url), authInternal, \"invalid-emulator-scheme\" /* AuthErrorCode.INVALID_EMULATOR_SCHEME */);\r\n    const disableWarnings = !!(options === null || options === void 0 ? void 0 : options.disableWarnings);\r\n    const protocol = extractProtocol(url);\r\n    const { host, port } = extractHostAndPort(url);\r\n    const portStr = port === null ? '' : `:${port}`;\r\n    // Always replace path with \"/\" (even if input url had no path at all, or had a different one).\r\n    authInternal.config.emulator = { url: `${protocol}//${host}${portStr}/` };\r\n    authInternal.settings.appVerificationDisabledForTesting = true;\r\n    authInternal.emulatorConfig = Object.freeze({\r\n        host,\r\n        port,\r\n        protocol: protocol.replace(':', ''),\r\n        options: Object.freeze({ disableWarnings })\r\n    });\r\n    if (!disableWarnings) {\r\n        emitEmulatorWarning();\r\n    }\r\n}\r\nfunction extractProtocol(url) {\r\n    const protocolEnd = url.indexOf(':');\r\n    return protocolEnd < 0 ? '' : url.substr(0, protocolEnd + 1);\r\n}\r\nfunction extractHostAndPort(url) {\r\n    const protocol = extractProtocol(url);\r\n    const authority = /(\\/\\/)?([^?#/]+)/.exec(url.substr(protocol.length)); // Between // and /, ? or #.\r\n    if (!authority) {\r\n        return { host: '', port: null };\r\n    }\r\n    const hostAndPort = authority[2].split('@').pop() || ''; // Strip out \"username:password@\".\r\n    const bracketedIPv6 = /^(\\[[^\\]]+\\])(:|$)/.exec(hostAndPort);\r\n    if (bracketedIPv6) {\r\n        const host = bracketedIPv6[1];\r\n        return { host, port: parsePort(hostAndPort.substr(host.length + 1)) };\r\n    }\r\n    else {\r\n        const [host, port] = hostAndPort.split(':');\r\n        return { host, port: parsePort(port) };\r\n    }\r\n}\r\nfunction parsePort(portStr) {\r\n    if (!portStr) {\r\n        return null;\r\n    }\r\n    const port = Number(portStr);\r\n    if (isNaN(port)) {\r\n        return null;\r\n    }\r\n    return port;\r\n}\r\nfunction emitEmulatorWarning() {\r\n    function attachBanner() {\r\n        const el = document.createElement('p');\r\n        const sty = el.style;\r\n        el.innerText =\r\n            'Running in emulator mode. Do not use with production credentials.';\r\n        sty.position = 'fixed';\r\n        sty.width = '100%';\r\n        sty.backgroundColor = '#ffffff';\r\n        sty.border = '.1em solid #000000';\r\n        sty.color = '#b50000';\r\n        sty.bottom = '0px';\r\n        sty.left = '0px';\r\n        sty.margin = '0px';\r\n        sty.zIndex = '10000';\r\n        sty.textAlign = 'center';\r\n        el.classList.add('firebase-emulator-warning');\r\n        document.body.appendChild(el);\r\n    }\r\n    if (typeof console !== 'undefined' && typeof console.info === 'function') {\r\n        console.info('WARNING: You are using the Auth Emulator,' +\r\n            ' which is intended for local testing only.  Do not use with' +\r\n            ' production credentials.');\r\n    }\r\n    if (typeof window !== 'undefined' && typeof document !== 'undefined') {\r\n        if (document.readyState === 'loading') {\r\n            window.addEventListener('DOMContentLoaded', attachBanner);\r\n        }\r\n        else {\r\n            attachBanner();\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface that represents the credentials returned by an {@link AuthProvider}.\r\n *\r\n * @remarks\r\n * Implementations specify the details about each auth provider's credential requirements.\r\n *\r\n * @public\r\n */\r\nclass AuthCredential {\r\n    /** @internal */\r\n    constructor(\r\n    /**\r\n     * The authentication provider ID for the credential.\r\n     *\r\n     * @remarks\r\n     * For example, 'facebook.com', or 'google.com'.\r\n     */\r\n    providerId, \r\n    /**\r\n     * The authentication sign in method for the credential.\r\n     *\r\n     * @remarks\r\n     * For example, {@link SignInMethod}.EMAIL_PASSWORD, or\r\n     * {@link SignInMethod}.EMAIL_LINK. This corresponds to the sign-in method\r\n     * identifier as returned in {@link fetchSignInMethodsForEmail}.\r\n     */\r\n    signInMethod) {\r\n        this.providerId = providerId;\r\n        this.signInMethod = signInMethod;\r\n    }\r\n    /**\r\n     * Returns a JSON-serializable representation of this object.\r\n     *\r\n     * @returns a JSON-serializable representation of this object.\r\n     */\r\n    toJSON() {\r\n        return debugFail('not implemented');\r\n    }\r\n    /** @internal */\r\n    _getIdTokenResponse(_auth) {\r\n        return debugFail('not implemented');\r\n    }\r\n    /** @internal */\r\n    _linkToIdToken(_auth, _idToken) {\r\n        return debugFail('not implemented');\r\n    }\r\n    /** @internal */\r\n    _getReauthenticationResolver(_auth) {\r\n        return debugFail('not implemented');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function resetPassword(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:resetPassword\" /* Endpoint.RESET_PASSWORD */, _addTidIfNecessary(auth, request));\r\n}\r\nasync function updateEmailPassword(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, request);\r\n}\r\nasync function applyActionCode$1(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, _addTidIfNecessary(auth, request));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function signInWithPassword(auth, request) {\r\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPassword\" /* Endpoint.SIGN_IN_WITH_PASSWORD */, _addTidIfNecessary(auth, request));\r\n}\r\nasync function sendOobCode(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:sendOobCode\" /* Endpoint.SEND_OOB_CODE */, _addTidIfNecessary(auth, request));\r\n}\r\nasync function sendEmailVerification$1(auth, request) {\r\n    return sendOobCode(auth, request);\r\n}\r\nasync function sendPasswordResetEmail$1(auth, request) {\r\n    return sendOobCode(auth, request);\r\n}\r\nasync function sendSignInLinkToEmail$1(auth, request) {\r\n    return sendOobCode(auth, request);\r\n}\r\nasync function verifyAndChangeEmail(auth, request) {\r\n    return sendOobCode(auth, request);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function signInWithEmailLink$1(auth, request) {\r\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithEmailLink\" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */, _addTidIfNecessary(auth, request));\r\n}\r\nasync function signInWithEmailLinkForLinking(auth, request) {\r\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithEmailLink\" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */, _addTidIfNecessary(auth, request));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface that represents the credentials returned by {@link EmailAuthProvider} for\r\n * {@link ProviderId}.PASSWORD\r\n *\r\n * @remarks\r\n * Covers both {@link SignInMethod}.EMAIL_PASSWORD and\r\n * {@link SignInMethod}.EMAIL_LINK.\r\n *\r\n * @public\r\n */\r\nclass EmailAuthCredential extends AuthCredential {\r\n    /** @internal */\r\n    constructor(\r\n    /** @internal */\r\n    _email, \r\n    /** @internal */\r\n    _password, signInMethod, \r\n    /** @internal */\r\n    _tenantId = null) {\r\n        super(\"password\" /* ProviderId.PASSWORD */, signInMethod);\r\n        this._email = _email;\r\n        this._password = _password;\r\n        this._tenantId = _tenantId;\r\n    }\r\n    /** @internal */\r\n    static _fromEmailAndPassword(email, password) {\r\n        return new EmailAuthCredential(email, password, \"password\" /* SignInMethod.EMAIL_PASSWORD */);\r\n    }\r\n    /** @internal */\r\n    static _fromEmailAndCode(email, oobCode, tenantId = null) {\r\n        return new EmailAuthCredential(email, oobCode, \"emailLink\" /* SignInMethod.EMAIL_LINK */, tenantId);\r\n    }\r\n    /** {@inheritdoc AuthCredential.toJSON} */\r\n    toJSON() {\r\n        return {\r\n            email: this._email,\r\n            password: this._password,\r\n            signInMethod: this.signInMethod,\r\n            tenantId: this._tenantId\r\n        };\r\n    }\r\n    /**\r\n     * Static method to deserialize a JSON representation of an object into an {@link  AuthCredential}.\r\n     *\r\n     * @param json - Either `object` or the stringified representation of the object. When string is\r\n     * provided, `JSON.parse` would be called first.\r\n     *\r\n     * @returns If the JSON input does not represent an {@link AuthCredential}, null is returned.\r\n     */\r\n    static fromJSON(json) {\r\n        const obj = typeof json === 'string' ? JSON.parse(json) : json;\r\n        if ((obj === null || obj === void 0 ? void 0 : obj.email) && (obj === null || obj === void 0 ? void 0 : obj.password)) {\r\n            if (obj.signInMethod === \"password\" /* SignInMethod.EMAIL_PASSWORD */) {\r\n                return this._fromEmailAndPassword(obj.email, obj.password);\r\n            }\r\n            else if (obj.signInMethod === \"emailLink\" /* SignInMethod.EMAIL_LINK */) {\r\n                return this._fromEmailAndCode(obj.email, obj.password, obj.tenantId);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /** @internal */\r\n    async _getIdTokenResponse(auth) {\r\n        var _a;\r\n        switch (this.signInMethod) {\r\n            case \"password\" /* SignInMethod.EMAIL_PASSWORD */:\r\n                const request = {\r\n                    returnSecureToken: true,\r\n                    email: this._email,\r\n                    password: this._password,\r\n                    clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\r\n                };\r\n                if ((_a = auth._getRecaptchaConfig()) === null || _a === void 0 ? void 0 : _a.emailPasswordEnabled) {\r\n                    const requestWithRecaptcha = await injectRecaptchaFields(auth, request, \"signInWithPassword\" /* RecaptchaActionName.SIGN_IN_WITH_PASSWORD */);\r\n                    return signInWithPassword(auth, requestWithRecaptcha);\r\n                }\r\n                else {\r\n                    return signInWithPassword(auth, request).catch(async (error) => {\r\n                        if (error.code === `auth/${\"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */}`) {\r\n                            console.log('Sign-in with email address and password is protected by reCAPTCHA for this project. Automatically triggering the reCAPTCHA flow and restarting the sign-in flow.');\r\n                            const requestWithRecaptcha = await injectRecaptchaFields(auth, request, \"signInWithPassword\" /* RecaptchaActionName.SIGN_IN_WITH_PASSWORD */);\r\n                            return signInWithPassword(auth, requestWithRecaptcha);\r\n                        }\r\n                        else {\r\n                            return Promise.reject(error);\r\n                        }\r\n                    });\r\n                }\r\n            case \"emailLink\" /* SignInMethod.EMAIL_LINK */:\r\n                return signInWithEmailLink$1(auth, {\r\n                    email: this._email,\r\n                    oobCode: this._password\r\n                });\r\n            default:\r\n                _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        }\r\n    }\r\n    /** @internal */\r\n    async _linkToIdToken(auth, idToken) {\r\n        switch (this.signInMethod) {\r\n            case \"password\" /* SignInMethod.EMAIL_PASSWORD */:\r\n                return updateEmailPassword(auth, {\r\n                    idToken,\r\n                    returnSecureToken: true,\r\n                    email: this._email,\r\n                    password: this._password\r\n                });\r\n            case \"emailLink\" /* SignInMethod.EMAIL_LINK */:\r\n                return signInWithEmailLinkForLinking(auth, {\r\n                    idToken,\r\n                    email: this._email,\r\n                    oobCode: this._password\r\n                });\r\n            default:\r\n                _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        }\r\n    }\r\n    /** @internal */\r\n    _getReauthenticationResolver(auth) {\r\n        return this._getIdTokenResponse(auth);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function signInWithIdp(auth, request) {\r\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithIdp\" /* Endpoint.SIGN_IN_WITH_IDP */, _addTidIfNecessary(auth, request));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst IDP_REQUEST_URI$1 = 'http://localhost';\r\n/**\r\n * Represents the OAuth credentials returned by an {@link OAuthProvider}.\r\n *\r\n * @remarks\r\n * Implementations specify the details about each auth provider's credential requirements.\r\n *\r\n * @public\r\n */\r\nclass OAuthCredential extends AuthCredential {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.pendingToken = null;\r\n    }\r\n    /** @internal */\r\n    static _fromParams(params) {\r\n        const cred = new OAuthCredential(params.providerId, params.signInMethod);\r\n        if (params.idToken || params.accessToken) {\r\n            // OAuth 2 and either ID token or access token.\r\n            if (params.idToken) {\r\n                cred.idToken = params.idToken;\r\n            }\r\n            if (params.accessToken) {\r\n                cred.accessToken = params.accessToken;\r\n            }\r\n            // Add nonce if available and no pendingToken is present.\r\n            if (params.nonce && !params.pendingToken) {\r\n                cred.nonce = params.nonce;\r\n            }\r\n            if (params.pendingToken) {\r\n                cred.pendingToken = params.pendingToken;\r\n            }\r\n        }\r\n        else if (params.oauthToken && params.oauthTokenSecret) {\r\n            // OAuth 1 and OAuth token with token secret\r\n            cred.accessToken = params.oauthToken;\r\n            cred.secret = params.oauthTokenSecret;\r\n        }\r\n        else {\r\n            _fail(\"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        }\r\n        return cred;\r\n    }\r\n    /** {@inheritdoc AuthCredential.toJSON}  */\r\n    toJSON() {\r\n        return {\r\n            idToken: this.idToken,\r\n            accessToken: this.accessToken,\r\n            secret: this.secret,\r\n            nonce: this.nonce,\r\n            pendingToken: this.pendingToken,\r\n            providerId: this.providerId,\r\n            signInMethod: this.signInMethod\r\n        };\r\n    }\r\n    /**\r\n     * Static method to deserialize a JSON representation of an object into an\r\n     * {@link  AuthCredential}.\r\n     *\r\n     * @param json - Input can be either Object or the stringified representation of the object.\r\n     * When string is provided, JSON.parse would be called first.\r\n     *\r\n     * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\r\n     */\r\n    static fromJSON(json) {\r\n        const obj = typeof json === 'string' ? JSON.parse(json) : json;\r\n        const { providerId, signInMethod } = obj, rest = __rest(obj, [\"providerId\", \"signInMethod\"]);\r\n        if (!providerId || !signInMethod) {\r\n            return null;\r\n        }\r\n        const cred = new OAuthCredential(providerId, signInMethod);\r\n        cred.idToken = rest.idToken || undefined;\r\n        cred.accessToken = rest.accessToken || undefined;\r\n        cred.secret = rest.secret;\r\n        cred.nonce = rest.nonce;\r\n        cred.pendingToken = rest.pendingToken || null;\r\n        return cred;\r\n    }\r\n    /** @internal */\r\n    _getIdTokenResponse(auth) {\r\n        const request = this.buildRequest();\r\n        return signInWithIdp(auth, request);\r\n    }\r\n    /** @internal */\r\n    _linkToIdToken(auth, idToken) {\r\n        const request = this.buildRequest();\r\n        request.idToken = idToken;\r\n        return signInWithIdp(auth, request);\r\n    }\r\n    /** @internal */\r\n    _getReauthenticationResolver(auth) {\r\n        const request = this.buildRequest();\r\n        request.autoCreate = false;\r\n        return signInWithIdp(auth, request);\r\n    }\r\n    buildRequest() {\r\n        const request = {\r\n            requestUri: IDP_REQUEST_URI$1,\r\n            returnSecureToken: true\r\n        };\r\n        if (this.pendingToken) {\r\n            request.pendingToken = this.pendingToken;\r\n        }\r\n        else {\r\n            const postBody = {};\r\n            if (this.idToken) {\r\n                postBody['id_token'] = this.idToken;\r\n            }\r\n            if (this.accessToken) {\r\n                postBody['access_token'] = this.accessToken;\r\n            }\r\n            if (this.secret) {\r\n                postBody['oauth_token_secret'] = this.secret;\r\n            }\r\n            postBody['providerId'] = this.providerId;\r\n            if (this.nonce && !this.pendingToken) {\r\n                postBody['nonce'] = this.nonce;\r\n            }\r\n            request.postBody = querystring(postBody);\r\n        }\r\n        return request;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function sendPhoneVerificationCode(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:sendVerificationCode\" /* Endpoint.SEND_VERIFICATION_CODE */, _addTidIfNecessary(auth, request));\r\n}\r\nasync function signInWithPhoneNumber$1(auth, request) {\r\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, request));\r\n}\r\nasync function linkWithPhoneNumber$1(auth, request) {\r\n    const response = await _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, request));\r\n    if (response.temporaryProof) {\r\n        throw _makeTaggedError(auth, \"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */, response);\r\n    }\r\n    return response;\r\n}\r\nconst VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_ = {\r\n    [\"USER_NOT_FOUND\" /* ServerError.USER_NOT_FOUND */]: \"user-not-found\" /* AuthErrorCode.USER_DELETED */\r\n};\r\nasync function verifyPhoneNumberForExisting(auth, request) {\r\n    const apiRequest = Object.assign(Object.assign({}, request), { operation: 'REAUTH' });\r\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, apiRequest), VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Represents the credentials returned by {@link PhoneAuthProvider}.\r\n *\r\n * @public\r\n */\r\nclass PhoneAuthCredential extends AuthCredential {\r\n    constructor(params) {\r\n        super(\"phone\" /* ProviderId.PHONE */, \"phone\" /* SignInMethod.PHONE */);\r\n        this.params = params;\r\n    }\r\n    /** @internal */\r\n    static _fromVerification(verificationId, verificationCode) {\r\n        return new PhoneAuthCredential({ verificationId, verificationCode });\r\n    }\r\n    /** @internal */\r\n    static _fromTokenResponse(phoneNumber, temporaryProof) {\r\n        return new PhoneAuthCredential({ phoneNumber, temporaryProof });\r\n    }\r\n    /** @internal */\r\n    _getIdTokenResponse(auth) {\r\n        return signInWithPhoneNumber$1(auth, this._makeVerificationRequest());\r\n    }\r\n    /** @internal */\r\n    _linkToIdToken(auth, idToken) {\r\n        return linkWithPhoneNumber$1(auth, Object.assign({ idToken }, this._makeVerificationRequest()));\r\n    }\r\n    /** @internal */\r\n    _getReauthenticationResolver(auth) {\r\n        return verifyPhoneNumberForExisting(auth, this._makeVerificationRequest());\r\n    }\r\n    /** @internal */\r\n    _makeVerificationRequest() {\r\n        const { temporaryProof, phoneNumber, verificationId, verificationCode } = this.params;\r\n        if (temporaryProof && phoneNumber) {\r\n            return { temporaryProof, phoneNumber };\r\n        }\r\n        return {\r\n            sessionInfo: verificationId,\r\n            code: verificationCode\r\n        };\r\n    }\r\n    /** {@inheritdoc AuthCredential.toJSON} */\r\n    toJSON() {\r\n        const obj = {\r\n            providerId: this.providerId\r\n        };\r\n        if (this.params.phoneNumber) {\r\n            obj.phoneNumber = this.params.phoneNumber;\r\n        }\r\n        if (this.params.temporaryProof) {\r\n            obj.temporaryProof = this.params.temporaryProof;\r\n        }\r\n        if (this.params.verificationCode) {\r\n            obj.verificationCode = this.params.verificationCode;\r\n        }\r\n        if (this.params.verificationId) {\r\n            obj.verificationId = this.params.verificationId;\r\n        }\r\n        return obj;\r\n    }\r\n    /** Generates a phone credential based on a plain object or a JSON string. */\r\n    static fromJSON(json) {\r\n        if (typeof json === 'string') {\r\n            json = JSON.parse(json);\r\n        }\r\n        const { verificationId, verificationCode, phoneNumber, temporaryProof } = json;\r\n        if (!verificationCode &&\r\n            !verificationId &&\r\n            !phoneNumber &&\r\n            !temporaryProof) {\r\n            return null;\r\n        }\r\n        return new PhoneAuthCredential({\r\n            verificationId,\r\n            verificationCode,\r\n            phoneNumber,\r\n            temporaryProof\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Maps the mode string in action code URL to Action Code Info operation.\r\n *\r\n * @param mode\r\n */\r\nfunction parseMode(mode) {\r\n    switch (mode) {\r\n        case 'recoverEmail':\r\n            return \"RECOVER_EMAIL\" /* ActionCodeOperation.RECOVER_EMAIL */;\r\n        case 'resetPassword':\r\n            return \"PASSWORD_RESET\" /* ActionCodeOperation.PASSWORD_RESET */;\r\n        case 'signIn':\r\n            return \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */;\r\n        case 'verifyEmail':\r\n            return \"VERIFY_EMAIL\" /* ActionCodeOperation.VERIFY_EMAIL */;\r\n        case 'verifyAndChangeEmail':\r\n            return \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */;\r\n        case 'revertSecondFactorAddition':\r\n            return \"REVERT_SECOND_FACTOR_ADDITION\" /* ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION */;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n/**\r\n * Helper to parse FDL links\r\n *\r\n * @param url\r\n */\r\nfunction parseDeepLink(url) {\r\n    const link = querystringDecode(extractQuerystring(url))['link'];\r\n    // Double link case (automatic redirect).\r\n    const doubleDeepLink = link\r\n        ? querystringDecode(extractQuerystring(link))['deep_link_id']\r\n        : null;\r\n    // iOS custom scheme links.\r\n    const iOSDeepLink = querystringDecode(extractQuerystring(url))['deep_link_id'];\r\n    const iOSDoubleDeepLink = iOSDeepLink\r\n        ? querystringDecode(extractQuerystring(iOSDeepLink))['link']\r\n        : null;\r\n    return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;\r\n}\r\n/**\r\n * A utility class to parse email action URLs such as password reset, email verification,\r\n * email link sign in, etc.\r\n *\r\n * @public\r\n */\r\nclass ActionCodeURL {\r\n    /**\r\n     * @param actionLink - The link from which to extract the URL.\r\n     * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\r\n     *\r\n     * @internal\r\n     */\r\n    constructor(actionLink) {\r\n        var _a, _b, _c, _d, _e, _f;\r\n        const searchParams = querystringDecode(extractQuerystring(actionLink));\r\n        const apiKey = (_a = searchParams[\"apiKey\" /* QueryField.API_KEY */]) !== null && _a !== void 0 ? _a : null;\r\n        const code = (_b = searchParams[\"oobCode\" /* QueryField.CODE */]) !== null && _b !== void 0 ? _b : null;\r\n        const operation = parseMode((_c = searchParams[\"mode\" /* QueryField.MODE */]) !== null && _c !== void 0 ? _c : null);\r\n        // Validate API key, code and mode.\r\n        _assert(apiKey && code && operation, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        this.apiKey = apiKey;\r\n        this.operation = operation;\r\n        this.code = code;\r\n        this.continueUrl = (_d = searchParams[\"continueUrl\" /* QueryField.CONTINUE_URL */]) !== null && _d !== void 0 ? _d : null;\r\n        this.languageCode = (_e = searchParams[\"languageCode\" /* QueryField.LANGUAGE_CODE */]) !== null && _e !== void 0 ? _e : null;\r\n        this.tenantId = (_f = searchParams[\"tenantId\" /* QueryField.TENANT_ID */]) !== null && _f !== void 0 ? _f : null;\r\n    }\r\n    /**\r\n     * Parses the email action link string and returns an {@link ActionCodeURL} if the link is valid,\r\n     * otherwise returns null.\r\n     *\r\n     * @param link  - The email action link string.\r\n     * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\r\n     *\r\n     * @public\r\n     */\r\n    static parseLink(link) {\r\n        const actionLink = parseDeepLink(link);\r\n        try {\r\n            return new ActionCodeURL(actionLink);\r\n        }\r\n        catch (_a) {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Parses the email action link string and returns an {@link ActionCodeURL} if\r\n * the link is valid, otherwise returns null.\r\n *\r\n * @public\r\n */\r\nfunction parseActionCodeURL(link) {\r\n    return ActionCodeURL.parseLink(link);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for generating {@link EmailAuthCredential}.\r\n *\r\n * @public\r\n */\r\nclass EmailAuthProvider {\r\n    constructor() {\r\n        /**\r\n         * Always set to {@link ProviderId}.PASSWORD, even for email link.\r\n         */\r\n        this.providerId = EmailAuthProvider.PROVIDER_ID;\r\n    }\r\n    /**\r\n     * Initialize an {@link AuthCredential} using an email and password.\r\n     *\r\n     * @example\r\n     * ```javascript\r\n     * const authCredential = EmailAuthProvider.credential(email, password);\r\n     * const userCredential = await signInWithCredential(auth, authCredential);\r\n     * ```\r\n     *\r\n     * @example\r\n     * ```javascript\r\n     * const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n     * ```\r\n     *\r\n     * @param email - Email address.\r\n     * @param password - User account password.\r\n     * @returns The auth provider credential.\r\n     */\r\n    static credential(email, password) {\r\n        return EmailAuthCredential._fromEmailAndPassword(email, password);\r\n    }\r\n    /**\r\n     * Initialize an {@link AuthCredential} using an email and an email link after a sign in with\r\n     * email link operation.\r\n     *\r\n     * @example\r\n     * ```javascript\r\n     * const authCredential = EmailAuthProvider.credentialWithLink(auth, email, emailLink);\r\n     * const userCredential = await signInWithCredential(auth, authCredential);\r\n     * ```\r\n     *\r\n     * @example\r\n     * ```javascript\r\n     * await sendSignInLinkToEmail(auth, email);\r\n     * // Obtain emailLink from user.\r\n     * const userCredential = await signInWithEmailLink(auth, email, emailLink);\r\n     * ```\r\n     *\r\n     * @param auth - The {@link Auth} instance used to verify the link.\r\n     * @param email - Email address.\r\n     * @param emailLink - Sign-in email link.\r\n     * @returns - The auth provider credential.\r\n     */\r\n    static credentialWithLink(email, emailLink) {\r\n        const actionCodeUrl = ActionCodeURL.parseLink(emailLink);\r\n        _assert(actionCodeUrl, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        return EmailAuthCredential._fromEmailAndCode(email, actionCodeUrl.code, actionCodeUrl.tenantId);\r\n    }\r\n}\r\n/**\r\n * Always set to {@link ProviderId}.PASSWORD, even for email link.\r\n */\r\nEmailAuthProvider.PROVIDER_ID = \"password\" /* ProviderId.PASSWORD */;\r\n/**\r\n * Always set to {@link SignInMethod}.EMAIL_PASSWORD.\r\n */\r\nEmailAuthProvider.EMAIL_PASSWORD_SIGN_IN_METHOD = \"password\" /* SignInMethod.EMAIL_PASSWORD */;\r\n/**\r\n * Always set to {@link SignInMethod}.EMAIL_LINK.\r\n */\r\nEmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD = \"emailLink\" /* SignInMethod.EMAIL_LINK */;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The base class for all Federated providers (OAuth (including OIDC), SAML).\r\n *\r\n * This class is not meant to be instantiated directly.\r\n *\r\n * @public\r\n */\r\nclass FederatedAuthProvider {\r\n    /**\r\n     * Constructor for generic OAuth providers.\r\n     *\r\n     * @param providerId - Provider for which credentials should be generated.\r\n     */\r\n    constructor(providerId) {\r\n        this.providerId = providerId;\r\n        /** @internal */\r\n        this.defaultLanguageCode = null;\r\n        /** @internal */\r\n        this.customParameters = {};\r\n    }\r\n    /**\r\n     * Set the language gode.\r\n     *\r\n     * @param languageCode - language code\r\n     */\r\n    setDefaultLanguage(languageCode) {\r\n        this.defaultLanguageCode = languageCode;\r\n    }\r\n    /**\r\n     * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in\r\n     * operations.\r\n     *\r\n     * @remarks\r\n     * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,\r\n     * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.\r\n     *\r\n     * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.\r\n     */\r\n    setCustomParameters(customOAuthParameters) {\r\n        this.customParameters = customOAuthParameters;\r\n        return this;\r\n    }\r\n    /**\r\n     * Retrieve the current list of {@link CustomParameters}.\r\n     */\r\n    getCustomParameters() {\r\n        return this.customParameters;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Common code to all OAuth providers. This is separate from the\r\n * {@link OAuthProvider} so that child providers (like\r\n * {@link GoogleAuthProvider}) don't inherit the `credential` instance method.\r\n * Instead, they rely on a static `credential` method.\r\n */\r\nclass BaseOAuthProvider extends FederatedAuthProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        /** @internal */\r\n        this.scopes = [];\r\n    }\r\n    /**\r\n     * Add an OAuth scope to the credential.\r\n     *\r\n     * @param scope - Provider OAuth scope to add.\r\n     */\r\n    addScope(scope) {\r\n        // If not already added, add scope to list.\r\n        if (!this.scopes.includes(scope)) {\r\n            this.scopes.push(scope);\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Retrieve the current list of OAuth scopes.\r\n     */\r\n    getScopes() {\r\n        return [...this.scopes];\r\n    }\r\n}\r\n/**\r\n * Provider for generating generic {@link OAuthCredential}.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new OAuthProvider('google.com');\r\n * // Start a sign in process for an unauthenticated user.\r\n * provider.addScope('profile');\r\n * provider.addScope('email');\r\n * await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * if (result) {\r\n *   // This is the signed-in user\r\n *   const user = result.user;\r\n *   // This gives you a OAuth Access Token for the provider.\r\n *   const credential = provider.credentialFromResult(auth, result);\r\n *   const token = credential.accessToken;\r\n * }\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a popup.\r\n * const provider = new OAuthProvider('google.com');\r\n * provider.addScope('profile');\r\n * provider.addScope('email');\r\n * const result = await signInWithPopup(auth, provider);\r\n *\r\n * // The signed-in user info.\r\n * const user = result.user;\r\n * // This gives you a OAuth Access Token for the provider.\r\n * const credential = provider.credentialFromResult(auth, result);\r\n * const token = credential.accessToken;\r\n * ```\r\n * @public\r\n */\r\nclass OAuthProvider extends BaseOAuthProvider {\r\n    /**\r\n     * Creates an {@link OAuthCredential} from a JSON string or a plain object.\r\n     * @param json - A plain object or a JSON string\r\n     */\r\n    static credentialFromJSON(json) {\r\n        const obj = typeof json === 'string' ? JSON.parse(json) : json;\r\n        _assert('providerId' in obj && 'signInMethod' in obj, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        return OAuthCredential._fromParams(obj);\r\n    }\r\n    /**\r\n     * Creates a {@link OAuthCredential} from a generic OAuth provider's access token or ID token.\r\n     *\r\n     * @remarks\r\n     * The raw nonce is required when an ID token with a nonce field is provided. The SHA-256 hash of\r\n     * the raw nonce must match the nonce field in the ID token.\r\n     *\r\n     * @example\r\n     * ```javascript\r\n     * // `googleUser` from the onsuccess Google Sign In callback.\r\n     * // Initialize a generate OAuth provider with a `google.com` providerId.\r\n     * const provider = new OAuthProvider('google.com');\r\n     * const credential = provider.credential({\r\n     *   idToken: googleUser.getAuthResponse().id_token,\r\n     * });\r\n     * const result = await signInWithCredential(credential);\r\n     * ```\r\n     *\r\n     * @param params - Either the options object containing the ID token, access token and raw nonce\r\n     * or the ID token string.\r\n     */\r\n    credential(params) {\r\n        return this._credential(Object.assign(Object.assign({}, params), { nonce: params.rawNonce }));\r\n    }\r\n    /** An internal credential method that accepts more permissive options */\r\n    _credential(params) {\r\n        _assert(params.idToken || params.accessToken, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        // For OAuthCredential, sign in method is same as providerId.\r\n        return OAuthCredential._fromParams(Object.assign(Object.assign({}, params), { providerId: this.providerId, signInMethod: this.providerId }));\r\n    }\r\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromResult(userCredential) {\r\n        return OAuthProvider.oauthCredentialFromTaggedObject(userCredential);\r\n    }\r\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\r\n     * thrown during a sign-in, link, or reauthenticate operation.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromError(error) {\r\n        return OAuthProvider.oauthCredentialFromTaggedObject((error.customData || {}));\r\n    }\r\n    static oauthCredentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\r\n        if (!tokenResponse) {\r\n            return null;\r\n        }\r\n        const { oauthIdToken, oauthAccessToken, oauthTokenSecret, pendingToken, nonce, providerId } = tokenResponse;\r\n        if (!oauthAccessToken &&\r\n            !oauthTokenSecret &&\r\n            !oauthIdToken &&\r\n            !pendingToken) {\r\n            return null;\r\n        }\r\n        if (!providerId) {\r\n            return null;\r\n        }\r\n        try {\r\n            return new OAuthProvider(providerId)._credential({\r\n                idToken: oauthIdToken,\r\n                accessToken: oauthAccessToken,\r\n                nonce,\r\n                pendingToken\r\n            });\r\n        }\r\n        catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.FACEBOOK.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new FacebookAuthProvider();\r\n * // Start a sign in process for an unauthenticated user.\r\n * provider.addScope('user_birthday');\r\n * await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * if (result) {\r\n *   // This is the signed-in user\r\n *   const user = result.user;\r\n *   // This gives you a Facebook Access Token.\r\n *   const credential = FacebookAuthProvider.credentialFromResult(result);\r\n *   const token = credential.accessToken;\r\n * }\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a popup.\r\n * const provider = new FacebookAuthProvider();\r\n * provider.addScope('user_birthday');\r\n * const result = await signInWithPopup(auth, provider);\r\n *\r\n * // The signed-in user info.\r\n * const user = result.user;\r\n * // This gives you a Facebook Access Token.\r\n * const credential = FacebookAuthProvider.credentialFromResult(result);\r\n * const token = credential.accessToken;\r\n * ```\r\n *\r\n * @public\r\n */\r\nclass FacebookAuthProvider extends BaseOAuthProvider {\r\n    constructor() {\r\n        super(\"facebook.com\" /* ProviderId.FACEBOOK */);\r\n    }\r\n    /**\r\n     * Creates a credential for Facebook.\r\n     *\r\n     * @example\r\n     * ```javascript\r\n     * // `event` from the Facebook auth.authResponseChange callback.\r\n     * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);\r\n     * const result = await signInWithCredential(credential);\r\n     * ```\r\n     *\r\n     * @param accessToken - Facebook access token.\r\n     */\r\n    static credential(accessToken) {\r\n        return OAuthCredential._fromParams({\r\n            providerId: FacebookAuthProvider.PROVIDER_ID,\r\n            signInMethod: FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD,\r\n            accessToken\r\n        });\r\n    }\r\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromResult(userCredential) {\r\n        return FacebookAuthProvider.credentialFromTaggedObject(userCredential);\r\n    }\r\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\r\n     * thrown during a sign-in, link, or reauthenticate operation.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromError(error) {\r\n        return FacebookAuthProvider.credentialFromTaggedObject((error.customData || {}));\r\n    }\r\n    static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\r\n        if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\r\n            return null;\r\n        }\r\n        if (!tokenResponse.oauthAccessToken) {\r\n            return null;\r\n        }\r\n        try {\r\n            return FacebookAuthProvider.credential(tokenResponse.oauthAccessToken);\r\n        }\r\n        catch (_a) {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/** Always set to {@link SignInMethod}.FACEBOOK. */\r\nFacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD = \"facebook.com\" /* SignInMethod.FACEBOOK */;\r\n/** Always set to {@link ProviderId}.FACEBOOK. */\r\nFacebookAuthProvider.PROVIDER_ID = \"facebook.com\" /* ProviderId.FACEBOOK */;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for generating an an {@link OAuthCredential} for {@link ProviderId}.GOOGLE.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new GoogleAuthProvider();\r\n * // Start a sign in process for an unauthenticated user.\r\n * provider.addScope('profile');\r\n * provider.addScope('email');\r\n * await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * if (result) {\r\n *   // This is the signed-in user\r\n *   const user = result.user;\r\n *   // This gives you a Google Access Token.\r\n *   const credential = GoogleAuthProvider.credentialFromResult(result);\r\n *   const token = credential.accessToken;\r\n * }\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a popup.\r\n * const provider = new GoogleAuthProvider();\r\n * provider.addScope('profile');\r\n * provider.addScope('email');\r\n * const result = await signInWithPopup(auth, provider);\r\n *\r\n * // The signed-in user info.\r\n * const user = result.user;\r\n * // This gives you a Google Access Token.\r\n * const credential = GoogleAuthProvider.credentialFromResult(result);\r\n * const token = credential.accessToken;\r\n * ```\r\n *\r\n * @public\r\n */\r\nclass GoogleAuthProvider extends BaseOAuthProvider {\r\n    constructor() {\r\n        super(\"google.com\" /* ProviderId.GOOGLE */);\r\n        this.addScope('profile');\r\n    }\r\n    /**\r\n     * Creates a credential for Google. At least one of ID token and access token is required.\r\n     *\r\n     * @example\r\n     * ```javascript\r\n     * // \\`googleUser\\` from the onsuccess Google Sign In callback.\r\n     * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);\r\n     * const result = await signInWithCredential(credential);\r\n     * ```\r\n     *\r\n     * @param idToken - Google ID token.\r\n     * @param accessToken - Google access token.\r\n     */\r\n    static credential(idToken, accessToken) {\r\n        return OAuthCredential._fromParams({\r\n            providerId: GoogleAuthProvider.PROVIDER_ID,\r\n            signInMethod: GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD,\r\n            idToken,\r\n            accessToken\r\n        });\r\n    }\r\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromResult(userCredential) {\r\n        return GoogleAuthProvider.credentialFromTaggedObject(userCredential);\r\n    }\r\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\r\n     * thrown during a sign-in, link, or reauthenticate operation.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromError(error) {\r\n        return GoogleAuthProvider.credentialFromTaggedObject((error.customData || {}));\r\n    }\r\n    static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\r\n        if (!tokenResponse) {\r\n            return null;\r\n        }\r\n        const { oauthIdToken, oauthAccessToken } = tokenResponse;\r\n        if (!oauthIdToken && !oauthAccessToken) {\r\n            // This could be an oauth 1 credential or a phone credential\r\n            return null;\r\n        }\r\n        try {\r\n            return GoogleAuthProvider.credential(oauthIdToken, oauthAccessToken);\r\n        }\r\n        catch (_a) {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/** Always set to {@link SignInMethod}.GOOGLE. */\r\nGoogleAuthProvider.GOOGLE_SIGN_IN_METHOD = \"google.com\" /* SignInMethod.GOOGLE */;\r\n/** Always set to {@link ProviderId}.GOOGLE. */\r\nGoogleAuthProvider.PROVIDER_ID = \"google.com\" /* ProviderId.GOOGLE */;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GITHUB.\r\n *\r\n * @remarks\r\n * GitHub requires an OAuth 2.0 redirect, so you can either handle the redirect directly, or use\r\n * the {@link signInWithPopup} handler:\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new GithubAuthProvider();\r\n * // Start a sign in process for an unauthenticated user.\r\n * provider.addScope('repo');\r\n * await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * if (result) {\r\n *   // This is the signed-in user\r\n *   const user = result.user;\r\n *   // This gives you a Github Access Token.\r\n *   const credential = GithubAuthProvider.credentialFromResult(result);\r\n *   const token = credential.accessToken;\r\n * }\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a popup.\r\n * const provider = new GithubAuthProvider();\r\n * provider.addScope('repo');\r\n * const result = await signInWithPopup(auth, provider);\r\n *\r\n * // The signed-in user info.\r\n * const user = result.user;\r\n * // This gives you a Github Access Token.\r\n * const credential = GithubAuthProvider.credentialFromResult(result);\r\n * const token = credential.accessToken;\r\n * ```\r\n * @public\r\n */\r\nclass GithubAuthProvider extends BaseOAuthProvider {\r\n    constructor() {\r\n        super(\"github.com\" /* ProviderId.GITHUB */);\r\n    }\r\n    /**\r\n     * Creates a credential for Github.\r\n     *\r\n     * @param accessToken - Github access token.\r\n     */\r\n    static credential(accessToken) {\r\n        return OAuthCredential._fromParams({\r\n            providerId: GithubAuthProvider.PROVIDER_ID,\r\n            signInMethod: GithubAuthProvider.GITHUB_SIGN_IN_METHOD,\r\n            accessToken\r\n        });\r\n    }\r\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromResult(userCredential) {\r\n        return GithubAuthProvider.credentialFromTaggedObject(userCredential);\r\n    }\r\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\r\n     * thrown during a sign-in, link, or reauthenticate operation.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromError(error) {\r\n        return GithubAuthProvider.credentialFromTaggedObject((error.customData || {}));\r\n    }\r\n    static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\r\n        if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\r\n            return null;\r\n        }\r\n        if (!tokenResponse.oauthAccessToken) {\r\n            return null;\r\n        }\r\n        try {\r\n            return GithubAuthProvider.credential(tokenResponse.oauthAccessToken);\r\n        }\r\n        catch (_a) {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/** Always set to {@link SignInMethod}.GITHUB. */\r\nGithubAuthProvider.GITHUB_SIGN_IN_METHOD = \"github.com\" /* SignInMethod.GITHUB */;\r\n/** Always set to {@link ProviderId}.GITHUB. */\r\nGithubAuthProvider.PROVIDER_ID = \"github.com\" /* ProviderId.GITHUB */;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst IDP_REQUEST_URI = 'http://localhost';\r\n/**\r\n * @public\r\n */\r\nclass SAMLAuthCredential extends AuthCredential {\r\n    /** @internal */\r\n    constructor(providerId, pendingToken) {\r\n        super(providerId, providerId);\r\n        this.pendingToken = pendingToken;\r\n    }\r\n    /** @internal */\r\n    _getIdTokenResponse(auth) {\r\n        const request = this.buildRequest();\r\n        return signInWithIdp(auth, request);\r\n    }\r\n    /** @internal */\r\n    _linkToIdToken(auth, idToken) {\r\n        const request = this.buildRequest();\r\n        request.idToken = idToken;\r\n        return signInWithIdp(auth, request);\r\n    }\r\n    /** @internal */\r\n    _getReauthenticationResolver(auth) {\r\n        const request = this.buildRequest();\r\n        request.autoCreate = false;\r\n        return signInWithIdp(auth, request);\r\n    }\r\n    /** {@inheritdoc AuthCredential.toJSON}  */\r\n    toJSON() {\r\n        return {\r\n            signInMethod: this.signInMethod,\r\n            providerId: this.providerId,\r\n            pendingToken: this.pendingToken\r\n        };\r\n    }\r\n    /**\r\n     * Static method to deserialize a JSON representation of an object into an\r\n     * {@link  AuthCredential}.\r\n     *\r\n     * @param json - Input can be either Object or the stringified representation of the object.\r\n     * When string is provided, JSON.parse would be called first.\r\n     *\r\n     * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\r\n     */\r\n    static fromJSON(json) {\r\n        const obj = typeof json === 'string' ? JSON.parse(json) : json;\r\n        const { providerId, signInMethod, pendingToken } = obj;\r\n        if (!providerId ||\r\n            !signInMethod ||\r\n            !pendingToken ||\r\n            providerId !== signInMethod) {\r\n            return null;\r\n        }\r\n        return new SAMLAuthCredential(providerId, pendingToken);\r\n    }\r\n    /**\r\n     * Helper static method to avoid exposing the constructor to end users.\r\n     *\r\n     * @internal\r\n     */\r\n    static _create(providerId, pendingToken) {\r\n        return new SAMLAuthCredential(providerId, pendingToken);\r\n    }\r\n    buildRequest() {\r\n        return {\r\n            requestUri: IDP_REQUEST_URI,\r\n            returnSecureToken: true,\r\n            pendingToken: this.pendingToken\r\n        };\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst SAML_PROVIDER_PREFIX = 'saml.';\r\n/**\r\n * An {@link AuthProvider} for SAML.\r\n *\r\n * @public\r\n */\r\nclass SAMLAuthProvider extends FederatedAuthProvider {\r\n    /**\r\n     * Constructor. The providerId must start with \"saml.\"\r\n     * @param providerId - SAML provider ID.\r\n     */\r\n    constructor(providerId) {\r\n        _assert(providerId.startsWith(SAML_PROVIDER_PREFIX), \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        super(providerId);\r\n    }\r\n    /**\r\n     * Generates an {@link AuthCredential} from a {@link UserCredential} after a\r\n     * successful SAML flow completes.\r\n     *\r\n     * @remarks\r\n     *\r\n     * For example, to get an {@link AuthCredential}, you could write the\r\n     * following code:\r\n     *\r\n     * ```js\r\n     * const userCredential = await signInWithPopup(auth, samlProvider);\r\n     * const credential = SAMLAuthProvider.credentialFromResult(userCredential);\r\n     * ```\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromResult(userCredential) {\r\n        return SAMLAuthProvider.samlCredentialFromTaggedObject(userCredential);\r\n    }\r\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\r\n     * thrown during a sign-in, link, or reauthenticate operation.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromError(error) {\r\n        return SAMLAuthProvider.samlCredentialFromTaggedObject((error.customData || {}));\r\n    }\r\n    /**\r\n     * Creates an {@link AuthCredential} from a JSON string or a plain object.\r\n     * @param json - A plain object or a JSON string\r\n     */\r\n    static credentialFromJSON(json) {\r\n        const credential = SAMLAuthCredential.fromJSON(json);\r\n        _assert(credential, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        return credential;\r\n    }\r\n    static samlCredentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\r\n        if (!tokenResponse) {\r\n            return null;\r\n        }\r\n        const { pendingToken, providerId } = tokenResponse;\r\n        if (!pendingToken || !providerId) {\r\n            return null;\r\n        }\r\n        try {\r\n            return SAMLAuthCredential._create(providerId, pendingToken);\r\n        }\r\n        catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.TWITTER.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new TwitterAuthProvider();\r\n * // Start a sign in process for an unauthenticated user.\r\n * await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * if (result) {\r\n *   // This is the signed-in user\r\n *   const user = result.user;\r\n *   // This gives you a Twitter Access Token and Secret.\r\n *   const credential = TwitterAuthProvider.credentialFromResult(result);\r\n *   const token = credential.accessToken;\r\n *   const secret = credential.secret;\r\n * }\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a popup.\r\n * const provider = new TwitterAuthProvider();\r\n * const result = await signInWithPopup(auth, provider);\r\n *\r\n * // The signed-in user info.\r\n * const user = result.user;\r\n * // This gives you a Twitter Access Token and Secret.\r\n * const credential = TwitterAuthProvider.credentialFromResult(result);\r\n * const token = credential.accessToken;\r\n * const secret = credential.secret;\r\n * ```\r\n *\r\n * @public\r\n */\r\nclass TwitterAuthProvider extends BaseOAuthProvider {\r\n    constructor() {\r\n        super(\"twitter.com\" /* ProviderId.TWITTER */);\r\n    }\r\n    /**\r\n     * Creates a credential for Twitter.\r\n     *\r\n     * @param token - Twitter access token.\r\n     * @param secret - Twitter secret.\r\n     */\r\n    static credential(token, secret) {\r\n        return OAuthCredential._fromParams({\r\n            providerId: TwitterAuthProvider.PROVIDER_ID,\r\n            signInMethod: TwitterAuthProvider.TWITTER_SIGN_IN_METHOD,\r\n            oauthToken: token,\r\n            oauthTokenSecret: secret\r\n        });\r\n    }\r\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromResult(userCredential) {\r\n        return TwitterAuthProvider.credentialFromTaggedObject(userCredential);\r\n    }\r\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\r\n     * thrown during a sign-in, link, or reauthenticate operation.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromError(error) {\r\n        return TwitterAuthProvider.credentialFromTaggedObject((error.customData || {}));\r\n    }\r\n    static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\r\n        if (!tokenResponse) {\r\n            return null;\r\n        }\r\n        const { oauthAccessToken, oauthTokenSecret } = tokenResponse;\r\n        if (!oauthAccessToken || !oauthTokenSecret) {\r\n            return null;\r\n        }\r\n        try {\r\n            return TwitterAuthProvider.credential(oauthAccessToken, oauthTokenSecret);\r\n        }\r\n        catch (_a) {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/** Always set to {@link SignInMethod}.TWITTER. */\r\nTwitterAuthProvider.TWITTER_SIGN_IN_METHOD = \"twitter.com\" /* SignInMethod.TWITTER */;\r\n/** Always set to {@link ProviderId}.TWITTER. */\r\nTwitterAuthProvider.PROVIDER_ID = \"twitter.com\" /* ProviderId.TWITTER */;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function signUp(auth, request) {\r\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signUp\" /* Endpoint.SIGN_UP */, _addTidIfNecessary(auth, request));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass UserCredentialImpl {\r\n    constructor(params) {\r\n        this.user = params.user;\r\n        this.providerId = params.providerId;\r\n        this._tokenResponse = params._tokenResponse;\r\n        this.operationType = params.operationType;\r\n    }\r\n    static async _fromIdTokenResponse(auth, operationType, idTokenResponse, isAnonymous = false) {\r\n        const user = await UserImpl._fromIdTokenResponse(auth, idTokenResponse, isAnonymous);\r\n        const providerId = providerIdForResponse(idTokenResponse);\r\n        const userCred = new UserCredentialImpl({\r\n            user,\r\n            providerId,\r\n            _tokenResponse: idTokenResponse,\r\n            operationType\r\n        });\r\n        return userCred;\r\n    }\r\n    static async _forOperation(user, operationType, response) {\r\n        await user._updateTokensIfNecessary(response, /* reload */ true);\r\n        const providerId = providerIdForResponse(response);\r\n        return new UserCredentialImpl({\r\n            user,\r\n            providerId,\r\n            _tokenResponse: response,\r\n            operationType\r\n        });\r\n    }\r\n}\r\nfunction providerIdForResponse(response) {\r\n    if (response.providerId) {\r\n        return response.providerId;\r\n    }\r\n    if ('phoneNumber' in response) {\r\n        return \"phone\" /* ProviderId.PHONE */;\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Asynchronously signs in as an anonymous user.\r\n *\r\n * @remarks\r\n * If there is already an anonymous user signed in, that user will be returned; otherwise, a\r\n * new anonymous user identity will be created and returned.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n *\r\n * @public\r\n */\r\nasync function signInAnonymously(auth) {\r\n    var _a;\r\n    const authInternal = _castAuth(auth);\r\n    await authInternal._initializationPromise;\r\n    if ((_a = authInternal.currentUser) === null || _a === void 0 ? void 0 : _a.isAnonymous) {\r\n        // If an anonymous user is already signed in, no need to sign them in again.\r\n        return new UserCredentialImpl({\r\n            user: authInternal.currentUser,\r\n            providerId: null,\r\n            operationType: \"signIn\" /* OperationType.SIGN_IN */\r\n        });\r\n    }\r\n    const response = await signUp(authInternal, {\r\n        returnSecureToken: true\r\n    });\r\n    const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */, response, true);\r\n    await authInternal._updateCurrentUser(userCredential.user);\r\n    return userCredential;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass MultiFactorError extends FirebaseError {\r\n    constructor(auth, error, operationType, user) {\r\n        var _a;\r\n        super(error.code, error.message);\r\n        this.operationType = operationType;\r\n        this.user = user;\r\n        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        Object.setPrototypeOf(this, MultiFactorError.prototype);\r\n        this.customData = {\r\n            appName: auth.name,\r\n            tenantId: (_a = auth.tenantId) !== null && _a !== void 0 ? _a : undefined,\r\n            _serverResponse: error.customData._serverResponse,\r\n            operationType\r\n        };\r\n    }\r\n    static _fromErrorAndOperation(auth, error, operationType, user) {\r\n        return new MultiFactorError(auth, error, operationType, user);\r\n    }\r\n}\r\nfunction _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user) {\r\n    const idTokenProvider = operationType === \"reauthenticate\" /* OperationType.REAUTHENTICATE */\r\n        ? credential._getReauthenticationResolver(auth)\r\n        : credential._getIdTokenResponse(auth);\r\n    return idTokenProvider.catch(error => {\r\n        if (error.code === `auth/${\"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */}`) {\r\n            throw MultiFactorError._fromErrorAndOperation(auth, error, operationType, user);\r\n        }\r\n        throw error;\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Takes a set of UserInfo provider data and converts it to a set of names\r\n */\r\nfunction providerDataAsNames(providerData) {\r\n    return new Set(providerData\r\n        .map(({ providerId }) => providerId)\r\n        .filter(pid => !!pid));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Unlinks a provider from a user account.\r\n *\r\n * @param user - The user.\r\n * @param providerId - The provider to unlink.\r\n *\r\n * @public\r\n */\r\nasync function unlink(user, providerId) {\r\n    const userInternal = getModularInstance(user);\r\n    await _assertLinkedStatus(true, userInternal, providerId);\r\n    const { providerUserInfo } = await deleteLinkedAccounts(userInternal.auth, {\r\n        idToken: await userInternal.getIdToken(),\r\n        deleteProvider: [providerId]\r\n    });\r\n    const providersLeft = providerDataAsNames(providerUserInfo || []);\r\n    userInternal.providerData = userInternal.providerData.filter(pd => providersLeft.has(pd.providerId));\r\n    if (!providersLeft.has(\"phone\" /* ProviderId.PHONE */)) {\r\n        userInternal.phoneNumber = null;\r\n    }\r\n    await userInternal.auth._persistUserIfCurrent(userInternal);\r\n    return userInternal;\r\n}\r\nasync function _link$1(user, credential, bypassAuthState = false) {\r\n    const response = await _logoutIfInvalidated(user, credential._linkToIdToken(user.auth, await user.getIdToken()), bypassAuthState);\r\n    return UserCredentialImpl._forOperation(user, \"link\" /* OperationType.LINK */, response);\r\n}\r\nasync function _assertLinkedStatus(expected, user, provider) {\r\n    await _reloadWithoutSaving(user);\r\n    const providerIds = providerDataAsNames(user.providerData);\r\n    const code = expected === false\r\n        ? \"provider-already-linked\" /* AuthErrorCode.PROVIDER_ALREADY_LINKED */\r\n        : \"no-such-provider\" /* AuthErrorCode.NO_SUCH_PROVIDER */;\r\n    _assert(providerIds.has(provider) === expected, user.auth, code);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function _reauthenticate(user, credential, bypassAuthState = false) {\r\n    const { auth } = user;\r\n    const operationType = \"reauthenticate\" /* OperationType.REAUTHENTICATE */;\r\n    try {\r\n        const response = await _logoutIfInvalidated(user, _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user), bypassAuthState);\r\n        _assert(response.idToken, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        const parsed = _parseToken(response.idToken);\r\n        _assert(parsed, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        const { sub: localId } = parsed;\r\n        _assert(user.uid === localId, auth, \"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */);\r\n        return UserCredentialImpl._forOperation(user, operationType, response);\r\n    }\r\n    catch (e) {\r\n        // Convert user deleted error into user mismatch\r\n        if ((e === null || e === void 0 ? void 0 : e.code) === `auth/${\"user-not-found\" /* AuthErrorCode.USER_DELETED */}`) {\r\n            _fail(auth, \"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */);\r\n        }\r\n        throw e;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function _signInWithCredential(auth, credential, bypassAuthState = false) {\r\n    const operationType = \"signIn\" /* OperationType.SIGN_IN */;\r\n    const response = await _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential);\r\n    const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, operationType, response);\r\n    if (!bypassAuthState) {\r\n        await auth._updateCurrentUser(userCredential.user);\r\n    }\r\n    return userCredential;\r\n}\r\n/**\r\n * Asynchronously signs in with the given credentials.\r\n *\r\n * @remarks\r\n * An {@link AuthProvider} can be used to generate the credential.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param credential - The auth credential.\r\n *\r\n * @public\r\n */\r\nasync function signInWithCredential(auth, credential) {\r\n    return _signInWithCredential(_castAuth(auth), credential);\r\n}\r\n/**\r\n * Links the user account with the given credentials.\r\n *\r\n * @remarks\r\n * An {@link AuthProvider} can be used to generate the credential.\r\n *\r\n * @param user - The user.\r\n * @param credential - The auth credential.\r\n *\r\n * @public\r\n */\r\nasync function linkWithCredential(user, credential) {\r\n    const userInternal = getModularInstance(user);\r\n    await _assertLinkedStatus(false, userInternal, credential.providerId);\r\n    return _link$1(userInternal, credential);\r\n}\r\n/**\r\n * Re-authenticates a user using a fresh credential.\r\n *\r\n * @remarks\r\n * Use before operations such as {@link updatePassword} that require tokens from recent sign-in\r\n * attempts. This method can be used to recover from a `CREDENTIAL_TOO_OLD_LOGIN_AGAIN` error\r\n * or a `TOKEN_EXPIRED` error.\r\n *\r\n * @param user - The user.\r\n * @param credential - The auth credential.\r\n *\r\n * @public\r\n */\r\nasync function reauthenticateWithCredential(user, credential) {\r\n    return _reauthenticate(getModularInstance(user), credential);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function signInWithCustomToken$1(auth, request) {\r\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithCustomToken\" /* Endpoint.SIGN_IN_WITH_CUSTOM_TOKEN */, _addTidIfNecessary(auth, request));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Asynchronously signs in using a custom token.\r\n *\r\n * @remarks\r\n * Custom tokens are used to integrate Firebase Auth with existing auth systems, and must\r\n * be generated by an auth backend using the\r\n * {@link https://firebase.google.com/docs/reference/admin/node/admin.auth.Auth#createcustomtoken | createCustomToken}\r\n * method in the {@link https://firebase.google.com/docs/auth/admin | Admin SDK} .\r\n *\r\n * Fails with an error if the token is invalid, expired, or not accepted by the Firebase Auth service.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param customToken - The custom token to sign in with.\r\n *\r\n * @public\r\n */\r\nasync function signInWithCustomToken(auth, customToken) {\r\n    const authInternal = _castAuth(auth);\r\n    const response = await signInWithCustomToken$1(authInternal, {\r\n        token: customToken,\r\n        returnSecureToken: true\r\n    });\r\n    const cred = await UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */, response);\r\n    await authInternal._updateCurrentUser(cred.user);\r\n    return cred;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass MultiFactorInfoImpl {\r\n    constructor(factorId, response) {\r\n        this.factorId = factorId;\r\n        this.uid = response.mfaEnrollmentId;\r\n        this.enrollmentTime = new Date(response.enrolledAt).toUTCString();\r\n        this.displayName = response.displayName;\r\n    }\r\n    static _fromServerResponse(auth, enrollment) {\r\n        if ('phoneInfo' in enrollment) {\r\n            return PhoneMultiFactorInfoImpl._fromServerResponse(auth, enrollment);\r\n        }\r\n        else if ('totpInfo' in enrollment) {\r\n            return TotpMultiFactorInfoImpl._fromServerResponse(auth, enrollment);\r\n        }\r\n        return _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n    }\r\n}\r\nclass PhoneMultiFactorInfoImpl extends MultiFactorInfoImpl {\r\n    constructor(response) {\r\n        super(\"phone\" /* FactorId.PHONE */, response);\r\n        this.phoneNumber = response.phoneInfo;\r\n    }\r\n    static _fromServerResponse(_auth, enrollment) {\r\n        return new PhoneMultiFactorInfoImpl(enrollment);\r\n    }\r\n}\r\nclass TotpMultiFactorInfoImpl extends MultiFactorInfoImpl {\r\n    constructor(response) {\r\n        super(\"totp\" /* FactorId.TOTP */, response);\r\n    }\r\n    static _fromServerResponse(_auth, enrollment) {\r\n        return new TotpMultiFactorInfoImpl(enrollment);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction _setActionCodeSettingsOnRequest(auth, request, actionCodeSettings) {\r\n    var _a;\r\n    _assert(((_a = actionCodeSettings.url) === null || _a === void 0 ? void 0 : _a.length) > 0, auth, \"invalid-continue-uri\" /* AuthErrorCode.INVALID_CONTINUE_URI */);\r\n    _assert(typeof actionCodeSettings.dynamicLinkDomain === 'undefined' ||\r\n        actionCodeSettings.dynamicLinkDomain.length > 0, auth, \"invalid-dynamic-link-domain\" /* AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN */);\r\n    request.continueUrl = actionCodeSettings.url;\r\n    request.dynamicLinkDomain = actionCodeSettings.dynamicLinkDomain;\r\n    request.canHandleCodeInApp = actionCodeSettings.handleCodeInApp;\r\n    if (actionCodeSettings.iOS) {\r\n        _assert(actionCodeSettings.iOS.bundleId.length > 0, auth, \"missing-ios-bundle-id\" /* AuthErrorCode.MISSING_IOS_BUNDLE_ID */);\r\n        request.iOSBundleId = actionCodeSettings.iOS.bundleId;\r\n    }\r\n    if (actionCodeSettings.android) {\r\n        _assert(actionCodeSettings.android.packageName.length > 0, auth, \"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */);\r\n        request.androidInstallApp = actionCodeSettings.android.installApp;\r\n        request.androidMinimumVersionCode =\r\n            actionCodeSettings.android.minimumVersion;\r\n        request.androidPackageName = actionCodeSettings.android.packageName;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Sends a password reset email to the given email address.\r\n *\r\n * @remarks\r\n * To complete the password reset, call {@link confirmPasswordReset} with the code supplied in\r\n * the email sent to the user, along with the new password specified by the user.\r\n *\r\n * @example\r\n * ```javascript\r\n * const actionCodeSettings = {\r\n *   url: 'https://www.example.com/?email=user@example.com',\r\n *   iOS: {\r\n *      bundleId: 'com.example.ios'\r\n *   },\r\n *   android: {\r\n *     packageName: 'com.example.android',\r\n *     installApp: true,\r\n *     minimumVersion: '12'\r\n *   },\r\n *   handleCodeInApp: true\r\n * };\r\n * await sendPasswordResetEmail(auth, 'user@example.com', actionCodeSettings);\r\n * // Obtain code from user.\r\n * await confirmPasswordReset('user@example.com', code);\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param email - The user's email address.\r\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\r\n *\r\n * @public\r\n */\r\nasync function sendPasswordResetEmail(auth, email, actionCodeSettings) {\r\n    var _a;\r\n    const authInternal = _castAuth(auth);\r\n    const request = {\r\n        requestType: \"PASSWORD_RESET\" /* ActionCodeOperation.PASSWORD_RESET */,\r\n        email,\r\n        clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\r\n    };\r\n    if ((_a = authInternal._getRecaptchaConfig()) === null || _a === void 0 ? void 0 : _a.emailPasswordEnabled) {\r\n        const requestWithRecaptcha = await injectRecaptchaFields(authInternal, request, \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */, true);\r\n        if (actionCodeSettings) {\r\n            _setActionCodeSettingsOnRequest(authInternal, requestWithRecaptcha, actionCodeSettings);\r\n        }\r\n        await sendPasswordResetEmail$1(authInternal, requestWithRecaptcha);\r\n    }\r\n    else {\r\n        if (actionCodeSettings) {\r\n            _setActionCodeSettingsOnRequest(authInternal, request, actionCodeSettings);\r\n        }\r\n        await sendPasswordResetEmail$1(authInternal, request)\r\n            .catch(async (error) => {\r\n            if (error.code === `auth/${\"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */}`) {\r\n                console.log('Password resets are protected by reCAPTCHA for this project. Automatically triggering the reCAPTCHA flow and restarting the password reset flow.');\r\n                const requestWithRecaptcha = await injectRecaptchaFields(authInternal, request, \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */, true);\r\n                if (actionCodeSettings) {\r\n                    _setActionCodeSettingsOnRequest(authInternal, requestWithRecaptcha, actionCodeSettings);\r\n                }\r\n                await sendPasswordResetEmail$1(authInternal, requestWithRecaptcha);\r\n            }\r\n            else {\r\n                return Promise.reject(error);\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * Completes the password reset process, given a confirmation code and new password.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param oobCode - A confirmation code sent to the user.\r\n * @param newPassword - The new password.\r\n *\r\n * @public\r\n */\r\nasync function confirmPasswordReset(auth, oobCode, newPassword) {\r\n    await resetPassword(getModularInstance(auth), {\r\n        oobCode,\r\n        newPassword\r\n    });\r\n    // Do not return the email.\r\n}\r\n/**\r\n * Applies a verification code sent to the user by email or other out-of-band mechanism.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param oobCode - A verification code sent to the user.\r\n *\r\n * @public\r\n */\r\nasync function applyActionCode(auth, oobCode) {\r\n    await applyActionCode$1(getModularInstance(auth), { oobCode });\r\n}\r\n/**\r\n * Checks a verification code sent to the user by email or other out-of-band mechanism.\r\n *\r\n * @returns metadata about the code.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param oobCode - A verification code sent to the user.\r\n *\r\n * @public\r\n */\r\nasync function checkActionCode(auth, oobCode) {\r\n    const authModular = getModularInstance(auth);\r\n    const response = await resetPassword(authModular, { oobCode });\r\n    // Email could be empty only if the request type is EMAIL_SIGNIN or\r\n    // VERIFY_AND_CHANGE_EMAIL.\r\n    // New email should not be empty if the request type is\r\n    // VERIFY_AND_CHANGE_EMAIL.\r\n    // Multi-factor info could not be empty if the request type is\r\n    // REVERT_SECOND_FACTOR_ADDITION.\r\n    const operation = response.requestType;\r\n    _assert(operation, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n    switch (operation) {\r\n        case \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */:\r\n            break;\r\n        case \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */:\r\n            _assert(response.newEmail, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n            break;\r\n        case \"REVERT_SECOND_FACTOR_ADDITION\" /* ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION */:\r\n            _assert(response.mfaInfo, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        // fall through\r\n        default:\r\n            _assert(response.email, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n    }\r\n    // The multi-factor info for revert second factor addition\r\n    let multiFactorInfo = null;\r\n    if (response.mfaInfo) {\r\n        multiFactorInfo = MultiFactorInfoImpl._fromServerResponse(_castAuth(authModular), response.mfaInfo);\r\n    }\r\n    return {\r\n        data: {\r\n            email: (response.requestType === \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */\r\n                ? response.newEmail\r\n                : response.email) || null,\r\n            previousEmail: (response.requestType === \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */\r\n                ? response.email\r\n                : response.newEmail) || null,\r\n            multiFactorInfo\r\n        },\r\n        operation\r\n    };\r\n}\r\n/**\r\n * Checks a password reset code sent to the user by email or other out-of-band mechanism.\r\n *\r\n * @returns the user's email address if valid.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param code - A verification code sent to the user.\r\n *\r\n * @public\r\n */\r\nasync function verifyPasswordResetCode(auth, code) {\r\n    const { data } = await checkActionCode(getModularInstance(auth), code);\r\n    // Email should always be present since a code was sent to it\r\n    return data.email;\r\n}\r\n/**\r\n * Creates a new user account associated with the specified email address and password.\r\n *\r\n * @remarks\r\n * On successful creation of the user account, this user will also be signed in to your application.\r\n *\r\n * User account creation can fail if the account already exists or the password is invalid.\r\n *\r\n * Note: The email address acts as a unique identifier for the user and enables an email-based\r\n * password reset. This function will create a new user account and set the initial user password.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param email - The user's email address.\r\n * @param password - The user's chosen password.\r\n *\r\n * @public\r\n */\r\nasync function createUserWithEmailAndPassword(auth, email, password) {\r\n    var _a;\r\n    const authInternal = _castAuth(auth);\r\n    const request = {\r\n        returnSecureToken: true,\r\n        email,\r\n        password,\r\n        clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\r\n    };\r\n    let signUpResponse;\r\n    if ((_a = authInternal._getRecaptchaConfig()) === null || _a === void 0 ? void 0 : _a.emailPasswordEnabled) {\r\n        const requestWithRecaptcha = await injectRecaptchaFields(authInternal, request, \"signUpPassword\" /* RecaptchaActionName.SIGN_UP_PASSWORD */);\r\n        signUpResponse = signUp(authInternal, requestWithRecaptcha);\r\n    }\r\n    else {\r\n        signUpResponse = signUp(authInternal, request).catch(async (error) => {\r\n            if (error.code === `auth/${\"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */}`) {\r\n                console.log('Sign-up is protected by reCAPTCHA for this project. Automatically triggering the reCAPTCHA flow and restarting the sign-up flow.');\r\n                const requestWithRecaptcha = await injectRecaptchaFields(authInternal, request, \"signUpPassword\" /* RecaptchaActionName.SIGN_UP_PASSWORD */);\r\n                return signUp(authInternal, requestWithRecaptcha);\r\n            }\r\n            else {\r\n                return Promise.reject(error);\r\n            }\r\n        });\r\n    }\r\n    const response = await signUpResponse.catch(error => {\r\n        return Promise.reject(error);\r\n    });\r\n    const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */, response);\r\n    await authInternal._updateCurrentUser(userCredential.user);\r\n    return userCredential;\r\n}\r\n/**\r\n * Asynchronously signs in using an email and password.\r\n *\r\n * @remarks\r\n * Fails with an error if the email address and password do not match.\r\n *\r\n * Note: The user's password is NOT the password used to access the user's email account. The\r\n * email address serves as a unique identifier for the user, and the password is used to access\r\n * the user's account in your Firebase project. See also: {@link createUserWithEmailAndPassword}.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param email - The users email address.\r\n * @param password - The users password.\r\n *\r\n * @public\r\n */\r\nfunction signInWithEmailAndPassword(auth, email, password) {\r\n    return signInWithCredential(getModularInstance(auth), EmailAuthProvider.credential(email, password));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Sends a sign-in email link to the user with the specified email.\r\n *\r\n * @remarks\r\n * The sign-in operation has to always be completed in the app unlike other out of band email\r\n * actions (password reset and email verifications). This is because, at the end of the flow,\r\n * the user is expected to be signed in and their Auth state persisted within the app.\r\n *\r\n * To complete sign in with the email link, call {@link signInWithEmailLink} with the email\r\n * address and the email link supplied in the email sent to the user.\r\n *\r\n * @example\r\n * ```javascript\r\n * const actionCodeSettings = {\r\n *   url: 'https://www.example.com/?email=user@example.com',\r\n *   iOS: {\r\n *      bundleId: 'com.example.ios'\r\n *   },\r\n *   android: {\r\n *     packageName: 'com.example.android',\r\n *     installApp: true,\r\n *     minimumVersion: '12'\r\n *   },\r\n *   handleCodeInApp: true\r\n * };\r\n * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\r\n * // Obtain emailLink from the user.\r\n * if(isSignInWithEmailLink(auth, emailLink)) {\r\n *   await signInWithEmailLink(auth, 'user@example.com', emailLink);\r\n * }\r\n * ```\r\n *\r\n * @param authInternal - The {@link Auth} instance.\r\n * @param email - The user's email address.\r\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\r\n *\r\n * @public\r\n */\r\nasync function sendSignInLinkToEmail(auth, email, actionCodeSettings) {\r\n    var _a;\r\n    const authInternal = _castAuth(auth);\r\n    const request = {\r\n        requestType: \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */,\r\n        email,\r\n        clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\r\n    };\r\n    function setActionCodeSettings(request, actionCodeSettings) {\r\n        _assert(actionCodeSettings.handleCodeInApp, authInternal, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        if (actionCodeSettings) {\r\n            _setActionCodeSettingsOnRequest(authInternal, request, actionCodeSettings);\r\n        }\r\n    }\r\n    if ((_a = authInternal._getRecaptchaConfig()) === null || _a === void 0 ? void 0 : _a.emailPasswordEnabled) {\r\n        const requestWithRecaptcha = await injectRecaptchaFields(authInternal, request, \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */, true);\r\n        setActionCodeSettings(requestWithRecaptcha, actionCodeSettings);\r\n        await sendSignInLinkToEmail$1(authInternal, requestWithRecaptcha);\r\n    }\r\n    else {\r\n        setActionCodeSettings(request, actionCodeSettings);\r\n        await sendSignInLinkToEmail$1(authInternal, request)\r\n            .catch(async (error) => {\r\n            if (error.code === `auth/${\"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */}`) {\r\n                console.log('Email link sign-in is protected by reCAPTCHA for this project. Automatically triggering the reCAPTCHA flow and restarting the sign-in flow.');\r\n                const requestWithRecaptcha = await injectRecaptchaFields(authInternal, request, \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */, true);\r\n                setActionCodeSettings(requestWithRecaptcha, actionCodeSettings);\r\n                await sendSignInLinkToEmail$1(authInternal, requestWithRecaptcha);\r\n            }\r\n            else {\r\n                return Promise.reject(error);\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * Checks if an incoming link is a sign-in with email link suitable for {@link signInWithEmailLink}.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param emailLink - The link sent to the user's email address.\r\n *\r\n * @public\r\n */\r\nfunction isSignInWithEmailLink(auth, emailLink) {\r\n    const actionCodeUrl = ActionCodeURL.parseLink(emailLink);\r\n    return (actionCodeUrl === null || actionCodeUrl === void 0 ? void 0 : actionCodeUrl.operation) === \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */;\r\n}\r\n/**\r\n * Asynchronously signs in using an email and sign-in email link.\r\n *\r\n * @remarks\r\n * If no link is passed, the link is inferred from the current URL.\r\n *\r\n * Fails with an error if the email address is invalid or OTP in email link expires.\r\n *\r\n * Note: Confirm the link is a sign-in email link before calling this method firebase.auth.Auth.isSignInWithEmailLink.\r\n *\r\n * @example\r\n * ```javascript\r\n * const actionCodeSettings = {\r\n *   url: 'https://www.example.com/?email=user@example.com',\r\n *   iOS: {\r\n *      bundleId: 'com.example.ios'\r\n *   },\r\n *   android: {\r\n *     packageName: 'com.example.android',\r\n *     installApp: true,\r\n *     minimumVersion: '12'\r\n *   },\r\n *   handleCodeInApp: true\r\n * };\r\n * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\r\n * // Obtain emailLink from the user.\r\n * if(isSignInWithEmailLink(auth, emailLink)) {\r\n *   await signInWithEmailLink(auth, 'user@example.com', emailLink);\r\n * }\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param email - The user's email address.\r\n * @param emailLink - The link sent to the user's email address.\r\n *\r\n * @public\r\n */\r\nasync function signInWithEmailLink(auth, email, emailLink) {\r\n    const authModular = getModularInstance(auth);\r\n    const credential = EmailAuthProvider.credentialWithLink(email, emailLink || _getCurrentUrl());\r\n    // Check if the tenant ID in the email link matches the tenant ID on Auth\r\n    // instance.\r\n    _assert(credential._tenantId === (authModular.tenantId || null), authModular, \"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */);\r\n    return signInWithCredential(authModular, credential);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function createAuthUri(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:createAuthUri\" /* Endpoint.CREATE_AUTH_URI */, _addTidIfNecessary(auth, request));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Gets the list of possible sign in methods for the given email address.\r\n *\r\n * @remarks\r\n * This is useful to differentiate methods of sign-in for the same provider, eg.\r\n * {@link EmailAuthProvider} which has 2 methods of sign-in,\r\n * {@link SignInMethod}.EMAIL_PASSWORD and\r\n * {@link SignInMethod}.EMAIL_LINK.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param email - The user's email address.\r\n *\r\n * @public\r\n */\r\nasync function fetchSignInMethodsForEmail(auth, email) {\r\n    // createAuthUri returns an error if continue URI is not http or https.\r\n    // For environments like Cordova, Chrome extensions, native frameworks, file\r\n    // systems, etc, use http://localhost as continue URL.\r\n    const continueUri = _isHttpOrHttps() ? _getCurrentUrl() : 'http://localhost';\r\n    const request = {\r\n        identifier: email,\r\n        continueUri\r\n    };\r\n    const { signinMethods } = await createAuthUri(getModularInstance(auth), request);\r\n    return signinMethods || [];\r\n}\r\n/**\r\n * Sends a verification email to a user.\r\n *\r\n * @remarks\r\n * The verification process is completed by calling {@link applyActionCode}.\r\n *\r\n * @example\r\n * ```javascript\r\n * const actionCodeSettings = {\r\n *   url: 'https://www.example.com/?email=user@example.com',\r\n *   iOS: {\r\n *      bundleId: 'com.example.ios'\r\n *   },\r\n *   android: {\r\n *     packageName: 'com.example.android',\r\n *     installApp: true,\r\n *     minimumVersion: '12'\r\n *   },\r\n *   handleCodeInApp: true\r\n * };\r\n * await sendEmailVerification(user, actionCodeSettings);\r\n * // Obtain code from the user.\r\n * await applyActionCode(auth, code);\r\n * ```\r\n *\r\n * @param user - The user.\r\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\r\n *\r\n * @public\r\n */\r\nasync function sendEmailVerification(user, actionCodeSettings) {\r\n    const userInternal = getModularInstance(user);\r\n    const idToken = await user.getIdToken();\r\n    const request = {\r\n        requestType: \"VERIFY_EMAIL\" /* ActionCodeOperation.VERIFY_EMAIL */,\r\n        idToken\r\n    };\r\n    if (actionCodeSettings) {\r\n        _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);\r\n    }\r\n    const { email } = await sendEmailVerification$1(userInternal.auth, request);\r\n    if (email !== user.email) {\r\n        await user.reload();\r\n    }\r\n}\r\n/**\r\n * Sends a verification email to a new email address.\r\n *\r\n * @remarks\r\n * The user's email will be updated to the new one after being verified.\r\n *\r\n * If you have a custom email action handler, you can complete the verification process by calling\r\n * {@link applyActionCode}.\r\n *\r\n * @example\r\n * ```javascript\r\n * const actionCodeSettings = {\r\n *   url: 'https://www.example.com/?email=user@example.com',\r\n *   iOS: {\r\n *      bundleId: 'com.example.ios'\r\n *   },\r\n *   android: {\r\n *     packageName: 'com.example.android',\r\n *     installApp: true,\r\n *     minimumVersion: '12'\r\n *   },\r\n *   handleCodeInApp: true\r\n * };\r\n * await verifyBeforeUpdateEmail(user, 'newemail@example.com', actionCodeSettings);\r\n * // Obtain code from the user.\r\n * await applyActionCode(auth, code);\r\n * ```\r\n *\r\n * @param user - The user.\r\n * @param newEmail - The new email address to be verified before update.\r\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\r\n *\r\n * @public\r\n */\r\nasync function verifyBeforeUpdateEmail(user, newEmail, actionCodeSettings) {\r\n    const userInternal = getModularInstance(user);\r\n    const idToken = await user.getIdToken();\r\n    const request = {\r\n        requestType: \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */,\r\n        idToken,\r\n        newEmail\r\n    };\r\n    if (actionCodeSettings) {\r\n        _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);\r\n    }\r\n    const { email } = await verifyAndChangeEmail(userInternal.auth, request);\r\n    if (email !== user.email) {\r\n        // If the local copy of the email on user is outdated, reload the\r\n        // user.\r\n        await user.reload();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function updateProfile$1(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, request);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Updates a user's profile data.\r\n *\r\n * @param user - The user.\r\n * @param profile - The profile's `displayName` and `photoURL` to update.\r\n *\r\n * @public\r\n */\r\nasync function updateProfile(user, { displayName, photoURL: photoUrl }) {\r\n    if (displayName === undefined && photoUrl === undefined) {\r\n        return;\r\n    }\r\n    const userInternal = getModularInstance(user);\r\n    const idToken = await userInternal.getIdToken();\r\n    const profileRequest = {\r\n        idToken,\r\n        displayName,\r\n        photoUrl,\r\n        returnSecureToken: true\r\n    };\r\n    const response = await _logoutIfInvalidated(userInternal, updateProfile$1(userInternal.auth, profileRequest));\r\n    userInternal.displayName = response.displayName || null;\r\n    userInternal.photoURL = response.photoUrl || null;\r\n    // Update the password provider as well\r\n    const passwordProvider = userInternal.providerData.find(({ providerId }) => providerId === \"password\" /* ProviderId.PASSWORD */);\r\n    if (passwordProvider) {\r\n        passwordProvider.displayName = userInternal.displayName;\r\n        passwordProvider.photoURL = userInternal.photoURL;\r\n    }\r\n    await userInternal._updateTokensIfNecessary(response);\r\n}\r\n/**\r\n * Updates the user's email address.\r\n *\r\n * @remarks\r\n * An email will be sent to the original email address (if it was set) that allows to revoke the\r\n * email address change, in order to protect them from account hijacking.\r\n *\r\n * Important: this is a security sensitive operation that requires the user to have recently signed\r\n * in. If this requirement isn't met, ask the user to authenticate again and then call\r\n * {@link reauthenticateWithCredential}.\r\n *\r\n * @param user - The user.\r\n * @param newEmail - The new email address.\r\n *\r\n * @public\r\n */\r\nfunction updateEmail(user, newEmail) {\r\n    return updateEmailOrPassword(getModularInstance(user), newEmail, null);\r\n}\r\n/**\r\n * Updates the user's password.\r\n *\r\n * @remarks\r\n * Important: this is a security sensitive operation that requires the user to have recently signed\r\n * in. If this requirement isn't met, ask the user to authenticate again and then call\r\n * {@link reauthenticateWithCredential}.\r\n *\r\n * @param user - The user.\r\n * @param newPassword - The new password.\r\n *\r\n * @public\r\n */\r\nfunction updatePassword(user, newPassword) {\r\n    return updateEmailOrPassword(getModularInstance(user), null, newPassword);\r\n}\r\nasync function updateEmailOrPassword(user, email, password) {\r\n    const { auth } = user;\r\n    const idToken = await user.getIdToken();\r\n    const request = {\r\n        idToken,\r\n        returnSecureToken: true\r\n    };\r\n    if (email) {\r\n        request.email = email;\r\n    }\r\n    if (password) {\r\n        request.password = password;\r\n    }\r\n    const response = await _logoutIfInvalidated(user, updateEmailPassword(auth, request));\r\n    await user._updateTokensIfNecessary(response, /* reload */ true);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Parse the `AdditionalUserInfo` from the ID token response.\r\n *\r\n */\r\nfunction _fromIdTokenResponse(idTokenResponse) {\r\n    var _a, _b;\r\n    if (!idTokenResponse) {\r\n        return null;\r\n    }\r\n    const { providerId } = idTokenResponse;\r\n    const profile = idTokenResponse.rawUserInfo\r\n        ? JSON.parse(idTokenResponse.rawUserInfo)\r\n        : {};\r\n    const isNewUser = idTokenResponse.isNewUser ||\r\n        idTokenResponse.kind === \"identitytoolkit#SignupNewUserResponse\" /* IdTokenResponseKind.SignupNewUser */;\r\n    if (!providerId && (idTokenResponse === null || idTokenResponse === void 0 ? void 0 : idTokenResponse.idToken)) {\r\n        const signInProvider = (_b = (_a = _parseToken(idTokenResponse.idToken)) === null || _a === void 0 ? void 0 : _a.firebase) === null || _b === void 0 ? void 0 : _b['sign_in_provider'];\r\n        if (signInProvider) {\r\n            const filteredProviderId = signInProvider !== \"anonymous\" /* ProviderId.ANONYMOUS */ &&\r\n                signInProvider !== \"custom\" /* ProviderId.CUSTOM */\r\n                ? signInProvider\r\n                : null;\r\n            // Uses generic class in accordance with the legacy SDK.\r\n            return new GenericAdditionalUserInfo(isNewUser, filteredProviderId);\r\n        }\r\n    }\r\n    if (!providerId) {\r\n        return null;\r\n    }\r\n    switch (providerId) {\r\n        case \"facebook.com\" /* ProviderId.FACEBOOK */:\r\n            return new FacebookAdditionalUserInfo(isNewUser, profile);\r\n        case \"github.com\" /* ProviderId.GITHUB */:\r\n            return new GithubAdditionalUserInfo(isNewUser, profile);\r\n        case \"google.com\" /* ProviderId.GOOGLE */:\r\n            return new GoogleAdditionalUserInfo(isNewUser, profile);\r\n        case \"twitter.com\" /* ProviderId.TWITTER */:\r\n            return new TwitterAdditionalUserInfo(isNewUser, profile, idTokenResponse.screenName || null);\r\n        case \"custom\" /* ProviderId.CUSTOM */:\r\n        case \"anonymous\" /* ProviderId.ANONYMOUS */:\r\n            return new GenericAdditionalUserInfo(isNewUser, null);\r\n        default:\r\n            return new GenericAdditionalUserInfo(isNewUser, providerId, profile);\r\n    }\r\n}\r\nclass GenericAdditionalUserInfo {\r\n    constructor(isNewUser, providerId, profile = {}) {\r\n        this.isNewUser = isNewUser;\r\n        this.providerId = providerId;\r\n        this.profile = profile;\r\n    }\r\n}\r\nclass FederatedAdditionalUserInfoWithUsername extends GenericAdditionalUserInfo {\r\n    constructor(isNewUser, providerId, profile, username) {\r\n        super(isNewUser, providerId, profile);\r\n        this.username = username;\r\n    }\r\n}\r\nclass FacebookAdditionalUserInfo extends GenericAdditionalUserInfo {\r\n    constructor(isNewUser, profile) {\r\n        super(isNewUser, \"facebook.com\" /* ProviderId.FACEBOOK */, profile);\r\n    }\r\n}\r\nclass GithubAdditionalUserInfo extends FederatedAdditionalUserInfoWithUsername {\r\n    constructor(isNewUser, profile) {\r\n        super(isNewUser, \"github.com\" /* ProviderId.GITHUB */, profile, typeof (profile === null || profile === void 0 ? void 0 : profile.login) === 'string' ? profile === null || profile === void 0 ? void 0 : profile.login : null);\r\n    }\r\n}\r\nclass GoogleAdditionalUserInfo extends GenericAdditionalUserInfo {\r\n    constructor(isNewUser, profile) {\r\n        super(isNewUser, \"google.com\" /* ProviderId.GOOGLE */, profile);\r\n    }\r\n}\r\nclass TwitterAdditionalUserInfo extends FederatedAdditionalUserInfoWithUsername {\r\n    constructor(isNewUser, profile, screenName) {\r\n        super(isNewUser, \"twitter.com\" /* ProviderId.TWITTER */, profile, screenName);\r\n    }\r\n}\r\n/**\r\n * Extracts provider specific {@link AdditionalUserInfo} for the given credential.\r\n *\r\n * @param userCredential - The user credential.\r\n *\r\n * @public\r\n */\r\nfunction getAdditionalUserInfo(userCredential) {\r\n    const { user, _tokenResponse } = userCredential;\r\n    if (user.isAnonymous && !_tokenResponse) {\r\n        // Handle the special case where signInAnonymously() gets called twice.\r\n        // No network call is made so there's nothing to actually fill this in\r\n        return {\r\n            providerId: null,\r\n            isNewUser: false,\r\n            profile: null\r\n        };\r\n    }\r\n    return _fromIdTokenResponse(_tokenResponse);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Non-optional auth methods.\r\n/**\r\n * Changes the type of persistence on the {@link Auth} instance for the currently saved\r\n * `Auth` session and applies this type of persistence for future sign-in requests, including\r\n * sign-in with redirect requests.\r\n *\r\n * @remarks\r\n * This makes it easy for a user signing in to specify whether their session should be\r\n * remembered or not. It also makes it easier to never persist the `Auth` state for applications\r\n * that are shared by other users or have sensitive data.\r\n *\r\n * @example\r\n * ```javascript\r\n * setPersistence(auth, browserSessionPersistence);\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param persistence - The {@link Persistence} to use.\r\n * @returns A `Promise` that resolves once the persistence change has completed\r\n *\r\n * @public\r\n */\r\nfunction setPersistence(auth, persistence) {\r\n    return getModularInstance(auth).setPersistence(persistence);\r\n}\r\n/**\r\n * Loads the reCAPTCHA configuration into the `Auth` instance.\r\n *\r\n * @remarks\r\n * This will load the reCAPTCHA config, which indicates whether the reCAPTCHA\r\n * verification flow should be triggered for each auth provider, into the\r\n * current Auth session.\r\n *\r\n * If initializeRecaptchaConfig() is not invoked, the auth flow will always start\r\n * without reCAPTCHA verification. If the provider is configured to require reCAPTCHA\r\n * verification, the SDK will transparently load the reCAPTCHA config and restart the\r\n * auth flows.\r\n *\r\n * Thus, by calling this optional method, you will reduce the latency of future auth flows.\r\n * Loading the reCAPTCHA config early will also enhance the signal collected by reCAPTCHA.\r\n *\r\n * @example\r\n * ```javascript\r\n * initializeRecaptchaConfig(auth);\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n *\r\n * @public\r\n */\r\nfunction initializeRecaptchaConfig(auth) {\r\n    const authInternal = _castAuth(auth);\r\n    return authInternal.initializeRecaptchaConfig();\r\n}\r\n/**\r\n * Adds an observer for changes to the signed-in user's ID token.\r\n *\r\n * @remarks\r\n * This includes sign-in, sign-out, and token refresh events.\r\n * This will not be triggered automatically upon ID token expiration. Use {@link User.getIdToken} to refresh the ID token.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param nextOrObserver - callback triggered on change.\r\n * @param error - Deprecated. This callback is never triggered. Errors\r\n * on signing in/out can be caught in promises returned from\r\n * sign-in/sign-out functions.\r\n * @param completed - Deprecated. This callback is never triggered.\r\n *\r\n * @public\r\n */\r\nfunction onIdTokenChanged(auth, nextOrObserver, error, completed) {\r\n    return getModularInstance(auth).onIdTokenChanged(nextOrObserver, error, completed);\r\n}\r\n/**\r\n * Adds a blocking callback that runs before an auth state change\r\n * sets a new user.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param callback - callback triggered before new user value is set.\r\n *   If this throws, it blocks the user from being set.\r\n * @param onAbort - callback triggered if a later `beforeAuthStateChanged()`\r\n *   callback throws, allowing you to undo any side effects.\r\n */\r\nfunction beforeAuthStateChanged(auth, callback, onAbort) {\r\n    return getModularInstance(auth).beforeAuthStateChanged(callback, onAbort);\r\n}\r\n/**\r\n * Adds an observer for changes to the user's sign-in state.\r\n *\r\n * @remarks\r\n * To keep the old behavior, see {@link onIdTokenChanged}.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param nextOrObserver - callback triggered on change.\r\n * @param error - Deprecated. This callback is never triggered. Errors\r\n * on signing in/out can be caught in promises returned from\r\n * sign-in/sign-out functions.\r\n * @param completed - Deprecated. This callback is never triggered.\r\n *\r\n * @public\r\n */\r\nfunction onAuthStateChanged(auth, nextOrObserver, error, completed) {\r\n    return getModularInstance(auth).onAuthStateChanged(nextOrObserver, error, completed);\r\n}\r\n/**\r\n * Sets the current language to the default device/browser preference.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n *\r\n * @public\r\n */\r\nfunction useDeviceLanguage(auth) {\r\n    getModularInstance(auth).useDeviceLanguage();\r\n}\r\n/**\r\n * Asynchronously sets the provided user as {@link Auth.currentUser} on the\r\n * {@link Auth} instance.\r\n *\r\n * @remarks\r\n * A new instance copy of the user provided will be made and set as currentUser.\r\n *\r\n * This will trigger {@link onAuthStateChanged} and {@link onIdTokenChanged} listeners\r\n * like other sign in methods.\r\n *\r\n * The operation fails with an error if the user to be updated belongs to a different Firebase\r\n * project.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param user - The new {@link User}.\r\n *\r\n * @public\r\n */\r\nfunction updateCurrentUser(auth, user) {\r\n    return getModularInstance(auth).updateCurrentUser(user);\r\n}\r\n/**\r\n * Signs out the current user.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n *\r\n * @public\r\n */\r\nfunction signOut(auth) {\r\n    return getModularInstance(auth).signOut();\r\n}\r\n/**\r\n * Deletes and signs out the user.\r\n *\r\n * @remarks\r\n * Important: this is a security-sensitive operation that requires the user to have recently\r\n * signed in. If this requirement isn't met, ask the user to authenticate again and then call\r\n * {@link reauthenticateWithCredential}.\r\n *\r\n * @param user - The user.\r\n *\r\n * @public\r\n */\r\nasync function deleteUser(user) {\r\n    return getModularInstance(user).delete();\r\n}\n\nclass MultiFactorSessionImpl {\r\n    constructor(type, credential, auth) {\r\n        this.type = type;\r\n        this.credential = credential;\r\n        this.auth = auth;\r\n    }\r\n    static _fromIdtoken(idToken, auth) {\r\n        return new MultiFactorSessionImpl(\"enroll\" /* MultiFactorSessionType.ENROLL */, idToken, auth);\r\n    }\r\n    static _fromMfaPendingCredential(mfaPendingCredential) {\r\n        return new MultiFactorSessionImpl(\"signin\" /* MultiFactorSessionType.SIGN_IN */, mfaPendingCredential);\r\n    }\r\n    toJSON() {\r\n        const key = this.type === \"enroll\" /* MultiFactorSessionType.ENROLL */\r\n            ? 'idToken'\r\n            : 'pendingCredential';\r\n        return {\r\n            multiFactorSession: {\r\n                [key]: this.credential\r\n            }\r\n        };\r\n    }\r\n    static fromJSON(obj) {\r\n        var _a, _b;\r\n        if (obj === null || obj === void 0 ? void 0 : obj.multiFactorSession) {\r\n            if ((_a = obj.multiFactorSession) === null || _a === void 0 ? void 0 : _a.pendingCredential) {\r\n                return MultiFactorSessionImpl._fromMfaPendingCredential(obj.multiFactorSession.pendingCredential);\r\n            }\r\n            else if ((_b = obj.multiFactorSession) === null || _b === void 0 ? void 0 : _b.idToken) {\r\n                return MultiFactorSessionImpl._fromIdtoken(obj.multiFactorSession.idToken);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass MultiFactorResolverImpl {\r\n    constructor(session, hints, signInResolver) {\r\n        this.session = session;\r\n        this.hints = hints;\r\n        this.signInResolver = signInResolver;\r\n    }\r\n    /** @internal */\r\n    static _fromError(authExtern, error) {\r\n        const auth = _castAuth(authExtern);\r\n        const serverResponse = error.customData._serverResponse;\r\n        const hints = (serverResponse.mfaInfo || []).map(enrollment => MultiFactorInfoImpl._fromServerResponse(auth, enrollment));\r\n        _assert(serverResponse.mfaPendingCredential, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        const session = MultiFactorSessionImpl._fromMfaPendingCredential(serverResponse.mfaPendingCredential);\r\n        return new MultiFactorResolverImpl(session, hints, async (assertion) => {\r\n            const mfaResponse = await assertion._process(auth, session);\r\n            // Clear out the unneeded fields from the old login response\r\n            delete serverResponse.mfaInfo;\r\n            delete serverResponse.mfaPendingCredential;\r\n            // Use in the new token & refresh token in the old response\r\n            const idTokenResponse = Object.assign(Object.assign({}, serverResponse), { idToken: mfaResponse.idToken, refreshToken: mfaResponse.refreshToken });\r\n            // TODO: we should collapse this switch statement into UserCredentialImpl._forOperation and have it support the SIGN_IN case\r\n            switch (error.operationType) {\r\n                case \"signIn\" /* OperationType.SIGN_IN */:\r\n                    const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, error.operationType, idTokenResponse);\r\n                    await auth._updateCurrentUser(userCredential.user);\r\n                    return userCredential;\r\n                case \"reauthenticate\" /* OperationType.REAUTHENTICATE */:\r\n                    _assert(error.user, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n                    return UserCredentialImpl._forOperation(error.user, error.operationType, idTokenResponse);\r\n                default:\r\n                    _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n            }\r\n        });\r\n    }\r\n    async resolveSignIn(assertionExtern) {\r\n        const assertion = assertionExtern;\r\n        return this.signInResolver(assertion);\r\n    }\r\n}\r\n/**\r\n * Provides a {@link MultiFactorResolver} suitable for completion of a\r\n * multi-factor flow.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param error - The {@link MultiFactorError} raised during a sign-in, or\r\n * reauthentication operation.\r\n *\r\n * @public\r\n */\r\nfunction getMultiFactorResolver(auth, error) {\r\n    var _a;\r\n    const authModular = getModularInstance(auth);\r\n    const errorInternal = error;\r\n    _assert(error.customData.operationType, authModular, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n    _assert((_a = errorInternal.customData._serverResponse) === null || _a === void 0 ? void 0 : _a.mfaPendingCredential, authModular, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n    return MultiFactorResolverImpl._fromError(authModular, errorInternal);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction startEnrollPhoneMfa(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:start\" /* Endpoint.START_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\r\n}\r\nfunction finalizeEnrollPhoneMfa(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:finalize\" /* Endpoint.FINALIZE_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\r\n}\r\nfunction startEnrollTotpMfa(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:start\" /* Endpoint.START_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\r\n}\r\nfunction finalizeEnrollTotpMfa(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:finalize\" /* Endpoint.FINALIZE_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\r\n}\r\nfunction withdrawMfa(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:withdraw\" /* Endpoint.WITHDRAW_MFA */, _addTidIfNecessary(auth, request));\r\n}\n\nclass MultiFactorUserImpl {\r\n    constructor(user) {\r\n        this.user = user;\r\n        this.enrolledFactors = [];\r\n        user._onReload(userInfo => {\r\n            if (userInfo.mfaInfo) {\r\n                this.enrolledFactors = userInfo.mfaInfo.map(enrollment => MultiFactorInfoImpl._fromServerResponse(user.auth, enrollment));\r\n            }\r\n        });\r\n    }\r\n    static _fromUser(user) {\r\n        return new MultiFactorUserImpl(user);\r\n    }\r\n    async getSession() {\r\n        return MultiFactorSessionImpl._fromIdtoken(await this.user.getIdToken(), this.user.auth);\r\n    }\r\n    async enroll(assertionExtern, displayName) {\r\n        const assertion = assertionExtern;\r\n        const session = (await this.getSession());\r\n        const finalizeMfaResponse = await _logoutIfInvalidated(this.user, assertion._process(this.user.auth, session, displayName));\r\n        // New tokens will be issued after enrollment of the new second factors.\r\n        // They need to be updated on the user.\r\n        await this.user._updateTokensIfNecessary(finalizeMfaResponse);\r\n        // The user needs to be reloaded to get the new multi-factor information\r\n        // from server. USER_RELOADED event will be triggered and `enrolledFactors`\r\n        // will be updated.\r\n        return this.user.reload();\r\n    }\r\n    async unenroll(infoOrUid) {\r\n        const mfaEnrollmentId = typeof infoOrUid === 'string' ? infoOrUid : infoOrUid.uid;\r\n        const idToken = await this.user.getIdToken();\r\n        try {\r\n            const idTokenResponse = await _logoutIfInvalidated(this.user, withdrawMfa(this.user.auth, {\r\n                idToken,\r\n                mfaEnrollmentId\r\n            }));\r\n            // Remove the second factor from the user's list.\r\n            this.enrolledFactors = this.enrolledFactors.filter(({ uid }) => uid !== mfaEnrollmentId);\r\n            // Depending on whether the backend decided to revoke the user's session,\r\n            // the tokenResponse may be empty. If the tokens were not updated (and they\r\n            // are now invalid), reloading the user will discover this and invalidate\r\n            // the user's state accordingly.\r\n            await this.user._updateTokensIfNecessary(idTokenResponse);\r\n            await this.user.reload();\r\n        }\r\n        catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n}\r\nconst multiFactorUserCache = new WeakMap();\r\n/**\r\n * The {@link MultiFactorUser} corresponding to the user.\r\n *\r\n * @remarks\r\n * This is used to access all multi-factor properties and operations related to the user.\r\n *\r\n * @param user - The user.\r\n *\r\n * @public\r\n */\r\nfunction multiFactor(user) {\r\n    const userModular = getModularInstance(user);\r\n    if (!multiFactorUserCache.has(userModular)) {\r\n        multiFactorUserCache.set(userModular, MultiFactorUserImpl._fromUser(userModular));\r\n    }\r\n    return multiFactorUserCache.get(userModular);\r\n}\n\nconst STORAGE_AVAILABLE_KEY = '__sak';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// There are two different browser persistence types: local and session.\r\n// Both have the same implementation but use a different underlying storage\r\n// object.\r\nclass BrowserPersistenceClass {\r\n    constructor(storageRetriever, type) {\r\n        this.storageRetriever = storageRetriever;\r\n        this.type = type;\r\n    }\r\n    _isAvailable() {\r\n        try {\r\n            if (!this.storage) {\r\n                return Promise.resolve(false);\r\n            }\r\n            this.storage.setItem(STORAGE_AVAILABLE_KEY, '1');\r\n            this.storage.removeItem(STORAGE_AVAILABLE_KEY);\r\n            return Promise.resolve(true);\r\n        }\r\n        catch (_a) {\r\n            return Promise.resolve(false);\r\n        }\r\n    }\r\n    _set(key, value) {\r\n        this.storage.setItem(key, JSON.stringify(value));\r\n        return Promise.resolve();\r\n    }\r\n    _get(key) {\r\n        const json = this.storage.getItem(key);\r\n        return Promise.resolve(json ? JSON.parse(json) : null);\r\n    }\r\n    _remove(key) {\r\n        this.storage.removeItem(key);\r\n        return Promise.resolve();\r\n    }\r\n    get storage() {\r\n        return this.storageRetriever();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction _iframeCannotSyncWebStorage() {\r\n    const ua = getUA();\r\n    return _isSafari(ua) || _isIOS(ua);\r\n}\r\n// The polling period in case events are not supported\r\nconst _POLLING_INTERVAL_MS$1 = 1000;\r\n// The IE 10 localStorage cross tab synchronization delay in milliseconds\r\nconst IE10_LOCAL_STORAGE_SYNC_DELAY = 10;\r\nclass BrowserLocalPersistence extends BrowserPersistenceClass {\r\n    constructor() {\r\n        super(() => window.localStorage, \"LOCAL\" /* PersistenceType.LOCAL */);\r\n        this.boundEventHandler = (event, poll) => this.onStorageEvent(event, poll);\r\n        this.listeners = {};\r\n        this.localCache = {};\r\n        // setTimeout return value is platform specific\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        this.pollTimer = null;\r\n        // Safari or iOS browser and embedded in an iframe.\r\n        this.safariLocalStorageNotSynced = _iframeCannotSyncWebStorage() && _isIframe();\r\n        // Whether to use polling instead of depending on window events\r\n        this.fallbackToPolling = _isMobileBrowser();\r\n        this._shouldAllowMigration = true;\r\n    }\r\n    forAllChangedKeys(cb) {\r\n        // Check all keys with listeners on them.\r\n        for (const key of Object.keys(this.listeners)) {\r\n            // Get value from localStorage.\r\n            const newValue = this.storage.getItem(key);\r\n            const oldValue = this.localCache[key];\r\n            // If local map value does not match, trigger listener with storage event.\r\n            // Differentiate this simulated event from the real storage event.\r\n            if (newValue !== oldValue) {\r\n                cb(key, oldValue, newValue);\r\n            }\r\n        }\r\n    }\r\n    onStorageEvent(event, poll = false) {\r\n        // Key would be null in some situations, like when localStorage is cleared\r\n        if (!event.key) {\r\n            this.forAllChangedKeys((key, _oldValue, newValue) => {\r\n                this.notifyListeners(key, newValue);\r\n            });\r\n            return;\r\n        }\r\n        const key = event.key;\r\n        // Check the mechanism how this event was detected.\r\n        // The first event will dictate the mechanism to be used.\r\n        if (poll) {\r\n            // Environment detects storage changes via polling.\r\n            // Remove storage event listener to prevent possible event duplication.\r\n            this.detachListener();\r\n        }\r\n        else {\r\n            // Environment detects storage changes via storage event listener.\r\n            // Remove polling listener to prevent possible event duplication.\r\n            this.stopPolling();\r\n        }\r\n        // Safari embedded iframe. Storage event will trigger with the delta\r\n        // changes but no changes will be applied to the iframe localStorage.\r\n        if (this.safariLocalStorageNotSynced) {\r\n            // Get current iframe page value.\r\n            const storedValue = this.storage.getItem(key);\r\n            // Value not synchronized, synchronize manually.\r\n            if (event.newValue !== storedValue) {\r\n                if (event.newValue !== null) {\r\n                    // Value changed from current value.\r\n                    this.storage.setItem(key, event.newValue);\r\n                }\r\n                else {\r\n                    // Current value deleted.\r\n                    this.storage.removeItem(key);\r\n                }\r\n            }\r\n            else if (this.localCache[key] === event.newValue && !poll) {\r\n                // Already detected and processed, do not trigger listeners again.\r\n                return;\r\n            }\r\n        }\r\n        const triggerListeners = () => {\r\n            // Keep local map up to date in case storage event is triggered before\r\n            // poll.\r\n            const storedValue = this.storage.getItem(key);\r\n            if (!poll && this.localCache[key] === storedValue) {\r\n                // Real storage event which has already been detected, do nothing.\r\n                // This seems to trigger in some IE browsers for some reason.\r\n                return;\r\n            }\r\n            this.notifyListeners(key, storedValue);\r\n        };\r\n        const storedValue = this.storage.getItem(key);\r\n        if (_isIE10() &&\r\n            storedValue !== event.newValue &&\r\n            event.newValue !== event.oldValue) {\r\n            // IE 10 has this weird bug where a storage event would trigger with the\r\n            // correct key, oldValue and newValue but localStorage.getItem(key) does\r\n            // not yield the updated value until a few milliseconds. This ensures\r\n            // this recovers from that situation.\r\n            setTimeout(triggerListeners, IE10_LOCAL_STORAGE_SYNC_DELAY);\r\n        }\r\n        else {\r\n            triggerListeners();\r\n        }\r\n    }\r\n    notifyListeners(key, value) {\r\n        this.localCache[key] = value;\r\n        const listeners = this.listeners[key];\r\n        if (listeners) {\r\n            for (const listener of Array.from(listeners)) {\r\n                listener(value ? JSON.parse(value) : value);\r\n            }\r\n        }\r\n    }\r\n    startPolling() {\r\n        this.stopPolling();\r\n        this.pollTimer = setInterval(() => {\r\n            this.forAllChangedKeys((key, oldValue, newValue) => {\r\n                this.onStorageEvent(new StorageEvent('storage', {\r\n                    key,\r\n                    oldValue,\r\n                    newValue\r\n                }), \r\n                /* poll */ true);\r\n            });\r\n        }, _POLLING_INTERVAL_MS$1);\r\n    }\r\n    stopPolling() {\r\n        if (this.pollTimer) {\r\n            clearInterval(this.pollTimer);\r\n            this.pollTimer = null;\r\n        }\r\n    }\r\n    attachListener() {\r\n        window.addEventListener('storage', this.boundEventHandler);\r\n    }\r\n    detachListener() {\r\n        window.removeEventListener('storage', this.boundEventHandler);\r\n    }\r\n    _addListener(key, listener) {\r\n        if (Object.keys(this.listeners).length === 0) {\r\n            // Whether browser can detect storage event when it had already been pushed to the background.\r\n            // This may happen in some mobile browsers. A localStorage change in the foreground window\r\n            // will not be detected in the background window via the storage event.\r\n            // This was detected in iOS 7.x mobile browsers\r\n            if (this.fallbackToPolling) {\r\n                this.startPolling();\r\n            }\r\n            else {\r\n                this.attachListener();\r\n            }\r\n        }\r\n        if (!this.listeners[key]) {\r\n            this.listeners[key] = new Set();\r\n            // Populate the cache to avoid spuriously triggering on first poll.\r\n            this.localCache[key] = this.storage.getItem(key);\r\n        }\r\n        this.listeners[key].add(listener);\r\n    }\r\n    _removeListener(key, listener) {\r\n        if (this.listeners[key]) {\r\n            this.listeners[key].delete(listener);\r\n            if (this.listeners[key].size === 0) {\r\n                delete this.listeners[key];\r\n            }\r\n        }\r\n        if (Object.keys(this.listeners).length === 0) {\r\n            this.detachListener();\r\n            this.stopPolling();\r\n        }\r\n    }\r\n    // Update local cache on base operations:\r\n    async _set(key, value) {\r\n        await super._set(key, value);\r\n        this.localCache[key] = JSON.stringify(value);\r\n    }\r\n    async _get(key) {\r\n        const value = await super._get(key);\r\n        this.localCache[key] = JSON.stringify(value);\r\n        return value;\r\n    }\r\n    async _remove(key) {\r\n        await super._remove(key);\r\n        delete this.localCache[key];\r\n    }\r\n}\r\nBrowserLocalPersistence.type = 'LOCAL';\r\n/**\r\n * An implementation of {@link Persistence} of type `LOCAL` using `localStorage`\r\n * for the underlying storage.\r\n *\r\n * @public\r\n */\r\nconst browserLocalPersistence = BrowserLocalPersistence;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass BrowserSessionPersistence extends BrowserPersistenceClass {\r\n    constructor() {\r\n        super(() => window.sessionStorage, \"SESSION\" /* PersistenceType.SESSION */);\r\n    }\r\n    _addListener(_key, _listener) {\r\n        // Listeners are not supported for session storage since it cannot be shared across windows\r\n        return;\r\n    }\r\n    _removeListener(_key, _listener) {\r\n        // Listeners are not supported for session storage since it cannot be shared across windows\r\n        return;\r\n    }\r\n}\r\nBrowserSessionPersistence.type = 'SESSION';\r\n/**\r\n * An implementation of {@link Persistence} of `SESSION` using `sessionStorage`\r\n * for the underlying storage.\r\n *\r\n * @public\r\n */\r\nconst browserSessionPersistence = BrowserSessionPersistence;\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Shim for Promise.allSettled, note the slightly different format of `fulfilled` vs `status`.\r\n *\r\n * @param promises - Array of promises to wait on.\r\n */\r\nfunction _allSettled(promises) {\r\n    return Promise.all(promises.map(async (promise) => {\r\n        try {\r\n            const value = await promise;\r\n            return {\r\n                fulfilled: true,\r\n                value\r\n            };\r\n        }\r\n        catch (reason) {\r\n            return {\r\n                fulfilled: false,\r\n                reason\r\n            };\r\n        }\r\n    }));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface class for receiving messages.\r\n *\r\n */\r\nclass Receiver {\r\n    constructor(eventTarget) {\r\n        this.eventTarget = eventTarget;\r\n        this.handlersMap = {};\r\n        this.boundEventHandler = this.handleEvent.bind(this);\r\n    }\r\n    /**\r\n     * Obtain an instance of a Receiver for a given event target, if none exists it will be created.\r\n     *\r\n     * @param eventTarget - An event target (such as window or self) through which the underlying\r\n     * messages will be received.\r\n     */\r\n    static _getInstance(eventTarget) {\r\n        // The results are stored in an array since objects can't be keys for other\r\n        // objects. In addition, setting a unique property on an event target as a\r\n        // hash map key may not be allowed due to CORS restrictions.\r\n        const existingInstance = this.receivers.find(receiver => receiver.isListeningto(eventTarget));\r\n        if (existingInstance) {\r\n            return existingInstance;\r\n        }\r\n        const newInstance = new Receiver(eventTarget);\r\n        this.receivers.push(newInstance);\r\n        return newInstance;\r\n    }\r\n    isListeningto(eventTarget) {\r\n        return this.eventTarget === eventTarget;\r\n    }\r\n    /**\r\n     * Fans out a MessageEvent to the appropriate listeners.\r\n     *\r\n     * @remarks\r\n     * Sends an {@link Status.ACK} upon receipt and a {@link Status.DONE} once all handlers have\r\n     * finished processing.\r\n     *\r\n     * @param event - The MessageEvent.\r\n     *\r\n     */\r\n    async handleEvent(event) {\r\n        const messageEvent = event;\r\n        const { eventId, eventType, data } = messageEvent.data;\r\n        const handlers = this.handlersMap[eventType];\r\n        if (!(handlers === null || handlers === void 0 ? void 0 : handlers.size)) {\r\n            return;\r\n        }\r\n        messageEvent.ports[0].postMessage({\r\n            status: \"ack\" /* _Status.ACK */,\r\n            eventId,\r\n            eventType\r\n        });\r\n        const promises = Array.from(handlers).map(async (handler) => handler(messageEvent.origin, data));\r\n        const response = await _allSettled(promises);\r\n        messageEvent.ports[0].postMessage({\r\n            status: \"done\" /* _Status.DONE */,\r\n            eventId,\r\n            eventType,\r\n            response\r\n        });\r\n    }\r\n    /**\r\n     * Subscribe an event handler for a particular event.\r\n     *\r\n     * @param eventType - Event name to subscribe to.\r\n     * @param eventHandler - The event handler which should receive the events.\r\n     *\r\n     */\r\n    _subscribe(eventType, eventHandler) {\r\n        if (Object.keys(this.handlersMap).length === 0) {\r\n            this.eventTarget.addEventListener('message', this.boundEventHandler);\r\n        }\r\n        if (!this.handlersMap[eventType]) {\r\n            this.handlersMap[eventType] = new Set();\r\n        }\r\n        this.handlersMap[eventType].add(eventHandler);\r\n    }\r\n    /**\r\n     * Unsubscribe an event handler from a particular event.\r\n     *\r\n     * @param eventType - Event name to unsubscribe from.\r\n     * @param eventHandler - Optinoal event handler, if none provided, unsubscribe all handlers on this event.\r\n     *\r\n     */\r\n    _unsubscribe(eventType, eventHandler) {\r\n        if (this.handlersMap[eventType] && eventHandler) {\r\n            this.handlersMap[eventType].delete(eventHandler);\r\n        }\r\n        if (!eventHandler || this.handlersMap[eventType].size === 0) {\r\n            delete this.handlersMap[eventType];\r\n        }\r\n        if (Object.keys(this.handlersMap).length === 0) {\r\n            this.eventTarget.removeEventListener('message', this.boundEventHandler);\r\n        }\r\n    }\r\n}\r\nReceiver.receivers = [];\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction _generateEventId(prefix = '', digits = 10) {\r\n    let random = '';\r\n    for (let i = 0; i < digits; i++) {\r\n        random += Math.floor(Math.random() * 10);\r\n    }\r\n    return prefix + random;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface for sending messages and waiting for a completion response.\r\n *\r\n */\r\nclass Sender {\r\n    constructor(target) {\r\n        this.target = target;\r\n        this.handlers = new Set();\r\n    }\r\n    /**\r\n     * Unsubscribe the handler and remove it from our tracking Set.\r\n     *\r\n     * @param handler - The handler to unsubscribe.\r\n     */\r\n    removeMessageHandler(handler) {\r\n        if (handler.messageChannel) {\r\n            handler.messageChannel.port1.removeEventListener('message', handler.onMessage);\r\n            handler.messageChannel.port1.close();\r\n        }\r\n        this.handlers.delete(handler);\r\n    }\r\n    /**\r\n     * Send a message to the Receiver located at {@link target}.\r\n     *\r\n     * @remarks\r\n     * We'll first wait a bit for an ACK , if we get one we will wait significantly longer until the\r\n     * receiver has had a chance to fully process the event.\r\n     *\r\n     * @param eventType - Type of event to send.\r\n     * @param data - The payload of the event.\r\n     * @param timeout - Timeout for waiting on an ACK from the receiver.\r\n     *\r\n     * @returns An array of settled promises from all the handlers that were listening on the receiver.\r\n     */\r\n    async _send(eventType, data, timeout = 50 /* _TimeoutDuration.ACK */) {\r\n        const messageChannel = typeof MessageChannel !== 'undefined' ? new MessageChannel() : null;\r\n        if (!messageChannel) {\r\n            throw new Error(\"connection_unavailable\" /* _MessageError.CONNECTION_UNAVAILABLE */);\r\n        }\r\n        // Node timers and browser timers return fundamentally different types.\r\n        // We don't actually care what the value is but TS won't accept unknown and\r\n        // we can't cast properly in both environments.\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        let completionTimer;\r\n        let handler;\r\n        return new Promise((resolve, reject) => {\r\n            const eventId = _generateEventId('', 20);\r\n            messageChannel.port1.start();\r\n            const ackTimer = setTimeout(() => {\r\n                reject(new Error(\"unsupported_event\" /* _MessageError.UNSUPPORTED_EVENT */));\r\n            }, timeout);\r\n            handler = {\r\n                messageChannel,\r\n                onMessage(event) {\r\n                    const messageEvent = event;\r\n                    if (messageEvent.data.eventId !== eventId) {\r\n                        return;\r\n                    }\r\n                    switch (messageEvent.data.status) {\r\n                        case \"ack\" /* _Status.ACK */:\r\n                            // The receiver should ACK first.\r\n                            clearTimeout(ackTimer);\r\n                            completionTimer = setTimeout(() => {\r\n                                reject(new Error(\"timeout\" /* _MessageError.TIMEOUT */));\r\n                            }, 3000 /* _TimeoutDuration.COMPLETION */);\r\n                            break;\r\n                        case \"done\" /* _Status.DONE */:\r\n                            // Once the receiver's handlers are finished we will get the results.\r\n                            clearTimeout(completionTimer);\r\n                            resolve(messageEvent.data.response);\r\n                            break;\r\n                        default:\r\n                            clearTimeout(ackTimer);\r\n                            clearTimeout(completionTimer);\r\n                            reject(new Error(\"invalid_response\" /* _MessageError.INVALID_RESPONSE */));\r\n                            break;\r\n                    }\r\n                }\r\n            };\r\n            this.handlers.add(handler);\r\n            messageChannel.port1.addEventListener('message', handler.onMessage);\r\n            this.target.postMessage({\r\n                eventType,\r\n                eventId,\r\n                data\r\n            }, [messageChannel.port2]);\r\n        }).finally(() => {\r\n            if (handler) {\r\n                this.removeMessageHandler(handler);\r\n            }\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Lazy accessor for window, since the compat layer won't tree shake this out,\r\n * we need to make sure not to mess with window unless we have to\r\n */\r\nfunction _window() {\r\n    return window;\r\n}\r\nfunction _setWindowLocation(url) {\r\n    _window().location.href = url;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction _isWorker() {\r\n    return (typeof _window()['WorkerGlobalScope'] !== 'undefined' &&\r\n        typeof _window()['importScripts'] === 'function');\r\n}\r\nasync function _getActiveServiceWorker() {\r\n    if (!(navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker)) {\r\n        return null;\r\n    }\r\n    try {\r\n        const registration = await navigator.serviceWorker.ready;\r\n        return registration.active;\r\n    }\r\n    catch (_a) {\r\n        return null;\r\n    }\r\n}\r\nfunction _getServiceWorkerController() {\r\n    var _a;\r\n    return ((_a = navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker) === null || _a === void 0 ? void 0 : _a.controller) || null;\r\n}\r\nfunction _getWorkerGlobalScope() {\r\n    return _isWorker() ? self : null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DB_NAME = 'firebaseLocalStorageDb';\r\nconst DB_VERSION = 1;\r\nconst DB_OBJECTSTORE_NAME = 'firebaseLocalStorage';\r\nconst DB_DATA_KEYPATH = 'fbase_key';\r\n/**\r\n * Promise wrapper for IDBRequest\r\n *\r\n * Unfortunately we can't cleanly extend Promise<T> since promises are not callable in ES6\r\n *\r\n */\r\nclass DBPromise {\r\n    constructor(request) {\r\n        this.request = request;\r\n    }\r\n    toPromise() {\r\n        return new Promise((resolve, reject) => {\r\n            this.request.addEventListener('success', () => {\r\n                resolve(this.request.result);\r\n            });\r\n            this.request.addEventListener('error', () => {\r\n                reject(this.request.error);\r\n            });\r\n        });\r\n    }\r\n}\r\nfunction getObjectStore(db, isReadWrite) {\r\n    return db\r\n        .transaction([DB_OBJECTSTORE_NAME], isReadWrite ? 'readwrite' : 'readonly')\r\n        .objectStore(DB_OBJECTSTORE_NAME);\r\n}\r\nfunction _deleteDatabase() {\r\n    const request = indexedDB.deleteDatabase(DB_NAME);\r\n    return new DBPromise(request).toPromise();\r\n}\r\nfunction _openDatabase() {\r\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\r\n    return new Promise((resolve, reject) => {\r\n        request.addEventListener('error', () => {\r\n            reject(request.error);\r\n        });\r\n        request.addEventListener('upgradeneeded', () => {\r\n            const db = request.result;\r\n            try {\r\n                db.createObjectStore(DB_OBJECTSTORE_NAME, { keyPath: DB_DATA_KEYPATH });\r\n            }\r\n            catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n        request.addEventListener('success', async () => {\r\n            const db = request.result;\r\n            // Strange bug that occurs in Firefox when multiple tabs are opened at the\r\n            // same time. The only way to recover seems to be deleting the database\r\n            // and re-initializing it.\r\n            // https://github.com/firebase/firebase-js-sdk/issues/634\r\n            if (!db.objectStoreNames.contains(DB_OBJECTSTORE_NAME)) {\r\n                // Need to close the database or else you get a `blocked` event\r\n                db.close();\r\n                await _deleteDatabase();\r\n                resolve(await _openDatabase());\r\n            }\r\n            else {\r\n                resolve(db);\r\n            }\r\n        });\r\n    });\r\n}\r\nasync function _putObject(db, key, value) {\r\n    const request = getObjectStore(db, true).put({\r\n        [DB_DATA_KEYPATH]: key,\r\n        value\r\n    });\r\n    return new DBPromise(request).toPromise();\r\n}\r\nasync function getObject(db, key) {\r\n    const request = getObjectStore(db, false).get(key);\r\n    const data = await new DBPromise(request).toPromise();\r\n    return data === undefined ? null : data.value;\r\n}\r\nfunction _deleteObject(db, key) {\r\n    const request = getObjectStore(db, true).delete(key);\r\n    return new DBPromise(request).toPromise();\r\n}\r\nconst _POLLING_INTERVAL_MS = 800;\r\nconst _TRANSACTION_RETRY_COUNT = 3;\r\nclass IndexedDBLocalPersistence {\r\n    constructor() {\r\n        this.type = \"LOCAL\" /* PersistenceType.LOCAL */;\r\n        this._shouldAllowMigration = true;\r\n        this.listeners = {};\r\n        this.localCache = {};\r\n        // setTimeout return value is platform specific\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        this.pollTimer = null;\r\n        this.pendingWrites = 0;\r\n        this.receiver = null;\r\n        this.sender = null;\r\n        this.serviceWorkerReceiverAvailable = false;\r\n        this.activeServiceWorker = null;\r\n        // Fire & forget the service worker registration as it may never resolve\r\n        this._workerInitializationPromise =\r\n            this.initializeServiceWorkerMessaging().then(() => { }, () => { });\r\n    }\r\n    async _openDb() {\r\n        if (this.db) {\r\n            return this.db;\r\n        }\r\n        this.db = await _openDatabase();\r\n        return this.db;\r\n    }\r\n    async _withRetries(op) {\r\n        let numAttempts = 0;\r\n        while (true) {\r\n            try {\r\n                const db = await this._openDb();\r\n                return await op(db);\r\n            }\r\n            catch (e) {\r\n                if (numAttempts++ > _TRANSACTION_RETRY_COUNT) {\r\n                    throw e;\r\n                }\r\n                if (this.db) {\r\n                    this.db.close();\r\n                    this.db = undefined;\r\n                }\r\n                // TODO: consider adding exponential backoff\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * IndexedDB events do not propagate from the main window to the worker context.  We rely on a\r\n     * postMessage interface to send these events to the worker ourselves.\r\n     */\r\n    async initializeServiceWorkerMessaging() {\r\n        return _isWorker() ? this.initializeReceiver() : this.initializeSender();\r\n    }\r\n    /**\r\n     * As the worker we should listen to events from the main window.\r\n     */\r\n    async initializeReceiver() {\r\n        this.receiver = Receiver._getInstance(_getWorkerGlobalScope());\r\n        // Refresh from persistence if we receive a KeyChanged message.\r\n        this.receiver._subscribe(\"keyChanged\" /* _EventType.KEY_CHANGED */, async (_origin, data) => {\r\n            const keys = await this._poll();\r\n            return {\r\n                keyProcessed: keys.includes(data.key)\r\n            };\r\n        });\r\n        // Let the sender know that we are listening so they give us more timeout.\r\n        this.receiver._subscribe(\"ping\" /* _EventType.PING */, async (_origin, _data) => {\r\n            return [\"keyChanged\" /* _EventType.KEY_CHANGED */];\r\n        });\r\n    }\r\n    /**\r\n     * As the main window, we should let the worker know when keys change (set and remove).\r\n     *\r\n     * @remarks\r\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready | ServiceWorkerContainer.ready}\r\n     * may not resolve.\r\n     */\r\n    async initializeSender() {\r\n        var _a, _b;\r\n        // Check to see if there's an active service worker.\r\n        this.activeServiceWorker = await _getActiveServiceWorker();\r\n        if (!this.activeServiceWorker) {\r\n            return;\r\n        }\r\n        this.sender = new Sender(this.activeServiceWorker);\r\n        // Ping the service worker to check what events they can handle.\r\n        const results = await this.sender._send(\"ping\" /* _EventType.PING */, {}, 800 /* _TimeoutDuration.LONG_ACK */);\r\n        if (!results) {\r\n            return;\r\n        }\r\n        if (((_a = results[0]) === null || _a === void 0 ? void 0 : _a.fulfilled) &&\r\n            ((_b = results[0]) === null || _b === void 0 ? void 0 : _b.value.includes(\"keyChanged\" /* _EventType.KEY_CHANGED */))) {\r\n            this.serviceWorkerReceiverAvailable = true;\r\n        }\r\n    }\r\n    /**\r\n     * Let the worker know about a changed key, the exact key doesn't technically matter since the\r\n     * worker will just trigger a full sync anyway.\r\n     *\r\n     * @remarks\r\n     * For now, we only support one service worker per page.\r\n     *\r\n     * @param key - Storage key which changed.\r\n     */\r\n    async notifyServiceWorker(key) {\r\n        if (!this.sender ||\r\n            !this.activeServiceWorker ||\r\n            _getServiceWorkerController() !== this.activeServiceWorker) {\r\n            return;\r\n        }\r\n        try {\r\n            await this.sender._send(\"keyChanged\" /* _EventType.KEY_CHANGED */, { key }, \r\n            // Use long timeout if receiver has previously responded to a ping from us.\r\n            this.serviceWorkerReceiverAvailable\r\n                ? 800 /* _TimeoutDuration.LONG_ACK */\r\n                : 50 /* _TimeoutDuration.ACK */);\r\n        }\r\n        catch (_a) {\r\n            // This is a best effort approach. Ignore errors.\r\n        }\r\n    }\r\n    async _isAvailable() {\r\n        try {\r\n            if (!indexedDB) {\r\n                return false;\r\n            }\r\n            const db = await _openDatabase();\r\n            await _putObject(db, STORAGE_AVAILABLE_KEY, '1');\r\n            await _deleteObject(db, STORAGE_AVAILABLE_KEY);\r\n            return true;\r\n        }\r\n        catch (_a) { }\r\n        return false;\r\n    }\r\n    async _withPendingWrite(write) {\r\n        this.pendingWrites++;\r\n        try {\r\n            await write();\r\n        }\r\n        finally {\r\n            this.pendingWrites--;\r\n        }\r\n    }\r\n    async _set(key, value) {\r\n        return this._withPendingWrite(async () => {\r\n            await this._withRetries((db) => _putObject(db, key, value));\r\n            this.localCache[key] = value;\r\n            return this.notifyServiceWorker(key);\r\n        });\r\n    }\r\n    async _get(key) {\r\n        const obj = (await this._withRetries((db) => getObject(db, key)));\r\n        this.localCache[key] = obj;\r\n        return obj;\r\n    }\r\n    async _remove(key) {\r\n        return this._withPendingWrite(async () => {\r\n            await this._withRetries((db) => _deleteObject(db, key));\r\n            delete this.localCache[key];\r\n            return this.notifyServiceWorker(key);\r\n        });\r\n    }\r\n    async _poll() {\r\n        // TODO: check if we need to fallback if getAll is not supported\r\n        const result = await this._withRetries((db) => {\r\n            const getAllRequest = getObjectStore(db, false).getAll();\r\n            return new DBPromise(getAllRequest).toPromise();\r\n        });\r\n        if (!result) {\r\n            return [];\r\n        }\r\n        // If we have pending writes in progress abort, we'll get picked up on the next poll\r\n        if (this.pendingWrites !== 0) {\r\n            return [];\r\n        }\r\n        const keys = [];\r\n        const keysInResult = new Set();\r\n        for (const { fbase_key: key, value } of result) {\r\n            keysInResult.add(key);\r\n            if (JSON.stringify(this.localCache[key]) !== JSON.stringify(value)) {\r\n                this.notifyListeners(key, value);\r\n                keys.push(key);\r\n            }\r\n        }\r\n        for (const localKey of Object.keys(this.localCache)) {\r\n            if (this.localCache[localKey] && !keysInResult.has(localKey)) {\r\n                // Deleted\r\n                this.notifyListeners(localKey, null);\r\n                keys.push(localKey);\r\n            }\r\n        }\r\n        return keys;\r\n    }\r\n    notifyListeners(key, newValue) {\r\n        this.localCache[key] = newValue;\r\n        const listeners = this.listeners[key];\r\n        if (listeners) {\r\n            for (const listener of Array.from(listeners)) {\r\n                listener(newValue);\r\n            }\r\n        }\r\n    }\r\n    startPolling() {\r\n        this.stopPolling();\r\n        this.pollTimer = setInterval(async () => this._poll(), _POLLING_INTERVAL_MS);\r\n    }\r\n    stopPolling() {\r\n        if (this.pollTimer) {\r\n            clearInterval(this.pollTimer);\r\n            this.pollTimer = null;\r\n        }\r\n    }\r\n    _addListener(key, listener) {\r\n        if (Object.keys(this.listeners).length === 0) {\r\n            this.startPolling();\r\n        }\r\n        if (!this.listeners[key]) {\r\n            this.listeners[key] = new Set();\r\n            // Populate the cache to avoid spuriously triggering on first poll.\r\n            void this._get(key); // This can happen in the background async and we can return immediately.\r\n        }\r\n        this.listeners[key].add(listener);\r\n    }\r\n    _removeListener(key, listener) {\r\n        if (this.listeners[key]) {\r\n            this.listeners[key].delete(listener);\r\n            if (this.listeners[key].size === 0) {\r\n                delete this.listeners[key];\r\n            }\r\n        }\r\n        if (Object.keys(this.listeners).length === 0) {\r\n            this.stopPolling();\r\n        }\r\n    }\r\n}\r\nIndexedDBLocalPersistence.type = 'LOCAL';\r\n/**\r\n * An implementation of {@link Persistence} of type `LOCAL` using `indexedDB`\r\n * for the underlying storage.\r\n *\r\n * @public\r\n */\r\nconst indexedDBLocalPersistence = IndexedDBLocalPersistence;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction startSignInPhoneMfa(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaSignIn:start\" /* Endpoint.START_MFA_SIGN_IN */, _addTidIfNecessary(auth, request));\r\n}\r\nfunction finalizeSignInPhoneMfa(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaSignIn:finalize\" /* Endpoint.FINALIZE_MFA_SIGN_IN */, _addTidIfNecessary(auth, request));\r\n}\r\nfunction finalizeSignInTotpMfa(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaSignIn:finalize\" /* Endpoint.FINALIZE_MFA_SIGN_IN */, _addTidIfNecessary(auth, request));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst _SOLVE_TIME_MS = 500;\r\nconst _EXPIRATION_TIME_MS = 60000;\r\nconst _WIDGET_ID_START = 1000000000000;\r\nclass MockReCaptcha {\r\n    constructor(auth) {\r\n        this.auth = auth;\r\n        this.counter = _WIDGET_ID_START;\r\n        this._widgets = new Map();\r\n    }\r\n    render(container, parameters) {\r\n        const id = this.counter;\r\n        this._widgets.set(id, new MockWidget(container, this.auth.name, parameters || {}));\r\n        this.counter++;\r\n        return id;\r\n    }\r\n    reset(optWidgetId) {\r\n        var _a;\r\n        const id = optWidgetId || _WIDGET_ID_START;\r\n        void ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.delete());\r\n        this._widgets.delete(id);\r\n    }\r\n    getResponse(optWidgetId) {\r\n        var _a;\r\n        const id = optWidgetId || _WIDGET_ID_START;\r\n        return ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.getResponse()) || '';\r\n    }\r\n    async execute(optWidgetId) {\r\n        var _a;\r\n        const id = optWidgetId || _WIDGET_ID_START;\r\n        void ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.execute());\r\n        return '';\r\n    }\r\n}\r\nclass MockWidget {\r\n    constructor(containerOrId, appName, params) {\r\n        this.params = params;\r\n        this.timerId = null;\r\n        this.deleted = false;\r\n        this.responseToken = null;\r\n        this.clickHandler = () => {\r\n            this.execute();\r\n        };\r\n        const container = typeof containerOrId === 'string'\r\n            ? document.getElementById(containerOrId)\r\n            : containerOrId;\r\n        _assert(container, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */, { appName });\r\n        this.container = container;\r\n        this.isVisible = this.params.size !== 'invisible';\r\n        if (this.isVisible) {\r\n            this.execute();\r\n        }\r\n        else {\r\n            this.container.addEventListener('click', this.clickHandler);\r\n        }\r\n    }\r\n    getResponse() {\r\n        this.checkIfDeleted();\r\n        return this.responseToken;\r\n    }\r\n    delete() {\r\n        this.checkIfDeleted();\r\n        this.deleted = true;\r\n        if (this.timerId) {\r\n            clearTimeout(this.timerId);\r\n            this.timerId = null;\r\n        }\r\n        this.container.removeEventListener('click', this.clickHandler);\r\n    }\r\n    execute() {\r\n        this.checkIfDeleted();\r\n        if (this.timerId) {\r\n            return;\r\n        }\r\n        this.timerId = window.setTimeout(() => {\r\n            this.responseToken = generateRandomAlphaNumericString(50);\r\n            const { callback, 'expired-callback': expiredCallback } = this.params;\r\n            if (callback) {\r\n                try {\r\n                    callback(this.responseToken);\r\n                }\r\n                catch (e) { }\r\n            }\r\n            this.timerId = window.setTimeout(() => {\r\n                this.timerId = null;\r\n                this.responseToken = null;\r\n                if (expiredCallback) {\r\n                    try {\r\n                        expiredCallback();\r\n                    }\r\n                    catch (e) { }\r\n                }\r\n                if (this.isVisible) {\r\n                    this.execute();\r\n                }\r\n            }, _EXPIRATION_TIME_MS);\r\n        }, _SOLVE_TIME_MS);\r\n    }\r\n    checkIfDeleted() {\r\n        if (this.deleted) {\r\n            throw new Error('reCAPTCHA mock was already deleted!');\r\n        }\r\n    }\r\n}\r\nfunction generateRandomAlphaNumericString(len) {\r\n    const chars = [];\r\n    const allowedChars = '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n    for (let i = 0; i < len; i++) {\r\n        chars.push(allowedChars.charAt(Math.floor(Math.random() * allowedChars.length)));\r\n    }\r\n    return chars.join('');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// ReCaptcha will load using the same callback, so the callback function needs\r\n// to be kept around\r\nconst _JSLOAD_CALLBACK = _generateCallbackName('rcb');\r\nconst NETWORK_TIMEOUT_DELAY = new Delay(30000, 60000);\r\nconst RECAPTCHA_BASE = 'https://www.google.com/recaptcha/api.js?';\r\n/**\r\n * Loader for the GReCaptcha library. There should only ever be one of this.\r\n */\r\nclass ReCaptchaLoaderImpl {\r\n    constructor() {\r\n        var _a;\r\n        this.hostLanguage = '';\r\n        this.counter = 0;\r\n        /**\r\n         * Check for `render()` method. `window.grecaptcha` will exist if the Enterprise\r\n         * version of the ReCAPTCHA script was loaded by someone else (e.g. App Check) but\r\n         * `window.grecaptcha.render()` will not. Another load will add it.\r\n         */\r\n        this.librarySeparatelyLoaded = !!((_a = _window().grecaptcha) === null || _a === void 0 ? void 0 : _a.render);\r\n    }\r\n    load(auth, hl = '') {\r\n        _assert(isHostLanguageValid(hl), auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        if (this.shouldResolveImmediately(hl) && isV2(_window().grecaptcha)) {\r\n            return Promise.resolve(_window().grecaptcha);\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            const networkTimeout = _window().setTimeout(() => {\r\n                reject(_createError(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));\r\n            }, NETWORK_TIMEOUT_DELAY.get());\r\n            _window()[_JSLOAD_CALLBACK] = () => {\r\n                _window().clearTimeout(networkTimeout);\r\n                delete _window()[_JSLOAD_CALLBACK];\r\n                const recaptcha = _window().grecaptcha;\r\n                if (!recaptcha || !isV2(recaptcha)) {\r\n                    reject(_createError(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */));\r\n                    return;\r\n                }\r\n                // Wrap the greptcha render function so that we know if the developer has\r\n                // called it separately\r\n                const render = recaptcha.render;\r\n                recaptcha.render = (container, params) => {\r\n                    const widgetId = render(container, params);\r\n                    this.counter++;\r\n                    return widgetId;\r\n                };\r\n                this.hostLanguage = hl;\r\n                resolve(recaptcha);\r\n            };\r\n            const url = `${RECAPTCHA_BASE}?${querystring({\r\n                onload: _JSLOAD_CALLBACK,\r\n                render: 'explicit',\r\n                hl\r\n            })}`;\r\n            _loadJS(url).catch(() => {\r\n                clearTimeout(networkTimeout);\r\n                reject(_createError(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */));\r\n            });\r\n        });\r\n    }\r\n    clearedOneInstance() {\r\n        this.counter--;\r\n    }\r\n    shouldResolveImmediately(hl) {\r\n        var _a;\r\n        // We can resolve immediately if:\r\n        //   • grecaptcha is already defined AND (\r\n        //     1. the requested language codes are the same OR\r\n        //     2. there exists already a ReCaptcha on the page\r\n        //     3. the library was already loaded by the app\r\n        // In cases (2) and (3), we _can't_ reload as it would break the recaptchas\r\n        // that are already in the page\r\n        return (!!((_a = _window().grecaptcha) === null || _a === void 0 ? void 0 : _a.render) &&\r\n            (hl === this.hostLanguage ||\r\n                this.counter > 0 ||\r\n                this.librarySeparatelyLoaded));\r\n    }\r\n}\r\nfunction isHostLanguageValid(hl) {\r\n    return hl.length <= 6 && /^\\s*[a-zA-Z0-9\\-]*\\s*$/.test(hl);\r\n}\r\nclass MockReCaptchaLoaderImpl {\r\n    async load(auth) {\r\n        return new MockReCaptcha(auth);\r\n    }\r\n    clearedOneInstance() { }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst RECAPTCHA_VERIFIER_TYPE = 'recaptcha';\r\nconst DEFAULT_PARAMS = {\r\n    theme: 'light',\r\n    type: 'image'\r\n};\r\n/**\r\n * An {@link https://www.google.com/recaptcha/ | reCAPTCHA}-based application verifier.\r\n *\r\n * @public\r\n */\r\nclass RecaptchaVerifier {\r\n    /**\r\n     *\r\n     * @param containerOrId - The reCAPTCHA container parameter.\r\n     *\r\n     * @remarks\r\n     * This has different meaning depending on whether the reCAPTCHA is hidden or visible. For a\r\n     * visible reCAPTCHA the container must be empty. If a string is used, it has to correspond to\r\n     * an element ID. The corresponding element must also must be in the DOM at the time of\r\n     * initialization.\r\n     *\r\n     * @param parameters - The optional reCAPTCHA parameters.\r\n     *\r\n     * @remarks\r\n     * Check the reCAPTCHA docs for a comprehensive list. All parameters are accepted except for\r\n     * the sitekey. Firebase Auth backend provisions a reCAPTCHA for each project and will\r\n     * configure this upon rendering. For an invisible reCAPTCHA, a size key must have the value\r\n     * 'invisible'.\r\n     *\r\n     * @param authExtern - The corresponding Firebase {@link Auth} instance.\r\n     */\r\n    constructor(containerOrId, parameters = Object.assign({}, DEFAULT_PARAMS), authExtern) {\r\n        this.parameters = parameters;\r\n        /**\r\n         * The application verifier type.\r\n         *\r\n         * @remarks\r\n         * For a reCAPTCHA verifier, this is 'recaptcha'.\r\n         */\r\n        this.type = RECAPTCHA_VERIFIER_TYPE;\r\n        this.destroyed = false;\r\n        this.widgetId = null;\r\n        this.tokenChangeListeners = new Set();\r\n        this.renderPromise = null;\r\n        this.recaptcha = null;\r\n        this.auth = _castAuth(authExtern);\r\n        this.isInvisible = this.parameters.size === 'invisible';\r\n        _assert(typeof document !== 'undefined', this.auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */);\r\n        const container = typeof containerOrId === 'string'\r\n            ? document.getElementById(containerOrId)\r\n            : containerOrId;\r\n        _assert(container, this.auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        this.container = container;\r\n        this.parameters.callback = this.makeTokenCallback(this.parameters.callback);\r\n        this._recaptchaLoader = this.auth.settings.appVerificationDisabledForTesting\r\n            ? new MockReCaptchaLoaderImpl()\r\n            : new ReCaptchaLoaderImpl();\r\n        this.validateStartingState();\r\n        // TODO: Figure out if sdk version is needed\r\n    }\r\n    /**\r\n     * Waits for the user to solve the reCAPTCHA and resolves with the reCAPTCHA token.\r\n     *\r\n     * @returns A Promise for the reCAPTCHA token.\r\n     */\r\n    async verify() {\r\n        this.assertNotDestroyed();\r\n        const id = await this.render();\r\n        const recaptcha = this.getAssertedRecaptcha();\r\n        const response = recaptcha.getResponse(id);\r\n        if (response) {\r\n            return response;\r\n        }\r\n        return new Promise(resolve => {\r\n            const tokenChange = (token) => {\r\n                if (!token) {\r\n                    return; // Ignore token expirations.\r\n                }\r\n                this.tokenChangeListeners.delete(tokenChange);\r\n                resolve(token);\r\n            };\r\n            this.tokenChangeListeners.add(tokenChange);\r\n            if (this.isInvisible) {\r\n                recaptcha.execute(id);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Renders the reCAPTCHA widget on the page.\r\n     *\r\n     * @returns A Promise that resolves with the reCAPTCHA widget ID.\r\n     */\r\n    render() {\r\n        try {\r\n            this.assertNotDestroyed();\r\n        }\r\n        catch (e) {\r\n            // This method returns a promise. Since it's not async (we want to return the\r\n            // _same_ promise if rendering is still occurring), the API surface should\r\n            // reject with the error rather than just throw\r\n            return Promise.reject(e);\r\n        }\r\n        if (this.renderPromise) {\r\n            return this.renderPromise;\r\n        }\r\n        this.renderPromise = this.makeRenderPromise().catch(e => {\r\n            this.renderPromise = null;\r\n            throw e;\r\n        });\r\n        return this.renderPromise;\r\n    }\r\n    /** @internal */\r\n    _reset() {\r\n        this.assertNotDestroyed();\r\n        if (this.widgetId !== null) {\r\n            this.getAssertedRecaptcha().reset(this.widgetId);\r\n        }\r\n    }\r\n    /**\r\n     * Clears the reCAPTCHA widget from the page and destroys the instance.\r\n     */\r\n    clear() {\r\n        this.assertNotDestroyed();\r\n        this.destroyed = true;\r\n        this._recaptchaLoader.clearedOneInstance();\r\n        if (!this.isInvisible) {\r\n            this.container.childNodes.forEach(node => {\r\n                this.container.removeChild(node);\r\n            });\r\n        }\r\n    }\r\n    validateStartingState() {\r\n        _assert(!this.parameters.sitekey, this.auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        _assert(this.isInvisible || !this.container.hasChildNodes(), this.auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        _assert(typeof document !== 'undefined', this.auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */);\r\n    }\r\n    makeTokenCallback(existing) {\r\n        return token => {\r\n            this.tokenChangeListeners.forEach(listener => listener(token));\r\n            if (typeof existing === 'function') {\r\n                existing(token);\r\n            }\r\n            else if (typeof existing === 'string') {\r\n                const globalFunc = _window()[existing];\r\n                if (typeof globalFunc === 'function') {\r\n                    globalFunc(token);\r\n                }\r\n            }\r\n        };\r\n    }\r\n    assertNotDestroyed() {\r\n        _assert(!this.destroyed, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n    }\r\n    async makeRenderPromise() {\r\n        await this.init();\r\n        if (!this.widgetId) {\r\n            let container = this.container;\r\n            if (!this.isInvisible) {\r\n                const guaranteedEmpty = document.createElement('div');\r\n                container.appendChild(guaranteedEmpty);\r\n                container = guaranteedEmpty;\r\n            }\r\n            this.widgetId = this.getAssertedRecaptcha().render(container, this.parameters);\r\n        }\r\n        return this.widgetId;\r\n    }\r\n    async init() {\r\n        _assert(_isHttpOrHttps() && !_isWorker(), this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        await domReady();\r\n        this.recaptcha = await this._recaptchaLoader.load(this.auth, this.auth.languageCode || undefined);\r\n        const siteKey = await getRecaptchaParams(this.auth);\r\n        _assert(siteKey, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        this.parameters.sitekey = siteKey;\r\n    }\r\n    getAssertedRecaptcha() {\r\n        _assert(this.recaptcha, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        return this.recaptcha;\r\n    }\r\n}\r\nfunction domReady() {\r\n    let resolver = null;\r\n    return new Promise(resolve => {\r\n        if (document.readyState === 'complete') {\r\n            resolve();\r\n            return;\r\n        }\r\n        // Document not ready, wait for load before resolving.\r\n        // Save resolver, so we can remove listener in case it was externally\r\n        // cancelled.\r\n        resolver = () => resolve();\r\n        window.addEventListener('load', resolver);\r\n    }).catch(e => {\r\n        if (resolver) {\r\n            window.removeEventListener('load', resolver);\r\n        }\r\n        throw e;\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ConfirmationResultImpl {\r\n    constructor(verificationId, onConfirmation) {\r\n        this.verificationId = verificationId;\r\n        this.onConfirmation = onConfirmation;\r\n    }\r\n    confirm(verificationCode) {\r\n        const authCredential = PhoneAuthCredential._fromVerification(this.verificationId, verificationCode);\r\n        return this.onConfirmation(authCredential);\r\n    }\r\n}\r\n/**\r\n * Asynchronously signs in using a phone number.\r\n *\r\n * @remarks\r\n * This method sends a code via SMS to the given\r\n * phone number, and returns a {@link ConfirmationResult}. After the user\r\n * provides the code sent to their phone, call {@link ConfirmationResult.confirm}\r\n * with the code to sign the user in.\r\n *\r\n * For abuse prevention, this method also requires a {@link ApplicationVerifier}.\r\n * This SDK includes a reCAPTCHA-based implementation, {@link RecaptchaVerifier}.\r\n * This function can work on other platforms that do not support the\r\n * {@link RecaptchaVerifier} (like React Native), but you need to use a\r\n * third-party {@link ApplicationVerifier} implementation.\r\n *\r\n * @example\r\n * ```javascript\r\n * // 'recaptcha-container' is the ID of an element in the DOM.\r\n * const applicationVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container');\r\n * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\r\n * // Obtain a verificationCode from the user.\r\n * const credential = await confirmationResult.confirm(verificationCode);\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\r\n * @param appVerifier - The {@link ApplicationVerifier}.\r\n *\r\n * @public\r\n */\r\nasync function signInWithPhoneNumber(auth, phoneNumber, appVerifier) {\r\n    const authInternal = _castAuth(auth);\r\n    const verificationId = await _verifyPhoneNumber(authInternal, phoneNumber, getModularInstance(appVerifier));\r\n    return new ConfirmationResultImpl(verificationId, cred => signInWithCredential(authInternal, cred));\r\n}\r\n/**\r\n * Links the user account with the given phone number.\r\n *\r\n * @param user - The user.\r\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\r\n * @param appVerifier - The {@link ApplicationVerifier}.\r\n *\r\n * @public\r\n */\r\nasync function linkWithPhoneNumber(user, phoneNumber, appVerifier) {\r\n    const userInternal = getModularInstance(user);\r\n    await _assertLinkedStatus(false, userInternal, \"phone\" /* ProviderId.PHONE */);\r\n    const verificationId = await _verifyPhoneNumber(userInternal.auth, phoneNumber, getModularInstance(appVerifier));\r\n    return new ConfirmationResultImpl(verificationId, cred => linkWithCredential(userInternal, cred));\r\n}\r\n/**\r\n * Re-authenticates a user using a fresh phone credential.\r\n *\r\n * @remarks Use before operations such as {@link updatePassword} that require tokens from recent sign-in attempts.\r\n *\r\n * @param user - The user.\r\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\r\n * @param appVerifier - The {@link ApplicationVerifier}.\r\n *\r\n * @public\r\n */\r\nasync function reauthenticateWithPhoneNumber(user, phoneNumber, appVerifier) {\r\n    const userInternal = getModularInstance(user);\r\n    const verificationId = await _verifyPhoneNumber(userInternal.auth, phoneNumber, getModularInstance(appVerifier));\r\n    return new ConfirmationResultImpl(verificationId, cred => reauthenticateWithCredential(userInternal, cred));\r\n}\r\n/**\r\n * Returns a verification ID to be used in conjunction with the SMS code that is sent.\r\n *\r\n */\r\nasync function _verifyPhoneNumber(auth, options, verifier) {\r\n    var _a;\r\n    const recaptchaToken = await verifier.verify();\r\n    try {\r\n        _assert(typeof recaptchaToken === 'string', auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        _assert(verifier.type === RECAPTCHA_VERIFIER_TYPE, auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        let phoneInfoOptions;\r\n        if (typeof options === 'string') {\r\n            phoneInfoOptions = {\r\n                phoneNumber: options\r\n            };\r\n        }\r\n        else {\r\n            phoneInfoOptions = options;\r\n        }\r\n        if ('session' in phoneInfoOptions) {\r\n            const session = phoneInfoOptions.session;\r\n            if ('phoneNumber' in phoneInfoOptions) {\r\n                _assert(session.type === \"enroll\" /* MultiFactorSessionType.ENROLL */, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n                const response = await startEnrollPhoneMfa(auth, {\r\n                    idToken: session.credential,\r\n                    phoneEnrollmentInfo: {\r\n                        phoneNumber: phoneInfoOptions.phoneNumber,\r\n                        recaptchaToken\r\n                    }\r\n                });\r\n                return response.phoneSessionInfo.sessionInfo;\r\n            }\r\n            else {\r\n                _assert(session.type === \"signin\" /* MultiFactorSessionType.SIGN_IN */, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n                const mfaEnrollmentId = ((_a = phoneInfoOptions.multiFactorHint) === null || _a === void 0 ? void 0 : _a.uid) ||\r\n                    phoneInfoOptions.multiFactorUid;\r\n                _assert(mfaEnrollmentId, auth, \"missing-multi-factor-info\" /* AuthErrorCode.MISSING_MFA_INFO */);\r\n                const response = await startSignInPhoneMfa(auth, {\r\n                    mfaPendingCredential: session.credential,\r\n                    mfaEnrollmentId,\r\n                    phoneSignInInfo: {\r\n                        recaptchaToken\r\n                    }\r\n                });\r\n                return response.phoneResponseInfo.sessionInfo;\r\n            }\r\n        }\r\n        else {\r\n            const { sessionInfo } = await sendPhoneVerificationCode(auth, {\r\n                phoneNumber: phoneInfoOptions.phoneNumber,\r\n                recaptchaToken\r\n            });\r\n            return sessionInfo;\r\n        }\r\n    }\r\n    finally {\r\n        verifier._reset();\r\n    }\r\n}\r\n/**\r\n * Updates the user's phone number.\r\n *\r\n * @example\r\n * ```\r\n * // 'recaptcha-container' is the ID of an element in the DOM.\r\n * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');\r\n * const provider = new PhoneAuthProvider(auth);\r\n * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);\r\n * // Obtain the verificationCode from the user.\r\n * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\r\n * await updatePhoneNumber(user, phoneCredential);\r\n * ```\r\n *\r\n * @param user - The user.\r\n * @param credential - A credential authenticating the new phone number.\r\n *\r\n * @public\r\n */\r\nasync function updatePhoneNumber(user, credential) {\r\n    await _link$1(getModularInstance(user), credential);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for generating an {@link PhoneAuthCredential}.\r\n *\r\n * @example\r\n * ```javascript\r\n * // 'recaptcha-container' is the ID of an element in the DOM.\r\n * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');\r\n * const provider = new PhoneAuthProvider(auth);\r\n * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);\r\n * // Obtain the verificationCode from the user.\r\n * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\r\n * const userCredential = await signInWithCredential(auth, phoneCredential);\r\n * ```\r\n *\r\n * @public\r\n */\r\nclass PhoneAuthProvider {\r\n    /**\r\n     * @param auth - The Firebase {@link Auth} instance in which sign-ins should occur.\r\n     *\r\n     */\r\n    constructor(auth) {\r\n        /** Always set to {@link ProviderId}.PHONE. */\r\n        this.providerId = PhoneAuthProvider.PROVIDER_ID;\r\n        this.auth = _castAuth(auth);\r\n    }\r\n    /**\r\n     *\r\n     * Starts a phone number authentication flow by sending a verification code to the given phone\r\n     * number.\r\n     *\r\n     * @example\r\n     * ```javascript\r\n     * const provider = new PhoneAuthProvider(auth);\r\n     * const verificationId = await provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\r\n     * // Obtain verificationCode from the user.\r\n     * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\r\n     * const userCredential = await signInWithCredential(auth, authCredential);\r\n     * ```\r\n     *\r\n     * @example\r\n     * An alternative flow is provided using the `signInWithPhoneNumber` method.\r\n     * ```javascript\r\n     * const confirmationResult = signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\r\n     * // Obtain verificationCode from the user.\r\n     * const userCredential = confirmationResult.confirm(verificationCode);\r\n     * ```\r\n     *\r\n     * @param phoneInfoOptions - The user's {@link PhoneInfoOptions}. The phone number should be in\r\n     * E.164 format (e.g. +16505550101).\r\n     * @param applicationVerifier - For abuse prevention, this method also requires a\r\n     * {@link ApplicationVerifier}. This SDK includes a reCAPTCHA-based implementation,\r\n     * {@link RecaptchaVerifier}.\r\n     *\r\n     * @returns A Promise for a verification ID that can be passed to\r\n     * {@link PhoneAuthProvider.credential} to identify this flow..\r\n     */\r\n    verifyPhoneNumber(phoneOptions, applicationVerifier) {\r\n        return _verifyPhoneNumber(this.auth, phoneOptions, getModularInstance(applicationVerifier));\r\n    }\r\n    /**\r\n     * Creates a phone auth credential, given the verification ID from\r\n     * {@link PhoneAuthProvider.verifyPhoneNumber} and the code that was sent to the user's\r\n     * mobile device.\r\n     *\r\n     * @example\r\n     * ```javascript\r\n     * const provider = new PhoneAuthProvider(auth);\r\n     * const verificationId = provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\r\n     * // Obtain verificationCode from the user.\r\n     * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\r\n     * const userCredential = signInWithCredential(auth, authCredential);\r\n     * ```\r\n     *\r\n     * @example\r\n     * An alternative flow is provided using the `signInWithPhoneNumber` method.\r\n     * ```javascript\r\n     * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\r\n     * // Obtain verificationCode from the user.\r\n     * const userCredential = await confirmationResult.confirm(verificationCode);\r\n     * ```\r\n     *\r\n     * @param verificationId - The verification ID returned from {@link PhoneAuthProvider.verifyPhoneNumber}.\r\n     * @param verificationCode - The verification code sent to the user's mobile device.\r\n     *\r\n     * @returns The auth provider credential.\r\n     */\r\n    static credential(verificationId, verificationCode) {\r\n        return PhoneAuthCredential._fromVerification(verificationId, verificationCode);\r\n    }\r\n    /**\r\n     * Generates an {@link AuthCredential} from a {@link UserCredential}.\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromResult(userCredential) {\r\n        const credential = userCredential;\r\n        return PhoneAuthProvider.credentialFromTaggedObject(credential);\r\n    }\r\n    /**\r\n     * Returns an {@link AuthCredential} when passed an error.\r\n     *\r\n     * @remarks\r\n     *\r\n     * This method works for errors like\r\n     * `auth/account-exists-with-different-credentials`. This is useful for\r\n     * recovering when attempting to set a user's phone number but the number\r\n     * in question is already tied to another account. For example, the following\r\n     * code tries to update the current user's phone number, and if that\r\n     * fails, links the user with the account associated with that number:\r\n     *\r\n     * ```js\r\n     * const provider = new PhoneAuthProvider(auth);\r\n     * const verificationId = await provider.verifyPhoneNumber(number, verifier);\r\n     * try {\r\n     *   const code = ''; // Prompt the user for the verification code\r\n     *   await updatePhoneNumber(\r\n     *       auth.currentUser,\r\n     *       PhoneAuthProvider.credential(verificationId, code));\r\n     * } catch (e) {\r\n     *   if ((e as FirebaseError)?.code === 'auth/account-exists-with-different-credential') {\r\n     *     const cred = PhoneAuthProvider.credentialFromError(e);\r\n     *     await linkWithCredential(auth.currentUser, cred);\r\n     *   }\r\n     * }\r\n     *\r\n     * // At this point, auth.currentUser.phoneNumber === number.\r\n     * ```\r\n     *\r\n     * @param error - The error to generate a credential from.\r\n     */\r\n    static credentialFromError(error) {\r\n        return PhoneAuthProvider.credentialFromTaggedObject((error.customData || {}));\r\n    }\r\n    static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\r\n        if (!tokenResponse) {\r\n            return null;\r\n        }\r\n        const { phoneNumber, temporaryProof } = tokenResponse;\r\n        if (phoneNumber && temporaryProof) {\r\n            return PhoneAuthCredential._fromTokenResponse(phoneNumber, temporaryProof);\r\n        }\r\n        return null;\r\n    }\r\n}\r\n/** Always set to {@link ProviderId}.PHONE. */\r\nPhoneAuthProvider.PROVIDER_ID = \"phone\" /* ProviderId.PHONE */;\r\n/** Always set to {@link SignInMethod}.PHONE. */\r\nPhoneAuthProvider.PHONE_SIGN_IN_METHOD = \"phone\" /* SignInMethod.PHONE */;\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Chooses a popup/redirect resolver to use. This prefers the override (which\r\n * is directly passed in), and falls back to the property set on the auth\r\n * object. If neither are available, this function errors w/ an argument error.\r\n */\r\nfunction _withDefaultResolver(auth, resolverOverride) {\r\n    if (resolverOverride) {\r\n        return _getInstance(resolverOverride);\r\n    }\r\n    _assert(auth._popupRedirectResolver, auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n    return auth._popupRedirectResolver;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass IdpCredential extends AuthCredential {\r\n    constructor(params) {\r\n        super(\"custom\" /* ProviderId.CUSTOM */, \"custom\" /* ProviderId.CUSTOM */);\r\n        this.params = params;\r\n    }\r\n    _getIdTokenResponse(auth) {\r\n        return signInWithIdp(auth, this._buildIdpRequest());\r\n    }\r\n    _linkToIdToken(auth, idToken) {\r\n        return signInWithIdp(auth, this._buildIdpRequest(idToken));\r\n    }\r\n    _getReauthenticationResolver(auth) {\r\n        return signInWithIdp(auth, this._buildIdpRequest());\r\n    }\r\n    _buildIdpRequest(idToken) {\r\n        const request = {\r\n            requestUri: this.params.requestUri,\r\n            sessionId: this.params.sessionId,\r\n            postBody: this.params.postBody,\r\n            tenantId: this.params.tenantId,\r\n            pendingToken: this.params.pendingToken,\r\n            returnSecureToken: true,\r\n            returnIdpCredential: true\r\n        };\r\n        if (idToken) {\r\n            request.idToken = idToken;\r\n        }\r\n        return request;\r\n    }\r\n}\r\nfunction _signIn(params) {\r\n    return _signInWithCredential(params.auth, new IdpCredential(params), params.bypassAuthState);\r\n}\r\nfunction _reauth(params) {\r\n    const { auth, user } = params;\r\n    _assert(user, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n    return _reauthenticate(user, new IdpCredential(params), params.bypassAuthState);\r\n}\r\nasync function _link(params) {\r\n    const { auth, user } = params;\r\n    _assert(user, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n    return _link$1(user, new IdpCredential(params), params.bypassAuthState);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Popup event manager. Handles the popup's entire lifecycle; listens to auth\r\n * events\r\n */\r\nclass AbstractPopupRedirectOperation {\r\n    constructor(auth, filter, resolver, user, bypassAuthState = false) {\r\n        this.auth = auth;\r\n        this.resolver = resolver;\r\n        this.user = user;\r\n        this.bypassAuthState = bypassAuthState;\r\n        this.pendingPromise = null;\r\n        this.eventManager = null;\r\n        this.filter = Array.isArray(filter) ? filter : [filter];\r\n    }\r\n    execute() {\r\n        return new Promise(async (resolve, reject) => {\r\n            this.pendingPromise = { resolve, reject };\r\n            try {\r\n                this.eventManager = await this.resolver._initialize(this.auth);\r\n                await this.onExecution();\r\n                this.eventManager.registerConsumer(this);\r\n            }\r\n            catch (e) {\r\n                this.reject(e);\r\n            }\r\n        });\r\n    }\r\n    async onAuthEvent(event) {\r\n        const { urlResponse, sessionId, postBody, tenantId, error, type } = event;\r\n        if (error) {\r\n            this.reject(error);\r\n            return;\r\n        }\r\n        const params = {\r\n            auth: this.auth,\r\n            requestUri: urlResponse,\r\n            sessionId: sessionId,\r\n            tenantId: tenantId || undefined,\r\n            postBody: postBody || undefined,\r\n            user: this.user,\r\n            bypassAuthState: this.bypassAuthState\r\n        };\r\n        try {\r\n            this.resolve(await this.getIdpTask(type)(params));\r\n        }\r\n        catch (e) {\r\n            this.reject(e);\r\n        }\r\n    }\r\n    onError(error) {\r\n        this.reject(error);\r\n    }\r\n    getIdpTask(type) {\r\n        switch (type) {\r\n            case \"signInViaPopup\" /* AuthEventType.SIGN_IN_VIA_POPUP */:\r\n            case \"signInViaRedirect\" /* AuthEventType.SIGN_IN_VIA_REDIRECT */:\r\n                return _signIn;\r\n            case \"linkViaPopup\" /* AuthEventType.LINK_VIA_POPUP */:\r\n            case \"linkViaRedirect\" /* AuthEventType.LINK_VIA_REDIRECT */:\r\n                return _link;\r\n            case \"reauthViaPopup\" /* AuthEventType.REAUTH_VIA_POPUP */:\r\n            case \"reauthViaRedirect\" /* AuthEventType.REAUTH_VIA_REDIRECT */:\r\n                return _reauth;\r\n            default:\r\n                _fail(this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        }\r\n    }\r\n    resolve(cred) {\r\n        debugAssert(this.pendingPromise, 'Pending promise was never set');\r\n        this.pendingPromise.resolve(cred);\r\n        this.unregisterAndCleanUp();\r\n    }\r\n    reject(error) {\r\n        debugAssert(this.pendingPromise, 'Pending promise was never set');\r\n        this.pendingPromise.reject(error);\r\n        this.unregisterAndCleanUp();\r\n    }\r\n    unregisterAndCleanUp() {\r\n        if (this.eventManager) {\r\n            this.eventManager.unregisterConsumer(this);\r\n        }\r\n        this.pendingPromise = null;\r\n        this.cleanUp();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst _POLL_WINDOW_CLOSE_TIMEOUT = new Delay(2000, 10000);\r\n/**\r\n * Authenticates a Firebase client using a popup-based OAuth authentication flow.\r\n *\r\n * @remarks\r\n * If succeeds, returns the signed in user along with the provider's credential. If sign in was\r\n * unsuccessful, returns an error object containing additional information about the error.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a popup.\r\n * const provider = new FacebookAuthProvider();\r\n * const result = await signInWithPopup(auth, provider);\r\n *\r\n * // The signed-in user info.\r\n * const user = result.user;\r\n * // This gives you a Facebook Access Token.\r\n * const credential = provider.credentialFromResult(auth, result);\r\n * const token = credential.accessToken;\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\r\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\r\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\r\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\r\n *\r\n *\r\n * @public\r\n */\r\nasync function signInWithPopup(auth, provider, resolver) {\r\n    const authInternal = _castAuth(auth);\r\n    _assertInstanceOf(auth, provider, FederatedAuthProvider);\r\n    const resolverInternal = _withDefaultResolver(authInternal, resolver);\r\n    const action = new PopupOperation(authInternal, \"signInViaPopup\" /* AuthEventType.SIGN_IN_VIA_POPUP */, provider, resolverInternal);\r\n    return action.executeNotNull();\r\n}\r\n/**\r\n * Reauthenticates the current user with the specified {@link OAuthProvider} using a pop-up based\r\n * OAuth flow.\r\n *\r\n * @remarks\r\n * If the reauthentication is successful, the returned result will contain the user and the\r\n * provider's credential.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a popup.\r\n * const provider = new FacebookAuthProvider();\r\n * const result = await signInWithPopup(auth, provider);\r\n * // Reauthenticate using a popup.\r\n * await reauthenticateWithPopup(result.user, provider);\r\n * ```\r\n *\r\n * @param user - The user.\r\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\r\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\r\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\r\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\r\n *\r\n * @public\r\n */\r\nasync function reauthenticateWithPopup(user, provider, resolver) {\r\n    const userInternal = getModularInstance(user);\r\n    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\r\n    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\r\n    const action = new PopupOperation(userInternal.auth, \"reauthViaPopup\" /* AuthEventType.REAUTH_VIA_POPUP */, provider, resolverInternal, userInternal);\r\n    return action.executeNotNull();\r\n}\r\n/**\r\n * Links the authenticated provider to the user account using a pop-up based OAuth flow.\r\n *\r\n * @remarks\r\n * If the linking is successful, the returned result will contain the user and the provider's credential.\r\n *\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using some other provider.\r\n * const result = await signInWithEmailAndPassword(auth, email, password);\r\n * // Link using a popup.\r\n * const provider = new FacebookAuthProvider();\r\n * await linkWithPopup(result.user, provider);\r\n * ```\r\n *\r\n * @param user - The user.\r\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\r\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\r\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\r\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\r\n *\r\n * @public\r\n */\r\nasync function linkWithPopup(user, provider, resolver) {\r\n    const userInternal = getModularInstance(user);\r\n    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\r\n    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\r\n    const action = new PopupOperation(userInternal.auth, \"linkViaPopup\" /* AuthEventType.LINK_VIA_POPUP */, provider, resolverInternal, userInternal);\r\n    return action.executeNotNull();\r\n}\r\n/**\r\n * Popup event manager. Handles the popup's entire lifecycle; listens to auth\r\n * events\r\n *\r\n */\r\nclass PopupOperation extends AbstractPopupRedirectOperation {\r\n    constructor(auth, filter, provider, resolver, user) {\r\n        super(auth, filter, resolver, user);\r\n        this.provider = provider;\r\n        this.authWindow = null;\r\n        this.pollId = null;\r\n        if (PopupOperation.currentPopupAction) {\r\n            PopupOperation.currentPopupAction.cancel();\r\n        }\r\n        PopupOperation.currentPopupAction = this;\r\n    }\r\n    async executeNotNull() {\r\n        const result = await this.execute();\r\n        _assert(result, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        return result;\r\n    }\r\n    async onExecution() {\r\n        debugAssert(this.filter.length === 1, 'Popup operations only handle one event');\r\n        const eventId = _generateEventId();\r\n        this.authWindow = await this.resolver._openPopup(this.auth, this.provider, this.filter[0], // There's always one, see constructor\r\n        eventId);\r\n        this.authWindow.associatedEvent = eventId;\r\n        // Check for web storage support and origin validation _after_ the popup is\r\n        // loaded. These operations are slow (~1 second or so) Rather than\r\n        // waiting on them before opening the window, optimistically open the popup\r\n        // and check for storage support at the same time. If storage support is\r\n        // not available, this will cause the whole thing to reject properly. It\r\n        // will also close the popup, but since the promise has already rejected,\r\n        // the popup closed by user poll will reject into the void.\r\n        this.resolver._originValidation(this.auth).catch(e => {\r\n            this.reject(e);\r\n        });\r\n        this.resolver._isIframeWebStorageSupported(this.auth, isSupported => {\r\n            if (!isSupported) {\r\n                this.reject(_createError(this.auth, \"web-storage-unsupported\" /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */));\r\n            }\r\n        });\r\n        // Handle user closure. Notice this does *not* use await\r\n        this.pollUserCancellation();\r\n    }\r\n    get eventId() {\r\n        var _a;\r\n        return ((_a = this.authWindow) === null || _a === void 0 ? void 0 : _a.associatedEvent) || null;\r\n    }\r\n    cancel() {\r\n        this.reject(_createError(this.auth, \"cancelled-popup-request\" /* AuthErrorCode.EXPIRED_POPUP_REQUEST */));\r\n    }\r\n    cleanUp() {\r\n        if (this.authWindow) {\r\n            this.authWindow.close();\r\n        }\r\n        if (this.pollId) {\r\n            window.clearTimeout(this.pollId);\r\n        }\r\n        this.authWindow = null;\r\n        this.pollId = null;\r\n        PopupOperation.currentPopupAction = null;\r\n    }\r\n    pollUserCancellation() {\r\n        const poll = () => {\r\n            var _a, _b;\r\n            if ((_b = (_a = this.authWindow) === null || _a === void 0 ? void 0 : _a.window) === null || _b === void 0 ? void 0 : _b.closed) {\r\n                // Make sure that there is sufficient time for whatever action to\r\n                // complete. The window could have closed but the sign in network\r\n                // call could still be in flight. This is specifically true for\r\n                // Firefox or if the opener is in an iframe, in which case the oauth\r\n                // helper closes the popup.\r\n                this.pollId = window.setTimeout(() => {\r\n                    this.pollId = null;\r\n                    this.reject(_createError(this.auth, \"popup-closed-by-user\" /* AuthErrorCode.POPUP_CLOSED_BY_USER */));\r\n                }, 8000 /* _Timeout.AUTH_EVENT */);\r\n                return;\r\n            }\r\n            this.pollId = window.setTimeout(poll, _POLL_WINDOW_CLOSE_TIMEOUT.get());\r\n        };\r\n        poll();\r\n    }\r\n}\r\n// Only one popup is ever shown at once. The lifecycle of the current popup\r\n// can be managed / cancelled by the constructor.\r\nPopupOperation.currentPopupAction = null;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PENDING_REDIRECT_KEY = 'pendingRedirect';\r\n// We only get one redirect outcome for any one auth, so just store it\r\n// in here.\r\nconst redirectOutcomeMap = new Map();\r\nclass RedirectAction extends AbstractPopupRedirectOperation {\r\n    constructor(auth, resolver, bypassAuthState = false) {\r\n        super(auth, [\r\n            \"signInViaRedirect\" /* AuthEventType.SIGN_IN_VIA_REDIRECT */,\r\n            \"linkViaRedirect\" /* AuthEventType.LINK_VIA_REDIRECT */,\r\n            \"reauthViaRedirect\" /* AuthEventType.REAUTH_VIA_REDIRECT */,\r\n            \"unknown\" /* AuthEventType.UNKNOWN */\r\n        ], resolver, undefined, bypassAuthState);\r\n        this.eventId = null;\r\n    }\r\n    /**\r\n     * Override the execute function; if we already have a redirect result, then\r\n     * just return it.\r\n     */\r\n    async execute() {\r\n        let readyOutcome = redirectOutcomeMap.get(this.auth._key());\r\n        if (!readyOutcome) {\r\n            try {\r\n                const hasPendingRedirect = await _getAndClearPendingRedirectStatus(this.resolver, this.auth);\r\n                const result = hasPendingRedirect ? await super.execute() : null;\r\n                readyOutcome = () => Promise.resolve(result);\r\n            }\r\n            catch (e) {\r\n                readyOutcome = () => Promise.reject(e);\r\n            }\r\n            redirectOutcomeMap.set(this.auth._key(), readyOutcome);\r\n        }\r\n        // If we're not bypassing auth state, the ready outcome should be set to\r\n        // null.\r\n        if (!this.bypassAuthState) {\r\n            redirectOutcomeMap.set(this.auth._key(), () => Promise.resolve(null));\r\n        }\r\n        return readyOutcome();\r\n    }\r\n    async onAuthEvent(event) {\r\n        if (event.type === \"signInViaRedirect\" /* AuthEventType.SIGN_IN_VIA_REDIRECT */) {\r\n            return super.onAuthEvent(event);\r\n        }\r\n        else if (event.type === \"unknown\" /* AuthEventType.UNKNOWN */) {\r\n            // This is a sentinel value indicating there's no pending redirect\r\n            this.resolve(null);\r\n            return;\r\n        }\r\n        if (event.eventId) {\r\n            const user = await this.auth._redirectUserForId(event.eventId);\r\n            if (user) {\r\n                this.user = user;\r\n                return super.onAuthEvent(event);\r\n            }\r\n            else {\r\n                this.resolve(null);\r\n            }\r\n        }\r\n    }\r\n    async onExecution() { }\r\n    cleanUp() { }\r\n}\r\nasync function _getAndClearPendingRedirectStatus(resolver, auth) {\r\n    const key = pendingRedirectKey(auth);\r\n    const persistence = resolverPersistence(resolver);\r\n    if (!(await persistence._isAvailable())) {\r\n        return false;\r\n    }\r\n    const hasPendingRedirect = (await persistence._get(key)) === 'true';\r\n    await persistence._remove(key);\r\n    return hasPendingRedirect;\r\n}\r\nasync function _setPendingRedirectStatus(resolver, auth) {\r\n    return resolverPersistence(resolver)._set(pendingRedirectKey(auth), 'true');\r\n}\r\nfunction _clearRedirectOutcomes() {\r\n    redirectOutcomeMap.clear();\r\n}\r\nfunction _overrideRedirectResult(auth, result) {\r\n    redirectOutcomeMap.set(auth._key(), result);\r\n}\r\nfunction resolverPersistence(resolver) {\r\n    return _getInstance(resolver._redirectPersistence);\r\n}\r\nfunction pendingRedirectKey(auth) {\r\n    return _persistenceKeyName(PENDING_REDIRECT_KEY, auth.config.apiKey, auth.name);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Authenticates a Firebase client using a full-page redirect flow.\r\n *\r\n * @remarks\r\n * To handle the results and errors for this operation, refer to {@link getRedirectResult}.\r\n * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices\r\n * | best practices} when using {@link signInWithRedirect}.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new FacebookAuthProvider();\r\n * // You can add additional scopes to the provider:\r\n * provider.addScope('user_birthday');\r\n * // Start a sign in process for an unauthenticated user.\r\n * await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * if (result) {\r\n *   // This is the signed-in user\r\n *   const user = result.user;\r\n *   // This gives you a Facebook Access Token.\r\n *   const credential = provider.credentialFromResult(auth, result);\r\n *   const token = credential.accessToken;\r\n * }\r\n * // As this API can be used for sign-in, linking and reauthentication,\r\n * // check the operationType to determine what triggered this redirect\r\n * // operation.\r\n * const operationType = result.operationType;\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\r\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\r\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\r\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\r\n *\r\n * @public\r\n */\r\nfunction signInWithRedirect(auth, provider, resolver) {\r\n    return _signInWithRedirect(auth, provider, resolver);\r\n}\r\nasync function _signInWithRedirect(auth, provider, resolver) {\r\n    const authInternal = _castAuth(auth);\r\n    _assertInstanceOf(auth, provider, FederatedAuthProvider);\r\n    // Wait for auth initialization to complete, this will process pending redirects and clear the\r\n    // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new\r\n    // redirect and creating a PENDING_REDIRECT_KEY entry.\r\n    await authInternal._initializationPromise;\r\n    const resolverInternal = _withDefaultResolver(authInternal, resolver);\r\n    await _setPendingRedirectStatus(resolverInternal, authInternal);\r\n    return resolverInternal._openRedirect(authInternal, provider, \"signInViaRedirect\" /* AuthEventType.SIGN_IN_VIA_REDIRECT */);\r\n}\r\n/**\r\n * Reauthenticates the current user with the specified {@link OAuthProvider} using a full-page redirect flow.\r\n * @remarks\r\n * To handle the results and errors for this operation, refer to {@link getRedirectResult}.\r\n * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices\r\n * | best practices} when using {@link reauthenticateWithRedirect}.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new FacebookAuthProvider();\r\n * const result = await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * // Reauthenticate using a redirect.\r\n * await reauthenticateWithRedirect(result.user, provider);\r\n * // This will again trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * ```\r\n *\r\n * @param user - The user.\r\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\r\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\r\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\r\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\r\n *\r\n * @public\r\n */\r\nfunction reauthenticateWithRedirect(user, provider, resolver) {\r\n    return _reauthenticateWithRedirect(user, provider, resolver);\r\n}\r\nasync function _reauthenticateWithRedirect(user, provider, resolver) {\r\n    const userInternal = getModularInstance(user);\r\n    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\r\n    // Wait for auth initialization to complete, this will process pending redirects and clear the\r\n    // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new\r\n    // redirect and creating a PENDING_REDIRECT_KEY entry.\r\n    await userInternal.auth._initializationPromise;\r\n    // Allow the resolver to error before persisting the redirect user\r\n    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\r\n    await _setPendingRedirectStatus(resolverInternal, userInternal.auth);\r\n    const eventId = await prepareUserForRedirect(userInternal);\r\n    return resolverInternal._openRedirect(userInternal.auth, provider, \"reauthViaRedirect\" /* AuthEventType.REAUTH_VIA_REDIRECT */, eventId);\r\n}\r\n/**\r\n * Links the {@link OAuthProvider} to the user account using a full-page redirect flow.\r\n * @remarks\r\n * To handle the results and errors for this operation, refer to {@link getRedirectResult}.\r\n * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices\r\n * | best practices} when using {@link linkWithRedirect}.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using some other provider.\r\n * const result = await signInWithEmailAndPassword(auth, email, password);\r\n * // Link using a redirect.\r\n * const provider = new FacebookAuthProvider();\r\n * await linkWithRedirect(result.user, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * ```\r\n *\r\n * @param user - The user.\r\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\r\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\r\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\r\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\r\n *\r\n *\r\n * @public\r\n */\r\nfunction linkWithRedirect(user, provider, resolver) {\r\n    return _linkWithRedirect(user, provider, resolver);\r\n}\r\nasync function _linkWithRedirect(user, provider, resolver) {\r\n    const userInternal = getModularInstance(user);\r\n    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\r\n    // Wait for auth initialization to complete, this will process pending redirects and clear the\r\n    // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new\r\n    // redirect and creating a PENDING_REDIRECT_KEY entry.\r\n    await userInternal.auth._initializationPromise;\r\n    // Allow the resolver to error before persisting the redirect user\r\n    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\r\n    await _assertLinkedStatus(false, userInternal, provider.providerId);\r\n    await _setPendingRedirectStatus(resolverInternal, userInternal.auth);\r\n    const eventId = await prepareUserForRedirect(userInternal);\r\n    return resolverInternal._openRedirect(userInternal.auth, provider, \"linkViaRedirect\" /* AuthEventType.LINK_VIA_REDIRECT */, eventId);\r\n}\r\n/**\r\n * Returns a {@link UserCredential} from the redirect-based sign-in flow.\r\n *\r\n * @remarks\r\n * If sign-in succeeded, returns the signed in user. If sign-in was unsuccessful, fails with an\r\n * error. If no redirect operation was called, returns `null`.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new FacebookAuthProvider();\r\n * // You can add additional scopes to the provider:\r\n * provider.addScope('user_birthday');\r\n * // Start a sign in process for an unauthenticated user.\r\n * await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * if (result) {\r\n *   // This is the signed-in user\r\n *   const user = result.user;\r\n *   // This gives you a Facebook Access Token.\r\n *   const credential = provider.credentialFromResult(auth, result);\r\n *   const token = credential.accessToken;\r\n * }\r\n * // As this API can be used for sign-in, linking and reauthentication,\r\n * // check the operationType to determine what triggered this redirect\r\n * // operation.\r\n * const operationType = result.operationType;\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\r\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\r\n *\r\n * @public\r\n */\r\nasync function getRedirectResult(auth, resolver) {\r\n    await _castAuth(auth)._initializationPromise;\r\n    return _getRedirectResult(auth, resolver, false);\r\n}\r\nasync function _getRedirectResult(auth, resolverExtern, bypassAuthState = false) {\r\n    const authInternal = _castAuth(auth);\r\n    const resolver = _withDefaultResolver(authInternal, resolverExtern);\r\n    const action = new RedirectAction(authInternal, resolver, bypassAuthState);\r\n    const result = await action.execute();\r\n    if (result && !bypassAuthState) {\r\n        delete result.user._redirectEventId;\r\n        await authInternal._persistUserIfCurrent(result.user);\r\n        await authInternal._setRedirectUser(null, resolverExtern);\r\n    }\r\n    return result;\r\n}\r\nasync function prepareUserForRedirect(user) {\r\n    const eventId = _generateEventId(`${user.uid}:::`);\r\n    user._redirectEventId = eventId;\r\n    await user.auth._setRedirectUser(user);\r\n    await user.auth._persistUserIfCurrent(user);\r\n    return eventId;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// The amount of time to store the UIDs of seen events; this is\r\n// set to 10 min by default\r\nconst EVENT_DUPLICATION_CACHE_DURATION_MS = 10 * 60 * 1000;\r\nclass AuthEventManager {\r\n    constructor(auth) {\r\n        this.auth = auth;\r\n        this.cachedEventUids = new Set();\r\n        this.consumers = new Set();\r\n        this.queuedRedirectEvent = null;\r\n        this.hasHandledPotentialRedirect = false;\r\n        this.lastProcessedEventTime = Date.now();\r\n    }\r\n    registerConsumer(authEventConsumer) {\r\n        this.consumers.add(authEventConsumer);\r\n        if (this.queuedRedirectEvent &&\r\n            this.isEventForConsumer(this.queuedRedirectEvent, authEventConsumer)) {\r\n            this.sendToConsumer(this.queuedRedirectEvent, authEventConsumer);\r\n            this.saveEventToCache(this.queuedRedirectEvent);\r\n            this.queuedRedirectEvent = null;\r\n        }\r\n    }\r\n    unregisterConsumer(authEventConsumer) {\r\n        this.consumers.delete(authEventConsumer);\r\n    }\r\n    onEvent(event) {\r\n        // Check if the event has already been handled\r\n        if (this.hasEventBeenHandled(event)) {\r\n            return false;\r\n        }\r\n        let handled = false;\r\n        this.consumers.forEach(consumer => {\r\n            if (this.isEventForConsumer(event, consumer)) {\r\n                handled = true;\r\n                this.sendToConsumer(event, consumer);\r\n                this.saveEventToCache(event);\r\n            }\r\n        });\r\n        if (this.hasHandledPotentialRedirect || !isRedirectEvent(event)) {\r\n            // If we've already seen a redirect before, or this is a popup event,\r\n            // bail now\r\n            return handled;\r\n        }\r\n        this.hasHandledPotentialRedirect = true;\r\n        // If the redirect wasn't handled, hang on to it\r\n        if (!handled) {\r\n            this.queuedRedirectEvent = event;\r\n            handled = true;\r\n        }\r\n        return handled;\r\n    }\r\n    sendToConsumer(event, consumer) {\r\n        var _a;\r\n        if (event.error && !isNullRedirectEvent(event)) {\r\n            const code = ((_a = event.error.code) === null || _a === void 0 ? void 0 : _a.split('auth/')[1]) ||\r\n                \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */;\r\n            consumer.onError(_createError(this.auth, code));\r\n        }\r\n        else {\r\n            consumer.onAuthEvent(event);\r\n        }\r\n    }\r\n    isEventForConsumer(event, consumer) {\r\n        const eventIdMatches = consumer.eventId === null ||\r\n            (!!event.eventId && event.eventId === consumer.eventId);\r\n        return consumer.filter.includes(event.type) && eventIdMatches;\r\n    }\r\n    hasEventBeenHandled(event) {\r\n        if (Date.now() - this.lastProcessedEventTime >=\r\n            EVENT_DUPLICATION_CACHE_DURATION_MS) {\r\n            this.cachedEventUids.clear();\r\n        }\r\n        return this.cachedEventUids.has(eventUid(event));\r\n    }\r\n    saveEventToCache(event) {\r\n        this.cachedEventUids.add(eventUid(event));\r\n        this.lastProcessedEventTime = Date.now();\r\n    }\r\n}\r\nfunction eventUid(e) {\r\n    return [e.type, e.eventId, e.sessionId, e.tenantId].filter(v => v).join('-');\r\n}\r\nfunction isNullRedirectEvent({ type, error }) {\r\n    return (type === \"unknown\" /* AuthEventType.UNKNOWN */ &&\r\n        (error === null || error === void 0 ? void 0 : error.code) === `auth/${\"no-auth-event\" /* AuthErrorCode.NO_AUTH_EVENT */}`);\r\n}\r\nfunction isRedirectEvent(event) {\r\n    switch (event.type) {\r\n        case \"signInViaRedirect\" /* AuthEventType.SIGN_IN_VIA_REDIRECT */:\r\n        case \"linkViaRedirect\" /* AuthEventType.LINK_VIA_REDIRECT */:\r\n        case \"reauthViaRedirect\" /* AuthEventType.REAUTH_VIA_REDIRECT */:\r\n            return true;\r\n        case \"unknown\" /* AuthEventType.UNKNOWN */:\r\n            return isNullRedirectEvent(event);\r\n        default:\r\n            return false;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function _getProjectConfig(auth, request = {}) {\r\n    return _performApiRequest(auth, \"GET\" /* HttpMethod.GET */, \"/v1/projects\" /* Endpoint.GET_PROJECT_CONFIG */, request);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst IP_ADDRESS_REGEX = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/;\r\nconst HTTP_REGEX = /^https?/;\r\nasync function _validateOrigin(auth) {\r\n    // Skip origin validation if we are in an emulated environment\r\n    if (auth.config.emulator) {\r\n        return;\r\n    }\r\n    const { authorizedDomains } = await _getProjectConfig(auth);\r\n    for (const domain of authorizedDomains) {\r\n        try {\r\n            if (matchDomain(domain)) {\r\n                return;\r\n            }\r\n        }\r\n        catch (_a) {\r\n            // Do nothing if there's a URL error; just continue searching\r\n        }\r\n    }\r\n    // In the old SDK, this error also provides helpful messages.\r\n    _fail(auth, \"unauthorized-domain\" /* AuthErrorCode.INVALID_ORIGIN */);\r\n}\r\nfunction matchDomain(expected) {\r\n    const currentUrl = _getCurrentUrl();\r\n    const { protocol, hostname } = new URL(currentUrl);\r\n    if (expected.startsWith('chrome-extension://')) {\r\n        const ceUrl = new URL(expected);\r\n        if (ceUrl.hostname === '' && hostname === '') {\r\n            // For some reason we're not parsing chrome URLs properly\r\n            return (protocol === 'chrome-extension:' &&\r\n                expected.replace('chrome-extension://', '') ===\r\n                    currentUrl.replace('chrome-extension://', ''));\r\n        }\r\n        return protocol === 'chrome-extension:' && ceUrl.hostname === hostname;\r\n    }\r\n    if (!HTTP_REGEX.test(protocol)) {\r\n        return false;\r\n    }\r\n    if (IP_ADDRESS_REGEX.test(expected)) {\r\n        // The domain has to be exactly equal to the pattern, as an IP domain will\r\n        // only contain the IP, no extra character.\r\n        return hostname === expected;\r\n    }\r\n    // Dots in pattern should be escaped.\r\n    const escapedDomainPattern = expected.replace(/\\./g, '\\\\.');\r\n    // Non ip address domains.\r\n    // domain.com = *.domain.com OR domain.com\r\n    const re = new RegExp('^(.+\\\\.' + escapedDomainPattern + '|' + escapedDomainPattern + ')$', 'i');\r\n    return re.test(hostname);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst NETWORK_TIMEOUT = new Delay(30000, 60000);\r\n/**\r\n * Reset unlaoded GApi modules. If gapi.load fails due to a network error,\r\n * it will stop working after a retrial. This is a hack to fix this issue.\r\n */\r\nfunction resetUnloadedGapiModules() {\r\n    // Clear last failed gapi.load state to force next gapi.load to first\r\n    // load the failed gapi.iframes module.\r\n    // Get gapix.beacon context.\r\n    const beacon = _window().___jsl;\r\n    // Get current hint.\r\n    if (beacon === null || beacon === void 0 ? void 0 : beacon.H) {\r\n        // Get gapi hint.\r\n        for (const hint of Object.keys(beacon.H)) {\r\n            // Requested modules.\r\n            beacon.H[hint].r = beacon.H[hint].r || [];\r\n            // Loaded modules.\r\n            beacon.H[hint].L = beacon.H[hint].L || [];\r\n            // Set requested modules to a copy of the loaded modules.\r\n            beacon.H[hint].r = [...beacon.H[hint].L];\r\n            // Clear pending callbacks.\r\n            if (beacon.CP) {\r\n                for (let i = 0; i < beacon.CP.length; i++) {\r\n                    // Remove all failed pending callbacks.\r\n                    beacon.CP[i] = null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction loadGapi(auth) {\r\n    return new Promise((resolve, reject) => {\r\n        var _a, _b, _c;\r\n        // Function to run when gapi.load is ready.\r\n        function loadGapiIframe() {\r\n            // The developer may have tried to previously run gapi.load and failed.\r\n            // Run this to fix that.\r\n            resetUnloadedGapiModules();\r\n            gapi.load('gapi.iframes', {\r\n                callback: () => {\r\n                    resolve(gapi.iframes.getContext());\r\n                },\r\n                ontimeout: () => {\r\n                    // The above reset may be sufficient, but having this reset after\r\n                    // failure ensures that if the developer calls gapi.load after the\r\n                    // connection is re-established and before another attempt to embed\r\n                    // the iframe, it would work and would not be broken because of our\r\n                    // failed attempt.\r\n                    // Timeout when gapi.iframes.Iframe not loaded.\r\n                    resetUnloadedGapiModules();\r\n                    reject(_createError(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));\r\n                },\r\n                timeout: NETWORK_TIMEOUT.get()\r\n            });\r\n        }\r\n        if ((_b = (_a = _window().gapi) === null || _a === void 0 ? void 0 : _a.iframes) === null || _b === void 0 ? void 0 : _b.Iframe) {\r\n            // If gapi.iframes.Iframe available, resolve.\r\n            resolve(gapi.iframes.getContext());\r\n        }\r\n        else if (!!((_c = _window().gapi) === null || _c === void 0 ? void 0 : _c.load)) {\r\n            // Gapi loader ready, load gapi.iframes.\r\n            loadGapiIframe();\r\n        }\r\n        else {\r\n            // Create a new iframe callback when this is called so as not to overwrite\r\n            // any previous defined callback. This happens if this method is called\r\n            // multiple times in parallel and could result in the later callback\r\n            // overwriting the previous one. This would end up with a iframe\r\n            // timeout.\r\n            const cbName = _generateCallbackName('iframefcb');\r\n            // GApi loader not available, dynamically load platform.js.\r\n            _window()[cbName] = () => {\r\n                // GApi loader should be ready.\r\n                if (!!gapi.load) {\r\n                    loadGapiIframe();\r\n                }\r\n                else {\r\n                    // Gapi loader failed, throw error.\r\n                    reject(_createError(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));\r\n                }\r\n            };\r\n            // Load GApi loader.\r\n            return _loadJS(`https://apis.google.com/js/api.js?onload=${cbName}`)\r\n                .catch(e => reject(e));\r\n        }\r\n    }).catch(error => {\r\n        // Reset cached promise to allow for retrial.\r\n        cachedGApiLoader = null;\r\n        throw error;\r\n    });\r\n}\r\nlet cachedGApiLoader = null;\r\nfunction _loadGapi(auth) {\r\n    cachedGApiLoader = cachedGApiLoader || loadGapi(auth);\r\n    return cachedGApiLoader;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PING_TIMEOUT = new Delay(5000, 15000);\r\nconst IFRAME_PATH = '__/auth/iframe';\r\nconst EMULATED_IFRAME_PATH = 'emulator/auth/iframe';\r\nconst IFRAME_ATTRIBUTES = {\r\n    style: {\r\n        position: 'absolute',\r\n        top: '-100px',\r\n        width: '1px',\r\n        height: '1px'\r\n    },\r\n    'aria-hidden': 'true',\r\n    tabindex: '-1'\r\n};\r\n// Map from apiHost to endpoint ID for passing into iframe. In current SDK, apiHost can be set to\r\n// anything (not from a list of endpoints with IDs as in legacy), so this is the closest we can get.\r\nconst EID_FROM_APIHOST = new Map([\r\n    [\"identitytoolkit.googleapis.com\" /* DefaultConfig.API_HOST */, 'p'],\r\n    ['staging-identitytoolkit.sandbox.googleapis.com', 's'],\r\n    ['test-identitytoolkit.sandbox.googleapis.com', 't'] // test\r\n]);\r\nfunction getIframeUrl(auth) {\r\n    const config = auth.config;\r\n    _assert(config.authDomain, auth, \"auth-domain-config-required\" /* AuthErrorCode.MISSING_AUTH_DOMAIN */);\r\n    const url = config.emulator\r\n        ? _emulatorUrl(config, EMULATED_IFRAME_PATH)\r\n        : `https://${auth.config.authDomain}/${IFRAME_PATH}`;\r\n    const params = {\r\n        apiKey: config.apiKey,\r\n        appName: auth.name,\r\n        v: SDK_VERSION\r\n    };\r\n    const eid = EID_FROM_APIHOST.get(auth.config.apiHost);\r\n    if (eid) {\r\n        params.eid = eid;\r\n    }\r\n    const frameworks = auth._getFrameworks();\r\n    if (frameworks.length) {\r\n        params.fw = frameworks.join(',');\r\n    }\r\n    return `${url}?${querystring(params).slice(1)}`;\r\n}\r\nasync function _openIframe(auth) {\r\n    const context = await _loadGapi(auth);\r\n    const gapi = _window().gapi;\r\n    _assert(gapi, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n    return context.open({\r\n        where: document.body,\r\n        url: getIframeUrl(auth),\r\n        messageHandlersFilter: gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER,\r\n        attributes: IFRAME_ATTRIBUTES,\r\n        dontclear: true\r\n    }, (iframe) => new Promise(async (resolve, reject) => {\r\n        await iframe.restyle({\r\n            // Prevent iframe from closing on mouse out.\r\n            setHideOnLeave: false\r\n        });\r\n        const networkError = _createError(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */);\r\n        // Confirm iframe is correctly loaded.\r\n        // To fallback on failure, set a timeout.\r\n        const networkErrorTimer = _window().setTimeout(() => {\r\n            reject(networkError);\r\n        }, PING_TIMEOUT.get());\r\n        // Clear timer and resolve pending iframe ready promise.\r\n        function clearTimerAndResolve() {\r\n            _window().clearTimeout(networkErrorTimer);\r\n            resolve(iframe);\r\n        }\r\n        // This returns an IThenable. However the reject part does not call\r\n        // when the iframe is not loaded.\r\n        iframe.ping(clearTimerAndResolve).then(clearTimerAndResolve, () => {\r\n            reject(networkError);\r\n        });\r\n    }));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst BASE_POPUP_OPTIONS = {\r\n    location: 'yes',\r\n    resizable: 'yes',\r\n    statusbar: 'yes',\r\n    toolbar: 'no'\r\n};\r\nconst DEFAULT_WIDTH = 500;\r\nconst DEFAULT_HEIGHT = 600;\r\nconst TARGET_BLANK = '_blank';\r\nconst FIREFOX_EMPTY_URL = 'http://localhost';\r\nclass AuthPopup {\r\n    constructor(window) {\r\n        this.window = window;\r\n        this.associatedEvent = null;\r\n    }\r\n    close() {\r\n        if (this.window) {\r\n            try {\r\n                this.window.close();\r\n            }\r\n            catch (e) { }\r\n        }\r\n    }\r\n}\r\nfunction _open(auth, url, name, width = DEFAULT_WIDTH, height = DEFAULT_HEIGHT) {\r\n    const top = Math.max((window.screen.availHeight - height) / 2, 0).toString();\r\n    const left = Math.max((window.screen.availWidth - width) / 2, 0).toString();\r\n    let target = '';\r\n    const options = Object.assign(Object.assign({}, BASE_POPUP_OPTIONS), { width: width.toString(), height: height.toString(), top,\r\n        left });\r\n    // Chrome iOS 7 and 8 is returning an undefined popup win when target is\r\n    // specified, even though the popup is not necessarily blocked.\r\n    const ua = getUA().toLowerCase();\r\n    if (name) {\r\n        target = _isChromeIOS(ua) ? TARGET_BLANK : name;\r\n    }\r\n    if (_isFirefox(ua)) {\r\n        // Firefox complains when invalid URLs are popped out. Hacky way to bypass.\r\n        url = url || FIREFOX_EMPTY_URL;\r\n        // Firefox disables by default scrolling on popup windows, which can create\r\n        // issues when the user has many Google accounts, for instance.\r\n        options.scrollbars = 'yes';\r\n    }\r\n    const optionsString = Object.entries(options).reduce((accum, [key, value]) => `${accum}${key}=${value},`, '');\r\n    if (_isIOSStandalone(ua) && target !== '_self') {\r\n        openAsNewWindowIOS(url || '', target);\r\n        return new AuthPopup(null);\r\n    }\r\n    // about:blank getting sanitized causing browsers like IE/Edge to display\r\n    // brief error message before redirecting to handler.\r\n    const newWin = window.open(url || '', target, optionsString);\r\n    _assert(newWin, auth, \"popup-blocked\" /* AuthErrorCode.POPUP_BLOCKED */);\r\n    // Flaky on IE edge, encapsulate with a try and catch.\r\n    try {\r\n        newWin.focus();\r\n    }\r\n    catch (e) { }\r\n    return new AuthPopup(newWin);\r\n}\r\nfunction openAsNewWindowIOS(url, target) {\r\n    const el = document.createElement('a');\r\n    el.href = url;\r\n    el.target = target;\r\n    const click = document.createEvent('MouseEvent');\r\n    click.initMouseEvent('click', true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 1, null);\r\n    el.dispatchEvent(click);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * URL for Authentication widget which will initiate the OAuth handshake\r\n *\r\n * @internal\r\n */\r\nconst WIDGET_PATH = '__/auth/handler';\r\n/**\r\n * URL for emulated environment\r\n *\r\n * @internal\r\n */\r\nconst EMULATOR_WIDGET_PATH = 'emulator/auth/handler';\r\n/**\r\n * Fragment name for the App Check token that gets passed to the widget\r\n *\r\n * @internal\r\n */\r\nconst FIREBASE_APP_CHECK_FRAGMENT_ID = encodeURIComponent('fac');\r\nasync function _getRedirectUrl(auth, provider, authType, redirectUrl, eventId, additionalParams) {\r\n    _assert(auth.config.authDomain, auth, \"auth-domain-config-required\" /* AuthErrorCode.MISSING_AUTH_DOMAIN */);\r\n    _assert(auth.config.apiKey, auth, \"invalid-api-key\" /* AuthErrorCode.INVALID_API_KEY */);\r\n    const params = {\r\n        apiKey: auth.config.apiKey,\r\n        appName: auth.name,\r\n        authType,\r\n        redirectUrl,\r\n        v: SDK_VERSION,\r\n        eventId\r\n    };\r\n    if (provider instanceof FederatedAuthProvider) {\r\n        provider.setDefaultLanguage(auth.languageCode);\r\n        params.providerId = provider.providerId || '';\r\n        if (!isEmpty(provider.getCustomParameters())) {\r\n            params.customParameters = JSON.stringify(provider.getCustomParameters());\r\n        }\r\n        // TODO set additionalParams from the provider as well?\r\n        for (const [key, value] of Object.entries(additionalParams || {})) {\r\n            params[key] = value;\r\n        }\r\n    }\r\n    if (provider instanceof BaseOAuthProvider) {\r\n        const scopes = provider.getScopes().filter(scope => scope !== '');\r\n        if (scopes.length > 0) {\r\n            params.scopes = scopes.join(',');\r\n        }\r\n    }\r\n    if (auth.tenantId) {\r\n        params.tid = auth.tenantId;\r\n    }\r\n    // TODO: maybe set eid as endipointId\r\n    // TODO: maybe set fw as Frameworks.join(\",\")\r\n    const paramsDict = params;\r\n    for (const key of Object.keys(paramsDict)) {\r\n        if (paramsDict[key] === undefined) {\r\n            delete paramsDict[key];\r\n        }\r\n    }\r\n    // Sets the App Check token to pass to the widget\r\n    const appCheckToken = await auth._getAppCheckToken();\r\n    const appCheckTokenFragment = appCheckToken\r\n        ? `#${FIREBASE_APP_CHECK_FRAGMENT_ID}=${encodeURIComponent(appCheckToken)}`\r\n        : '';\r\n    // Start at index 1 to skip the leading '&' in the query string\r\n    return `${getHandlerBase(auth)}?${querystring(paramsDict).slice(1)}${appCheckTokenFragment}`;\r\n}\r\nfunction getHandlerBase({ config }) {\r\n    if (!config.emulator) {\r\n        return `https://${config.authDomain}/${WIDGET_PATH}`;\r\n    }\r\n    return _emulatorUrl(config, EMULATOR_WIDGET_PATH);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The special web storage event\r\n *\r\n */\r\nconst WEB_STORAGE_SUPPORT_KEY = 'webStorageSupport';\r\nclass BrowserPopupRedirectResolver {\r\n    constructor() {\r\n        this.eventManagers = {};\r\n        this.iframes = {};\r\n        this.originValidationPromises = {};\r\n        this._redirectPersistence = browserSessionPersistence;\r\n        this._completeRedirectFn = _getRedirectResult;\r\n        this._overrideRedirectResult = _overrideRedirectResult;\r\n    }\r\n    // Wrapping in async even though we don't await anywhere in order\r\n    // to make sure errors are raised as promise rejections\r\n    async _openPopup(auth, provider, authType, eventId) {\r\n        var _a;\r\n        debugAssert((_a = this.eventManagers[auth._key()]) === null || _a === void 0 ? void 0 : _a.manager, '_initialize() not called before _openPopup()');\r\n        const url = await _getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId);\r\n        return _open(auth, url, _generateEventId());\r\n    }\r\n    async _openRedirect(auth, provider, authType, eventId) {\r\n        await this._originValidation(auth);\r\n        const url = await _getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId);\r\n        _setWindowLocation(url);\r\n        return new Promise(() => { });\r\n    }\r\n    _initialize(auth) {\r\n        const key = auth._key();\r\n        if (this.eventManagers[key]) {\r\n            const { manager, promise } = this.eventManagers[key];\r\n            if (manager) {\r\n                return Promise.resolve(manager);\r\n            }\r\n            else {\r\n                debugAssert(promise, 'If manager is not set, promise should be');\r\n                return promise;\r\n            }\r\n        }\r\n        const promise = this.initAndGetManager(auth);\r\n        this.eventManagers[key] = { promise };\r\n        // If the promise is rejected, the key should be removed so that the\r\n        // operation can be retried later.\r\n        promise.catch(() => {\r\n            delete this.eventManagers[key];\r\n        });\r\n        return promise;\r\n    }\r\n    async initAndGetManager(auth) {\r\n        const iframe = await _openIframe(auth);\r\n        const manager = new AuthEventManager(auth);\r\n        iframe.register('authEvent', (iframeEvent) => {\r\n            _assert(iframeEvent === null || iframeEvent === void 0 ? void 0 : iframeEvent.authEvent, auth, \"invalid-auth-event\" /* AuthErrorCode.INVALID_AUTH_EVENT */);\r\n            // TODO: Consider splitting redirect and popup events earlier on\r\n            const handled = manager.onEvent(iframeEvent.authEvent);\r\n            return { status: handled ? \"ACK\" /* GapiOutcome.ACK */ : \"ERROR\" /* GapiOutcome.ERROR */ };\r\n        }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);\r\n        this.eventManagers[auth._key()] = { manager };\r\n        this.iframes[auth._key()] = iframe;\r\n        return manager;\r\n    }\r\n    _isIframeWebStorageSupported(auth, cb) {\r\n        const iframe = this.iframes[auth._key()];\r\n        iframe.send(WEB_STORAGE_SUPPORT_KEY, { type: WEB_STORAGE_SUPPORT_KEY }, result => {\r\n            var _a;\r\n            const isSupported = (_a = result === null || result === void 0 ? void 0 : result[0]) === null || _a === void 0 ? void 0 : _a[WEB_STORAGE_SUPPORT_KEY];\r\n            if (isSupported !== undefined) {\r\n                cb(!!isSupported);\r\n            }\r\n            _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);\r\n    }\r\n    _originValidation(auth) {\r\n        const key = auth._key();\r\n        if (!this.originValidationPromises[key]) {\r\n            this.originValidationPromises[key] = _validateOrigin(auth);\r\n        }\r\n        return this.originValidationPromises[key];\r\n    }\r\n    get _shouldInitProactively() {\r\n        // Mobile browsers and Safari need to optimistically initialize\r\n        return _isMobileBrowser() || _isSafari() || _isIOS();\r\n    }\r\n}\r\n/**\r\n * An implementation of {@link PopupRedirectResolver} suitable for browser\r\n * based applications.\r\n *\r\n * @public\r\n */\r\nconst browserPopupRedirectResolver = BrowserPopupRedirectResolver;\n\nclass MultiFactorAssertionImpl {\r\n    constructor(factorId) {\r\n        this.factorId = factorId;\r\n    }\r\n    _process(auth, session, displayName) {\r\n        switch (session.type) {\r\n            case \"enroll\" /* MultiFactorSessionType.ENROLL */:\r\n                return this._finalizeEnroll(auth, session.credential, displayName);\r\n            case \"signin\" /* MultiFactorSessionType.SIGN_IN */:\r\n                return this._finalizeSignIn(auth, session.credential);\r\n            default:\r\n                return debugFail('unexpected MultiFactorSessionType');\r\n        }\r\n    }\r\n}\n\n/**\r\n * {@inheritdoc PhoneMultiFactorAssertion}\r\n *\r\n * @public\r\n */\r\nclass PhoneMultiFactorAssertionImpl extends MultiFactorAssertionImpl {\r\n    constructor(credential) {\r\n        super(\"phone\" /* FactorId.PHONE */);\r\n        this.credential = credential;\r\n    }\r\n    /** @internal */\r\n    static _fromCredential(credential) {\r\n        return new PhoneMultiFactorAssertionImpl(credential);\r\n    }\r\n    /** @internal */\r\n    _finalizeEnroll(auth, idToken, displayName) {\r\n        return finalizeEnrollPhoneMfa(auth, {\r\n            idToken,\r\n            displayName,\r\n            phoneVerificationInfo: this.credential._makeVerificationRequest()\r\n        });\r\n    }\r\n    /** @internal */\r\n    _finalizeSignIn(auth, mfaPendingCredential) {\r\n        return finalizeSignInPhoneMfa(auth, {\r\n            mfaPendingCredential,\r\n            phoneVerificationInfo: this.credential._makeVerificationRequest()\r\n        });\r\n    }\r\n}\r\n/**\r\n * Provider for generating a {@link PhoneMultiFactorAssertion}.\r\n *\r\n * @public\r\n */\r\nclass PhoneMultiFactorGenerator {\r\n    constructor() { }\r\n    /**\r\n     * Provides a {@link PhoneMultiFactorAssertion} to confirm ownership of the phone second factor.\r\n     *\r\n     * @param phoneAuthCredential - A credential provided by {@link PhoneAuthProvider.credential}.\r\n     * @returns A {@link PhoneMultiFactorAssertion} which can be used with\r\n     * {@link MultiFactorResolver.resolveSignIn}\r\n     */\r\n    static assertion(credential) {\r\n        return PhoneMultiFactorAssertionImpl._fromCredential(credential);\r\n    }\r\n}\r\n/**\r\n * The identifier of the phone second factor: `phone`.\r\n */\r\nPhoneMultiFactorGenerator.FACTOR_ID = 'phone';\n\n/**\r\n * Provider for generating a {@link TotpMultiFactorAssertion}.\r\n *\r\n * @public\r\n */\r\nclass TotpMultiFactorGenerator {\r\n    /**\r\n     * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of\r\n     * the TOTP (time-based one-time password) second factor.\r\n     * This assertion is used to complete enrollment in TOTP second factor.\r\n     *\r\n     * @param secret A {@link TotpSecret} containing the shared secret key and other TOTP parameters.\r\n     * @param oneTimePassword One-time password from TOTP App.\r\n     * @returns A {@link TotpMultiFactorAssertion} which can be used with\r\n     * {@link MultiFactorUser.enroll}.\r\n     */\r\n    static assertionForEnrollment(secret, oneTimePassword) {\r\n        return TotpMultiFactorAssertionImpl._fromSecret(secret, oneTimePassword);\r\n    }\r\n    /**\r\n     * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of the TOTP second factor.\r\n     * This assertion is used to complete signIn with TOTP as the second factor.\r\n     *\r\n     * @param enrollmentId identifies the enrolled TOTP second factor.\r\n     * @param oneTimePassword One-time password from TOTP App.\r\n     * @returns A {@link TotpMultiFactorAssertion} which can be used with\r\n     * {@link MultiFactorResolver.resolveSignIn}.\r\n     */\r\n    static assertionForSignIn(enrollmentId, oneTimePassword) {\r\n        return TotpMultiFactorAssertionImpl._fromEnrollmentId(enrollmentId, oneTimePassword);\r\n    }\r\n    /**\r\n     * Returns a promise to {@link TotpSecret} which contains the TOTP shared secret key and other parameters.\r\n     * Creates a TOTP secret as part of enrolling a TOTP second factor.\r\n     * Used for generating a QR code URL or inputting into a TOTP app.\r\n     * This method uses the auth instance corresponding to the user in the multiFactorSession.\r\n     *\r\n     * @param session The {@link MultiFactorSession} that the user is part of.\r\n     * @returns A promise to {@link TotpSecret}.\r\n     */\r\n    static async generateSecret(session) {\r\n        const mfaSession = session;\r\n        _assert(typeof mfaSession.auth !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        const response = await startEnrollTotpMfa(mfaSession.auth, {\r\n            idToken: mfaSession.credential,\r\n            totpEnrollmentInfo: {}\r\n        });\r\n        return TotpSecret._fromStartTotpMfaEnrollmentResponse(response, mfaSession.auth);\r\n    }\r\n}\r\n/**\r\n * The identifier of the TOTP second factor: `totp`.\r\n */\r\nTotpMultiFactorGenerator.FACTOR_ID = \"totp\" /* FactorId.TOTP */;\r\nclass TotpMultiFactorAssertionImpl extends MultiFactorAssertionImpl {\r\n    constructor(otp, enrollmentId, secret) {\r\n        super(\"totp\" /* FactorId.TOTP */);\r\n        this.otp = otp;\r\n        this.enrollmentId = enrollmentId;\r\n        this.secret = secret;\r\n    }\r\n    /** @internal */\r\n    static _fromSecret(secret, otp) {\r\n        return new TotpMultiFactorAssertionImpl(otp, undefined, secret);\r\n    }\r\n    /** @internal */\r\n    static _fromEnrollmentId(enrollmentId, otp) {\r\n        return new TotpMultiFactorAssertionImpl(otp, enrollmentId);\r\n    }\r\n    /** @internal */\r\n    async _finalizeEnroll(auth, idToken, displayName) {\r\n        _assert(typeof this.secret !== 'undefined', auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        return finalizeEnrollTotpMfa(auth, {\r\n            idToken,\r\n            displayName,\r\n            totpVerificationInfo: this.secret._makeTotpVerificationInfo(this.otp)\r\n        });\r\n    }\r\n    /** @internal */\r\n    async _finalizeSignIn(auth, mfaPendingCredential) {\r\n        _assert(this.enrollmentId !== undefined && this.otp !== undefined, auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        const totpVerificationInfo = { verificationCode: this.otp };\r\n        return finalizeSignInTotpMfa(auth, {\r\n            mfaPendingCredential,\r\n            mfaEnrollmentId: this.enrollmentId,\r\n            totpVerificationInfo\r\n        });\r\n    }\r\n}\r\n/**\r\n * Provider for generating a {@link TotpMultiFactorAssertion}.\r\n *\r\n * Stores the shared secret key and other parameters to generate time-based OTPs.\r\n * Implements methods to retrieve the shared secret key and generate a QR code URL.\r\n * @public\r\n */\r\nclass TotpSecret {\r\n    // The public members are declared outside the constructor so the docs can be generated.\r\n    constructor(secretKey, hashingAlgorithm, codeLength, codeIntervalSeconds, enrollmentCompletionDeadline, sessionInfo, auth) {\r\n        this.sessionInfo = sessionInfo;\r\n        this.auth = auth;\r\n        this.secretKey = secretKey;\r\n        this.hashingAlgorithm = hashingAlgorithm;\r\n        this.codeLength = codeLength;\r\n        this.codeIntervalSeconds = codeIntervalSeconds;\r\n        this.enrollmentCompletionDeadline = enrollmentCompletionDeadline;\r\n    }\r\n    /** @internal */\r\n    static _fromStartTotpMfaEnrollmentResponse(response, auth) {\r\n        return new TotpSecret(response.totpSessionInfo.sharedSecretKey, response.totpSessionInfo.hashingAlgorithm, response.totpSessionInfo.verificationCodeLength, response.totpSessionInfo.periodSec, new Date(response.totpSessionInfo.finalizeEnrollmentTime).toUTCString(), response.totpSessionInfo.sessionInfo, auth);\r\n    }\r\n    /** @internal */\r\n    _makeTotpVerificationInfo(otp) {\r\n        return { sessionInfo: this.sessionInfo, verificationCode: otp };\r\n    }\r\n    /**\r\n     * Returns a QR code URL as described in\r\n     * https://github.com/google/google-authenticator/wiki/Key-Uri-Format\r\n     * This can be displayed to the user as a QR code to be scanned into a TOTP app like Google Authenticator.\r\n     * If the optional parameters are unspecified, an accountName of <userEmail> and issuer of <firebaseAppName> are used.\r\n     *\r\n     * @param accountName the name of the account/app along with a user identifier.\r\n     * @param issuer issuer of the TOTP (likely the app name).\r\n     * @returns A QR code URL string.\r\n     */\r\n    generateQrCodeUrl(accountName, issuer) {\r\n        var _a;\r\n        let useDefaults = false;\r\n        if (_isEmptyString(accountName) || _isEmptyString(issuer)) {\r\n            useDefaults = true;\r\n        }\r\n        if (useDefaults) {\r\n            if (_isEmptyString(accountName)) {\r\n                accountName = ((_a = this.auth.currentUser) === null || _a === void 0 ? void 0 : _a.email) || 'unknownuser';\r\n            }\r\n            if (_isEmptyString(issuer)) {\r\n                issuer = this.auth.name;\r\n            }\r\n        }\r\n        return `otpauth://totp/${issuer}:${accountName}?secret=${this.secretKey}&issuer=${issuer}&algorithm=${this.hashingAlgorithm}&digits=${this.codeLength}`;\r\n    }\r\n}\r\n/** @internal */\r\nfunction _isEmptyString(input) {\r\n    return typeof input === 'undefined' || (input === null || input === void 0 ? void 0 : input.length) === 0;\r\n}\n\nvar name = \"@firebase/auth\";\nvar version = \"0.23.2\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass AuthInterop {\r\n    constructor(auth) {\r\n        this.auth = auth;\r\n        this.internalListeners = new Map();\r\n    }\r\n    getUid() {\r\n        var _a;\r\n        this.assertAuthConfigured();\r\n        return ((_a = this.auth.currentUser) === null || _a === void 0 ? void 0 : _a.uid) || null;\r\n    }\r\n    async getToken(forceRefresh) {\r\n        this.assertAuthConfigured();\r\n        await this.auth._initializationPromise;\r\n        if (!this.auth.currentUser) {\r\n            return null;\r\n        }\r\n        const accessToken = await this.auth.currentUser.getIdToken(forceRefresh);\r\n        return { accessToken };\r\n    }\r\n    addAuthTokenListener(listener) {\r\n        this.assertAuthConfigured();\r\n        if (this.internalListeners.has(listener)) {\r\n            return;\r\n        }\r\n        const unsubscribe = this.auth.onIdTokenChanged(user => {\r\n            listener((user === null || user === void 0 ? void 0 : user.stsTokenManager.accessToken) || null);\r\n        });\r\n        this.internalListeners.set(listener, unsubscribe);\r\n        this.updateProactiveRefresh();\r\n    }\r\n    removeAuthTokenListener(listener) {\r\n        this.assertAuthConfigured();\r\n        const unsubscribe = this.internalListeners.get(listener);\r\n        if (!unsubscribe) {\r\n            return;\r\n        }\r\n        this.internalListeners.delete(listener);\r\n        unsubscribe();\r\n        this.updateProactiveRefresh();\r\n    }\r\n    assertAuthConfigured() {\r\n        _assert(this.auth._initializationPromise, \"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */);\r\n    }\r\n    updateProactiveRefresh() {\r\n        if (this.internalListeners.size > 0) {\r\n            this.auth._startProactiveRefresh();\r\n        }\r\n        else {\r\n            this.auth._stopProactiveRefresh();\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getVersionForPlatform(clientPlatform) {\r\n    switch (clientPlatform) {\r\n        case \"Node\" /* ClientPlatform.NODE */:\r\n            return 'node';\r\n        case \"ReactNative\" /* ClientPlatform.REACT_NATIVE */:\r\n            return 'rn';\r\n        case \"Worker\" /* ClientPlatform.WORKER */:\r\n            return 'webworker';\r\n        case \"Cordova\" /* ClientPlatform.CORDOVA */:\r\n            return 'cordova';\r\n        default:\r\n            return undefined;\r\n    }\r\n}\r\n/** @internal */\r\nfunction registerAuth(clientPlatform) {\r\n    _registerComponent(new Component(\"auth\" /* _ComponentName.AUTH */, (container, { options: deps }) => {\r\n        const app = container.getProvider('app').getImmediate();\r\n        const heartbeatServiceProvider = container.getProvider('heartbeat');\r\n        const appCheckServiceProvider = container.getProvider('app-check-internal');\r\n        const { apiKey, authDomain } = app.options;\r\n        _assert(apiKey && !apiKey.includes(':'), \"invalid-api-key\" /* AuthErrorCode.INVALID_API_KEY */, { appName: app.name });\r\n        const config = {\r\n            apiKey,\r\n            authDomain,\r\n            clientPlatform,\r\n            apiHost: \"identitytoolkit.googleapis.com\" /* DefaultConfig.API_HOST */,\r\n            tokenApiHost: \"securetoken.googleapis.com\" /* DefaultConfig.TOKEN_API_HOST */,\r\n            apiScheme: \"https\" /* DefaultConfig.API_SCHEME */,\r\n            sdkClientVersion: _getClientVersion(clientPlatform)\r\n        };\r\n        const authInstance = new AuthImpl(app, heartbeatServiceProvider, appCheckServiceProvider, config);\r\n        _initializeAuthInstance(authInstance, deps);\r\n        return authInstance;\r\n    }, \"PUBLIC\" /* ComponentType.PUBLIC */)\r\n        /**\r\n         * Auth can only be initialized by explicitly calling getAuth() or initializeAuth()\r\n         * For why we do this, See go/firebase-next-auth-init\r\n         */\r\n        .setInstantiationMode(\"EXPLICIT\" /* InstantiationMode.EXPLICIT */)\r\n        /**\r\n         * Because all firebase products that depend on auth depend on auth-internal directly,\r\n         * we need to initialize auth-internal after auth is initialized to make it available to other firebase products.\r\n         */\r\n        .setInstanceCreatedCallback((container, _instanceIdentifier, _instance) => {\r\n        const authInternalProvider = container.getProvider(\"auth-internal\" /* _ComponentName.AUTH_INTERNAL */);\r\n        authInternalProvider.initialize();\r\n    }));\r\n    _registerComponent(new Component(\"auth-internal\" /* _ComponentName.AUTH_INTERNAL */, container => {\r\n        const auth = _castAuth(container.getProvider(\"auth\" /* _ComponentName.AUTH */).getImmediate());\r\n        return (auth => new AuthInterop(auth))(auth);\r\n    }, \"PRIVATE\" /* ComponentType.PRIVATE */).setInstantiationMode(\"EXPLICIT\" /* InstantiationMode.EXPLICIT */));\r\n    registerVersion(name, version, getVersionForPlatform(clientPlatform));\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_ID_TOKEN_MAX_AGE = 5 * 60;\r\nconst authIdTokenMaxAge = getExperimentalSetting('authIdTokenMaxAge') || DEFAULT_ID_TOKEN_MAX_AGE;\r\nlet lastPostedIdToken = null;\r\nconst mintCookieFactory = (url) => async (user) => {\r\n    const idTokenResult = user && (await user.getIdTokenResult());\r\n    const idTokenAge = idTokenResult &&\r\n        (new Date().getTime() - Date.parse(idTokenResult.issuedAtTime)) / 1000;\r\n    if (idTokenAge && idTokenAge > authIdTokenMaxAge) {\r\n        return;\r\n    }\r\n    // Specifically trip null => undefined when logged out, to delete any existing cookie\r\n    const idToken = idTokenResult === null || idTokenResult === void 0 ? void 0 : idTokenResult.token;\r\n    if (lastPostedIdToken === idToken) {\r\n        return;\r\n    }\r\n    lastPostedIdToken = idToken;\r\n    await fetch(url, {\r\n        method: idToken ? 'POST' : 'DELETE',\r\n        headers: idToken\r\n            ? {\r\n                'Authorization': `Bearer ${idToken}`\r\n            }\r\n            : {}\r\n    });\r\n};\r\n/**\r\n * Returns the Auth instance associated with the provided {@link @firebase/app#FirebaseApp}.\r\n * If no instance exists, initializes an Auth instance with platform-specific default dependencies.\r\n *\r\n * @param app - The Firebase App.\r\n *\r\n * @public\r\n */\r\nfunction getAuth(app = getApp()) {\r\n    const provider = _getProvider(app, 'auth');\r\n    if (provider.isInitialized()) {\r\n        return provider.getImmediate();\r\n    }\r\n    const auth = initializeAuth(app, {\r\n        popupRedirectResolver: browserPopupRedirectResolver,\r\n        persistence: [\r\n            indexedDBLocalPersistence,\r\n            browserLocalPersistence,\r\n            browserSessionPersistence\r\n        ]\r\n    });\r\n    const authTokenSyncUrl = getExperimentalSetting('authTokenSyncURL');\r\n    if (authTokenSyncUrl) {\r\n        const mintCookie = mintCookieFactory(authTokenSyncUrl);\r\n        beforeAuthStateChanged(auth, mintCookie, () => mintCookie(auth.currentUser));\r\n        onIdTokenChanged(auth, user => mintCookie(user));\r\n    }\r\n    const authEmulatorHost = getDefaultEmulatorHost('auth');\r\n    if (authEmulatorHost) {\r\n        connectAuthEmulator(auth, `http://${authEmulatorHost}`);\r\n    }\r\n    return auth;\r\n}\r\nregisterAuth(\"Browser\" /* ClientPlatform.BROWSER */);\n\nexport { signInWithCredential as $, ActionCodeOperation as A, signOut as B, deleteUser as C, debugErrorMap as D, prodErrorMap as E, FactorId as F, AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY as G, initializeAuth as H, connectAuthEmulator as I, AuthCredential as J, EmailAuthCredential as K, OAuthCredential as L, PhoneAuthCredential as M, inMemoryPersistence as N, OperationType as O, PhoneAuthProvider as P, EmailAuthProvider as Q, RecaptchaVerifier as R, SignInMethod as S, TotpMultiFactorGenerator as T, FacebookAuthProvider as U, GoogleAuthProvider as V, GithubAuthProvider as W, OAuthProvider as X, SAMLAuthProvider as Y, TwitterAuthProvider as Z, signInAnonymously as _, browserSessionPersistence as a, linkWithCredential as a0, reauthenticateWithCredential as a1, signInWithCustomToken as a2, sendPasswordResetEmail as a3, confirmPasswordReset as a4, applyActionCode as a5, checkActionCode as a6, verifyPasswordResetCode as a7, createUserWithEmailAndPassword as a8, signInWithEmailAndPassword as a9, _assert as aA, AuthEventManager as aB, _getInstance as aC, _persistenceKeyName as aD, _getRedirectResult as aE, _overrideRedirectResult as aF, _clearRedirectOutcomes as aG, _castAuth as aH, UserImpl as aI, AuthImpl as aJ, _getClientVersion as aK, _generateEventId as aL, AuthPopup as aM, FetchProvider as aN, SAMLAuthCredential as aO, sendSignInLinkToEmail as aa, isSignInWithEmailLink as ab, signInWithEmailLink as ac, fetchSignInMethodsForEmail as ad, sendEmailVerification as ae, verifyBeforeUpdateEmail as af, ActionCodeURL as ag, parseActionCodeURL as ah, updateProfile as ai, updateEmail as aj, updatePassword as ak, getIdToken as al, getIdTokenResult as am, unlink as an, getAdditionalUserInfo as ao, reload as ap, getMultiFactorResolver as aq, multiFactor as ar, debugAssert as as, _isIOS as at, _isAndroid as au, _fail as av, _getRedirectUrl as aw, _getProjectConfig as ax, _isIOS7Or8 as ay, _createError as az, browserLocalPersistence as b, signInWithPopup as c, linkWithPopup as d, reauthenticateWithPopup as e, signInWithRedirect as f, linkWithRedirect as g, reauthenticateWithRedirect as h, indexedDBLocalPersistence as i, getRedirectResult as j, browserPopupRedirectResolver as k, linkWithPhoneNumber as l, PhoneMultiFactorGenerator as m, TotpSecret as n, getAuth as o, ProviderId as p, setPersistence as q, reauthenticateWithPhoneNumber as r, signInWithPhoneNumber as s, initializeRecaptchaConfig as t, updatePhoneNumber as u, onIdTokenChanged as v, beforeAuthStateChanged as w, onAuthStateChanged as x, useDeviceLanguage as y, updateCurrentUser as z };\n//# sourceMappingURL=index-e3d5d3f4.js.map\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An enum of factors that may be used for multifactor authentication.\n *\n * @public\n */\nexport const FactorId = {\n  /** Phone as second factor */\n  PHONE: 'phone',\n  TOTP: 'totp'\n} as const;\n\n/**\n * Enumeration of supported providers.\n *\n * @public\n */\nexport const ProviderId = {\n  /** Facebook provider ID */\n  FACEBOOK: 'facebook.com',\n  /** GitHub provider ID */\n  GITHUB: 'github.com',\n  /** Google provider ID */\n  GOOGLE: 'google.com',\n  /** Password provider */\n  PASSWORD: 'password',\n  /** Phone provider */\n  PHONE: 'phone',\n  /** Twitter provider ID */\n  TWITTER: 'twitter.com'\n} as const;\n\n/**\n * Enumeration of supported sign-in methods.\n *\n * @public\n */\nexport const SignInMethod = {\n  /** Email link sign in method */\n  EMAIL_LINK: 'emailLink',\n  /** Email/password sign in method */\n  EMAIL_PASSWORD: 'password',\n  /** Facebook sign in method */\n  FACEBOOK: 'facebook.com',\n  /** GitHub sign in method */\n  GITHUB: 'github.com',\n  /** Google sign in method */\n  GOOGLE: 'google.com',\n  /** Phone sign in method */\n  PHONE: 'phone',\n  /** Twitter sign in method */\n  TWITTER: 'twitter.com'\n} as const;\n\n/**\n * Enumeration of supported operation types.\n *\n * @public\n */\nexport const OperationType = {\n  /** Operation involving linking an additional provider to an already signed-in user. */\n  LINK: 'link',\n  /** Operation involving using a provider to reauthenticate an already signed-in user. */\n  REAUTHENTICATE: 'reauthenticate',\n  /** Operation involving signing in a user. */\n  SIGN_IN: 'signIn'\n} as const;\n\n/**\n * An enumeration of the possible email action types.\n *\n * @public\n */\nexport const ActionCodeOperation = {\n  /** The email link sign-in action. */\n  EMAIL_SIGNIN: 'EMAIL_SIGNIN',\n  /** The password reset action. */\n  PASSWORD_RESET: 'PASSWORD_RESET',\n  /** The email revocation action. */\n  RECOVER_EMAIL: 'RECOVER_EMAIL',\n  /** The revert second factor addition email action. */\n  REVERT_SECOND_FACTOR_ADDITION: 'REVERT_SECOND_FACTOR_ADDITION',\n  /** The revert second factor addition email action. */\n  VERIFY_AND_CHANGE_EMAIL: 'VERIFY_AND_CHANGE_EMAIL',\n  /** The email verification action. */\n  VERIFY_EMAIL: 'VERIFY_EMAIL'\n} as const;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthErrorMap, User } from '../model/public_types';\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nimport { IdTokenMfaResponse } from '../api/authentication/mfa';\nimport { AppName } from '../model/auth';\nimport { AuthCredential } from './credentials';\n\n/**\n * Enumeration of Firebase Auth error codes.\n *\n * @internal\n */\nexport const enum AuthErrorCode {\n  ADMIN_ONLY_OPERATION = 'admin-restricted-operation',\n  ARGUMENT_ERROR = 'argument-error',\n  APP_NOT_AUTHORIZED = 'app-not-authorized',\n  APP_NOT_INSTALLED = 'app-not-installed',\n  CAPTCHA_CHECK_FAILED = 'captcha-check-failed',\n  CODE_EXPIRED = 'code-expired',\n  CORDOVA_NOT_READY = 'cordova-not-ready',\n  CORS_UNSUPPORTED = 'cors-unsupported',\n  CREDENTIAL_ALREADY_IN_USE = 'credential-already-in-use',\n  CREDENTIAL_MISMATCH = 'custom-token-mismatch',\n  CREDENTIAL_TOO_OLD_LOGIN_AGAIN = 'requires-recent-login',\n  DEPENDENT_SDK_INIT_BEFORE_AUTH = 'dependent-sdk-initialized-before-auth',\n  DYNAMIC_LINK_NOT_ACTIVATED = 'dynamic-link-not-activated',\n  EMAIL_CHANGE_NEEDS_VERIFICATION = 'email-change-needs-verification',\n  EMAIL_EXISTS = 'email-already-in-use',\n  EMULATOR_CONFIG_FAILED = 'emulator-config-failed',\n  EXPIRED_OOB_CODE = 'expired-action-code',\n  EXPIRED_POPUP_REQUEST = 'cancelled-popup-request',\n  INTERNAL_ERROR = 'internal-error',\n  INVALID_API_KEY = 'invalid-api-key',\n  INVALID_APP_CREDENTIAL = 'invalid-app-credential',\n  INVALID_APP_ID = 'invalid-app-id',\n  INVALID_AUTH = 'invalid-user-token',\n  INVALID_AUTH_EVENT = 'invalid-auth-event',\n  INVALID_CERT_HASH = 'invalid-cert-hash',\n  INVALID_CODE = 'invalid-verification-code',\n  INVALID_CONTINUE_URI = 'invalid-continue-uri',\n  INVALID_CORDOVA_CONFIGURATION = 'invalid-cordova-configuration',\n  INVALID_CUSTOM_TOKEN = 'invalid-custom-token',\n  INVALID_DYNAMIC_LINK_DOMAIN = 'invalid-dynamic-link-domain',\n  INVALID_EMAIL = 'invalid-email',\n  INVALID_EMULATOR_SCHEME = 'invalid-emulator-scheme',\n  INVALID_IDP_RESPONSE = 'invalid-credential',\n  INVALID_MESSAGE_PAYLOAD = 'invalid-message-payload',\n  INVALID_MFA_SESSION = 'invalid-multi-factor-session',\n  INVALID_OAUTH_CLIENT_ID = 'invalid-oauth-client-id',\n  INVALID_OAUTH_PROVIDER = 'invalid-oauth-provider',\n  INVALID_OOB_CODE = 'invalid-action-code',\n  INVALID_ORIGIN = 'unauthorized-domain',\n  INVALID_PASSWORD = 'wrong-password',\n  INVALID_PERSISTENCE = 'invalid-persistence-type',\n  INVALID_PHONE_NUMBER = 'invalid-phone-number',\n  INVALID_PROVIDER_ID = 'invalid-provider-id',\n  INVALID_RECIPIENT_EMAIL = 'invalid-recipient-email',\n  INVALID_SENDER = 'invalid-sender',\n  INVALID_SESSION_INFO = 'invalid-verification-id',\n  INVALID_TENANT_ID = 'invalid-tenant-id',\n  LOGIN_BLOCKED = 'login-blocked',\n  MFA_INFO_NOT_FOUND = 'multi-factor-info-not-found',\n  MFA_REQUIRED = 'multi-factor-auth-required',\n  MISSING_ANDROID_PACKAGE_NAME = 'missing-android-pkg-name',\n  MISSING_APP_CREDENTIAL = 'missing-app-credential',\n  MISSING_AUTH_DOMAIN = 'auth-domain-config-required',\n  MISSING_CODE = 'missing-verification-code',\n  MISSING_CONTINUE_URI = 'missing-continue-uri',\n  MISSING_IFRAME_START = 'missing-iframe-start',\n  MISSING_IOS_BUNDLE_ID = 'missing-ios-bundle-id',\n  MISSING_OR_INVALID_NONCE = 'missing-or-invalid-nonce',\n  MISSING_MFA_INFO = 'missing-multi-factor-info',\n  MISSING_MFA_SESSION = 'missing-multi-factor-session',\n  MISSING_PHONE_NUMBER = 'missing-phone-number',\n  MISSING_PASSWORD = 'missing-password',\n  MISSING_SESSION_INFO = 'missing-verification-id',\n  MODULE_DESTROYED = 'app-deleted',\n  NEED_CONFIRMATION = 'account-exists-with-different-credential',\n  NETWORK_REQUEST_FAILED = 'network-request-failed',\n  NULL_USER = 'null-user',\n  NO_AUTH_EVENT = 'no-auth-event',\n  NO_SUCH_PROVIDER = 'no-such-provider',\n  OPERATION_NOT_ALLOWED = 'operation-not-allowed',\n  OPERATION_NOT_SUPPORTED = 'operation-not-supported-in-this-environment',\n  POPUP_BLOCKED = 'popup-blocked',\n  POPUP_CLOSED_BY_USER = 'popup-closed-by-user',\n  PROVIDER_ALREADY_LINKED = 'provider-already-linked',\n  QUOTA_EXCEEDED = 'quota-exceeded',\n  REDIRECT_CANCELLED_BY_USER = 'redirect-cancelled-by-user',\n  REDIRECT_OPERATION_PENDING = 'redirect-operation-pending',\n  REJECTED_CREDENTIAL = 'rejected-credential',\n  SECOND_FACTOR_ALREADY_ENROLLED = 'second-factor-already-in-use',\n  SECOND_FACTOR_LIMIT_EXCEEDED = 'maximum-second-factor-count-exceeded',\n  TENANT_ID_MISMATCH = 'tenant-id-mismatch',\n  TIMEOUT = 'timeout',\n  TOKEN_EXPIRED = 'user-token-expired',\n  TOO_MANY_ATTEMPTS_TRY_LATER = 'too-many-requests',\n  UNAUTHORIZED_DOMAIN = 'unauthorized-continue-uri',\n  UNSUPPORTED_FIRST_FACTOR = 'unsupported-first-factor',\n  UNSUPPORTED_PERSISTENCE = 'unsupported-persistence-type',\n  UNSUPPORTED_TENANT_OPERATION = 'unsupported-tenant-operation',\n  UNVERIFIED_EMAIL = 'unverified-email',\n  USER_CANCELLED = 'user-cancelled',\n  USER_DELETED = 'user-not-found',\n  USER_DISABLED = 'user-disabled',\n  USER_MISMATCH = 'user-mismatch',\n  USER_SIGNED_OUT = 'user-signed-out',\n  WEAK_PASSWORD = 'weak-password',\n  WEB_STORAGE_UNSUPPORTED = 'web-storage-unsupported',\n  ALREADY_INITIALIZED = 'already-initialized',\n  RECAPTCHA_NOT_ENABLED = 'recaptcha-not-enabled',\n  MISSING_RECAPTCHA_TOKEN = 'missing-recaptcha-token',\n  INVALID_RECAPTCHA_TOKEN = 'invalid-recaptcha-token',\n  INVALID_RECAPTCHA_ACTION = 'invalid-recaptcha-action',\n  MISSING_CLIENT_TYPE = 'missing-client-type',\n  MISSING_RECAPTCHA_VERSION = 'missing-recaptcha-version',\n  INVALID_RECAPTCHA_VERSION = 'invalid-recaptcha-version',\n  INVALID_REQ_TYPE = 'invalid-req-type'\n}\n\nfunction _debugErrorMap(): ErrorMap<AuthErrorCode> {\n  return {\n    [AuthErrorCode.ADMIN_ONLY_OPERATION]:\n      'This operation is restricted to administrators only.',\n    [AuthErrorCode.ARGUMENT_ERROR]: '',\n    [AuthErrorCode.APP_NOT_AUTHORIZED]:\n      \"This app, identified by the domain where it's hosted, is not \" +\n      'authorized to use Firebase Authentication with the provided API key. ' +\n      'Review your key configuration in the Google API console.',\n    [AuthErrorCode.APP_NOT_INSTALLED]:\n      'The requested mobile application corresponding to the identifier (' +\n      'Android package name or iOS bundle ID) provided is not installed on ' +\n      'this device.',\n    [AuthErrorCode.CAPTCHA_CHECK_FAILED]:\n      'The reCAPTCHA response token provided is either invalid, expired, ' +\n      'already used or the domain associated with it does not match the list ' +\n      'of whitelisted domains.',\n    [AuthErrorCode.CODE_EXPIRED]:\n      'The SMS code has expired. Please re-send the verification code to try ' +\n      'again.',\n    [AuthErrorCode.CORDOVA_NOT_READY]: 'Cordova framework is not ready.',\n    [AuthErrorCode.CORS_UNSUPPORTED]: 'This browser is not supported.',\n    [AuthErrorCode.CREDENTIAL_ALREADY_IN_USE]:\n      'This credential is already associated with a different user account.',\n    [AuthErrorCode.CREDENTIAL_MISMATCH]:\n      'The custom token corresponds to a different audience.',\n    [AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN]:\n      'This operation is sensitive and requires recent authentication. Log in ' +\n      'again before retrying this request.',\n    [AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH]:\n      'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' +\n      'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' +\n      'starting any other Firebase SDK.',\n    [AuthErrorCode.DYNAMIC_LINK_NOT_ACTIVATED]:\n      'Please activate Dynamic Links in the Firebase Console and agree to the terms and ' +\n      'conditions.',\n    [AuthErrorCode.EMAIL_CHANGE_NEEDS_VERIFICATION]:\n      'Multi-factor users must always have a verified email.',\n    [AuthErrorCode.EMAIL_EXISTS]:\n      'The email address is already in use by another account.',\n    [AuthErrorCode.EMULATOR_CONFIG_FAILED]:\n      'Auth instance has already been used to make a network call. Auth can ' +\n      'no longer be configured to use the emulator. Try calling ' +\n      '\"connectAuthEmulator()\" sooner.',\n    [AuthErrorCode.EXPIRED_OOB_CODE]: 'The action code has expired.',\n    [AuthErrorCode.EXPIRED_POPUP_REQUEST]:\n      'This operation has been cancelled due to another conflicting popup being opened.',\n    [AuthErrorCode.INTERNAL_ERROR]: 'An internal AuthError has occurred.',\n    [AuthErrorCode.INVALID_APP_CREDENTIAL]:\n      'The phone verification request contains an invalid application verifier.' +\n      ' The reCAPTCHA token response is either invalid or expired.',\n    [AuthErrorCode.INVALID_APP_ID]:\n      'The mobile app identifier is not registed for the current project.',\n    [AuthErrorCode.INVALID_AUTH]:\n      \"This user's credential isn't valid for this project. This can happen \" +\n      \"if the user's token has been tampered with, or if the user isn't for \" +\n      'the project associated with this API key.',\n    [AuthErrorCode.INVALID_AUTH_EVENT]: 'An internal AuthError has occurred.',\n    [AuthErrorCode.INVALID_CODE]:\n      'The SMS verification code used to create the phone auth credential is ' +\n      'invalid. Please resend the verification code sms and be sure to use the ' +\n      'verification code provided by the user.',\n    [AuthErrorCode.INVALID_CONTINUE_URI]:\n      'The continue URL provided in the request is invalid.',\n    [AuthErrorCode.INVALID_CORDOVA_CONFIGURATION]:\n      'The following Cordova plugins must be installed to enable OAuth sign-in: ' +\n      'cordova-plugin-buildinfo, cordova-universal-links-plugin, ' +\n      'cordova-plugin-browsertab, cordova-plugin-inappbrowser and ' +\n      'cordova-plugin-customurlscheme.',\n    [AuthErrorCode.INVALID_CUSTOM_TOKEN]:\n      'The custom token format is incorrect. Please check the documentation.',\n    [AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN]:\n      'The provided dynamic link domain is not configured or authorized for the current project.',\n    [AuthErrorCode.INVALID_EMAIL]: 'The email address is badly formatted.',\n    [AuthErrorCode.INVALID_EMULATOR_SCHEME]:\n      'Emulator URL must start with a valid scheme (http:// or https://).',\n    [AuthErrorCode.INVALID_API_KEY]:\n      'Your API key is invalid, please check you have copied it correctly.',\n    [AuthErrorCode.INVALID_CERT_HASH]:\n      'The SHA-1 certificate hash provided is invalid.',\n    [AuthErrorCode.INVALID_IDP_RESPONSE]:\n      'The supplied auth credential is malformed or has expired.',\n    [AuthErrorCode.INVALID_MESSAGE_PAYLOAD]:\n      'The email template corresponding to this action contains invalid characters in its message. ' +\n      'Please fix by going to the Auth email templates section in the Firebase Console.',\n    [AuthErrorCode.INVALID_MFA_SESSION]:\n      'The request does not contain a valid proof of first factor successful sign-in.',\n    [AuthErrorCode.INVALID_OAUTH_PROVIDER]:\n      'EmailAuthProvider is not supported for this operation. This operation ' +\n      'only supports OAuth providers.',\n    [AuthErrorCode.INVALID_OAUTH_CLIENT_ID]:\n      'The OAuth client ID provided is either invalid or does not match the ' +\n      'specified API key.',\n    [AuthErrorCode.INVALID_ORIGIN]:\n      'This domain is not authorized for OAuth operations for your Firebase ' +\n      'project. Edit the list of authorized domains from the Firebase console.',\n    [AuthErrorCode.INVALID_OOB_CODE]:\n      'The action code is invalid. This can happen if the code is malformed, ' +\n      'expired, or has already been used.',\n    [AuthErrorCode.INVALID_PASSWORD]:\n      'The password is invalid or the user does not have a password.',\n    [AuthErrorCode.INVALID_PERSISTENCE]:\n      'The specified persistence type is invalid. It can only be local, session or none.',\n    [AuthErrorCode.INVALID_PHONE_NUMBER]:\n      'The format of the phone number provided is incorrect. Please enter the ' +\n      'phone number in a format that can be parsed into E.164 format. E.164 ' +\n      'phone numbers are written in the format [+][country code][subscriber ' +\n      'number including area code].',\n    [AuthErrorCode.INVALID_PROVIDER_ID]:\n      'The specified provider ID is invalid.',\n    [AuthErrorCode.INVALID_RECIPIENT_EMAIL]:\n      'The email corresponding to this action failed to send as the provided ' +\n      'recipient email address is invalid.',\n    [AuthErrorCode.INVALID_SENDER]:\n      'The email template corresponding to this action contains an invalid sender email or name. ' +\n      'Please fix by going to the Auth email templates section in the Firebase Console.',\n    [AuthErrorCode.INVALID_SESSION_INFO]:\n      'The verification ID used to create the phone auth credential is invalid.',\n    [AuthErrorCode.INVALID_TENANT_ID]:\n      \"The Auth instance's tenant ID is invalid.\",\n    [AuthErrorCode.LOGIN_BLOCKED]:\n      'Login blocked by user-provided method: {$originalMessage}',\n    [AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME]:\n      'An Android Package Name must be provided if the Android App is required to be installed.',\n    [AuthErrorCode.MISSING_AUTH_DOMAIN]:\n      'Be sure to include authDomain when calling firebase.initializeApp(), ' +\n      'by following the instructions in the Firebase console.',\n    [AuthErrorCode.MISSING_APP_CREDENTIAL]:\n      'The phone verification request is missing an application verifier ' +\n      'assertion. A reCAPTCHA response token needs to be provided.',\n    [AuthErrorCode.MISSING_CODE]:\n      'The phone auth credential was created with an empty SMS verification code.',\n    [AuthErrorCode.MISSING_CONTINUE_URI]:\n      'A continue URL must be provided in the request.',\n    [AuthErrorCode.MISSING_IFRAME_START]: 'An internal AuthError has occurred.',\n    [AuthErrorCode.MISSING_IOS_BUNDLE_ID]:\n      'An iOS Bundle ID must be provided if an App Store ID is provided.',\n    [AuthErrorCode.MISSING_OR_INVALID_NONCE]:\n      'The request does not contain a valid nonce. This can occur if the ' +\n      'SHA-256 hash of the provided raw nonce does not match the hashed nonce ' +\n      'in the ID token payload.',\n    [AuthErrorCode.MISSING_PASSWORD]: 'A non-empty password must be provided',\n    [AuthErrorCode.MISSING_MFA_INFO]:\n      'No second factor identifier is provided.',\n    [AuthErrorCode.MISSING_MFA_SESSION]:\n      'The request is missing proof of first factor successful sign-in.',\n    [AuthErrorCode.MISSING_PHONE_NUMBER]:\n      'To send verification codes, provide a phone number for the recipient.',\n    [AuthErrorCode.MISSING_SESSION_INFO]:\n      'The phone auth credential was created with an empty verification ID.',\n    [AuthErrorCode.MODULE_DESTROYED]:\n      'This instance of FirebaseApp has been deleted.',\n    [AuthErrorCode.MFA_INFO_NOT_FOUND]:\n      'The user does not have a second factor matching the identifier provided.',\n    [AuthErrorCode.MFA_REQUIRED]:\n      'Proof of ownership of a second factor is required to complete sign-in.',\n    [AuthErrorCode.NEED_CONFIRMATION]:\n      'An account already exists with the same email address but different ' +\n      'sign-in credentials. Sign in using a provider associated with this ' +\n      'email address.',\n    [AuthErrorCode.NETWORK_REQUEST_FAILED]:\n      'A network AuthError (such as timeout, interrupted connection or unreachable host) has occurred.',\n    [AuthErrorCode.NO_AUTH_EVENT]: 'An internal AuthError has occurred.',\n    [AuthErrorCode.NO_SUCH_PROVIDER]:\n      'User was not linked to an account with the given provider.',\n    [AuthErrorCode.NULL_USER]:\n      'A null user object was provided as the argument for an operation which ' +\n      'requires a non-null user object.',\n    [AuthErrorCode.OPERATION_NOT_ALLOWED]:\n      'The given sign-in provider is disabled for this Firebase project. ' +\n      'Enable it in the Firebase console, under the sign-in method tab of the ' +\n      'Auth section.',\n    [AuthErrorCode.OPERATION_NOT_SUPPORTED]:\n      'This operation is not supported in the environment this application is ' +\n      'running on. \"location.protocol\" must be http, https or chrome-extension' +\n      ' and web storage must be enabled.',\n    [AuthErrorCode.POPUP_BLOCKED]:\n      'Unable to establish a connection with the popup. It may have been blocked by the browser.',\n    [AuthErrorCode.POPUP_CLOSED_BY_USER]:\n      'The popup has been closed by the user before finalizing the operation.',\n    [AuthErrorCode.PROVIDER_ALREADY_LINKED]:\n      'User can only be linked to one identity for the given provider.',\n    [AuthErrorCode.QUOTA_EXCEEDED]:\n      \"The project's quota for this operation has been exceeded.\",\n    [AuthErrorCode.REDIRECT_CANCELLED_BY_USER]:\n      'The redirect operation has been cancelled by the user before finalizing.',\n    [AuthErrorCode.REDIRECT_OPERATION_PENDING]:\n      'A redirect sign-in operation is already pending.',\n    [AuthErrorCode.REJECTED_CREDENTIAL]:\n      'The request contains malformed or mismatching credentials.',\n    [AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED]:\n      'The second factor is already enrolled on this account.',\n    [AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED]:\n      'The maximum allowed number of second factors on a user has been exceeded.',\n    [AuthErrorCode.TENANT_ID_MISMATCH]:\n      \"The provided tenant ID does not match the Auth instance's tenant ID\",\n    [AuthErrorCode.TIMEOUT]: 'The operation has timed out.',\n    [AuthErrorCode.TOKEN_EXPIRED]:\n      \"The user's credential is no longer valid. The user must sign in again.\",\n    [AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER]:\n      'We have blocked all requests from this device due to unusual activity. ' +\n      'Try again later.',\n    [AuthErrorCode.UNAUTHORIZED_DOMAIN]:\n      'The domain of the continue URL is not whitelisted.  Please whitelist ' +\n      'the domain in the Firebase console.',\n    [AuthErrorCode.UNSUPPORTED_FIRST_FACTOR]:\n      'Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.',\n    [AuthErrorCode.UNSUPPORTED_PERSISTENCE]:\n      'The current environment does not support the specified persistence type.',\n    [AuthErrorCode.UNSUPPORTED_TENANT_OPERATION]:\n      'This operation is not supported in a multi-tenant context.',\n    [AuthErrorCode.UNVERIFIED_EMAIL]:\n      'The operation requires a verified email.',\n    [AuthErrorCode.USER_CANCELLED]:\n      'The user did not grant your application the permissions it requested.',\n    [AuthErrorCode.USER_DELETED]:\n      'There is no user record corresponding to this identifier. The user may ' +\n      'have been deleted.',\n    [AuthErrorCode.USER_DISABLED]:\n      'The user account has been disabled by an administrator.',\n    [AuthErrorCode.USER_MISMATCH]:\n      'The supplied credentials do not correspond to the previously signed in user.',\n    [AuthErrorCode.USER_SIGNED_OUT]: '',\n    [AuthErrorCode.WEAK_PASSWORD]:\n      'The password must be 6 characters long or more.',\n    [AuthErrorCode.WEB_STORAGE_UNSUPPORTED]:\n      'This browser is not supported or 3rd party cookies and data may be disabled.',\n    [AuthErrorCode.ALREADY_INITIALIZED]:\n      'initializeAuth() has already been called with ' +\n      'different options. To avoid this error, call initializeAuth() with the ' +\n      'same options as when it was originally called, or call getAuth() to return the' +\n      ' already initialized instance.',\n    [AuthErrorCode.MISSING_RECAPTCHA_TOKEN]:\n      'The reCAPTCHA token is missing when sending request to the backend.',\n    [AuthErrorCode.INVALID_RECAPTCHA_TOKEN]:\n      'The reCAPTCHA token is invalid when sending request to the backend.',\n    [AuthErrorCode.INVALID_RECAPTCHA_ACTION]:\n      'The reCAPTCHA action is invalid when sending request to the backend.',\n    [AuthErrorCode.RECAPTCHA_NOT_ENABLED]:\n      'reCAPTCHA Enterprise integration is not enabled for this project.',\n    [AuthErrorCode.MISSING_CLIENT_TYPE]:\n      'The reCAPTCHA client type is missing when sending request to the backend.',\n    [AuthErrorCode.MISSING_RECAPTCHA_VERSION]:\n      'The reCAPTCHA version is missing when sending request to the backend.',\n    [AuthErrorCode.INVALID_REQ_TYPE]: 'Invalid request parameters.',\n    [AuthErrorCode.INVALID_RECAPTCHA_VERSION]:\n      'The reCAPTCHA version is invalid when sending request to the backend.'\n  };\n}\n\nexport interface ErrorMapRetriever extends AuthErrorMap {\n  (): ErrorMap<AuthErrorCode>;\n}\n\nfunction _prodErrorMap(): ErrorMap<AuthErrorCode> {\n  // We will include this one message in the prod error map since by the very\n  // nature of this error, developers will never be able to see the message\n  // using the debugErrorMap (which is installed during auth initialization).\n  return {\n    [AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH]:\n      'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' +\n      'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' +\n      'starting any other Firebase SDK.'\n  } as ErrorMap<AuthErrorCode>;\n}\n\n/**\n * A verbose error map with detailed descriptions for most error codes.\n *\n * See discussion at {@link AuthErrorMap}\n *\n * @public\n */\nexport const debugErrorMap: AuthErrorMap = _debugErrorMap;\n\n/**\n * A minimal error map with all verbose error messages stripped.\n *\n * See discussion at {@link AuthErrorMap}\n *\n * @public\n */\nexport const prodErrorMap: AuthErrorMap = _prodErrorMap;\n\nexport interface NamedErrorParams {\n  appName: AppName;\n  credential?: AuthCredential;\n  email?: string;\n  phoneNumber?: string;\n  tenantId?: string;\n  user?: User;\n  _serverResponse?: object;\n}\n\n/**\n * @internal\n */\ntype GenericAuthErrorParams = {\n  [key in Exclude<\n    AuthErrorCode,\n    | AuthErrorCode.ARGUMENT_ERROR\n    | AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH\n    | AuthErrorCode.INTERNAL_ERROR\n    | AuthErrorCode.MFA_REQUIRED\n    | AuthErrorCode.NO_AUTH_EVENT\n    | AuthErrorCode.OPERATION_NOT_SUPPORTED\n  >]: {\n    appName?: AppName;\n    email?: string;\n    phoneNumber?: string;\n    message?: string;\n  };\n};\n\n/**\n * @internal\n */\nexport interface AuthErrorParams extends GenericAuthErrorParams {\n  [AuthErrorCode.ARGUMENT_ERROR]: { appName?: AppName };\n  [AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH]: { appName?: AppName };\n  [AuthErrorCode.INTERNAL_ERROR]: { appName?: AppName };\n  [AuthErrorCode.LOGIN_BLOCKED]: {\n    appName?: AppName;\n    originalMessage?: string;\n  };\n  [AuthErrorCode.OPERATION_NOT_SUPPORTED]: { appName?: AppName };\n  [AuthErrorCode.NO_AUTH_EVENT]: { appName?: AppName };\n  [AuthErrorCode.MFA_REQUIRED]: {\n    appName: AppName;\n    _serverResponse: IdTokenMfaResponse;\n  };\n  [AuthErrorCode.INVALID_CORDOVA_CONFIGURATION]: {\n    appName: AppName;\n    missingPlugin?: string;\n  };\n}\n\nexport const _DEFAULT_AUTH_ERROR_FACTORY = new ErrorFactory<\n  AuthErrorCode,\n  AuthErrorParams\n>('auth', 'Firebase', _prodErrorMap());\n\n/**\n * A map of potential `Auth` error codes, for easier comparison with errors\n * thrown by the SDK.\n *\n * @remarks\n * Note that you can't tree-shake individual keys\n * in the map, so by using the map you might substantially increase your\n * bundle size.\n *\n * @public\n */\nexport const AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY = {\n  ADMIN_ONLY_OPERATION: 'auth/admin-restricted-operation',\n  ARGUMENT_ERROR: 'auth/argument-error',\n  APP_NOT_AUTHORIZED: 'auth/app-not-authorized',\n  APP_NOT_INSTALLED: 'auth/app-not-installed',\n  CAPTCHA_CHECK_FAILED: 'auth/captcha-check-failed',\n  CODE_EXPIRED: 'auth/code-expired',\n  CORDOVA_NOT_READY: 'auth/cordova-not-ready',\n  CORS_UNSUPPORTED: 'auth/cors-unsupported',\n  CREDENTIAL_ALREADY_IN_USE: 'auth/credential-already-in-use',\n  CREDENTIAL_MISMATCH: 'auth/custom-token-mismatch',\n  CREDENTIAL_TOO_OLD_LOGIN_AGAIN: 'auth/requires-recent-login',\n  DEPENDENT_SDK_INIT_BEFORE_AUTH: 'auth/dependent-sdk-initialized-before-auth',\n  DYNAMIC_LINK_NOT_ACTIVATED: 'auth/dynamic-link-not-activated',\n  EMAIL_CHANGE_NEEDS_VERIFICATION: 'auth/email-change-needs-verification',\n  EMAIL_EXISTS: 'auth/email-already-in-use',\n  EMULATOR_CONFIG_FAILED: 'auth/emulator-config-failed',\n  EXPIRED_OOB_CODE: 'auth/expired-action-code',\n  EXPIRED_POPUP_REQUEST: 'auth/cancelled-popup-request',\n  INTERNAL_ERROR: 'auth/internal-error',\n  INVALID_API_KEY: 'auth/invalid-api-key',\n  INVALID_APP_CREDENTIAL: 'auth/invalid-app-credential',\n  INVALID_APP_ID: 'auth/invalid-app-id',\n  INVALID_AUTH: 'auth/invalid-user-token',\n  INVALID_AUTH_EVENT: 'auth/invalid-auth-event',\n  INVALID_CERT_HASH: 'auth/invalid-cert-hash',\n  INVALID_CODE: 'auth/invalid-verification-code',\n  INVALID_CONTINUE_URI: 'auth/invalid-continue-uri',\n  INVALID_CORDOVA_CONFIGURATION: 'auth/invalid-cordova-configuration',\n  INVALID_CUSTOM_TOKEN: 'auth/invalid-custom-token',\n  INVALID_DYNAMIC_LINK_DOMAIN: 'auth/invalid-dynamic-link-domain',\n  INVALID_EMAIL: 'auth/invalid-email',\n  INVALID_EMULATOR_SCHEME: 'auth/invalid-emulator-scheme',\n  INVALID_IDP_RESPONSE: 'auth/invalid-credential',\n  INVALID_MESSAGE_PAYLOAD: 'auth/invalid-message-payload',\n  INVALID_MFA_SESSION: 'auth/invalid-multi-factor-session',\n  INVALID_OAUTH_CLIENT_ID: 'auth/invalid-oauth-client-id',\n  INVALID_OAUTH_PROVIDER: 'auth/invalid-oauth-provider',\n  INVALID_OOB_CODE: 'auth/invalid-action-code',\n  INVALID_ORIGIN: 'auth/unauthorized-domain',\n  INVALID_PASSWORD: 'auth/wrong-password',\n  INVALID_PERSISTENCE: 'auth/invalid-persistence-type',\n  INVALID_PHONE_NUMBER: 'auth/invalid-phone-number',\n  INVALID_PROVIDER_ID: 'auth/invalid-provider-id',\n  INVALID_RECIPIENT_EMAIL: 'auth/invalid-recipient-email',\n  INVALID_SENDER: 'auth/invalid-sender',\n  INVALID_SESSION_INFO: 'auth/invalid-verification-id',\n  INVALID_TENANT_ID: 'auth/invalid-tenant-id',\n  MFA_INFO_NOT_FOUND: 'auth/multi-factor-info-not-found',\n  MFA_REQUIRED: 'auth/multi-factor-auth-required',\n  MISSING_ANDROID_PACKAGE_NAME: 'auth/missing-android-pkg-name',\n  MISSING_APP_CREDENTIAL: 'auth/missing-app-credential',\n  MISSING_AUTH_DOMAIN: 'auth/auth-domain-config-required',\n  MISSING_CODE: 'auth/missing-verification-code',\n  MISSING_CONTINUE_URI: 'auth/missing-continue-uri',\n  MISSING_IFRAME_START: 'auth/missing-iframe-start',\n  MISSING_IOS_BUNDLE_ID: 'auth/missing-ios-bundle-id',\n  MISSING_OR_INVALID_NONCE: 'auth/missing-or-invalid-nonce',\n  MISSING_MFA_INFO: 'auth/missing-multi-factor-info',\n  MISSING_MFA_SESSION: 'auth/missing-multi-factor-session',\n  MISSING_PHONE_NUMBER: 'auth/missing-phone-number',\n  MISSING_SESSION_INFO: 'auth/missing-verification-id',\n  MODULE_DESTROYED: 'auth/app-deleted',\n  NEED_CONFIRMATION: 'auth/account-exists-with-different-credential',\n  NETWORK_REQUEST_FAILED: 'auth/network-request-failed',\n  NULL_USER: 'auth/null-user',\n  NO_AUTH_EVENT: 'auth/no-auth-event',\n  NO_SUCH_PROVIDER: 'auth/no-such-provider',\n  OPERATION_NOT_ALLOWED: 'auth/operation-not-allowed',\n  OPERATION_NOT_SUPPORTED: 'auth/operation-not-supported-in-this-environment',\n  POPUP_BLOCKED: 'auth/popup-blocked',\n  POPUP_CLOSED_BY_USER: 'auth/popup-closed-by-user',\n  PROVIDER_ALREADY_LINKED: 'auth/provider-already-linked',\n  QUOTA_EXCEEDED: 'auth/quota-exceeded',\n  REDIRECT_CANCELLED_BY_USER: 'auth/redirect-cancelled-by-user',\n  REDIRECT_OPERATION_PENDING: 'auth/redirect-operation-pending',\n  REJECTED_CREDENTIAL: 'auth/rejected-credential',\n  SECOND_FACTOR_ALREADY_ENROLLED: 'auth/second-factor-already-in-use',\n  SECOND_FACTOR_LIMIT_EXCEEDED: 'auth/maximum-second-factor-count-exceeded',\n  TENANT_ID_MISMATCH: 'auth/tenant-id-mismatch',\n  TIMEOUT: 'auth/timeout',\n  TOKEN_EXPIRED: 'auth/user-token-expired',\n  TOO_MANY_ATTEMPTS_TRY_LATER: 'auth/too-many-requests',\n  UNAUTHORIZED_DOMAIN: 'auth/unauthorized-continue-uri',\n  UNSUPPORTED_FIRST_FACTOR: 'auth/unsupported-first-factor',\n  UNSUPPORTED_PERSISTENCE: 'auth/unsupported-persistence-type',\n  UNSUPPORTED_TENANT_OPERATION: 'auth/unsupported-tenant-operation',\n  UNVERIFIED_EMAIL: 'auth/unverified-email',\n  USER_CANCELLED: 'auth/user-cancelled',\n  USER_DELETED: 'auth/user-not-found',\n  USER_DISABLED: 'auth/user-disabled',\n  USER_MISMATCH: 'auth/user-mismatch',\n  USER_SIGNED_OUT: 'auth/user-signed-out',\n  WEAK_PASSWORD: 'auth/weak-password',\n  WEB_STORAGE_UNSUPPORTED: 'auth/web-storage-unsupported',\n  ALREADY_INITIALIZED: 'auth/already-initialized',\n  RECAPTCHA_NOT_ENABLED: 'auth/recaptcha-not-enabled',\n  MISSING_RECAPTCHA_TOKEN: 'auth/missing-recaptcha-token',\n  INVALID_RECAPTCHA_TOKEN: 'auth/invalid-recaptcha-token',\n  INVALID_RECAPTCHA_ACTION: 'auth/invalid-recaptcha-action',\n  MISSING_CLIENT_TYPE: 'auth/missing-client-type',\n  MISSING_RECAPTCHA_VERSION: 'auth/missing-recaptcha-version',\n  INVALID_RECAPTCHA_VERSION: 'auth/invalid-recaptcha-version',\n  INVALID_REQ_TYPE: 'auth/invalid-req-type'\n} as const;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { SDK_VERSION } from '@firebase/app';\n\nexport { LogLevel };\n\nconst logClient = new Logger('@firebase/auth');\n\n// Helper methods are needed because variables can't be exported as read/write\nexport function _getLogLevel(): LogLevel {\n  return logClient.logLevel;\n}\n\nexport function _setLogLevel(newLevel: LogLevel): void {\n  logClient.logLevel = newLevel;\n}\n\nexport function _logDebug(msg: string, ...args: string[]): void {\n  if (logClient.logLevel <= LogLevel.DEBUG) {\n    logClient.debug(`Auth (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n\nexport function _logWarn(msg: string, ...args: string[]): void {\n  if (logClient.logLevel <= LogLevel.WARN) {\n    logClient.warn(`Auth (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n\nexport function _logError(msg: string, ...args: string[]): void {\n  if (logClient.logLevel <= LogLevel.ERROR) {\n    logClient.error(`Auth (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Auth } from '../../model/public_types';\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { AuthInternal } from '../../model/auth';\nimport {\n  _DEFAULT_AUTH_ERROR_FACTORY,\n  AuthErrorCode,\n  AuthErrorParams,\n  prodErrorMap,\n  ErrorMapRetriever\n} from '../errors';\nimport { _logError } from './log';\n\ntype AuthErrorListParams<K> = K extends keyof AuthErrorParams\n  ? [AuthErrorParams[K]]\n  : [];\ntype LessAppName<K extends AuthErrorCode> = Omit<AuthErrorParams[K], 'appName'>;\n\n/**\n * Unconditionally fails, throwing a developer facing INTERNAL_ERROR\n *\n * @example\n * ```javascript\n * fail(auth, AuthErrorCode.MFA_REQUIRED);  // Error: the MFA_REQUIRED error needs more params than appName\n * fail(auth, AuthErrorCode.MFA_REQUIRED, {serverResponse});  // Compiles\n * fail(AuthErrorCode.INTERNAL_ERROR);  // Compiles; internal error does not need appName\n * fail(AuthErrorCode.USER_DELETED);  // Error: USER_DELETED requires app name\n * fail(auth, AuthErrorCode.USER_DELETED);  // Compiles; USER_DELETED _only_ needs app name\n * ```\n *\n * @param appName App name for tagging the error\n * @throws FirebaseError\n */\nexport function _fail<K extends AuthErrorCode>(\n  code: K,\n  ...data: {} extends AuthErrorParams[K]\n    ? [AuthErrorParams[K]?]\n    : [AuthErrorParams[K]]\n): never;\nexport function _fail<K extends AuthErrorCode>(\n  auth: Auth,\n  code: K,\n  ...data: {} extends LessAppName<K> ? [LessAppName<K>?] : [LessAppName<K>]\n): never;\nexport function _fail<K extends AuthErrorCode>(\n  authOrCode: Auth | K,\n  ...rest: unknown[]\n): never {\n  throw createErrorInternal(authOrCode, ...rest);\n}\n\nexport function _createError<K extends AuthErrorCode>(\n  code: K,\n  ...data: {} extends AuthErrorParams[K]\n    ? [AuthErrorParams[K]?]\n    : [AuthErrorParams[K]]\n): FirebaseError;\nexport function _createError<K extends AuthErrorCode>(\n  auth: Auth,\n  code: K,\n  ...data: {} extends LessAppName<K> ? [LessAppName<K>?] : [LessAppName<K>]\n): FirebaseError;\nexport function _createError<K extends AuthErrorCode>(\n  authOrCode: Auth | K,\n  ...rest: unknown[]\n): FirebaseError {\n  return createErrorInternal(authOrCode, ...rest);\n}\n\nexport function _errorWithCustomMessage(\n  auth: Auth,\n  code: AuthErrorCode,\n  message: string\n): FirebaseError {\n  const errorMap = {\n    ...(prodErrorMap as ErrorMapRetriever)(),\n    [code]: message\n  };\n  const factory = new ErrorFactory<AuthErrorCode, AuthErrorParams>(\n    'auth',\n    'Firebase',\n    errorMap\n  );\n  return factory.create(code, {\n    appName: auth.name\n  });\n}\n\nexport function _assertInstanceOf(\n  auth: Auth,\n  object: object,\n  instance: unknown\n): void {\n  const constructorInstance = instance as { new (...args: unknown[]): unknown };\n  if (!(object instanceof constructorInstance)) {\n    if (constructorInstance.name !== object.constructor.name) {\n      _fail(auth, AuthErrorCode.ARGUMENT_ERROR);\n    }\n\n    throw _errorWithCustomMessage(\n      auth,\n      AuthErrorCode.ARGUMENT_ERROR,\n      `Type of ${object.constructor.name} does not match expected instance.` +\n        `Did you pass a reference from a different Auth SDK?`\n    );\n  }\n}\n\nfunction createErrorInternal<K extends AuthErrorCode>(\n  authOrCode: Auth | K,\n  ...rest: unknown[]\n): FirebaseError {\n  if (typeof authOrCode !== 'string') {\n    const code = rest[0] as K;\n    const fullParams = [...rest.slice(1)] as AuthErrorListParams<K>;\n    if (fullParams[0]) {\n      fullParams[0].appName = authOrCode.name;\n    }\n\n    return (authOrCode as AuthInternal)._errorFactory.create(\n      code,\n      ...fullParams\n    );\n  }\n\n  return _DEFAULT_AUTH_ERROR_FACTORY.create(\n    authOrCode,\n    ...(rest as AuthErrorListParams<K>)\n  );\n}\n\nexport function _assert<K extends AuthErrorCode>(\n  assertion: unknown,\n  code: K,\n  ...data: {} extends AuthErrorParams[K]\n    ? [AuthErrorParams[K]?]\n    : [AuthErrorParams[K]]\n): asserts assertion;\nexport function _assert<K extends AuthErrorCode>(\n  assertion: unknown,\n  auth: Auth,\n  code: K,\n  ...data: {} extends LessAppName<K> ? [LessAppName<K>?] : [LessAppName<K>]\n): asserts assertion;\nexport function _assert<K extends AuthErrorCode>(\n  assertion: unknown,\n  authOrCode: Auth | K,\n  ...rest: unknown[]\n): asserts assertion {\n  if (!assertion) {\n    throw createErrorInternal(authOrCode, ...rest);\n  }\n}\n\n// We really do want to accept literally any function type here\n// eslint-disable-next-line @typescript-eslint/ban-types\ntype TypeExpectation = Function | string | MapType;\n\ninterface MapType extends Record<string, TypeExpectation | Optional> {}\n\nclass Optional {\n  constructor(readonly type: TypeExpectation) {}\n}\n\nexport function opt(type: TypeExpectation): Optional {\n  return new Optional(type);\n}\n\n/**\n * Asserts the runtime types of arguments. The 'expected' field can be one of\n * a class, a string (representing a \"typeof\" call), or a record map of name\n * to type. Furthermore, the opt() function can be used to mark a field as\n * optional. For example:\n *\n * function foo(auth: Auth, profile: {displayName?: string}, update = false) {\n *   assertTypes(arguments, [AuthImpl, {displayName: opt('string')}, opt('boolean')]);\n * }\n *\n * opt() can be used for any type:\n * function foo(auth?: Auth) {\n *   assertTypes(arguments, [opt(AuthImpl)]);\n * }\n *\n * The string types can be or'd together, and you can use \"null\" as well (note\n * that typeof null === 'object'; this is an edge case). For example:\n *\n * function foo(profile: {displayName?: string | null}) {\n *   assertTypes(arguments, [{displayName: opt('string|null')}]);\n * }\n *\n * @param args\n * @param expected\n */\nexport function assertTypes(\n  args: Omit<IArguments, 'callee'>,\n  ...expected: Array<TypeExpectation | Optional>\n): void {\n  if (args.length > expected.length) {\n    _fail(AuthErrorCode.ARGUMENT_ERROR, {});\n  }\n\n  for (let i = 0; i < expected.length; i++) {\n    let expect = expected[i];\n    const arg = args[i];\n\n    if (expect instanceof Optional) {\n      // If the arg is undefined, then it matches \"optional\" and we can move to\n      // the next arg\n      if (typeof arg === 'undefined') {\n        continue;\n      }\n      expect = expect.type;\n    }\n\n    if (typeof expect === 'string') {\n      // Handle the edge case for null because typeof null === 'object'\n      if (expect.includes('null') && arg === null) {\n        continue;\n      }\n\n      const required = expect.split('|');\n      _assert(required.includes(typeof arg), AuthErrorCode.ARGUMENT_ERROR, {});\n    } else if (typeof expect === 'object') {\n      // Recursively check record arguments\n      const record = arg as Record<string, unknown>;\n      const map = expect as MapType;\n      const keys = Object.keys(expect);\n\n      assertTypes(\n        keys.map(k => record[k]),\n        ...keys.map(k => map[k])\n      );\n    } else {\n      _assert(arg instanceof expect, AuthErrorCode.ARGUMENT_ERROR, {});\n    }\n  }\n}\n\n/**\n * Unconditionally fails, throwing an internal error with the given message.\n *\n * @param failure type of failure encountered\n * @throws Error\n */\nexport function debugFail(failure: string): never {\n  // Log the failure in addition to throw an exception, just in case the\n  // exception is swallowed.\n  const message = `INTERNAL ASSERTION FAILED: ` + failure;\n  _logError(message);\n\n  // NOTE: We don't use FirebaseError here because these are internal failures\n  // that cannot be handled by the user. (Also it would create a circular\n  // dependency between the error and assert modules which doesn't work.)\n  throw new Error(message);\n}\n\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * @param assertion\n * @param message\n */\nexport function debugAssert(\n  assertion: unknown,\n  message: string\n): asserts assertion {\n  if (!assertion) {\n    debugFail(message);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function _getCurrentUrl(): string {\n  return (typeof self !== 'undefined' && self.location?.href) || '';\n}\n\nexport function _isHttpOrHttps(): boolean {\n  return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';\n}\n\nexport function _getCurrentScheme(): string | null {\n  return (typeof self !== 'undefined' && self.location?.protocol) || null;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isBrowserExtension } from '@firebase/util';\nimport { _isHttpOrHttps } from './location';\n\n/**\n * Determine whether the browser is working online\n */\nexport function _isOnline(): boolean {\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator &&\n    'onLine' in navigator &&\n    typeof navigator.onLine === 'boolean' &&\n    // Apply only for traditional web apps and Chrome extensions.\n    // This is especially true for Cordova apps which have unreliable\n    // navigator.onLine behavior unless cordova-plugin-network-information is\n    // installed which overwrites the native navigator.onLine value and\n    // defines navigator.connection.\n    (_isHttpOrHttps() || isBrowserExtension() || 'connection' in navigator)\n  ) {\n    return navigator.onLine;\n  }\n  // If we can't determine the state, assume it is online.\n  return true;\n}\n\nexport function _getUserLanguage(): string | null {\n  if (typeof navigator === 'undefined') {\n    return null;\n  }\n  const navigatorLanguage: NavigatorLanguage = navigator;\n  return (\n    // Most reliable, but only supported in Chrome/Firefox.\n    (navigatorLanguage.languages && navigatorLanguage.languages[0]) ||\n    // Supported in most browsers, but returns the language of the browser\n    // UI, not the language set in browser settings.\n    navigatorLanguage.language ||\n    // Couldn't determine language.\n    null\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isMobileCordova, isReactNative } from '@firebase/util';\nimport { _isOnline } from './navigator';\nimport { debugAssert } from './assert';\n\nexport const enum DelayMin {\n  OFFLINE = 5000\n}\n\n/**\n * A structure to help pick between a range of long and short delay durations\n * depending on the current environment. In general, the long delay is used for\n * mobile environments whereas short delays are used for desktop environments.\n */\nexport class Delay {\n  // The default value for the offline delay timeout in ms.\n\n  private readonly isMobile: boolean;\n  constructor(\n    private readonly shortDelay: number,\n    private readonly longDelay: number\n  ) {\n    // Internal error when improperly initialized.\n    debugAssert(\n      longDelay > shortDelay,\n      'Short delay should be less than long delay!'\n    );\n    this.isMobile = isMobileCordova() || isReactNative();\n  }\n\n  get(): number {\n    if (!_isOnline()) {\n      // Pick the shorter timeout.\n      return Math.min(DelayMin.OFFLINE, this.shortDelay);\n    }\n    // If running in a mobile environment, return the long delay, otherwise\n    // return the short delay.\n    // This could be improved in the future to dynamically change based on other\n    // variables instead of just reading the current environment.\n    return this.isMobile ? this.longDelay : this.shortDelay;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ConfigInternal } from '../../model/auth';\nimport { debugAssert } from './assert';\n\nexport function _emulatorUrl(config: ConfigInternal, path?: string): string {\n  debugAssert(config.emulator, 'Emulator should always be set here');\n  const { url } = config.emulator;\n\n  if (!path) {\n    return url;\n  }\n\n  return `${url}${path.startsWith('/') ? path.slice(1) : path}`;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugFail } from './assert';\n\nexport class FetchProvider {\n  private static fetchImpl: typeof fetch | null;\n  private static headersImpl: typeof Headers | null;\n  private static responseImpl: typeof Response | null;\n\n  static initialize(\n    fetchImpl: typeof fetch,\n    headersImpl?: typeof Headers,\n    responseImpl?: typeof Response\n  ): void {\n    this.fetchImpl = fetchImpl;\n    if (headersImpl) {\n      this.headersImpl = headersImpl;\n    }\n    if (responseImpl) {\n      this.responseImpl = responseImpl;\n    }\n  }\n\n  static fetch(): typeof fetch {\n    if (this.fetchImpl) {\n      return this.fetchImpl;\n    }\n    if (typeof self !== 'undefined' && 'fetch' in self) {\n      return self.fetch;\n    }\n    debugFail(\n      'Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill'\n    );\n  }\n\n  static headers(): typeof Headers {\n    if (this.headersImpl) {\n      return this.headersImpl;\n    }\n    if (typeof self !== 'undefined' && 'Headers' in self) {\n      return self.Headers;\n    }\n    debugFail(\n      'Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill'\n    );\n  }\n\n  static response(): typeof Response {\n    if (this.responseImpl) {\n      return this.responseImpl;\n    }\n    if (typeof self !== 'undefined' && 'Response' in self) {\n      return self.Response;\n    }\n    debugFail(\n      'Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthErrorCode } from '../core/errors';\n\n/**\n * Errors that can be returned by the backend\n */\nexport const enum ServerError {\n  ADMIN_ONLY_OPERATION = 'ADMIN_ONLY_OPERATION',\n  BLOCKING_FUNCTION_ERROR_RESPONSE = 'BLOCKING_FUNCTION_ERROR_RESPONSE',\n  CAPTCHA_CHECK_FAILED = 'CAPTCHA_CHECK_FAILED',\n  CORS_UNSUPPORTED = 'CORS_UNSUPPORTED',\n  CREDENTIAL_MISMATCH = 'CREDENTIAL_MISMATCH',\n  CREDENTIAL_TOO_OLD_LOGIN_AGAIN = 'CREDENTIAL_TOO_OLD_LOGIN_AGAIN',\n  DYNAMIC_LINK_NOT_ACTIVATED = 'DYNAMIC_LINK_NOT_ACTIVATED',\n  EMAIL_CHANGE_NEEDS_VERIFICATION = 'EMAIL_CHANGE_NEEDS_VERIFICATION',\n  EMAIL_EXISTS = 'EMAIL_EXISTS',\n  EMAIL_NOT_FOUND = 'EMAIL_NOT_FOUND',\n  EXPIRED_OOB_CODE = 'EXPIRED_OOB_CODE',\n  FEDERATED_USER_ID_ALREADY_LINKED = 'FEDERATED_USER_ID_ALREADY_LINKED',\n  INVALID_APP_CREDENTIAL = 'INVALID_APP_CREDENTIAL',\n  INVALID_APP_ID = 'INVALID_APP_ID',\n  INVALID_CERT_HASH = 'INVALID_CERT_HASH',\n  INVALID_CODE = 'INVALID_CODE',\n  INVALID_CONTINUE_URI = 'INVALID_CONTINUE_URI',\n  INVALID_CUSTOM_TOKEN = 'INVALID_CUSTOM_TOKEN',\n  INVALID_DYNAMIC_LINK_DOMAIN = 'INVALID_DYNAMIC_LINK_DOMAIN',\n  INVALID_EMAIL = 'INVALID_EMAIL',\n  INVALID_ID_TOKEN = 'INVALID_ID_TOKEN',\n  INVALID_IDP_RESPONSE = 'INVALID_IDP_RESPONSE',\n  INVALID_IDENTIFIER = 'INVALID_IDENTIFIER',\n  INVALID_MESSAGE_PAYLOAD = 'INVALID_MESSAGE_PAYLOAD',\n  INVALID_MFA_PENDING_CREDENTIAL = 'INVALID_MFA_PENDING_CREDENTIAL',\n  INVALID_OAUTH_CLIENT_ID = 'INVALID_OAUTH_CLIENT_ID',\n  INVALID_OOB_CODE = 'INVALID_OOB_CODE',\n  INVALID_PASSWORD = 'INVALID_PASSWORD',\n  INVALID_PENDING_TOKEN = 'INVALID_PENDING_TOKEN',\n  INVALID_PHONE_NUMBER = 'INVALID_PHONE_NUMBER',\n  INVALID_PROVIDER_ID = 'INVALID_PROVIDER_ID',\n  INVALID_RECIPIENT_EMAIL = 'INVALID_RECIPIENT_EMAIL',\n  INVALID_SENDER = 'INVALID_SENDER',\n  INVALID_SESSION_INFO = 'INVALID_SESSION_INFO',\n  INVALID_TEMPORARY_PROOF = 'INVALID_TEMPORARY_PROOF',\n  INVALID_TENANT_ID = 'INVALID_TENANT_ID',\n  MFA_ENROLLMENT_NOT_FOUND = 'MFA_ENROLLMENT_NOT_FOUND',\n  MISSING_ANDROID_PACKAGE_NAME = 'MISSING_ANDROID_PACKAGE_NAME',\n  MISSING_APP_CREDENTIAL = 'MISSING_APP_CREDENTIAL',\n  MISSING_CODE = 'MISSING_CODE',\n  MISSING_CONTINUE_URI = 'MISSING_CONTINUE_URI',\n  MISSING_CUSTOM_TOKEN = 'MISSING_CUSTOM_TOKEN',\n  MISSING_IOS_BUNDLE_ID = 'MISSING_IOS_BUNDLE_ID',\n  MISSING_MFA_ENROLLMENT_ID = 'MISSING_MFA_ENROLLMENT_ID',\n  MISSING_MFA_PENDING_CREDENTIAL = 'MISSING_MFA_PENDING_CREDENTIAL',\n  MISSING_OOB_CODE = 'MISSING_OOB_CODE',\n  MISSING_OR_INVALID_NONCE = 'MISSING_OR_INVALID_NONCE',\n  MISSING_PASSWORD = 'MISSING_PASSWORD',\n  MISSING_REQ_TYPE = 'MISSING_REQ_TYPE',\n  MISSING_PHONE_NUMBER = 'MISSING_PHONE_NUMBER',\n  MISSING_SESSION_INFO = 'MISSING_SESSION_INFO',\n  OPERATION_NOT_ALLOWED = 'OPERATION_NOT_ALLOWED',\n  PASSWORD_LOGIN_DISABLED = 'PASSWORD_LOGIN_DISABLED',\n  QUOTA_EXCEEDED = 'QUOTA_EXCEEDED',\n  RESET_PASSWORD_EXCEED_LIMIT = 'RESET_PASSWORD_EXCEED_LIMIT',\n  REJECTED_CREDENTIAL = 'REJECTED_CREDENTIAL',\n  SECOND_FACTOR_EXISTS = 'SECOND_FACTOR_EXISTS',\n  SECOND_FACTOR_LIMIT_EXCEEDED = 'SECOND_FACTOR_LIMIT_EXCEEDED',\n  SESSION_EXPIRED = 'SESSION_EXPIRED',\n  TENANT_ID_MISMATCH = 'TENANT_ID_MISMATCH',\n  TOKEN_EXPIRED = 'TOKEN_EXPIRED',\n  TOO_MANY_ATTEMPTS_TRY_LATER = 'TOO_MANY_ATTEMPTS_TRY_LATER',\n  UNSUPPORTED_FIRST_FACTOR = 'UNSUPPORTED_FIRST_FACTOR',\n  UNSUPPORTED_TENANT_OPERATION = 'UNSUPPORTED_TENANT_OPERATION',\n  UNAUTHORIZED_DOMAIN = 'UNAUTHORIZED_DOMAIN',\n  UNVERIFIED_EMAIL = 'UNVERIFIED_EMAIL',\n  USER_CANCELLED = 'USER_CANCELLED',\n  USER_DISABLED = 'USER_DISABLED',\n  USER_NOT_FOUND = 'USER_NOT_FOUND',\n  WEAK_PASSWORD = 'WEAK_PASSWORD',\n  RECAPTCHA_NOT_ENABLED = 'RECAPTCHA_NOT_ENABLED',\n  MISSING_RECAPTCHA_TOKEN = 'MISSING_RECAPTCHA_TOKEN',\n  INVALID_RECAPTCHA_TOKEN = 'INVALID_RECAPTCHA_TOKEN',\n  INVALID_RECAPTCHA_ACTION = 'INVALID_RECAPTCHA_ACTION',\n  MISSING_CLIENT_TYPE = 'MISSING_CLIENT_TYPE',\n  MISSING_RECAPTCHA_VERSION = 'MISSING_RECAPTCHA_VERSION',\n  INVALID_RECAPTCHA_VERSION = 'INVALID_RECAPTCHA_VERSION',\n  INVALID_REQ_TYPE = 'INVALID_REQ_TYPE'\n}\n\n/**\n * API Response in the event of an error\n */\nexport interface JsonError {\n  error: {\n    code: number;\n    message: string;\n    errors?: [\n      {\n        message: ServerError;\n        domain: string;\n        reason: string;\n      }\n    ];\n  };\n}\n\n/**\n * Type definition for a map from server errors to developer visible errors\n */\nexport declare type ServerErrorMap<ApiError extends string> = {\n  readonly [K in ApiError]: AuthErrorCode;\n};\n\n/**\n * Map from errors returned by the server to errors to developer visible errors\n */\nexport const SERVER_ERROR_MAP: Partial<ServerErrorMap<ServerError>> = {\n  // Custom token errors.\n  [ServerError.CREDENTIAL_MISMATCH]: AuthErrorCode.CREDENTIAL_MISMATCH,\n  // This can only happen if the SDK sends a bad request.\n  [ServerError.MISSING_CUSTOM_TOKEN]: AuthErrorCode.INTERNAL_ERROR,\n\n  // Create Auth URI errors.\n  [ServerError.INVALID_IDENTIFIER]: AuthErrorCode.INVALID_EMAIL,\n  // This can only happen if the SDK sends a bad request.\n  [ServerError.MISSING_CONTINUE_URI]: AuthErrorCode.INTERNAL_ERROR,\n\n  // Sign in with email and password errors (some apply to sign up too).\n  [ServerError.INVALID_PASSWORD]: AuthErrorCode.INVALID_PASSWORD,\n  // This can only happen if the SDK sends a bad request.\n  [ServerError.MISSING_PASSWORD]: AuthErrorCode.MISSING_PASSWORD,\n\n  // Sign up with email and password errors.\n  [ServerError.EMAIL_EXISTS]: AuthErrorCode.EMAIL_EXISTS,\n  [ServerError.PASSWORD_LOGIN_DISABLED]: AuthErrorCode.OPERATION_NOT_ALLOWED,\n\n  // Verify assertion for sign in with credential errors:\n  [ServerError.INVALID_IDP_RESPONSE]: AuthErrorCode.INVALID_IDP_RESPONSE,\n  [ServerError.INVALID_PENDING_TOKEN]: AuthErrorCode.INVALID_IDP_RESPONSE,\n  [ServerError.FEDERATED_USER_ID_ALREADY_LINKED]:\n    AuthErrorCode.CREDENTIAL_ALREADY_IN_USE,\n\n  // This can only happen if the SDK sends a bad request.\n  [ServerError.MISSING_REQ_TYPE]: AuthErrorCode.INTERNAL_ERROR,\n\n  // Send Password reset email errors:\n  [ServerError.EMAIL_NOT_FOUND]: AuthErrorCode.USER_DELETED,\n  [ServerError.RESET_PASSWORD_EXCEED_LIMIT]:\n    AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER,\n\n  [ServerError.EXPIRED_OOB_CODE]: AuthErrorCode.EXPIRED_OOB_CODE,\n  [ServerError.INVALID_OOB_CODE]: AuthErrorCode.INVALID_OOB_CODE,\n  // This can only happen if the SDK sends a bad request.\n  [ServerError.MISSING_OOB_CODE]: AuthErrorCode.INTERNAL_ERROR,\n\n  // Operations that require ID token in request:\n  [ServerError.CREDENTIAL_TOO_OLD_LOGIN_AGAIN]:\n    AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN,\n  [ServerError.INVALID_ID_TOKEN]: AuthErrorCode.INVALID_AUTH,\n  [ServerError.TOKEN_EXPIRED]: AuthErrorCode.TOKEN_EXPIRED,\n  [ServerError.USER_NOT_FOUND]: AuthErrorCode.TOKEN_EXPIRED,\n\n  // Other errors.\n  [ServerError.TOO_MANY_ATTEMPTS_TRY_LATER]:\n    AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER,\n\n  // Phone Auth related errors.\n  [ServerError.INVALID_CODE]: AuthErrorCode.INVALID_CODE,\n  [ServerError.INVALID_SESSION_INFO]: AuthErrorCode.INVALID_SESSION_INFO,\n  [ServerError.INVALID_TEMPORARY_PROOF]: AuthErrorCode.INVALID_IDP_RESPONSE,\n  [ServerError.MISSING_SESSION_INFO]: AuthErrorCode.MISSING_SESSION_INFO,\n  [ServerError.SESSION_EXPIRED]: AuthErrorCode.CODE_EXPIRED,\n\n  // Other action code errors when additional settings passed.\n  // MISSING_CONTINUE_URI is getting mapped to INTERNAL_ERROR above.\n  // This is OK as this error will be caught by client side validation.\n  [ServerError.MISSING_ANDROID_PACKAGE_NAME]:\n    AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME,\n  [ServerError.UNAUTHORIZED_DOMAIN]: AuthErrorCode.UNAUTHORIZED_DOMAIN,\n\n  // getProjectConfig errors when clientId is passed.\n  [ServerError.INVALID_OAUTH_CLIENT_ID]: AuthErrorCode.INVALID_OAUTH_CLIENT_ID,\n\n  // User actions (sign-up or deletion) disabled errors.\n  [ServerError.ADMIN_ONLY_OPERATION]: AuthErrorCode.ADMIN_ONLY_OPERATION,\n\n  // Multi factor related errors.\n  [ServerError.INVALID_MFA_PENDING_CREDENTIAL]:\n    AuthErrorCode.INVALID_MFA_SESSION,\n  [ServerError.MFA_ENROLLMENT_NOT_FOUND]: AuthErrorCode.MFA_INFO_NOT_FOUND,\n  [ServerError.MISSING_MFA_ENROLLMENT_ID]: AuthErrorCode.MISSING_MFA_INFO,\n  [ServerError.MISSING_MFA_PENDING_CREDENTIAL]:\n    AuthErrorCode.MISSING_MFA_SESSION,\n  [ServerError.SECOND_FACTOR_EXISTS]:\n    AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED,\n  [ServerError.SECOND_FACTOR_LIMIT_EXCEEDED]:\n    AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED,\n\n  // Blocking functions related errors.\n  [ServerError.BLOCKING_FUNCTION_ERROR_RESPONSE]: AuthErrorCode.INTERNAL_ERROR,\n\n  // Recaptcha related errors.\n  [ServerError.RECAPTCHA_NOT_ENABLED]: AuthErrorCode.RECAPTCHA_NOT_ENABLED,\n  [ServerError.MISSING_RECAPTCHA_TOKEN]: AuthErrorCode.MISSING_RECAPTCHA_TOKEN,\n  [ServerError.INVALID_RECAPTCHA_TOKEN]: AuthErrorCode.INVALID_RECAPTCHA_TOKEN,\n  [ServerError.INVALID_RECAPTCHA_ACTION]:\n    AuthErrorCode.INVALID_RECAPTCHA_ACTION,\n  [ServerError.MISSING_CLIENT_TYPE]: AuthErrorCode.MISSING_CLIENT_TYPE,\n  [ServerError.MISSING_RECAPTCHA_VERSION]:\n    AuthErrorCode.MISSING_RECAPTCHA_VERSION,\n  [ServerError.INVALID_RECAPTCHA_VERSION]:\n    AuthErrorCode.INVALID_RECAPTCHA_VERSION,\n  [ServerError.INVALID_REQ_TYPE]: AuthErrorCode.INVALID_REQ_TYPE\n};\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError, querystring } from '@firebase/util';\n\nimport { AuthErrorCode, NamedErrorParams } from '../core/errors';\nimport {\n  _createError,\n  _errorWithCustomMessage,\n  _fail\n} from '../core/util/assert';\nimport { Delay } from '../core/util/delay';\nimport { _emulatorUrl } from '../core/util/emulator';\nimport { FetchProvider } from '../core/util/fetch_provider';\nimport { Auth } from '../model/public_types';\nimport { AuthInternal, ConfigInternal } from '../model/auth';\nimport { IdTokenResponse, TaggedWithTokenResponse } from '../model/id_token';\nimport { IdTokenMfaResponse } from './authentication/mfa';\nimport { SERVER_ERROR_MAP, ServerError, ServerErrorMap } from './errors';\n\nexport const enum HttpMethod {\n  POST = 'POST',\n  GET = 'GET'\n}\n\nexport const enum HttpHeader {\n  CONTENT_TYPE = 'Content-Type',\n  X_FIREBASE_LOCALE = 'X-Firebase-Locale',\n  X_CLIENT_VERSION = 'X-Client-Version',\n  X_FIREBASE_GMPID = 'X-Firebase-gmpid',\n  X_FIREBASE_CLIENT = 'X-Firebase-Client',\n  X_FIREBASE_APP_CHECK = 'X-Firebase-AppCheck'\n}\n\nexport const enum Endpoint {\n  CREATE_AUTH_URI = '/v1/accounts:createAuthUri',\n  DELETE_ACCOUNT = '/v1/accounts:delete',\n  RESET_PASSWORD = '/v1/accounts:resetPassword',\n  SIGN_UP = '/v1/accounts:signUp',\n  SIGN_IN_WITH_CUSTOM_TOKEN = '/v1/accounts:signInWithCustomToken',\n  SIGN_IN_WITH_EMAIL_LINK = '/v1/accounts:signInWithEmailLink',\n  SIGN_IN_WITH_IDP = '/v1/accounts:signInWithIdp',\n  SIGN_IN_WITH_PASSWORD = '/v1/accounts:signInWithPassword',\n  SIGN_IN_WITH_PHONE_NUMBER = '/v1/accounts:signInWithPhoneNumber',\n  SEND_VERIFICATION_CODE = '/v1/accounts:sendVerificationCode',\n  SEND_OOB_CODE = '/v1/accounts:sendOobCode',\n  SET_ACCOUNT_INFO = '/v1/accounts:update',\n  GET_ACCOUNT_INFO = '/v1/accounts:lookup',\n  GET_RECAPTCHA_PARAM = '/v1/recaptchaParams',\n  START_MFA_ENROLLMENT = '/v2/accounts/mfaEnrollment:start',\n  FINALIZE_MFA_ENROLLMENT = '/v2/accounts/mfaEnrollment:finalize',\n  START_MFA_SIGN_IN = '/v2/accounts/mfaSignIn:start',\n  FINALIZE_MFA_SIGN_IN = '/v2/accounts/mfaSignIn:finalize',\n  WITHDRAW_MFA = '/v2/accounts/mfaEnrollment:withdraw',\n  GET_PROJECT_CONFIG = '/v1/projects',\n  GET_RECAPTCHA_CONFIG = '/v2/recaptchaConfig'\n}\n\nexport const enum RecaptchaClientType {\n  WEB = 'CLIENT_TYPE_WEB',\n  ANDROID = 'CLIENT_TYPE_ANDROID',\n  IOS = 'CLIENT_TYPE_IOS'\n}\n\nexport const enum RecaptchaVersion {\n  ENTERPRISE = 'RECAPTCHA_ENTERPRISE'\n}\n\nexport const enum RecaptchaActionName {\n  SIGN_IN_WITH_PASSWORD = 'signInWithPassword',\n  GET_OOB_CODE = 'getOobCode',\n  SIGN_UP_PASSWORD = 'signUpPassword'\n}\n\nexport const DEFAULT_API_TIMEOUT_MS = new Delay(30_000, 60_000);\n\nexport function _addTidIfNecessary<T extends { tenantId?: string }>(\n  auth: Auth,\n  request: T\n): T {\n  if (auth.tenantId && !request.tenantId) {\n    return {\n      ...request,\n      tenantId: auth.tenantId\n    };\n  }\n  return request;\n}\n\nexport async function _performApiRequest<T, V>(\n  auth: Auth,\n  method: HttpMethod,\n  path: Endpoint,\n  request?: T,\n  customErrorMap: Partial<ServerErrorMap<ServerError>> = {}\n): Promise<V> {\n  return _performFetchWithErrorHandling(auth, customErrorMap, async () => {\n    let body = {};\n    let params = {};\n    if (request) {\n      if (method === HttpMethod.GET) {\n        params = request;\n      } else {\n        body = {\n          body: JSON.stringify(request)\n        };\n      }\n    }\n\n    const query = querystring({\n      key: auth.config.apiKey,\n      ...params\n    }).slice(1);\n\n    const headers = await (auth as AuthInternal)._getAdditionalHeaders();\n    headers[HttpHeader.CONTENT_TYPE] = 'application/json';\n\n    if (auth.languageCode) {\n      headers[HttpHeader.X_FIREBASE_LOCALE] = auth.languageCode;\n    }\n\n    return FetchProvider.fetch()(\n      _getFinalTarget(auth, auth.config.apiHost, path, query),\n      {\n        method,\n        headers,\n        referrerPolicy: 'no-referrer',\n        ...body\n      }\n    );\n  });\n}\n\nexport async function _performFetchWithErrorHandling<V>(\n  auth: Auth,\n  customErrorMap: Partial<ServerErrorMap<ServerError>>,\n  fetchFn: () => Promise<Response>\n): Promise<V> {\n  (auth as AuthInternal)._canInitEmulator = false;\n  const errorMap = { ...SERVER_ERROR_MAP, ...customErrorMap };\n  try {\n    const networkTimeout = new NetworkTimeout<Response>(auth);\n    const response: Response = await Promise.race<Promise<Response>>([\n      fetchFn(),\n      networkTimeout.promise\n    ]);\n\n    // If we've reached this point, the fetch succeeded and the networkTimeout\n    // didn't throw; clear the network timeout delay so that Node won't hang\n    networkTimeout.clearNetworkTimeout();\n\n    const json = await response.json();\n    if ('needConfirmation' in json) {\n      throw _makeTaggedError(auth, AuthErrorCode.NEED_CONFIRMATION, json);\n    }\n\n    if (response.ok && !('errorMessage' in json)) {\n      return json;\n    } else {\n      const errorMessage = response.ok ? json.errorMessage : json.error.message;\n      const [serverErrorCode, serverErrorMessage] = errorMessage.split(' : ');\n      if (serverErrorCode === ServerError.FEDERATED_USER_ID_ALREADY_LINKED) {\n        throw _makeTaggedError(\n          auth,\n          AuthErrorCode.CREDENTIAL_ALREADY_IN_USE,\n          json\n        );\n      } else if (serverErrorCode === ServerError.EMAIL_EXISTS) {\n        throw _makeTaggedError(auth, AuthErrorCode.EMAIL_EXISTS, json);\n      } else if (serverErrorCode === ServerError.USER_DISABLED) {\n        throw _makeTaggedError(auth, AuthErrorCode.USER_DISABLED, json);\n      }\n      const authError =\n        errorMap[serverErrorCode as ServerError] ||\n        (serverErrorCode\n          .toLowerCase()\n          .replace(/[_\\s]+/g, '-') as unknown as AuthErrorCode);\n      if (serverErrorMessage) {\n        throw _errorWithCustomMessage(auth, authError, serverErrorMessage);\n      } else {\n        _fail(auth, authError);\n      }\n    }\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      throw e;\n    }\n    // Changing this to a different error code will log user out when there is a network error\n    // because we treat any error other than NETWORK_REQUEST_FAILED as token is invalid.\n    // https://github.com/firebase/firebase-js-sdk/blob/4fbc73610d70be4e0852e7de63a39cb7897e8546/packages/auth/src/core/auth/auth_impl.ts#L309-L316\n    _fail(auth, AuthErrorCode.NETWORK_REQUEST_FAILED, { 'message': String(e) });\n  }\n}\n\nexport async function _performSignInRequest<T, V extends IdTokenResponse>(\n  auth: Auth,\n  method: HttpMethod,\n  path: Endpoint,\n  request?: T,\n  customErrorMap: Partial<ServerErrorMap<ServerError>> = {}\n): Promise<V> {\n  const serverResponse = (await _performApiRequest<T, V | IdTokenMfaResponse>(\n    auth,\n    method,\n    path,\n    request,\n    customErrorMap\n  )) as V;\n  if ('mfaPendingCredential' in serverResponse) {\n    _fail(auth, AuthErrorCode.MFA_REQUIRED, {\n      _serverResponse: serverResponse\n    });\n  }\n\n  return serverResponse;\n}\n\nexport function _getFinalTarget(\n  auth: Auth,\n  host: string,\n  path: string,\n  query: string\n): string {\n  const base = `${host}${path}?${query}`;\n\n  if (!(auth as AuthInternal).config.emulator) {\n    return `${auth.config.apiScheme}://${base}`;\n  }\n\n  return _emulatorUrl(auth.config as ConfigInternal, base);\n}\n\nclass NetworkTimeout<T> {\n  // Node timers and browser timers are fundamentally incompatible, but we\n  // don't care about the value here\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private timer: any | null = null;\n  readonly promise = new Promise<T>((_, reject) => {\n    this.timer = setTimeout(() => {\n      return reject(\n        _createError(this.auth, AuthErrorCode.NETWORK_REQUEST_FAILED)\n      );\n    }, DEFAULT_API_TIMEOUT_MS.get());\n  });\n\n  clearNetworkTimeout(): void {\n    clearTimeout(this.timer);\n  }\n\n  constructor(private readonly auth: Auth) {}\n}\n\ninterface PotentialResponse extends IdTokenResponse {\n  email?: string;\n  phoneNumber?: string;\n}\n\nexport function _makeTaggedError(\n  auth: Auth,\n  code: AuthErrorCode,\n  response: PotentialResponse\n): FirebaseError {\n  const errorParams: NamedErrorParams = {\n    appName: auth.name\n  };\n\n  if (response.email) {\n    errorParams.email = response.email;\n  }\n  if (response.phoneNumber) {\n    errorParams.phoneNumber = response.phoneNumber;\n  }\n\n  const error = _createError(auth, code, errorParams);\n\n  // We know customData is defined on error because errorParams is defined\n  (error.customData! as TaggedWithTokenResponse)._tokenResponse = response;\n  return error;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Endpoint, HttpMethod, _performApiRequest } from '../index';\nimport { MfaEnrollment } from './mfa';\nimport { Auth } from '../../model/public_types';\n\nexport interface DeleteAccountRequest {\n  idToken: string;\n}\n\nexport async function deleteAccount(\n  auth: Auth,\n  request: DeleteAccountRequest\n): Promise<void> {\n  return _performApiRequest<DeleteAccountRequest, void>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.DELETE_ACCOUNT,\n    request\n  );\n}\n\nexport interface ProviderUserInfo {\n  providerId: string;\n  rawId?: string;\n  email?: string;\n  displayName?: string;\n  photoUrl?: string;\n  phoneNumber?: string;\n}\n\nexport interface DeleteLinkedAccountsRequest {\n  idToken: string;\n  deleteProvider: string[];\n}\n\nexport interface DeleteLinkedAccountsResponse {\n  providerUserInfo: ProviderUserInfo[];\n}\n\nexport async function deleteLinkedAccounts(\n  auth: Auth,\n  request: DeleteLinkedAccountsRequest\n): Promise<DeleteLinkedAccountsResponse> {\n  return _performApiRequest<\n    DeleteLinkedAccountsRequest,\n    DeleteLinkedAccountsResponse\n  >(auth, HttpMethod.POST, Endpoint.SET_ACCOUNT_INFO, request);\n}\n\nexport interface APIUserInfo {\n  localId?: string;\n  displayName?: string;\n  photoUrl?: string;\n  email?: string;\n  emailVerified?: boolean;\n  phoneNumber?: string;\n  lastLoginAt?: number;\n  createdAt?: number;\n  tenantId?: string;\n  passwordHash?: string;\n  providerUserInfo?: ProviderUserInfo[];\n  mfaInfo?: MfaEnrollment[];\n}\n\nexport interface GetAccountInfoRequest {\n  idToken: string;\n}\n\nexport interface GetAccountInfoResponse {\n  users: APIUserInfo[];\n}\n\nexport async function getAccountInfo(\n  auth: Auth,\n  request: GetAccountInfoRequest\n): Promise<GetAccountInfoResponse> {\n  return _performApiRequest<GetAccountInfoRequest, GetAccountInfoResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.GET_ACCOUNT_INFO,\n    request\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function utcTimestampToDateString(\n  utcTimestamp?: string | number\n): string | undefined {\n  if (!utcTimestamp) {\n    return undefined;\n  }\n  try {\n    // Convert to date object.\n    const date = new Date(Number(utcTimestamp));\n    // Test date is valid.\n    if (!isNaN(date.getTime())) {\n      // Convert to UTC date string.\n      return date.toUTCString();\n    }\n  } catch (e) {\n    // Do nothing. undefined will be returned.\n  }\n  return undefined;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IdTokenResult, ParsedToken, User } from '../../model/public_types';\nimport { base64Decode, getModularInstance } from '@firebase/util';\n\nimport { UserInternal } from '../../model/user';\nimport { _assert } from '../util/assert';\nimport { _logError } from '../util/log';\nimport { utcTimestampToDateString } from '../util/time';\nimport { AuthErrorCode } from '../errors';\n\n/**\n * Returns a JSON Web Token (JWT) used to identify the user to a Firebase service.\n *\n * @remarks\n * Returns the current token if it has not expired or if it will not expire in the next five\n * minutes. Otherwise, this will refresh the token and return a new one.\n *\n * @param user - The user.\n * @param forceRefresh - Force refresh regardless of token expiration.\n *\n * @public\n */\nexport function getIdToken(user: User, forceRefresh = false): Promise<string> {\n  return getModularInstance(user).getIdToken(forceRefresh);\n}\n\n/**\n * Returns a deserialized JSON Web Token (JWT) used to identify the user to a Firebase service.\n *\n * @remarks\n * Returns the current token if it has not expired or if it will not expire in the next five\n * minutes. Otherwise, this will refresh the token and return a new one.\n *\n * @param user - The user.\n * @param forceRefresh - Force refresh regardless of token expiration.\n *\n * @public\n */\nexport async function getIdTokenResult(\n  user: User,\n  forceRefresh = false\n): Promise<IdTokenResult> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  const token = await userInternal.getIdToken(forceRefresh);\n  const claims = _parseToken(token);\n\n  _assert(\n    claims && claims.exp && claims.auth_time && claims.iat,\n    userInternal.auth,\n    AuthErrorCode.INTERNAL_ERROR\n  );\n  const firebase =\n    typeof claims.firebase === 'object' ? claims.firebase : undefined;\n\n  const signInProvider: string | undefined = firebase?.['sign_in_provider'];\n\n  return {\n    claims,\n    token,\n    authTime: utcTimestampToDateString(\n      secondsStringToMilliseconds(claims.auth_time)\n    )!,\n    issuedAtTime: utcTimestampToDateString(\n      secondsStringToMilliseconds(claims.iat)\n    )!,\n    expirationTime: utcTimestampToDateString(\n      secondsStringToMilliseconds(claims.exp)\n    )!,\n    signInProvider: signInProvider || null,\n    signInSecondFactor: firebase?.['sign_in_second_factor'] || null\n  };\n}\n\nfunction secondsStringToMilliseconds(seconds: string): number {\n  return Number(seconds) * 1000;\n}\n\nexport function _parseToken(token: string): ParsedToken | null {\n  const [algorithm, payload, signature] = token.split('.');\n  if (\n    algorithm === undefined ||\n    payload === undefined ||\n    signature === undefined\n  ) {\n    _logError('JWT malformed, contained fewer than 3 sections');\n    return null;\n  }\n\n  try {\n    const decoded = base64Decode(payload);\n    if (!decoded) {\n      _logError('Failed to decode base64 JWT payload');\n      return null;\n    }\n    return JSON.parse(decoded);\n  } catch (e) {\n    _logError(\n      'Caught error parsing JWT payload as JSON',\n      (e as Error)?.toString()\n    );\n    return null;\n  }\n}\n\n/**\n * Extract expiresIn TTL from a token by subtracting the expiration from the issuance.\n */\nexport function _tokenExpiresIn(token: string): number {\n  const parsedToken = _parseToken(token);\n  _assert(parsedToken, AuthErrorCode.INTERNAL_ERROR);\n  _assert(typeof parsedToken.exp !== 'undefined', AuthErrorCode.INTERNAL_ERROR);\n  _assert(typeof parsedToken.iat !== 'undefined', AuthErrorCode.INTERNAL_ERROR);\n  return Number(parsedToken.exp) - Number(parsedToken.iat);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\n\nimport { UserInternal } from '../../model/user';\nimport { AuthErrorCode } from '../errors';\n\nexport async function _logoutIfInvalidated<T>(\n  user: UserInternal,\n  promise: Promise<T>,\n  bypassAuthState = false\n): Promise<T> {\n  if (bypassAuthState) {\n    return promise;\n  }\n  try {\n    return await promise;\n  } catch (e) {\n    if (e instanceof FirebaseError && isUserInvalidated(e)) {\n      if (user.auth.currentUser === user) {\n        await user.auth.signOut();\n      }\n    }\n\n    throw e;\n  }\n}\n\nfunction isUserInvalidated({ code }: FirebaseError): boolean {\n  return (\n    code === `auth/${AuthErrorCode.USER_DISABLED}` ||\n    code === `auth/${AuthErrorCode.TOKEN_EXPIRED}`\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { UserInternal } from '../../model/user';\nimport { AuthErrorCode } from '../errors';\n\n// Refresh the token five minutes before expiration\nexport const enum Duration {\n  OFFSET = 5 * 1000 * 60,\n  RETRY_BACKOFF_MIN = 30 * 1000,\n  RETRY_BACKOFF_MAX = 16 * 60 * 1000\n}\n\nexport class ProactiveRefresh {\n  private isRunning = false;\n\n  // Node timers and browser timers return fundamentally different types.\n  // We don't actually care what the value is but TS won't accept unknown and\n  // we can't cast properly in both environments.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private timerId: any | null = null;\n  private errorBackoff = Duration.RETRY_BACKOFF_MIN;\n\n  constructor(private readonly user: UserInternal) {}\n\n  _start(): void {\n    if (this.isRunning) {\n      return;\n    }\n\n    this.isRunning = true;\n    this.schedule();\n  }\n\n  _stop(): void {\n    if (!this.isRunning) {\n      return;\n    }\n\n    this.isRunning = false;\n    if (this.timerId !== null) {\n      clearTimeout(this.timerId);\n    }\n  }\n\n  private getInterval(wasError: boolean): number {\n    if (wasError) {\n      const interval = this.errorBackoff;\n      this.errorBackoff = Math.min(\n        this.errorBackoff * 2,\n        Duration.RETRY_BACKOFF_MAX\n      );\n      return interval;\n    } else {\n      // Reset the error backoff\n      this.errorBackoff = Duration.RETRY_BACKOFF_MIN;\n      const expTime = this.user.stsTokenManager.expirationTime ?? 0;\n      const interval = expTime - Date.now() - Duration.OFFSET;\n\n      return Math.max(0, interval);\n    }\n  }\n\n  private schedule(wasError = false): void {\n    if (!this.isRunning) {\n      // Just in case...\n      return;\n    }\n\n    const interval = this.getInterval(wasError);\n    this.timerId = setTimeout(async () => {\n      await this.iteration();\n    }, interval);\n  }\n\n  private async iteration(): Promise<void> {\n    try {\n      await this.user.getIdToken(true);\n    } catch (e) {\n      // Only retry on network errors\n      if (\n        (e as FirebaseError)?.code ===\n        `auth/${AuthErrorCode.NETWORK_REQUEST_FAILED}`\n      ) {\n        this.schedule(/* wasError */ true);\n      }\n\n      return;\n    }\n    this.schedule();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserMetadata as UserMetadataType } from '../../model/public_types';\n\nimport { utcTimestampToDateString } from '../util/time';\n\nexport class UserMetadata implements UserMetadataType {\n  creationTime?: string;\n  lastSignInTime?: string;\n\n  constructor(\n    private createdAt?: string | number,\n    private lastLoginAt?: string | number\n  ) {\n    this._initializeTime();\n  }\n\n  private _initializeTime(): void {\n    this.lastSignInTime = utcTimestampToDateString(this.lastLoginAt);\n    this.creationTime = utcTimestampToDateString(this.createdAt);\n  }\n\n  _copy(metadata: UserMetadata): void {\n    this.createdAt = metadata.createdAt;\n    this.lastLoginAt = metadata.lastLoginAt;\n    this._initializeTime();\n  }\n\n  toJSON(): object {\n    return {\n      createdAt: this.createdAt,\n      lastLoginAt: this.lastLoginAt\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User, UserInfo } from '../../model/public_types';\n\nimport {\n  getAccountInfo,\n  ProviderUserInfo\n} from '../../api/account_management/account';\nimport { UserInternal } from '../../model/user';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\nimport { _logoutIfInvalidated } from './invalidation';\nimport { UserMetadata } from './user_metadata';\nimport { getModularInstance } from '@firebase/util';\n\nexport async function _reloadWithoutSaving(user: UserInternal): Promise<void> {\n  const auth = user.auth;\n  const idToken = await user.getIdToken();\n  const response = await _logoutIfInvalidated(\n    user,\n    getAccountInfo(auth, { idToken })\n  );\n\n  _assert(response?.users.length, auth, AuthErrorCode.INTERNAL_ERROR);\n\n  const coreAccount = response.users[0];\n\n  user._notifyReloadListener(coreAccount);\n\n  const newProviderData = coreAccount.providerUserInfo?.length\n    ? extractProviderData(coreAccount.providerUserInfo)\n    : [];\n\n  const providerData = mergeProviderData(user.providerData, newProviderData);\n\n  // Preserves the non-nonymous status of the stored user, even if no more\n  // credentials (federated or email/password) are linked to the user. If\n  // the user was previously anonymous, then use provider data to update.\n  // On the other hand, if it was not anonymous before, it should never be\n  // considered anonymous now.\n  const oldIsAnonymous = user.isAnonymous;\n  const newIsAnonymous =\n    !(user.email && coreAccount.passwordHash) && !providerData?.length;\n  const isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;\n\n  const updates: Partial<UserInternal> = {\n    uid: coreAccount.localId,\n    displayName: coreAccount.displayName || null,\n    photoURL: coreAccount.photoUrl || null,\n    email: coreAccount.email || null,\n    emailVerified: coreAccount.emailVerified || false,\n    phoneNumber: coreAccount.phoneNumber || null,\n    tenantId: coreAccount.tenantId || null,\n    providerData,\n    metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),\n    isAnonymous\n  };\n\n  Object.assign(user, updates);\n}\n\n/**\n * Reloads user account data, if signed in.\n *\n * @param user - The user.\n *\n * @public\n */\nexport async function reload(user: User): Promise<void> {\n  const userInternal: UserInternal = getModularInstance(user) as UserInternal;\n  await _reloadWithoutSaving(userInternal);\n\n  // Even though the current user hasn't changed, update\n  // current user will trigger a persistence update w/ the\n  // new info.\n  await userInternal.auth._persistUserIfCurrent(userInternal);\n  userInternal.auth._notifyListenersIfCurrent(userInternal);\n}\n\nfunction mergeProviderData(\n  original: UserInfo[],\n  newData: UserInfo[]\n): UserInfo[] {\n  const deduped = original.filter(\n    o => !newData.some(n => n.providerId === o.providerId)\n  );\n  return [...deduped, ...newData];\n}\n\nfunction extractProviderData(providers: ProviderUserInfo[]): UserInfo[] {\n  return providers.map(({ providerId, ...provider }) => {\n    return {\n      providerId,\n      uid: provider.rawId || '',\n      displayName: provider.displayName || null,\n      email: provider.email || null,\n      phoneNumber: provider.phoneNumber || null,\n      photoURL: provider.photoUrl || null\n    };\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable camelcase */\n\nimport { querystring } from '@firebase/util';\n\nimport {\n  _getFinalTarget,\n  _performFetchWithErrorHandling,\n  HttpMethod,\n  HttpHeader\n} from '../index';\nimport { FetchProvider } from '../../core/util/fetch_provider';\nimport { Auth } from '../../model/public_types';\nimport { AuthInternal } from '../../model/auth';\n\nexport const enum Endpoint {\n  TOKEN = '/v1/token'\n}\n\n/** The server responses with snake_case; we convert to camelCase */\ninterface RequestStsTokenServerResponse {\n  access_token: string;\n  expires_in: string;\n  refresh_token: string;\n}\n\nexport interface RequestStsTokenResponse {\n  accessToken: string;\n  expiresIn: string;\n  refreshToken: string;\n}\n\nexport async function requestStsToken(\n  auth: Auth,\n  refreshToken: string\n): Promise<RequestStsTokenResponse> {\n  const response =\n    await _performFetchWithErrorHandling<RequestStsTokenServerResponse>(\n      auth,\n      {},\n      async () => {\n        const body = querystring({\n          'grant_type': 'refresh_token',\n          'refresh_token': refreshToken\n        }).slice(1);\n        const { tokenApiHost, apiKey } = auth.config;\n        const url = _getFinalTarget(\n          auth,\n          tokenApiHost,\n          Endpoint.TOKEN,\n          `key=${apiKey}`\n        );\n\n        const headers = await (auth as AuthInternal)._getAdditionalHeaders();\n        headers[HttpHeader.CONTENT_TYPE] = 'application/x-www-form-urlencoded';\n\n        return FetchProvider.fetch()(url, {\n          method: HttpMethod.POST,\n          headers,\n          body\n        });\n      }\n    );\n\n  // The response comes back in snake_case. Convert to camel:\n  return {\n    accessToken: response.access_token,\n    expiresIn: response.expires_in,\n    refreshToken: response.refresh_token\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FinalizeMfaResponse } from '../../api/authentication/mfa';\nimport { requestStsToken } from '../../api/authentication/token';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { AuthErrorCode } from '../errors';\nimport { PersistedBlob } from '../persistence';\nimport { _assert, debugFail } from '../util/assert';\nimport { _tokenExpiresIn } from './id_token_result';\n\n/**\n * The number of milliseconds before the official expiration time of a token\n * to refresh that token, to provide a buffer for RPCs to complete.\n */\nexport const enum Buffer {\n  TOKEN_REFRESH = 30_000\n}\n\n/**\n * We need to mark this class as internal explicitly to exclude it in the public typings, because\n * it references AuthInternal which has a circular dependency with UserInternal.\n *\n * @internal\n */\nexport class StsTokenManager {\n  refreshToken: string | null = null;\n  accessToken: string | null = null;\n  expirationTime: number | null = null;\n\n  get isExpired(): boolean {\n    return (\n      !this.expirationTime ||\n      Date.now() > this.expirationTime - Buffer.TOKEN_REFRESH\n    );\n  }\n\n  updateFromServerResponse(\n    response: IdTokenResponse | FinalizeMfaResponse\n  ): void {\n    _assert(response.idToken, AuthErrorCode.INTERNAL_ERROR);\n    _assert(\n      typeof response.idToken !== 'undefined',\n      AuthErrorCode.INTERNAL_ERROR\n    );\n    _assert(\n      typeof response.refreshToken !== 'undefined',\n      AuthErrorCode.INTERNAL_ERROR\n    );\n    const expiresIn =\n      'expiresIn' in response && typeof response.expiresIn !== 'undefined'\n        ? Number(response.expiresIn)\n        : _tokenExpiresIn(response.idToken);\n    this.updateTokensAndExpiration(\n      response.idToken,\n      response.refreshToken,\n      expiresIn\n    );\n  }\n\n  async getToken(\n    auth: AuthInternal,\n    forceRefresh = false\n  ): Promise<string | null> {\n    _assert(\n      !this.accessToken || this.refreshToken,\n      auth,\n      AuthErrorCode.TOKEN_EXPIRED\n    );\n\n    if (!forceRefresh && this.accessToken && !this.isExpired) {\n      return this.accessToken;\n    }\n\n    if (this.refreshToken) {\n      await this.refresh(auth, this.refreshToken!);\n      return this.accessToken;\n    }\n\n    return null;\n  }\n\n  clearRefreshToken(): void {\n    this.refreshToken = null;\n  }\n\n  private async refresh(auth: AuthInternal, oldToken: string): Promise<void> {\n    const { accessToken, refreshToken, expiresIn } = await requestStsToken(\n      auth,\n      oldToken\n    );\n    this.updateTokensAndExpiration(\n      accessToken,\n      refreshToken,\n      Number(expiresIn)\n    );\n  }\n\n  private updateTokensAndExpiration(\n    accessToken: string,\n    refreshToken: string,\n    expiresInSec: number\n  ): void {\n    this.refreshToken = refreshToken || null;\n    this.accessToken = accessToken || null;\n    this.expirationTime = Date.now() + expiresInSec * 1000;\n  }\n\n  static fromJSON(appName: string, object: PersistedBlob): StsTokenManager {\n    const { refreshToken, accessToken, expirationTime } = object;\n\n    const manager = new StsTokenManager();\n    if (refreshToken) {\n      _assert(typeof refreshToken === 'string', AuthErrorCode.INTERNAL_ERROR, {\n        appName\n      });\n      manager.refreshToken = refreshToken;\n    }\n    if (accessToken) {\n      _assert(typeof accessToken === 'string', AuthErrorCode.INTERNAL_ERROR, {\n        appName\n      });\n      manager.accessToken = accessToken;\n    }\n    if (expirationTime) {\n      _assert(\n        typeof expirationTime === 'number',\n        AuthErrorCode.INTERNAL_ERROR,\n        {\n          appName\n        }\n      );\n      manager.expirationTime = expirationTime;\n    }\n    return manager;\n  }\n\n  toJSON(): object {\n    return {\n      refreshToken: this.refreshToken,\n      accessToken: this.accessToken,\n      expirationTime: this.expirationTime\n    };\n  }\n\n  _assign(stsTokenManager: StsTokenManager): void {\n    this.accessToken = stsTokenManager.accessToken;\n    this.refreshToken = stsTokenManager.refreshToken;\n    this.expirationTime = stsTokenManager.expirationTime;\n  }\n\n  _clone(): StsTokenManager {\n    return Object.assign(new StsTokenManager(), this.toJSON());\n  }\n\n  _performRefresh(): never {\n    return debugFail('not implemented');\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IdTokenResult } from '../../model/public_types';\nimport { NextFn } from '@firebase/util';\n\nimport {\n  APIUserInfo,\n  deleteAccount\n} from '../../api/account_management/account';\nimport { FinalizeMfaResponse } from '../../api/authentication/mfa';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport {\n  MutableUserInfo,\n  UserInternal,\n  UserParameters\n} from '../../model/user';\nimport { AuthErrorCode } from '../errors';\nimport { PersistedBlob } from '../persistence';\nimport { _assert } from '../util/assert';\nimport { getIdTokenResult } from './id_token_result';\nimport { _logoutIfInvalidated } from './invalidation';\nimport { ProactiveRefresh } from './proactive_refresh';\nimport { _reloadWithoutSaving, reload } from './reload';\nimport { StsTokenManager } from './token_manager';\nimport { UserMetadata } from './user_metadata';\nimport { ProviderId } from '../../model/enums';\n\nfunction assertStringOrUndefined(\n  assertion: unknown,\n  appName: string\n): asserts assertion is string | undefined {\n  _assert(\n    typeof assertion === 'string' || typeof assertion === 'undefined',\n    AuthErrorCode.INTERNAL_ERROR,\n    { appName }\n  );\n}\n\nexport class UserImpl implements UserInternal {\n  // For the user object, provider is always Firebase.\n  readonly providerId = ProviderId.FIREBASE;\n  stsTokenManager: StsTokenManager;\n  // Last known accessToken so we know when it changes\n  private accessToken: string | null;\n\n  uid: string;\n  auth: AuthInternal;\n  emailVerified: boolean;\n  isAnonymous: boolean;\n  tenantId: string | null;\n  readonly metadata: UserMetadata;\n  providerData: MutableUserInfo[];\n\n  // Optional fields from UserInfo\n  displayName: string | null;\n  email: string | null;\n  phoneNumber: string | null;\n  photoURL: string | null;\n\n  _redirectEventId?: string;\n  private readonly proactiveRefresh = new ProactiveRefresh(this);\n\n  constructor({ uid, auth, stsTokenManager, ...opt }: UserParameters) {\n    this.uid = uid;\n    this.auth = auth;\n    this.stsTokenManager = stsTokenManager;\n    this.accessToken = stsTokenManager.accessToken;\n    this.displayName = opt.displayName || null;\n    this.email = opt.email || null;\n    this.emailVerified = opt.emailVerified || false;\n    this.phoneNumber = opt.phoneNumber || null;\n    this.photoURL = opt.photoURL || null;\n    this.isAnonymous = opt.isAnonymous || false;\n    this.tenantId = opt.tenantId || null;\n    this.providerData = opt.providerData ? [...opt.providerData] : [];\n    this.metadata = new UserMetadata(\n      opt.createdAt || undefined,\n      opt.lastLoginAt || undefined\n    );\n  }\n\n  async getIdToken(forceRefresh?: boolean): Promise<string> {\n    const accessToken = await _logoutIfInvalidated(\n      this,\n      this.stsTokenManager.getToken(this.auth, forceRefresh)\n    );\n    _assert(accessToken, this.auth, AuthErrorCode.INTERNAL_ERROR);\n\n    if (this.accessToken !== accessToken) {\n      this.accessToken = accessToken;\n      await this.auth._persistUserIfCurrent(this);\n      this.auth._notifyListenersIfCurrent(this);\n    }\n\n    return accessToken;\n  }\n\n  getIdTokenResult(forceRefresh?: boolean): Promise<IdTokenResult> {\n    return getIdTokenResult(this, forceRefresh);\n  }\n\n  reload(): Promise<void> {\n    return reload(this);\n  }\n\n  private reloadUserInfo: APIUserInfo | null = null;\n  private reloadListener: NextFn<APIUserInfo> | null = null;\n\n  _assign(user: UserInternal): void {\n    if (this === user) {\n      return;\n    }\n    _assert(this.uid === user.uid, this.auth, AuthErrorCode.INTERNAL_ERROR);\n    this.displayName = user.displayName;\n    this.photoURL = user.photoURL;\n    this.email = user.email;\n    this.emailVerified = user.emailVerified;\n    this.phoneNumber = user.phoneNumber;\n    this.isAnonymous = user.isAnonymous;\n    this.tenantId = user.tenantId;\n    this.providerData = user.providerData.map(userInfo => ({ ...userInfo }));\n    this.metadata._copy(user.metadata);\n    this.stsTokenManager._assign(user.stsTokenManager);\n  }\n\n  _clone(auth: AuthInternal): UserInternal {\n    const newUser = new UserImpl({\n      ...this,\n      auth,\n      stsTokenManager: this.stsTokenManager._clone()\n    });\n    newUser.metadata._copy(this.metadata);\n    return newUser;\n  }\n\n  _onReload(callback: NextFn<APIUserInfo>): void {\n    // There should only ever be one listener, and that is a single instance of MultiFactorUser\n    _assert(!this.reloadListener, this.auth, AuthErrorCode.INTERNAL_ERROR);\n    this.reloadListener = callback;\n    if (this.reloadUserInfo) {\n      this._notifyReloadListener(this.reloadUserInfo);\n      this.reloadUserInfo = null;\n    }\n  }\n\n  _notifyReloadListener(userInfo: APIUserInfo): void {\n    if (this.reloadListener) {\n      this.reloadListener(userInfo);\n    } else {\n      // If no listener is subscribed yet, save the result so it's available when they do subscribe\n      this.reloadUserInfo = userInfo;\n    }\n  }\n\n  _startProactiveRefresh(): void {\n    this.proactiveRefresh._start();\n  }\n\n  _stopProactiveRefresh(): void {\n    this.proactiveRefresh._stop();\n  }\n\n  async _updateTokensIfNecessary(\n    response: IdTokenResponse | FinalizeMfaResponse,\n    reload = false\n  ): Promise<void> {\n    let tokensRefreshed = false;\n    if (\n      response.idToken &&\n      response.idToken !== this.stsTokenManager.accessToken\n    ) {\n      this.stsTokenManager.updateFromServerResponse(response);\n      tokensRefreshed = true;\n    }\n\n    if (reload) {\n      await _reloadWithoutSaving(this);\n    }\n\n    await this.auth._persistUserIfCurrent(this);\n    if (tokensRefreshed) {\n      this.auth._notifyListenersIfCurrent(this);\n    }\n  }\n\n  async delete(): Promise<void> {\n    const idToken = await this.getIdToken();\n    await _logoutIfInvalidated(this, deleteAccount(this.auth, { idToken }));\n    this.stsTokenManager.clearRefreshToken();\n\n    // TODO: Determine if cancellable-promises are necessary to use in this class so that delete()\n    //       cancels pending actions...\n\n    return this.auth.signOut();\n  }\n\n  toJSON(): PersistedBlob {\n    return {\n      uid: this.uid,\n      email: this.email || undefined,\n      emailVerified: this.emailVerified,\n      displayName: this.displayName || undefined,\n      isAnonymous: this.isAnonymous,\n      photoURL: this.photoURL || undefined,\n      phoneNumber: this.phoneNumber || undefined,\n      tenantId: this.tenantId || undefined,\n      providerData: this.providerData.map(userInfo => ({ ...userInfo })),\n      stsTokenManager: this.stsTokenManager.toJSON(),\n      // Redirect event ID must be maintained in case there is a pending\n      // redirect event.\n      _redirectEventId: this._redirectEventId,\n      ...this.metadata.toJSON(),\n\n      // Required for compatibility with the legacy SDK (go/firebase-auth-sdk-persistence-parsing):\n      apiKey: this.auth.config.apiKey,\n      appName: this.auth.name\n      // Missing authDomain will be tolerated by the legacy SDK.\n      // stsTokenManager.apiKey isn't actually required (despite the legacy SDK persisting it).\n    };\n  }\n\n  get refreshToken(): string {\n    return this.stsTokenManager.refreshToken || '';\n  }\n\n  static _fromJSON(auth: AuthInternal, object: PersistedBlob): UserInternal {\n    const displayName = object.displayName ?? undefined;\n    const email = object.email ?? undefined;\n    const phoneNumber = object.phoneNumber ?? undefined;\n    const photoURL = object.photoURL ?? undefined;\n    const tenantId = object.tenantId ?? undefined;\n    const _redirectEventId = object._redirectEventId ?? undefined;\n    const createdAt = object.createdAt ?? undefined;\n    const lastLoginAt = object.lastLoginAt ?? undefined;\n    const {\n      uid,\n      emailVerified,\n      isAnonymous,\n      providerData,\n      stsTokenManager: plainObjectTokenManager\n    } = object;\n\n    _assert(uid && plainObjectTokenManager, auth, AuthErrorCode.INTERNAL_ERROR);\n\n    const stsTokenManager = StsTokenManager.fromJSON(\n      this.name,\n      plainObjectTokenManager as PersistedBlob\n    );\n\n    _assert(typeof uid === 'string', auth, AuthErrorCode.INTERNAL_ERROR);\n    assertStringOrUndefined(displayName, auth.name);\n    assertStringOrUndefined(email, auth.name);\n    _assert(\n      typeof emailVerified === 'boolean',\n      auth,\n      AuthErrorCode.INTERNAL_ERROR\n    );\n    _assert(\n      typeof isAnonymous === 'boolean',\n      auth,\n      AuthErrorCode.INTERNAL_ERROR\n    );\n    assertStringOrUndefined(phoneNumber, auth.name);\n    assertStringOrUndefined(photoURL, auth.name);\n    assertStringOrUndefined(tenantId, auth.name);\n    assertStringOrUndefined(_redirectEventId, auth.name);\n    assertStringOrUndefined(createdAt, auth.name);\n    assertStringOrUndefined(lastLoginAt, auth.name);\n    const user = new UserImpl({\n      uid,\n      auth,\n      email,\n      emailVerified,\n      displayName,\n      isAnonymous,\n      photoURL,\n      phoneNumber,\n      tenantId,\n      stsTokenManager,\n      createdAt,\n      lastLoginAt\n    });\n\n    if (providerData && Array.isArray(providerData)) {\n      user.providerData = providerData.map(userInfo => ({ ...userInfo }));\n    }\n\n    if (_redirectEventId) {\n      user._redirectEventId = _redirectEventId;\n    }\n\n    return user;\n  }\n\n  /**\n   * Initialize a User from an idToken server response\n   * @param auth\n   * @param idTokenResponse\n   */\n  static async _fromIdTokenResponse(\n    auth: AuthInternal,\n    idTokenResponse: IdTokenResponse,\n    isAnonymous: boolean = false\n  ): Promise<UserInternal> {\n    const stsTokenManager = new StsTokenManager();\n    stsTokenManager.updateFromServerResponse(idTokenResponse);\n\n    // Initialize the Firebase Auth user.\n    const user = new UserImpl({\n      uid: idTokenResponse.localId,\n      auth,\n      stsTokenManager,\n      isAnonymous\n    });\n\n    // Updates the user info and data and resolves with a user instance.\n    await _reloadWithoutSaving(user);\n    return user;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from './assert';\n\n/**\n * Our API has a lot of one-off constants that are used to do things.\n * Unfortunately we can't export these as classes instantiated directly since\n * the constructor may side effect and therefore can't be proven to be safely\n * culled. Instead, we export these classes themselves as a lowerCamelCase\n * constant, and instantiate them under the hood.\n */\nexport interface SingletonInstantiator<T> {\n  new (): T;\n}\n\nconst instanceCache: Map<unknown, unknown> = new Map();\n\nexport function _getInstance<T>(cls: unknown): T {\n  debugAssert(cls instanceof Function, 'Expected a class definition');\n  let instance = instanceCache.get(cls) as T | undefined;\n\n  if (instance) {\n    debugAssert(\n      instance instanceof cls,\n      'Instance stored in cache mismatched with class'\n    );\n    return instance;\n  }\n\n  instance = new (cls as SingletonInstantiator<T>)();\n  instanceCache.set(cls, instance);\n  return instance;\n}\n\nexport function _clearInstanceMap(): void {\n  instanceCache.clear();\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Persistence } from '../../model/public_types';\n\nimport {\n  PersistenceInternal,\n  PersistenceType,\n  PersistenceValue,\n  StorageEventListener\n} from '../persistence';\n\nexport class InMemoryPersistence implements PersistenceInternal {\n  static type: 'NONE' = 'NONE';\n  readonly type = PersistenceType.NONE;\n  storage: Record<string, PersistenceValue> = {};\n\n  async _isAvailable(): Promise<boolean> {\n    return true;\n  }\n\n  async _set(key: string, value: PersistenceValue): Promise<void> {\n    this.storage[key] = value;\n  }\n\n  async _get<T extends PersistenceValue>(key: string): Promise<T | null> {\n    const value = this.storage[key];\n    return value === undefined ? null : (value as T);\n  }\n\n  async _remove(key: string): Promise<void> {\n    delete this.storage[key];\n  }\n\n  _addListener(_key: string, _listener: StorageEventListener): void {\n    // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\n    return;\n  }\n\n  _removeListener(_key: string, _listener: StorageEventListener): void {\n    // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\n    return;\n  }\n}\n\n/**\n * An implementation of {@link Persistence} of type 'NONE'.\n *\n * @public\n */\nexport const inMemoryPersistence: Persistence = InMemoryPersistence;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiKey, AppName, AuthInternal } from '../../model/auth';\nimport { UserInternal } from '../../model/user';\nimport { PersistedBlob, PersistenceInternal } from '../persistence';\nimport { UserImpl } from '../user/user_impl';\nimport { _getInstance } from '../util/instantiator';\nimport { inMemoryPersistence } from './in_memory';\n\nexport const enum KeyName {\n  AUTH_USER = 'authUser',\n  AUTH_EVENT = 'authEvent',\n  REDIRECT_USER = 'redirectUser',\n  PERSISTENCE_USER = 'persistence'\n}\nexport const enum Namespace {\n  PERSISTENCE = 'firebase'\n}\n\nexport function _persistenceKeyName(\n  key: string,\n  apiKey: ApiKey,\n  appName: AppName\n): string {\n  return `${Namespace.PERSISTENCE}:${key}:${apiKey}:${appName}`;\n}\n\nexport class PersistenceUserManager {\n  private readonly fullUserKey: string;\n  private readonly fullPersistenceKey: string;\n  private readonly boundEventHandler: () => void;\n\n  private constructor(\n    public persistence: PersistenceInternal,\n    private readonly auth: AuthInternal,\n    private readonly userKey: string\n  ) {\n    const { config, name } = this.auth;\n    this.fullUserKey = _persistenceKeyName(this.userKey, config.apiKey, name);\n    this.fullPersistenceKey = _persistenceKeyName(\n      KeyName.PERSISTENCE_USER,\n      config.apiKey,\n      name\n    );\n    this.boundEventHandler = auth._onStorageEvent.bind(auth);\n    this.persistence._addListener(this.fullUserKey, this.boundEventHandler);\n  }\n\n  setCurrentUser(user: UserInternal): Promise<void> {\n    return this.persistence._set(this.fullUserKey, user.toJSON());\n  }\n\n  async getCurrentUser(): Promise<UserInternal | null> {\n    const blob = await this.persistence._get<PersistedBlob>(this.fullUserKey);\n    return blob ? UserImpl._fromJSON(this.auth, blob) : null;\n  }\n\n  removeCurrentUser(): Promise<void> {\n    return this.persistence._remove(this.fullUserKey);\n  }\n\n  savePersistenceForRedirect(): Promise<void> {\n    return this.persistence._set(\n      this.fullPersistenceKey,\n      this.persistence.type\n    );\n  }\n\n  async setPersistence(newPersistence: PersistenceInternal): Promise<void> {\n    if (this.persistence === newPersistence) {\n      return;\n    }\n\n    const currentUser = await this.getCurrentUser();\n    await this.removeCurrentUser();\n\n    this.persistence = newPersistence;\n\n    if (currentUser) {\n      return this.setCurrentUser(currentUser);\n    }\n  }\n\n  delete(): void {\n    this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);\n  }\n\n  static async create(\n    auth: AuthInternal,\n    persistenceHierarchy: PersistenceInternal[],\n    userKey = KeyName.AUTH_USER\n  ): Promise<PersistenceUserManager> {\n    if (!persistenceHierarchy.length) {\n      return new PersistenceUserManager(\n        _getInstance(inMemoryPersistence),\n        auth,\n        userKey\n      );\n    }\n\n    // Eliminate any persistences that are not available\n    const availablePersistences = (\n      await Promise.all(\n        persistenceHierarchy.map(async persistence => {\n          if (await persistence._isAvailable()) {\n            return persistence;\n          }\n          return undefined;\n        })\n      )\n    ).filter(persistence => persistence) as PersistenceInternal[];\n\n    // Fall back to the first persistence listed, or in memory if none available\n    let selectedPersistence =\n      availablePersistences[0] ||\n      _getInstance<PersistenceInternal>(inMemoryPersistence);\n\n    const key = _persistenceKeyName(userKey, auth.config.apiKey, auth.name);\n\n    // Pull out the existing user, setting the chosen persistence to that\n    // persistence if the user exists.\n    let userToMigrate: UserInternal | null = null;\n    // Note, here we check for a user in _all_ persistences, not just the\n    // ones deemed available. If we can migrate a user out of a broken\n    // persistence, we will (but only if that persistence supports migration).\n    for (const persistence of persistenceHierarchy) {\n      try {\n        const blob = await persistence._get<PersistedBlob>(key);\n        if (blob) {\n          const user = UserImpl._fromJSON(auth, blob); // throws for unparsable blob (wrong format)\n          if (persistence !== selectedPersistence) {\n            userToMigrate = user;\n          }\n          selectedPersistence = persistence;\n          break;\n        }\n      } catch {}\n    }\n\n    // If we find the user in a persistence that does support migration, use\n    // that migration path (of only persistences that support migration)\n    const migrationHierarchy = availablePersistences.filter(\n      p => p._shouldAllowMigration\n    );\n\n    // If the persistence does _not_ allow migration, just finish off here\n    if (\n      !selectedPersistence._shouldAllowMigration ||\n      !migrationHierarchy.length\n    ) {\n      return new PersistenceUserManager(selectedPersistence, auth, userKey);\n    }\n\n    selectedPersistence = migrationHierarchy[0];\n    if (userToMigrate) {\n      // This normally shouldn't throw since chosenPersistence.isAvailable() is true, but if it does\n      // we'll just let it bubble to surface the error.\n      await selectedPersistence._set(key, userToMigrate.toJSON());\n    }\n\n    // Attempt to clear the key in other persistences but ignore errors. This helps prevent issues\n    // such as users getting stuck with a previous account after signing out and refreshing the tab.\n    await Promise.all(\n      persistenceHierarchy.map(async persistence => {\n        if (persistence !== selectedPersistence) {\n          try {\n            await persistence._remove(key);\n          } catch {}\n        }\n      })\n    );\n    return new PersistenceUserManager(selectedPersistence, auth, userKey);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isIE, getUA } from '@firebase/util';\n\ninterface NavigatorStandalone extends Navigator {\n  standalone?: unknown;\n}\n\ninterface Document {\n  documentMode?: number;\n}\n\n/**\n * Enums for Browser name.\n */\nexport const enum BrowserName {\n  ANDROID = 'Android',\n  BLACKBERRY = 'Blackberry',\n  EDGE = 'Edge',\n  FIREFOX = 'Firefox',\n  IE = 'IE',\n  IEMOBILE = 'IEMobile',\n  OPERA = 'Opera',\n  OTHER = 'Other',\n  CHROME = 'Chrome',\n  SAFARI = 'Safari',\n  SILK = 'Silk',\n  WEBOS = 'Webos'\n}\n\n/**\n * Determine the browser for the purposes of reporting usage to the API\n */\nexport function _getBrowserName(userAgent: string): BrowserName | string {\n  const ua = userAgent.toLowerCase();\n  if (ua.includes('opera/') || ua.includes('opr/') || ua.includes('opios/')) {\n    return BrowserName.OPERA;\n  } else if (_isIEMobile(ua)) {\n    // Windows phone IEMobile browser.\n    return BrowserName.IEMOBILE;\n  } else if (ua.includes('msie') || ua.includes('trident/')) {\n    return BrowserName.IE;\n  } else if (ua.includes('edge/')) {\n    return BrowserName.EDGE;\n  } else if (_isFirefox(ua)) {\n    return BrowserName.FIREFOX;\n  } else if (ua.includes('silk/')) {\n    return BrowserName.SILK;\n  } else if (_isBlackBerry(ua)) {\n    // Blackberry browser.\n    return BrowserName.BLACKBERRY;\n  } else if (_isWebOS(ua)) {\n    // WebOS default browser.\n    return BrowserName.WEBOS;\n  } else if (_isSafari(ua)) {\n    return BrowserName.SAFARI;\n  } else if (\n    (ua.includes('chrome/') || _isChromeIOS(ua)) &&\n    !ua.includes('edge/')\n  ) {\n    return BrowserName.CHROME;\n  } else if (_isAndroid(ua)) {\n    // Android stock browser.\n    return BrowserName.ANDROID;\n  } else {\n    // Most modern browsers have name/version at end of user agent string.\n    const re = /([a-zA-Z\\d\\.]+)\\/[a-zA-Z\\d\\.]*$/;\n    const matches = userAgent.match(re);\n    if (matches?.length === 2) {\n      return matches[1];\n    }\n  }\n  return BrowserName.OTHER;\n}\n\nexport function _isFirefox(ua = getUA()): boolean {\n  return /firefox\\//i.test(ua);\n}\n\nexport function _isSafari(userAgent = getUA()): boolean {\n  const ua = userAgent.toLowerCase();\n  return (\n    ua.includes('safari/') &&\n    !ua.includes('chrome/') &&\n    !ua.includes('crios/') &&\n    !ua.includes('android')\n  );\n}\n\nexport function _isChromeIOS(ua = getUA()): boolean {\n  return /crios\\//i.test(ua);\n}\n\nexport function _isIEMobile(ua = getUA()): boolean {\n  return /iemobile/i.test(ua);\n}\n\nexport function _isAndroid(ua = getUA()): boolean {\n  return /android/i.test(ua);\n}\n\nexport function _isBlackBerry(ua = getUA()): boolean {\n  return /blackberry/i.test(ua);\n}\n\nexport function _isWebOS(ua = getUA()): boolean {\n  return /webos/i.test(ua);\n}\n\nexport function _isIOS(ua = getUA()): boolean {\n  return (\n    /iphone|ipad|ipod/i.test(ua) ||\n    (/macintosh/i.test(ua) && /mobile/i.test(ua))\n  );\n}\n\nexport function _isIOS7Or8(ua = getUA()): boolean {\n  return (\n    /(iPad|iPhone|iPod).*OS 7_\\d/i.test(ua) ||\n    /(iPad|iPhone|iPod).*OS 8_\\d/i.test(ua)\n  );\n}\n\nexport function _isIOSStandalone(ua = getUA()): boolean {\n  return _isIOS(ua) && !!(window.navigator as NavigatorStandalone)?.standalone;\n}\n\nexport function _isIE10(): boolean {\n  return isIE() && (document as Document).documentMode === 10;\n}\n\nexport function _isMobileBrowser(ua: string = getUA()): boolean {\n  // TODO: implement getBrowserName equivalent for OS.\n  return (\n    _isIOS(ua) ||\n    _isAndroid(ua) ||\n    _isWebOS(ua) ||\n    _isBlackBerry(ua) ||\n    /windows phone/i.test(ua) ||\n    _isIEMobile(ua)\n  );\n}\n\nexport function _isIframe(): boolean {\n  try {\n    // Check that the current window is not the top window.\n    // If so, return true.\n    return !!(window && window !== window.top);\n  } catch (e) {\n    return false;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SDK_VERSION } from '@firebase/app';\nimport { _getBrowserName } from './browser';\nimport { getUA } from '@firebase/util';\n\nexport const enum ClientImplementation {\n  CORE = 'JsCore'\n}\n\n/**\n * @internal\n */\nexport const enum ClientPlatform {\n  BROWSER = 'Browser',\n  NODE = 'Node',\n  REACT_NATIVE = 'ReactNative',\n  CORDOVA = 'Cordova',\n  WORKER = 'Worker'\n}\n\n/*\n * Determine the SDK version string\n */\nexport function _getClientVersion(\n  clientPlatform: ClientPlatform,\n  frameworks: readonly string[] = []\n): string {\n  let reportedPlatform: string;\n  switch (clientPlatform) {\n    case ClientPlatform.BROWSER:\n      // In a browser environment, report the browser name.\n      reportedPlatform = _getBrowserName(getUA());\n      break;\n    case ClientPlatform.WORKER:\n      // Technically a worker runs from a browser but we need to differentiate a\n      // worker from a browser.\n      // For example: Chrome-Worker/JsCore/4.9.1/FirebaseCore-web.\n      reportedPlatform = `${_getBrowserName(getUA())}-${clientPlatform}`;\n      break;\n    default:\n      reportedPlatform = clientPlatform;\n  }\n  const reportedFrameworks = frameworks.length\n    ? frameworks.join(',')\n    : 'FirebaseCore-web'; /* default value if no other framework is used */\n  return `${reportedPlatform}/${ClientImplementation.CORE}/${SDK_VERSION}/${reportedFrameworks}`;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  HttpMethod,\n  RecaptchaClientType,\n  RecaptchaVersion,\n  _performApiRequest,\n  _addTidIfNecessary\n} from '../index';\nimport { Auth } from '../../model/public_types';\n\ninterface GetRecaptchaParamResponse {\n  recaptchaSiteKey?: string;\n}\n\nexport async function getRecaptchaParams(auth: Auth): Promise<string> {\n  return (\n    (\n      await _performApiRequest<void, GetRecaptchaParamResponse>(\n        auth,\n        HttpMethod.GET,\n        Endpoint.GET_RECAPTCHA_PARAM\n      )\n    ).recaptchaSiteKey || ''\n  );\n}\n\n// The following functions are for reCAPTCHA enterprise integration.\ninterface GetRecaptchaConfigRequest {\n  tenantId?: string;\n  clientType?: RecaptchaClientType;\n  version?: RecaptchaVersion;\n}\n\ninterface RecaptchaEnforcementState {\n  provider: string;\n  enforcementState: string;\n}\n\nexport interface GetRecaptchaConfigResponse {\n  recaptchaKey: string;\n  recaptchaEnforcementState: RecaptchaEnforcementState[];\n}\n\nexport async function getRecaptchaConfig(\n  auth: Auth,\n  request: GetRecaptchaConfigRequest\n): Promise<GetRecaptchaConfigResponse> {\n  return _performApiRequest<\n    GetRecaptchaConfigRequest,\n    GetRecaptchaConfigResponse\n  >(\n    auth,\n    HttpMethod.GET,\n    Endpoint.GET_RECAPTCHA_CONFIG,\n    _addTidIfNecessary(auth, request)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RecaptchaParameters } from '../../model/public_types';\nimport { GetRecaptchaConfigResponse } from '../../api/authentication/recaptcha';\n\n// reCAPTCHA v2 interface\nexport interface Recaptcha {\n  render: (container: HTMLElement, parameters: RecaptchaParameters) => number;\n  getResponse: (id: number) => string;\n  execute: (id: number) => unknown;\n  reset: (id: number) => unknown;\n}\n\nexport function isV2(\n  grecaptcha: Recaptcha | GreCAPTCHA | undefined\n): grecaptcha is Recaptcha {\n  return (\n    grecaptcha !== undefined &&\n    (grecaptcha as Recaptcha).getResponse !== undefined\n  );\n}\n\n// reCAPTCHA Enterprise & v3 shared interface\nexport interface GreCAPTCHATopLevel extends GreCAPTCHA {\n  enterprise: GreCAPTCHA;\n}\n\n// reCAPTCHA Enterprise interface\nexport interface GreCAPTCHA {\n  ready: (callback: () => void) => void;\n  execute: (siteKey: string, options: { action: string }) => Promise<string>;\n  render: (\n    container: string | HTMLElement,\n    parameters: GreCAPTCHARenderOption\n  ) => string;\n}\n\nexport interface GreCAPTCHARenderOption {\n  sitekey: string;\n  size: 'invisible';\n}\n\nexport function isEnterprise(\n  grecaptcha: Recaptcha | GreCAPTCHA | undefined\n): grecaptcha is GreCAPTCHATopLevel {\n  return (\n    grecaptcha !== undefined &&\n    (grecaptcha as GreCAPTCHATopLevel).enterprise !== undefined\n  );\n}\n\n// TODO(chuanr): Replace this with the AuthWindow after resolving the dependency issue in Node.js env.\ndeclare global {\n  interface Window {\n    grecaptcha?: Recaptcha | GreCAPTCHATopLevel;\n  }\n}\n\nexport class RecaptchaConfig {\n  /**\n   * The reCAPTCHA site key.\n   */\n  siteKey: string = '';\n\n  /**\n   * The reCAPTCHA enablement status of the {@link EmailAuthProvider} for the current tenant.\n   */\n  emailPasswordEnabled: boolean = false;\n\n  constructor(response: GetRecaptchaConfigResponse) {\n    if (response.recaptchaKey === undefined) {\n      throw new Error('recaptchaKey undefined');\n    }\n    // Example response.recaptchaKey: \"projects/proj123/keys/sitekey123\"\n    this.siteKey = response.recaptchaKey.split('/')[3];\n    this.emailPasswordEnabled = response.recaptchaEnforcementState.some(\n      enforcementState =>\n        enforcementState.provider === 'EMAIL_PASSWORD_PROVIDER' &&\n        enforcementState.enforcementState !== 'OFF'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthErrorCode } from '../core/errors';\nimport { _createError } from '../core/util/assert';\n\nfunction getScriptParentElement(): HTMLDocument | HTMLHeadElement {\n  return document.getElementsByTagName('head')?.[0] ?? document;\n}\n\nexport function _loadJS(url: string): Promise<Event> {\n  // TODO: consider adding timeout support & cancellation\n  return new Promise((resolve, reject) => {\n    const el = document.createElement('script');\n    el.setAttribute('src', url);\n    el.onload = resolve;\n    el.onerror = e => {\n      const error = _createError(AuthErrorCode.INTERNAL_ERROR);\n      error.customData = e as unknown as Record<string, unknown>;\n      reject(error);\n    };\n    el.type = 'text/javascript';\n    el.charset = 'UTF-8';\n    getScriptParentElement().appendChild(el);\n  });\n}\n\nexport function _generateCallbackName(prefix: string): string {\n  return `__${prefix}${Math.floor(Math.random() * 1000000)}`;\n}\n","/* eslint-disable @typescript-eslint/no-require-imports */\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isEnterprise, RecaptchaConfig } from './recaptcha';\nimport { getRecaptchaConfig } from '../../api/authentication/recaptcha';\nimport {\n  RecaptchaClientType,\n  RecaptchaVersion,\n  RecaptchaActionName\n} from '../../api';\n\nimport { Auth } from '../../model/public_types';\nimport { AuthInternal } from '../../model/auth';\nimport { _castAuth } from '../../core/auth/auth_impl';\nimport * as jsHelpers from '../load_js';\n\nconst RECAPTCHA_ENTERPRISE_URL =\n  'https://www.google.com/recaptcha/enterprise.js?render=';\n\nexport const RECAPTCHA_ENTERPRISE_VERIFIER_TYPE = 'recaptcha-enterprise';\nexport const FAKE_TOKEN = 'NO_RECAPTCHA';\n\nexport class RecaptchaEnterpriseVerifier {\n  /**\n   * Identifies the type of application verifier (e.g. \"recaptcha-enterprise\").\n   */\n  readonly type = RECAPTCHA_ENTERPRISE_VERIFIER_TYPE;\n\n  private readonly auth: AuthInternal;\n\n  /**\n   *\n   * @param authExtern - The corresponding Firebase {@link Auth} instance.\n   *\n   */\n  constructor(authExtern: Auth) {\n    this.auth = _castAuth(authExtern);\n  }\n\n  /**\n   * Executes the verification process.\n   *\n   * @returns A Promise for a token that can be used to assert the validity of a request.\n   */\n  async verify(\n    action: string = 'verify',\n    forceRefresh = false\n  ): Promise<string> {\n    async function retrieveSiteKey(auth: AuthInternal): Promise<string> {\n      if (!forceRefresh) {\n        if (auth.tenantId == null && auth._agentRecaptchaConfig != null) {\n          return auth._agentRecaptchaConfig.siteKey;\n        }\n        if (\n          auth.tenantId != null &&\n          auth._tenantRecaptchaConfigs[auth.tenantId] !== undefined\n        ) {\n          return auth._tenantRecaptchaConfigs[auth.tenantId].siteKey;\n        }\n      }\n\n      return new Promise<string>(async (resolve, reject) => {\n        getRecaptchaConfig(auth, {\n          clientType: RecaptchaClientType.WEB,\n          version: RecaptchaVersion.ENTERPRISE\n        })\n          .then(response => {\n            if (response.recaptchaKey === undefined) {\n              reject(new Error('recaptcha Enterprise site key undefined'));\n            } else {\n              const config = new RecaptchaConfig(response);\n              if (auth.tenantId == null) {\n                auth._agentRecaptchaConfig = config;\n              } else {\n                auth._tenantRecaptchaConfigs[auth.tenantId] = config;\n              }\n              return resolve(config.siteKey);\n            }\n          })\n          .catch(error => {\n            reject(error);\n          });\n      });\n    }\n\n    function retrieveRecaptchaToken(\n      siteKey: string,\n      resolve: (value: string | PromiseLike<string>) => void,\n      reject: (reason?: unknown) => void\n    ): void {\n      const grecaptcha = window.grecaptcha;\n      if (isEnterprise(grecaptcha)) {\n        grecaptcha.enterprise.ready(() => {\n          grecaptcha.enterprise\n            .execute(siteKey, { action })\n            .then(token => {\n              resolve(token);\n            })\n            .catch(() => {\n              resolve(FAKE_TOKEN);\n            });\n        });\n      } else {\n        reject(Error('No reCAPTCHA enterprise script loaded.'));\n      }\n    }\n\n    return new Promise<string>((resolve, reject) => {\n      retrieveSiteKey(this.auth)\n        .then(siteKey => {\n          if (!forceRefresh && isEnterprise(window.grecaptcha)) {\n            retrieveRecaptchaToken(siteKey, resolve, reject);\n          } else {\n            if (typeof window === 'undefined') {\n              reject(\n                new Error('RecaptchaVerifier is only supported in browser')\n              );\n              return;\n            }\n            jsHelpers\n              ._loadJS(RECAPTCHA_ENTERPRISE_URL + siteKey)\n              .then(() => {\n                retrieveRecaptchaToken(siteKey, resolve, reject);\n              })\n              .catch(error => {\n                reject(error);\n              });\n          }\n        })\n        .catch(error => {\n          reject(error);\n        });\n    });\n  }\n}\n\nexport async function injectRecaptchaFields<T>(\n  auth: AuthInternal,\n  request: T,\n  action: RecaptchaActionName,\n  captchaResp = false\n): Promise<T> {\n  const verifier = new RecaptchaEnterpriseVerifier(auth);\n  let captchaResponse;\n  try {\n    captchaResponse = await verifier.verify(action);\n  } catch (error) {\n    captchaResponse = await verifier.verify(action, true);\n  }\n  const newRequest = { ...request };\n  if (!captchaResp) {\n    Object.assign(newRequest, { captchaResponse });\n  } else {\n    Object.assign(newRequest, { 'captchaResp': captchaResponse });\n  }\n  Object.assign(newRequest, { 'clientType': RecaptchaClientType.WEB });\n  Object.assign(newRequest, {\n    'recaptchaVersion': RecaptchaVersion.ENTERPRISE\n  });\n  return newRequest;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthInternal } from '../../model/auth';\nimport { Unsubscribe, User } from '../../model/public_types';\nimport { AuthErrorCode } from '../errors';\n\ninterface MiddlewareEntry {\n  (user: User | null): Promise<void>;\n  onAbort?: () => void;\n}\n\nexport class AuthMiddlewareQueue {\n  private readonly queue: MiddlewareEntry[] = [];\n\n  constructor(private readonly auth: AuthInternal) {}\n\n  pushCallback(\n    callback: (user: User | null) => void | Promise<void>,\n    onAbort?: () => void\n  ): Unsubscribe {\n    // The callback could be sync or async. Wrap it into a\n    // function that is always async.\n    const wrappedCallback: MiddlewareEntry = (\n      user: User | null\n    ): Promise<void> =>\n      new Promise((resolve, reject) => {\n        try {\n          const result = callback(user);\n          // Either resolve with existing promise or wrap a non-promise\n          // return value into a promise.\n          resolve(result);\n        } catch (e) {\n          // Sync callback throws.\n          reject(e);\n        }\n      });\n    // Attach the onAbort if present\n    wrappedCallback.onAbort = onAbort;\n    this.queue.push(wrappedCallback);\n\n    const index = this.queue.length - 1;\n    return () => {\n      // Unsubscribe. Replace with no-op. Do not remove from array, or it will disturb\n      // indexing of other elements.\n      this.queue[index] = () => Promise.resolve();\n    };\n  }\n\n  async runMiddleware(nextUser: User | null): Promise<void> {\n    if (this.auth.currentUser === nextUser) {\n      return;\n    }\n\n    // While running the middleware, build a temporary stack of onAbort\n    // callbacks to call if one middleware callback rejects.\n\n    const onAbortStack: Array<() => void> = [];\n    try {\n      for (const beforeStateCallback of this.queue) {\n        await beforeStateCallback(nextUser);\n\n        // Only push the onAbort if the callback succeeds\n        if (beforeStateCallback.onAbort) {\n          onAbortStack.push(beforeStateCallback.onAbort);\n        }\n      }\n    } catch (e) {\n      // Run all onAbort, with separate try/catch to ignore any errors and\n      // continue\n      onAbortStack.reverse();\n      for (const onAbort of onAbortStack) {\n        try {\n          onAbort();\n        } catch (_) {\n          /* swallow error */\n        }\n      }\n\n      throw this.auth._errorFactory.create(AuthErrorCode.LOGIN_BLOCKED, {\n        originalMessage: (e as Error)?.message\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _FirebaseService, FirebaseApp } from '@firebase/app';\nimport { Provider } from '@firebase/component';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport {\n  Auth,\n  AuthErrorMap,\n  AuthSettings,\n  EmulatorConfig,\n  NextOrObserver,\n  Persistence,\n  PopupRedirectResolver,\n  User,\n  UserCredential,\n  CompleteFn,\n  ErrorFn,\n  NextFn,\n  Unsubscribe\n} from '../../model/public_types';\nimport {\n  createSubscribe,\n  ErrorFactory,\n  FirebaseError,\n  getModularInstance,\n  Observer,\n  Subscribe\n} from '@firebase/util';\n\nimport { AuthInternal, ConfigInternal } from '../../model/auth';\nimport { PopupRedirectResolverInternal } from '../../model/popup_redirect';\nimport { UserInternal } from '../../model/user';\nimport {\n  AuthErrorCode,\n  AuthErrorParams,\n  ErrorMapRetriever,\n  _DEFAULT_AUTH_ERROR_FACTORY\n} from '../errors';\nimport { PersistenceInternal } from '../persistence';\nimport {\n  KeyName,\n  PersistenceUserManager\n} from '../persistence/persistence_user_manager';\nimport { _reloadWithoutSaving } from '../user/reload';\nimport { _assert } from '../util/assert';\nimport { _getInstance } from '../util/instantiator';\nimport { _getUserLanguage } from '../util/navigator';\nimport { _getClientVersion } from '../util/version';\nimport { HttpHeader, RecaptchaClientType, RecaptchaVersion } from '../../api';\nimport { getRecaptchaConfig } from '../../api/authentication/recaptcha';\nimport { RecaptchaEnterpriseVerifier } from '../../platform_browser/recaptcha/recaptcha_enterprise_verifier';\nimport { AuthMiddlewareQueue } from './middleware';\nimport { RecaptchaConfig } from '../../platform_browser/recaptcha/recaptcha';\nimport { _logWarn } from '../util/log';\n\ninterface AsyncAction {\n  (): Promise<void>;\n}\n\nexport const enum DefaultConfig {\n  TOKEN_API_HOST = 'securetoken.googleapis.com',\n  API_HOST = 'identitytoolkit.googleapis.com',\n  API_SCHEME = 'https'\n}\n\nexport class AuthImpl implements AuthInternal, _FirebaseService {\n  currentUser: User | null = null;\n  emulatorConfig: EmulatorConfig | null = null;\n  private operations = Promise.resolve();\n  private persistenceManager?: PersistenceUserManager;\n  private redirectPersistenceManager?: PersistenceUserManager;\n  private authStateSubscription = new Subscription<User>(this);\n  private idTokenSubscription = new Subscription<User>(this);\n  private readonly beforeStateQueue = new AuthMiddlewareQueue(this);\n  private redirectUser: UserInternal | null = null;\n  private isProactiveRefreshEnabled = false;\n\n  // Any network calls will set this to true and prevent subsequent emulator\n  // initialization\n  _canInitEmulator = true;\n  _isInitialized = false;\n  _deleted = false;\n  _initializationPromise: Promise<void> | null = null;\n  _popupRedirectResolver: PopupRedirectResolverInternal | null = null;\n  _errorFactory: ErrorFactory<AuthErrorCode, AuthErrorParams> =\n    _DEFAULT_AUTH_ERROR_FACTORY;\n  _agentRecaptchaConfig: RecaptchaConfig | null = null;\n  _tenantRecaptchaConfigs: Record<string, RecaptchaConfig> = {};\n  readonly name: string;\n\n  // Tracks the last notified UID for state change listeners to prevent\n  // repeated calls to the callbacks. Undefined means it's never been\n  // called, whereas null means it's been called with a signed out user\n  private lastNotifiedUid: string | null | undefined = undefined;\n\n  languageCode: string | null = null;\n  tenantId: string | null = null;\n  settings: AuthSettings = { appVerificationDisabledForTesting: false };\n\n  constructor(\n    public readonly app: FirebaseApp,\n    private readonly heartbeatServiceProvider: Provider<'heartbeat'>,\n    private readonly appCheckServiceProvider: Provider<AppCheckInternalComponentName>,\n    public readonly config: ConfigInternal\n  ) {\n    this.name = app.name;\n    this.clientVersion = config.sdkClientVersion;\n  }\n\n  _initializeWithPersistence(\n    persistenceHierarchy: PersistenceInternal[],\n    popupRedirectResolver?: PopupRedirectResolver\n  ): Promise<void> {\n    if (popupRedirectResolver) {\n      this._popupRedirectResolver = _getInstance(popupRedirectResolver);\n    }\n\n    // Have to check for app deletion throughout initialization (after each\n    // promise resolution)\n    this._initializationPromise = this.queue(async () => {\n      if (this._deleted) {\n        return;\n      }\n\n      this.persistenceManager = await PersistenceUserManager.create(\n        this,\n        persistenceHierarchy\n      );\n\n      if (this._deleted) {\n        return;\n      }\n\n      // Initialize the resolver early if necessary (only applicable to web:\n      // this will cause the iframe to load immediately in certain cases)\n      if (this._popupRedirectResolver?._shouldInitProactively) {\n        // If this fails, don't halt auth loading\n        try {\n          await this._popupRedirectResolver._initialize(this);\n        } catch (e) {\n          /* Ignore the error */\n        }\n      }\n\n      await this.initializeCurrentUser(popupRedirectResolver);\n      this.lastNotifiedUid = this.currentUser?.uid || null;\n\n      if (this._deleted) {\n        return;\n      }\n\n      this._isInitialized = true;\n    });\n\n    return this._initializationPromise;\n  }\n\n  /**\n   * If the persistence is changed in another window, the user manager will let us know\n   */\n  async _onStorageEvent(): Promise<void> {\n    if (this._deleted) {\n      return;\n    }\n\n    const user = await this.assertedPersistence.getCurrentUser();\n\n    if (!this.currentUser && !user) {\n      // No change, do nothing (was signed out and remained signed out).\n      return;\n    }\n\n    // If the same user is to be synchronized.\n    if (this.currentUser && user && this.currentUser.uid === user.uid) {\n      // Data update, simply copy data changes.\n      this._currentUser._assign(user);\n      // If tokens changed from previous user tokens, this will trigger\n      // notifyAuthListeners_.\n      await this.currentUser.getIdToken();\n      return;\n    }\n\n    // Update current Auth state. Either a new login or logout.\n    // Skip blocking callbacks, they should not apply to a change in another tab.\n    await this._updateCurrentUser(user, /* skipBeforeStateCallbacks */ true);\n  }\n\n  private async initializeCurrentUser(\n    popupRedirectResolver?: PopupRedirectResolver\n  ): Promise<void> {\n    // First check to see if we have a pending redirect event.\n    const previouslyStoredUser =\n      (await this.assertedPersistence.getCurrentUser()) as UserInternal | null;\n    let futureCurrentUser = previouslyStoredUser;\n    let needsTocheckMiddleware = false;\n    if (popupRedirectResolver && this.config.authDomain) {\n      await this.getOrInitRedirectPersistenceManager();\n      const redirectUserEventId = this.redirectUser?._redirectEventId;\n      const storedUserEventId = futureCurrentUser?._redirectEventId;\n      const result = await this.tryRedirectSignIn(popupRedirectResolver);\n\n      // If the stored user (i.e. the old \"currentUser\") has a redirectId that\n      // matches the redirect user, then we want to initially sign in with the\n      // new user object from result.\n      // TODO(samgho): More thoroughly test all of this\n      if (\n        (!redirectUserEventId || redirectUserEventId === storedUserEventId) &&\n        result?.user\n      ) {\n        futureCurrentUser = result.user as UserInternal;\n        needsTocheckMiddleware = true;\n      }\n    }\n\n    // If no user in persistence, there is no current user. Set to null.\n    if (!futureCurrentUser) {\n      return this.directlySetCurrentUser(null);\n    }\n\n    if (!futureCurrentUser._redirectEventId) {\n      // This isn't a redirect link operation, we can reload and bail.\n      // First though, ensure that we check the middleware is happy.\n      if (needsTocheckMiddleware) {\n        try {\n          await this.beforeStateQueue.runMiddleware(futureCurrentUser);\n        } catch (e) {\n          futureCurrentUser = previouslyStoredUser;\n          // We know this is available since the bit is only set when the\n          // resolver is available\n          this._popupRedirectResolver!._overrideRedirectResult(this, () =>\n            Promise.reject(e)\n          );\n        }\n      }\n\n      if (futureCurrentUser) {\n        return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);\n      } else {\n        return this.directlySetCurrentUser(null);\n      }\n    }\n\n    _assert(this._popupRedirectResolver, this, AuthErrorCode.ARGUMENT_ERROR);\n    await this.getOrInitRedirectPersistenceManager();\n\n    // If the redirect user's event ID matches the current user's event ID,\n    // DO NOT reload the current user, otherwise they'll be cleared from storage.\n    // This is important for the reauthenticateWithRedirect() flow.\n    if (\n      this.redirectUser &&\n      this.redirectUser._redirectEventId === futureCurrentUser._redirectEventId\n    ) {\n      return this.directlySetCurrentUser(futureCurrentUser);\n    }\n\n    return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);\n  }\n\n  private async tryRedirectSignIn(\n    redirectResolver: PopupRedirectResolver\n  ): Promise<UserCredential | null> {\n    // The redirect user needs to be checked (and signed in if available)\n    // during auth initialization. All of the normal sign in and link/reauth\n    // flows call back into auth and push things onto the promise queue. We\n    // need to await the result of the redirect sign in *inside the promise\n    // queue*. This presents a problem: we run into deadlock. See:\n    //    ┌> [Initialization] ─────┐\n    //    ┌> [<other queue tasks>] │\n    //    └─ [getRedirectResult] <─┘\n    //    where [] are tasks on the queue and arrows denote awaits\n    // Initialization will never complete because it's waiting on something\n    // that's waiting for initialization to complete!\n    //\n    // Instead, this method calls getRedirectResult() (stored in\n    // _completeRedirectFn) with an optional parameter that instructs all of\n    // the underlying auth operations to skip anything that mutates auth state.\n\n    let result: UserCredential | null = null;\n    try {\n      // We know this._popupRedirectResolver is set since redirectResolver\n      // is passed in. The _completeRedirectFn expects the unwrapped extern.\n      result = await this._popupRedirectResolver!._completeRedirectFn(\n        this,\n        redirectResolver,\n        true\n      );\n    } catch (e) {\n      // Swallow any errors here; the code can retrieve them in\n      // getRedirectResult().\n      await this._setRedirectUser(null);\n    }\n\n    return result;\n  }\n\n  private async reloadAndSetCurrentUserOrClear(\n    user: UserInternal\n  ): Promise<void> {\n    try {\n      await _reloadWithoutSaving(user);\n    } catch (e) {\n      if (\n        (e as FirebaseError)?.code !==\n        `auth/${AuthErrorCode.NETWORK_REQUEST_FAILED}`\n      ) {\n        // Something's wrong with the user's token. Log them out and remove\n        // them from storage\n        return this.directlySetCurrentUser(null);\n      }\n    }\n\n    return this.directlySetCurrentUser(user);\n  }\n\n  useDeviceLanguage(): void {\n    this.languageCode = _getUserLanguage();\n  }\n\n  async _delete(): Promise<void> {\n    this._deleted = true;\n  }\n\n  async updateCurrentUser(userExtern: User | null): Promise<void> {\n    // The public updateCurrentUser method needs to make a copy of the user,\n    // and also check that the project matches\n    const user = userExtern\n      ? (getModularInstance(userExtern) as UserInternal)\n      : null;\n    if (user) {\n      _assert(\n        user.auth.config.apiKey === this.config.apiKey,\n        this,\n        AuthErrorCode.INVALID_AUTH\n      );\n    }\n    return this._updateCurrentUser(user && user._clone(this));\n  }\n\n  async _updateCurrentUser(\n    user: User | null,\n    skipBeforeStateCallbacks: boolean = false\n  ): Promise<void> {\n    if (this._deleted) {\n      return;\n    }\n    if (user) {\n      _assert(\n        this.tenantId === user.tenantId,\n        this,\n        AuthErrorCode.TENANT_ID_MISMATCH\n      );\n    }\n\n    if (!skipBeforeStateCallbacks) {\n      await this.beforeStateQueue.runMiddleware(user);\n    }\n\n    return this.queue(async () => {\n      await this.directlySetCurrentUser(user as UserInternal | null);\n      this.notifyAuthListeners();\n    });\n  }\n\n  async signOut(): Promise<void> {\n    // Run first, to block _setRedirectUser() if any callbacks fail.\n    await this.beforeStateQueue.runMiddleware(null);\n    // Clear the redirect user when signOut is called\n    if (this.redirectPersistenceManager || this._popupRedirectResolver) {\n      await this._setRedirectUser(null);\n    }\n\n    // Prevent callbacks from being called again in _updateCurrentUser, as\n    // they were already called in the first line.\n    return this._updateCurrentUser(null, /* skipBeforeStateCallbacks */ true);\n  }\n\n  setPersistence(persistence: Persistence): Promise<void> {\n    return this.queue(async () => {\n      await this.assertedPersistence.setPersistence(_getInstance(persistence));\n    });\n  }\n\n  async initializeRecaptchaConfig(): Promise<void> {\n    const response = await getRecaptchaConfig(this, {\n      clientType: RecaptchaClientType.WEB,\n      version: RecaptchaVersion.ENTERPRISE\n    });\n\n    const config = new RecaptchaConfig(response);\n    if (this.tenantId == null) {\n      this._agentRecaptchaConfig = config;\n    } else {\n      this._tenantRecaptchaConfigs[this.tenantId] = config;\n    }\n\n    if (config.emailPasswordEnabled) {\n      const verifier = new RecaptchaEnterpriseVerifier(this);\n      void verifier.verify();\n    }\n  }\n\n  _getRecaptchaConfig(): RecaptchaConfig | null {\n    if (this.tenantId == null) {\n      return this._agentRecaptchaConfig;\n    } else {\n      return this._tenantRecaptchaConfigs[this.tenantId];\n    }\n  }\n\n  _getPersistence(): string {\n    return this.assertedPersistence.persistence.type;\n  }\n\n  _updateErrorMap(errorMap: AuthErrorMap): void {\n    this._errorFactory = new ErrorFactory<AuthErrorCode, AuthErrorParams>(\n      'auth',\n      'Firebase',\n      (errorMap as ErrorMapRetriever)()\n    );\n  }\n\n  onAuthStateChanged(\n    nextOrObserver: NextOrObserver<User>,\n    error?: ErrorFn,\n    completed?: CompleteFn\n  ): Unsubscribe {\n    return this.registerStateListener(\n      this.authStateSubscription,\n      nextOrObserver,\n      error,\n      completed\n    );\n  }\n\n  beforeAuthStateChanged(\n    callback: (user: User | null) => void | Promise<void>,\n    onAbort?: () => void\n  ): Unsubscribe {\n    return this.beforeStateQueue.pushCallback(callback, onAbort);\n  }\n\n  onIdTokenChanged(\n    nextOrObserver: NextOrObserver<User>,\n    error?: ErrorFn,\n    completed?: CompleteFn\n  ): Unsubscribe {\n    return this.registerStateListener(\n      this.idTokenSubscription,\n      nextOrObserver,\n      error,\n      completed\n    );\n  }\n\n  toJSON(): object {\n    return {\n      apiKey: this.config.apiKey,\n      authDomain: this.config.authDomain,\n      appName: this.name,\n      currentUser: this._currentUser?.toJSON()\n    };\n  }\n\n  async _setRedirectUser(\n    user: UserInternal | null,\n    popupRedirectResolver?: PopupRedirectResolver\n  ): Promise<void> {\n    const redirectManager = await this.getOrInitRedirectPersistenceManager(\n      popupRedirectResolver\n    );\n    return user === null\n      ? redirectManager.removeCurrentUser()\n      : redirectManager.setCurrentUser(user);\n  }\n\n  private async getOrInitRedirectPersistenceManager(\n    popupRedirectResolver?: PopupRedirectResolver\n  ): Promise<PersistenceUserManager> {\n    if (!this.redirectPersistenceManager) {\n      const resolver: PopupRedirectResolverInternal | null =\n        (popupRedirectResolver && _getInstance(popupRedirectResolver)) ||\n        this._popupRedirectResolver;\n      _assert(resolver, this, AuthErrorCode.ARGUMENT_ERROR);\n      this.redirectPersistenceManager = await PersistenceUserManager.create(\n        this,\n        [_getInstance(resolver._redirectPersistence)],\n        KeyName.REDIRECT_USER\n      );\n      this.redirectUser =\n        await this.redirectPersistenceManager.getCurrentUser();\n    }\n\n    return this.redirectPersistenceManager;\n  }\n\n  async _redirectUserForId(id: string): Promise<UserInternal | null> {\n    // Make sure we've cleared any pending persistence actions if we're not in\n    // the initializer\n    if (this._isInitialized) {\n      await this.queue(async () => {});\n    }\n\n    if (this._currentUser?._redirectEventId === id) {\n      return this._currentUser;\n    }\n\n    if (this.redirectUser?._redirectEventId === id) {\n      return this.redirectUser;\n    }\n\n    return null;\n  }\n\n  async _persistUserIfCurrent(user: UserInternal): Promise<void> {\n    if (user === this.currentUser) {\n      return this.queue(async () => this.directlySetCurrentUser(user));\n    }\n  }\n\n  /** Notifies listeners only if the user is current */\n  _notifyListenersIfCurrent(user: UserInternal): void {\n    if (user === this.currentUser) {\n      this.notifyAuthListeners();\n    }\n  }\n\n  _key(): string {\n    return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;\n  }\n\n  _startProactiveRefresh(): void {\n    this.isProactiveRefreshEnabled = true;\n    if (this.currentUser) {\n      this._currentUser._startProactiveRefresh();\n    }\n  }\n\n  _stopProactiveRefresh(): void {\n    this.isProactiveRefreshEnabled = false;\n    if (this.currentUser) {\n      this._currentUser._stopProactiveRefresh();\n    }\n  }\n\n  /** Returns the current user cast as the internal type */\n  get _currentUser(): UserInternal {\n    return this.currentUser as UserInternal;\n  }\n\n  private notifyAuthListeners(): void {\n    if (!this._isInitialized) {\n      return;\n    }\n\n    this.idTokenSubscription.next(this.currentUser);\n\n    const currentUid = this.currentUser?.uid ?? null;\n    if (this.lastNotifiedUid !== currentUid) {\n      this.lastNotifiedUid = currentUid;\n      this.authStateSubscription.next(this.currentUser);\n    }\n  }\n\n  private registerStateListener(\n    subscription: Subscription<User>,\n    nextOrObserver: NextOrObserver<User>,\n    error?: ErrorFn,\n    completed?: CompleteFn\n  ): Unsubscribe {\n    if (this._deleted) {\n      return () => {};\n    }\n\n    const cb =\n      typeof nextOrObserver === 'function'\n        ? nextOrObserver\n        : nextOrObserver.next.bind(nextOrObserver);\n\n    const promise = this._isInitialized\n      ? Promise.resolve()\n      : this._initializationPromise;\n    _assert(promise, this, AuthErrorCode.INTERNAL_ERROR);\n    // The callback needs to be called asynchronously per the spec.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    promise.then(() => cb(this.currentUser));\n\n    if (typeof nextOrObserver === 'function') {\n      return subscription.addObserver(nextOrObserver, error, completed);\n    } else {\n      return subscription.addObserver(nextOrObserver);\n    }\n  }\n\n  /**\n   * Unprotected (from race conditions) method to set the current user. This\n   * should only be called from within a queued callback. This is necessary\n   * because the queue shouldn't rely on another queued callback.\n   */\n  private async directlySetCurrentUser(\n    user: UserInternal | null\n  ): Promise<void> {\n    if (this.currentUser && this.currentUser !== user) {\n      this._currentUser._stopProactiveRefresh();\n    }\n    if (user && this.isProactiveRefreshEnabled) {\n      user._startProactiveRefresh();\n    }\n\n    this.currentUser = user;\n\n    if (user) {\n      await this.assertedPersistence.setCurrentUser(user);\n    } else {\n      await this.assertedPersistence.removeCurrentUser();\n    }\n  }\n\n  private queue(action: AsyncAction): Promise<void> {\n    // In case something errors, the callback still should be called in order\n    // to keep the promise chain alive\n    this.operations = this.operations.then(action, action);\n    return this.operations;\n  }\n\n  private get assertedPersistence(): PersistenceUserManager {\n    _assert(this.persistenceManager, this, AuthErrorCode.INTERNAL_ERROR);\n    return this.persistenceManager;\n  }\n\n  private frameworks: string[] = [];\n  private clientVersion: string;\n  _logFramework(framework: string): void {\n    if (!framework || this.frameworks.includes(framework)) {\n      return;\n    }\n    this.frameworks.push(framework);\n\n    // Sort alphabetically so that \"FirebaseCore-web,FirebaseUI-web\" and\n    // \"FirebaseUI-web,FirebaseCore-web\" aren't viewed as different.\n    this.frameworks.sort();\n    this.clientVersion = _getClientVersion(\n      this.config.clientPlatform,\n      this._getFrameworks()\n    );\n  }\n  _getFrameworks(): readonly string[] {\n    return this.frameworks;\n  }\n  async _getAdditionalHeaders(): Promise<Record<string, string>> {\n    // Additional headers on every request\n    const headers: Record<string, string> = {\n      [HttpHeader.X_CLIENT_VERSION]: this.clientVersion\n    };\n\n    if (this.app.options.appId) {\n      headers[HttpHeader.X_FIREBASE_GMPID] = this.app.options.appId;\n    }\n\n    // If the heartbeat service exists, add the heartbeat string\n    const heartbeatsHeader = await this.heartbeatServiceProvider\n      .getImmediate({\n        optional: true\n      })\n      ?.getHeartbeatsHeader();\n    if (heartbeatsHeader) {\n      headers[HttpHeader.X_FIREBASE_CLIENT] = heartbeatsHeader;\n    }\n\n    // If the App Check service exists, add the App Check token in the headers\n    const appCheckToken = await this._getAppCheckToken();\n    if (appCheckToken) {\n      headers[HttpHeader.X_FIREBASE_APP_CHECK] = appCheckToken;\n    }\n\n    return headers;\n  }\n\n  async _getAppCheckToken(): Promise<string | undefined> {\n    const appCheckTokenResult = await this.appCheckServiceProvider\n      .getImmediate({ optional: true })\n      ?.getToken();\n    if (appCheckTokenResult?.error) {\n      // Context: appCheck.getToken() will never throw even if an error happened.\n      // In the error case, a dummy token will be returned along with an error field describing\n      // the error. In general, we shouldn't care about the error condition and just use\n      // the token (actual or dummy) to send requests.\n      _logWarn(\n        `Error while retrieving App Check token: ${appCheckTokenResult.error}`\n      );\n    }\n    return appCheckTokenResult?.token;\n  }\n}\n\n/**\n * Method to be used to cast down to our private implmentation of Auth.\n * It will also handle unwrapping from the compat type if necessary\n *\n * @param auth Auth object passed in from developer\n */\nexport function _castAuth(auth: Auth): AuthInternal {\n  return getModularInstance(auth) as AuthInternal;\n}\n\n/** Helper class to wrap subscriber logic */\nclass Subscription<T> {\n  private observer: Observer<T | null> | null = null;\n  readonly addObserver: Subscribe<T | null> = createSubscribe(\n    observer => (this.observer = observer)\n  );\n\n  constructor(readonly auth: AuthInternal) {}\n\n  get next(): NextFn<T | null> {\n    _assert(this.observer, this.auth, AuthErrorCode.INTERNAL_ERROR);\n    return this.observer.next.bind(this.observer);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _getProvider, FirebaseApp } from '@firebase/app';\nimport { deepEqual } from '@firebase/util';\nimport { Auth, Dependencies } from '../../model/public_types';\n\nimport { AuthErrorCode } from '../errors';\nimport { PersistenceInternal } from '../persistence';\nimport { _fail } from '../util/assert';\nimport { _getInstance } from '../util/instantiator';\nimport { AuthImpl } from './auth_impl';\n\n/**\n * Initializes an {@link Auth} instance with fine-grained control over\n * {@link Dependencies}.\n *\n * @remarks\n *\n * This function allows more control over the {@link Auth} instance than\n * {@link getAuth}. `getAuth` uses platform-specific defaults to supply\n * the {@link Dependencies}. In general, `getAuth` is the easiest way to\n * initialize Auth and works for most use cases. Use `initializeAuth` if you\n * need control over which persistence layer is used, or to minimize bundle\n * size if you're not using either `signInWithPopup` or `signInWithRedirect`.\n *\n * For example, if your app only uses anonymous accounts and you only want\n * accounts saved for the current session, initialize `Auth` with:\n *\n * ```js\n * const auth = initializeAuth(app, {\n *   persistence: browserSessionPersistence,\n *   popupRedirectResolver: undefined,\n * });\n * ```\n *\n * @public\n */\nexport function initializeAuth(app: FirebaseApp, deps?: Dependencies): Auth {\n  const provider = _getProvider(app, 'auth');\n\n  if (provider.isInitialized()) {\n    const auth = provider.getImmediate() as AuthImpl;\n    const initialOptions = provider.getOptions() as Dependencies;\n    if (deepEqual(initialOptions, deps ?? {})) {\n      return auth;\n    } else {\n      _fail(auth, AuthErrorCode.ALREADY_INITIALIZED);\n    }\n  }\n\n  const auth = provider.initialize({ options: deps }) as AuthImpl;\n\n  return auth;\n}\n\nexport function _initializeAuthInstance(\n  auth: AuthImpl,\n  deps?: Dependencies\n): void {\n  const persistence = deps?.persistence || [];\n  const hierarchy = (\n    Array.isArray(persistence) ? persistence : [persistence]\n  ).map<PersistenceInternal>(_getInstance);\n  if (deps?.errorMap) {\n    auth._updateErrorMap(deps.errorMap);\n  }\n\n  // This promise is intended to float; auth initialization happens in the\n  // background, meanwhile the auth object may be used by the app.\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  auth._initializeWithPersistence(hierarchy, deps?.popupRedirectResolver);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Auth } from '../../model/public_types';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\nimport { _castAuth } from './auth_impl';\n\n/**\n * Changes the {@link Auth} instance to communicate with the Firebase Auth Emulator, instead of production\n * Firebase Auth services.\n *\n * @remarks\n * This must be called synchronously immediately following the first call to\n * {@link initializeAuth}.  Do not use with production credentials as emulator\n * traffic is not encrypted.\n *\n *\n * @example\n * ```javascript\n * connectAuthEmulator(auth, 'http://127.0.0.1:9099', { disableWarnings: true });\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param url - The URL at which the emulator is running (eg, 'http://localhost:9099').\n * @param options - Optional. `options.disableWarnings` defaults to `false`. Set it to\n * `true` to disable the warning banner attached to the DOM.\n *\n * @public\n */\nexport function connectAuthEmulator(\n  auth: Auth,\n  url: string,\n  options?: { disableWarnings: boolean }\n): void {\n  const authInternal = _castAuth(auth);\n  _assert(\n    authInternal._canInitEmulator,\n    authInternal,\n    AuthErrorCode.EMULATOR_CONFIG_FAILED\n  );\n\n  _assert(\n    /^https?:\\/\\//.test(url),\n    authInternal,\n    AuthErrorCode.INVALID_EMULATOR_SCHEME\n  );\n\n  const disableWarnings = !!options?.disableWarnings;\n\n  const protocol = extractProtocol(url);\n  const { host, port } = extractHostAndPort(url);\n  const portStr = port === null ? '' : `:${port}`;\n\n  // Always replace path with \"/\" (even if input url had no path at all, or had a different one).\n  authInternal.config.emulator = { url: `${protocol}//${host}${portStr}/` };\n  authInternal.settings.appVerificationDisabledForTesting = true;\n  authInternal.emulatorConfig = Object.freeze({\n    host,\n    port,\n    protocol: protocol.replace(':', ''),\n    options: Object.freeze({ disableWarnings })\n  });\n\n  if (!disableWarnings) {\n    emitEmulatorWarning();\n  }\n}\n\nfunction extractProtocol(url: string): string {\n  const protocolEnd = url.indexOf(':');\n  return protocolEnd < 0 ? '' : url.substr(0, protocolEnd + 1);\n}\n\nfunction extractHostAndPort(url: string): {\n  host: string;\n  port: number | null;\n} {\n  const protocol = extractProtocol(url);\n  const authority = /(\\/\\/)?([^?#/]+)/.exec(url.substr(protocol.length)); // Between // and /, ? or #.\n  if (!authority) {\n    return { host: '', port: null };\n  }\n  const hostAndPort = authority[2].split('@').pop() || ''; // Strip out \"username:password@\".\n  const bracketedIPv6 = /^(\\[[^\\]]+\\])(:|$)/.exec(hostAndPort);\n  if (bracketedIPv6) {\n    const host = bracketedIPv6[1];\n    return { host, port: parsePort(hostAndPort.substr(host.length + 1)) };\n  } else {\n    const [host, port] = hostAndPort.split(':');\n    return { host, port: parsePort(port) };\n  }\n}\n\nfunction parsePort(portStr: string): number | null {\n  if (!portStr) {\n    return null;\n  }\n  const port = Number(portStr);\n  if (isNaN(port)) {\n    return null;\n  }\n  return port;\n}\n\nfunction emitEmulatorWarning(): void {\n  function attachBanner(): void {\n    const el = document.createElement('p');\n    const sty = el.style;\n    el.innerText =\n      'Running in emulator mode. Do not use with production credentials.';\n    sty.position = 'fixed';\n    sty.width = '100%';\n    sty.backgroundColor = '#ffffff';\n    sty.border = '.1em solid #000000';\n    sty.color = '#b50000';\n    sty.bottom = '0px';\n    sty.left = '0px';\n    sty.margin = '0px';\n    sty.zIndex = '10000';\n    sty.textAlign = 'center';\n    el.classList.add('firebase-emulator-warning');\n    document.body.appendChild(el);\n  }\n\n  if (typeof console !== 'undefined' && typeof console.info === 'function') {\n    console.info(\n      'WARNING: You are using the Auth Emulator,' +\n        ' which is intended for local testing only.  Do not use with' +\n        ' production credentials.'\n    );\n  }\n  if (typeof window !== 'undefined' && typeof document !== 'undefined') {\n    if (document.readyState === 'loading') {\n      window.addEventListener('DOMContentLoaded', attachBanner);\n    } else {\n      attachBanner();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PhoneOrOauthTokenResponse } from '../../api/authentication/mfa';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { debugFail } from '../util/assert';\n\n/**\n * Interface that represents the credentials returned by an {@link AuthProvider}.\n *\n * @remarks\n * Implementations specify the details about each auth provider's credential requirements.\n *\n * @public\n */\nexport class AuthCredential {\n  /** @internal */\n  protected constructor(\n    /**\n     * The authentication provider ID for the credential.\n     *\n     * @remarks\n     * For example, 'facebook.com', or 'google.com'.\n     */\n    readonly providerId: string,\n    /**\n     * The authentication sign in method for the credential.\n     *\n     * @remarks\n     * For example, {@link SignInMethod}.EMAIL_PASSWORD, or\n     * {@link SignInMethod}.EMAIL_LINK. This corresponds to the sign-in method\n     * identifier as returned in {@link fetchSignInMethodsForEmail}.\n     */\n    readonly signInMethod: string\n  ) {}\n\n  /**\n   * Returns a JSON-serializable representation of this object.\n   *\n   * @returns a JSON-serializable representation of this object.\n   */\n  toJSON(): object {\n    return debugFail('not implemented');\n  }\n\n  /** @internal */\n  _getIdTokenResponse(_auth: AuthInternal): Promise<PhoneOrOauthTokenResponse> {\n    return debugFail('not implemented');\n  }\n  /** @internal */\n  _linkToIdToken(\n    _auth: AuthInternal,\n    _idToken: string\n  ): Promise<IdTokenResponse> {\n    return debugFail('not implemented');\n  }\n  /** @internal */\n  _getReauthenticationResolver(_auth: AuthInternal): Promise<IdTokenResponse> {\n    return debugFail('not implemented');\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ActionCodeOperation, Auth } from '../../model/public_types';\n\nimport {\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary,\n  _performApiRequest\n} from '../index';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { MfaEnrollment } from './mfa';\n\nexport interface ResetPasswordRequest {\n  oobCode: string;\n  newPassword?: string;\n  tenantId?: string;\n}\n\nexport interface ResetPasswordResponse {\n  email: string;\n  newEmail?: string;\n  requestType?: ActionCodeOperation;\n  mfaInfo?: MfaEnrollment;\n}\n\nexport async function resetPassword(\n  auth: Auth,\n  request: ResetPasswordRequest\n): Promise<ResetPasswordResponse> {\n  return _performApiRequest<ResetPasswordRequest, ResetPasswordResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.RESET_PASSWORD,\n    _addTidIfNecessary(auth, request)\n  );\n}\nexport interface UpdateEmailPasswordRequest {\n  idToken: string;\n  returnSecureToken?: boolean;\n  email?: string;\n  password?: string;\n}\n\nexport interface UpdateEmailPasswordResponse extends IdTokenResponse {}\n\nexport async function updateEmailPassword(\n  auth: Auth,\n  request: UpdateEmailPasswordRequest\n): Promise<UpdateEmailPasswordResponse> {\n  return _performApiRequest<\n    UpdateEmailPasswordRequest,\n    UpdateEmailPasswordResponse\n  >(auth, HttpMethod.POST, Endpoint.SET_ACCOUNT_INFO, request);\n}\n\nexport interface ApplyActionCodeRequest {\n  oobCode: string;\n  tenantId?: string;\n}\n\nexport interface ApplyActionCodeResponse {}\n\nexport async function applyActionCode(\n  auth: Auth,\n  request: ApplyActionCodeRequest\n): Promise<ApplyActionCodeResponse> {\n  return _performApiRequest<ApplyActionCodeRequest, ApplyActionCodeResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SET_ACCOUNT_INFO,\n    _addTidIfNecessary(auth, request)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ActionCodeOperation, Auth } from '../../model/public_types';\n\nimport {\n  Endpoint,\n  HttpMethod,\n  RecaptchaClientType,\n  RecaptchaVersion,\n  _addTidIfNecessary,\n  _performApiRequest,\n  _performSignInRequest\n} from '../index';\nimport { IdToken, IdTokenResponse } from '../../model/id_token';\n\nexport interface SignInWithPasswordRequest {\n  returnSecureToken?: boolean;\n  email: string;\n  password: string;\n  tenantId?: string;\n  captchaResponse?: string;\n  clientType?: RecaptchaClientType;\n  recaptchaVersion?: RecaptchaVersion;\n}\n\nexport interface SignInWithPasswordResponse extends IdTokenResponse {\n  email: string;\n  displayName: string;\n}\n\nexport async function signInWithPassword(\n  auth: Auth,\n  request: SignInWithPasswordRequest\n): Promise<SignInWithPasswordResponse> {\n  return _performSignInRequest<\n    SignInWithPasswordRequest,\n    SignInWithPasswordResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_PASSWORD,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport interface GetOobCodeRequest {\n  email?: string; // Everything except VERIFY_AND_CHANGE_EMAIL\n  continueUrl?: string;\n  iOSBundleId?: string;\n  iosAppStoreId?: string;\n  androidPackageName?: string;\n  androidInstallApp?: boolean;\n  androidMinimumVersionCode?: string;\n  canHandleCodeInApp?: boolean;\n  dynamicLinkDomain?: string;\n  tenantId?: string;\n  targetProjectid?: string;\n}\n\nexport interface VerifyEmailRequest extends GetOobCodeRequest {\n  requestType: ActionCodeOperation.VERIFY_EMAIL;\n  idToken: IdToken;\n}\n\nexport interface PasswordResetRequest extends GetOobCodeRequest {\n  requestType: ActionCodeOperation.PASSWORD_RESET;\n  email: string;\n  captchaResp?: string;\n  clientType?: RecaptchaClientType;\n  recaptchaVersion?: RecaptchaVersion;\n}\n\nexport interface EmailSignInRequest extends GetOobCodeRequest {\n  requestType: ActionCodeOperation.EMAIL_SIGNIN;\n  email: string;\n  captchaResp?: string;\n  clientType?: RecaptchaClientType;\n  recaptchaVersion?: RecaptchaVersion;\n}\n\nexport interface VerifyAndChangeEmailRequest extends GetOobCodeRequest {\n  requestType: ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL;\n  idToken: IdToken;\n  newEmail: string;\n}\n\ninterface GetOobCodeResponse {\n  email: string;\n}\n\nexport interface VerifyEmailResponse extends GetOobCodeResponse {}\nexport interface PasswordResetResponse extends GetOobCodeResponse {}\nexport interface EmailSignInResponse extends GetOobCodeResponse {}\nexport interface VerifyAndChangeEmailResponse extends GetOobCodeRequest {}\n\nasync function sendOobCode(\n  auth: Auth,\n  request: GetOobCodeRequest\n): Promise<GetOobCodeResponse> {\n  return _performApiRequest<GetOobCodeRequest, GetOobCodeResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SEND_OOB_CODE,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport async function sendEmailVerification(\n  auth: Auth,\n  request: VerifyEmailRequest\n): Promise<VerifyEmailResponse> {\n  return sendOobCode(auth, request);\n}\n\nexport async function sendPasswordResetEmail(\n  auth: Auth,\n  request: PasswordResetRequest\n): Promise<PasswordResetResponse> {\n  return sendOobCode(auth, request);\n}\n\nexport async function sendSignInLinkToEmail(\n  auth: Auth,\n  request: EmailSignInRequest\n): Promise<EmailSignInResponse> {\n  return sendOobCode(auth, request);\n}\n\nexport async function verifyAndChangeEmail(\n  auth: Auth,\n  request: VerifyAndChangeEmailRequest\n): Promise<VerifyAndChangeEmailResponse> {\n  return sendOobCode(auth, request);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  _performSignInRequest,\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary\n} from '../index';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { Auth } from '../../model/public_types';\n\nexport interface SignInWithEmailLinkRequest {\n  email: string;\n  oobCode: string;\n  tenantId?: string;\n}\n\nexport interface SignInWithEmailLinkResponse extends IdTokenResponse {\n  email: string;\n  isNewUser: boolean;\n}\n\nexport async function signInWithEmailLink(\n  auth: Auth,\n  request: SignInWithEmailLinkRequest\n): Promise<SignInWithEmailLinkResponse> {\n  return _performSignInRequest<\n    SignInWithEmailLinkRequest,\n    SignInWithEmailLinkResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_EMAIL_LINK,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport interface SignInWithEmailLinkForLinkingRequest\n  extends SignInWithEmailLinkRequest {\n  idToken: string;\n}\n\nexport async function signInWithEmailLinkForLinking(\n  auth: Auth,\n  request: SignInWithEmailLinkForLinkingRequest\n): Promise<SignInWithEmailLinkResponse> {\n  return _performSignInRequest<\n    SignInWithEmailLinkForLinkingRequest,\n    SignInWithEmailLinkResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_EMAIL_LINK,\n    _addTidIfNecessary(auth, request)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\nimport { updateEmailPassword } from '../../api/account_management/email_and_password';\nimport {\n  signInWithPassword,\n  SignInWithPasswordRequest\n} from '../../api/authentication/email_and_password';\nimport {\n  signInWithEmailLink,\n  signInWithEmailLinkForLinking\n} from '../../api/authentication/email_link';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { AuthErrorCode } from '../errors';\nimport { _fail } from '../util/assert';\nimport { AuthCredential } from './auth_credential';\nimport { injectRecaptchaFields } from '../../platform_browser/recaptcha/recaptcha_enterprise_verifier';\nimport { RecaptchaActionName, RecaptchaClientType } from '../../api';\n/**\n * Interface that represents the credentials returned by {@link EmailAuthProvider} for\n * {@link ProviderId}.PASSWORD\n *\n * @remarks\n * Covers both {@link SignInMethod}.EMAIL_PASSWORD and\n * {@link SignInMethod}.EMAIL_LINK.\n *\n * @public\n */\nexport class EmailAuthCredential extends AuthCredential {\n  /** @internal */\n  private constructor(\n    /** @internal */\n    readonly _email: string,\n    /** @internal */\n    readonly _password: string,\n    signInMethod: SignInMethod,\n    /** @internal */\n    readonly _tenantId: string | null = null\n  ) {\n    super(ProviderId.PASSWORD, signInMethod);\n  }\n\n  /** @internal */\n  static _fromEmailAndPassword(\n    email: string,\n    password: string\n  ): EmailAuthCredential {\n    return new EmailAuthCredential(\n      email,\n      password,\n      SignInMethod.EMAIL_PASSWORD\n    );\n  }\n\n  /** @internal */\n  static _fromEmailAndCode(\n    email: string,\n    oobCode: string,\n    tenantId: string | null = null\n  ): EmailAuthCredential {\n    return new EmailAuthCredential(\n      email,\n      oobCode,\n      SignInMethod.EMAIL_LINK,\n      tenantId\n    );\n  }\n\n  /** {@inheritdoc AuthCredential.toJSON} */\n  toJSON(): object {\n    return {\n      email: this._email,\n      password: this._password,\n      signInMethod: this.signInMethod,\n      tenantId: this._tenantId\n    };\n  }\n\n  /**\n   * Static method to deserialize a JSON representation of an object into an {@link  AuthCredential}.\n   *\n   * @param json - Either `object` or the stringified representation of the object. When string is\n   * provided, `JSON.parse` would be called first.\n   *\n   * @returns If the JSON input does not represent an {@link AuthCredential}, null is returned.\n   */\n  static fromJSON(json: object | string): EmailAuthCredential | null {\n    const obj = typeof json === 'string' ? JSON.parse(json) : json;\n    if (obj?.email && obj?.password) {\n      if (obj.signInMethod === SignInMethod.EMAIL_PASSWORD) {\n        return this._fromEmailAndPassword(obj.email, obj.password);\n      } else if (obj.signInMethod === SignInMethod.EMAIL_LINK) {\n        return this._fromEmailAndCode(obj.email, obj.password, obj.tenantId);\n      }\n    }\n    return null;\n  }\n\n  /** @internal */\n  async _getIdTokenResponse(auth: AuthInternal): Promise<IdTokenResponse> {\n    switch (this.signInMethod) {\n      case SignInMethod.EMAIL_PASSWORD:\n        const request: SignInWithPasswordRequest = {\n          returnSecureToken: true,\n          email: this._email,\n          password: this._password,\n          clientType: RecaptchaClientType.WEB\n        };\n        if (auth._getRecaptchaConfig()?.emailPasswordEnabled) {\n          const requestWithRecaptcha = await injectRecaptchaFields(\n            auth,\n            request,\n            RecaptchaActionName.SIGN_IN_WITH_PASSWORD\n          );\n          return signInWithPassword(auth, requestWithRecaptcha);\n        } else {\n          return signInWithPassword(auth, request).catch(async error => {\n            if (\n              error.code === `auth/${AuthErrorCode.MISSING_RECAPTCHA_TOKEN}`\n            ) {\n              console.log(\n                'Sign-in with email address and password is protected by reCAPTCHA for this project. Automatically triggering the reCAPTCHA flow and restarting the sign-in flow.'\n              );\n              const requestWithRecaptcha = await injectRecaptchaFields(\n                auth,\n                request,\n                RecaptchaActionName.SIGN_IN_WITH_PASSWORD\n              );\n              return signInWithPassword(auth, requestWithRecaptcha);\n            } else {\n              return Promise.reject(error);\n            }\n          });\n        }\n      case SignInMethod.EMAIL_LINK:\n        return signInWithEmailLink(auth, {\n          email: this._email,\n          oobCode: this._password\n        });\n      default:\n        _fail(auth, AuthErrorCode.INTERNAL_ERROR);\n    }\n  }\n\n  /** @internal */\n  async _linkToIdToken(\n    auth: AuthInternal,\n    idToken: string\n  ): Promise<IdTokenResponse> {\n    switch (this.signInMethod) {\n      case SignInMethod.EMAIL_PASSWORD:\n        return updateEmailPassword(auth, {\n          idToken,\n          returnSecureToken: true,\n          email: this._email,\n          password: this._password\n        });\n      case SignInMethod.EMAIL_LINK:\n        return signInWithEmailLinkForLinking(auth, {\n          idToken,\n          email: this._email,\n          oobCode: this._password\n        });\n      default:\n        _fail(auth, AuthErrorCode.INTERNAL_ERROR);\n    }\n  }\n\n  /** @internal */\n  _getReauthenticationResolver(auth: AuthInternal): Promise<IdTokenResponse> {\n    return this._getIdTokenResponse(auth);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary,\n  _performSignInRequest\n} from '../index';\nimport { IdToken, IdTokenResponse } from '../../model/id_token';\nimport { Auth } from '../../model/public_types';\n\nexport interface SignInWithIdpRequest {\n  requestUri: string;\n  postBody?: string;\n  sessionId?: string;\n  tenantId?: string;\n  returnSecureToken: boolean;\n  returnIdpCredential?: boolean;\n  idToken?: IdToken;\n  autoCreate?: boolean;\n  pendingToken?: string;\n}\n\n/**\n * @internal\n */\nexport interface SignInWithIdpResponse extends IdTokenResponse {\n  oauthAccessToken?: string;\n  oauthTokenSecret?: string;\n  nonce?: string;\n  oauthIdToken?: string;\n  pendingToken?: string;\n}\n\nexport async function signInWithIdp(\n  auth: Auth,\n  request: SignInWithIdpRequest\n): Promise<SignInWithIdpResponse> {\n  return _performSignInRequest<SignInWithIdpRequest, SignInWithIdpResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_IDP,\n    _addTidIfNecessary(auth, request)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { querystring } from '@firebase/util';\n\nimport {\n  signInWithIdp,\n  SignInWithIdpRequest\n} from '../../api/authentication/idp';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { AuthErrorCode } from '../errors';\nimport { _fail } from '../util/assert';\nimport { AuthCredential } from './auth_credential';\n\nconst IDP_REQUEST_URI = 'http://localhost';\n\nexport interface OAuthCredentialParams {\n  // OAuth 2 uses either id token or access token\n  idToken?: string | null;\n  accessToken?: string | null;\n\n  // These fields are used with OAuth 1\n  oauthToken?: string;\n  secret?: string;\n  oauthTokenSecret?: string;\n\n  // Nonce is only set if pendingToken is not present\n  nonce?: string;\n  pendingToken?: string;\n\n  // Utilities\n  providerId: string;\n  signInMethod: string;\n}\n\n/**\n * Represents the OAuth credentials returned by an {@link OAuthProvider}.\n *\n * @remarks\n * Implementations specify the details about each auth provider's credential requirements.\n *\n * @public\n */\nexport class OAuthCredential extends AuthCredential {\n  /**\n   * The OAuth ID token associated with the credential if it belongs to an OIDC provider,\n   * such as `google.com`.\n   * @readonly\n   */\n  idToken?: string;\n  /**\n   * The OAuth access token associated with the credential if it belongs to an\n   * {@link OAuthProvider}, such as `facebook.com`, `twitter.com`, etc.\n   * @readonly\n   */\n  accessToken?: string;\n  /**\n   * The OAuth access token secret associated with the credential if it belongs to an OAuth 1.0\n   * provider, such as `twitter.com`.\n   * @readonly\n   */\n  secret?: string;\n\n  private nonce?: string;\n  private pendingToken: string | null = null;\n\n  /** @internal */\n  static _fromParams(params: OAuthCredentialParams): OAuthCredential {\n    const cred = new OAuthCredential(params.providerId, params.signInMethod);\n\n    if (params.idToken || params.accessToken) {\n      // OAuth 2 and either ID token or access token.\n      if (params.idToken) {\n        cred.idToken = params.idToken;\n      }\n\n      if (params.accessToken) {\n        cred.accessToken = params.accessToken;\n      }\n\n      // Add nonce if available and no pendingToken is present.\n      if (params.nonce && !params.pendingToken) {\n        cred.nonce = params.nonce;\n      }\n\n      if (params.pendingToken) {\n        cred.pendingToken = params.pendingToken;\n      }\n    } else if (params.oauthToken && params.oauthTokenSecret) {\n      // OAuth 1 and OAuth token with token secret\n      cred.accessToken = params.oauthToken;\n      cred.secret = params.oauthTokenSecret;\n    } else {\n      _fail(AuthErrorCode.ARGUMENT_ERROR);\n    }\n\n    return cred;\n  }\n\n  /** {@inheritdoc AuthCredential.toJSON}  */\n  toJSON(): object {\n    return {\n      idToken: this.idToken,\n      accessToken: this.accessToken,\n      secret: this.secret,\n      nonce: this.nonce,\n      pendingToken: this.pendingToken,\n      providerId: this.providerId,\n      signInMethod: this.signInMethod\n    };\n  }\n\n  /**\n   * Static method to deserialize a JSON representation of an object into an\n   * {@link  AuthCredential}.\n   *\n   * @param json - Input can be either Object or the stringified representation of the object.\n   * When string is provided, JSON.parse would be called first.\n   *\n   * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\n   */\n  static fromJSON(json: string | object): OAuthCredential | null {\n    const obj = typeof json === 'string' ? JSON.parse(json) : json;\n    const { providerId, signInMethod, ...rest }: OAuthCredentialParams = obj;\n    if (!providerId || !signInMethod) {\n      return null;\n    }\n\n    const cred = new OAuthCredential(providerId, signInMethod);\n    cred.idToken = rest.idToken || undefined;\n    cred.accessToken = rest.accessToken || undefined;\n    cred.secret = rest.secret;\n    cred.nonce = rest.nonce;\n    cred.pendingToken = rest.pendingToken || null;\n    return cred;\n  }\n\n  /** @internal */\n  _getIdTokenResponse(auth: AuthInternal): Promise<IdTokenResponse> {\n    const request = this.buildRequest();\n    return signInWithIdp(auth, request);\n  }\n\n  /** @internal */\n  _linkToIdToken(\n    auth: AuthInternal,\n    idToken: string\n  ): Promise<IdTokenResponse> {\n    const request = this.buildRequest();\n    request.idToken = idToken;\n    return signInWithIdp(auth, request);\n  }\n\n  /** @internal */\n  _getReauthenticationResolver(auth: AuthInternal): Promise<IdTokenResponse> {\n    const request = this.buildRequest();\n    request.autoCreate = false;\n    return signInWithIdp(auth, request);\n  }\n\n  private buildRequest(): SignInWithIdpRequest {\n    const request: SignInWithIdpRequest = {\n      requestUri: IDP_REQUEST_URI,\n      returnSecureToken: true\n    };\n\n    if (this.pendingToken) {\n      request.pendingToken = this.pendingToken;\n    } else {\n      const postBody: Record<string, string> = {};\n      if (this.idToken) {\n        postBody['id_token'] = this.idToken;\n      }\n      if (this.accessToken) {\n        postBody['access_token'] = this.accessToken;\n      }\n      if (this.secret) {\n        postBody['oauth_token_secret'] = this.secret;\n      }\n\n      postBody['providerId'] = this.providerId;\n      if (this.nonce && !this.pendingToken) {\n        postBody['nonce'] = this.nonce;\n      }\n\n      request.postBody = querystring(postBody);\n    }\n\n    return request;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary,\n  _makeTaggedError,\n  _performApiRequest,\n  _performSignInRequest\n} from '../index';\nimport { AuthErrorCode } from '../../core/errors';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { ServerError, ServerErrorMap } from '../errors';\nimport { Auth } from '../../model/public_types';\n\nexport interface SendPhoneVerificationCodeRequest {\n  phoneNumber: string;\n  recaptchaToken: string;\n  tenantId?: string;\n}\n\nexport interface SendPhoneVerificationCodeResponse {\n  sessionInfo: string;\n}\n\nexport async function sendPhoneVerificationCode(\n  auth: Auth,\n  request: SendPhoneVerificationCodeRequest\n): Promise<SendPhoneVerificationCodeResponse> {\n  return _performApiRequest<\n    SendPhoneVerificationCodeRequest,\n    SendPhoneVerificationCodeResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SEND_VERIFICATION_CODE,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\n/**\n * @internal\n */\nexport interface SignInWithPhoneNumberRequest {\n  temporaryProof?: string;\n  phoneNumber?: string;\n  sessionInfo?: string;\n  code?: string;\n  tenantId?: string;\n}\n\nexport interface LinkWithPhoneNumberRequest\n  extends SignInWithPhoneNumberRequest {\n  idToken: string;\n}\n\n/**\n * @internal\n */\nexport interface SignInWithPhoneNumberResponse extends IdTokenResponse {\n  temporaryProof?: string;\n  phoneNumber?: string;\n}\n\nexport async function signInWithPhoneNumber(\n  auth: Auth,\n  request: SignInWithPhoneNumberRequest\n): Promise<SignInWithPhoneNumberResponse> {\n  return _performSignInRequest<\n    SignInWithPhoneNumberRequest,\n    SignInWithPhoneNumberResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_PHONE_NUMBER,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport async function linkWithPhoneNumber(\n  auth: Auth,\n  request: LinkWithPhoneNumberRequest\n): Promise<SignInWithPhoneNumberResponse> {\n  const response = await _performSignInRequest<\n    LinkWithPhoneNumberRequest,\n    SignInWithPhoneNumberResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_PHONE_NUMBER,\n    _addTidIfNecessary(auth, request)\n  );\n  if (response.temporaryProof) {\n    throw _makeTaggedError(auth, AuthErrorCode.NEED_CONFIRMATION, response);\n  }\n  return response;\n}\n\ninterface VerifyPhoneNumberForExistingRequest\n  extends SignInWithPhoneNumberRequest {\n  operation: 'REAUTH';\n}\n\nconst VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_: Partial<\n  ServerErrorMap<ServerError>\n> = {\n  [ServerError.USER_NOT_FOUND]: AuthErrorCode.USER_DELETED\n};\n\nexport async function verifyPhoneNumberForExisting(\n  auth: Auth,\n  request: SignInWithPhoneNumberRequest\n): Promise<SignInWithPhoneNumberResponse> {\n  const apiRequest: VerifyPhoneNumberForExistingRequest = {\n    ...request,\n    operation: 'REAUTH'\n  };\n  return _performSignInRequest<\n    VerifyPhoneNumberForExistingRequest,\n    SignInWithPhoneNumberResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_PHONE_NUMBER,\n    _addTidIfNecessary(auth, apiRequest),\n    VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\nimport { PhoneOrOauthTokenResponse } from '../../api/authentication/mfa';\nimport {\n  linkWithPhoneNumber,\n  signInWithPhoneNumber,\n  SignInWithPhoneNumberRequest,\n  verifyPhoneNumberForExisting\n} from '../../api/authentication/sms';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { AuthCredential } from './auth_credential';\n\nexport interface PhoneAuthCredentialParameters {\n  verificationId?: string;\n  verificationCode?: string;\n  phoneNumber?: string;\n  temporaryProof?: string;\n}\n\n/**\n * Represents the credentials returned by {@link PhoneAuthProvider}.\n *\n * @public\n */\nexport class PhoneAuthCredential extends AuthCredential {\n  private constructor(private readonly params: PhoneAuthCredentialParameters) {\n    super(ProviderId.PHONE, SignInMethod.PHONE);\n  }\n\n  /** @internal */\n  static _fromVerification(\n    verificationId: string,\n    verificationCode: string\n  ): PhoneAuthCredential {\n    return new PhoneAuthCredential({ verificationId, verificationCode });\n  }\n\n  /** @internal */\n  static _fromTokenResponse(\n    phoneNumber: string,\n    temporaryProof: string\n  ): PhoneAuthCredential {\n    return new PhoneAuthCredential({ phoneNumber, temporaryProof });\n  }\n\n  /** @internal */\n  _getIdTokenResponse(auth: AuthInternal): Promise<PhoneOrOauthTokenResponse> {\n    return signInWithPhoneNumber(auth, this._makeVerificationRequest());\n  }\n\n  /** @internal */\n  _linkToIdToken(\n    auth: AuthInternal,\n    idToken: string\n  ): Promise<IdTokenResponse> {\n    return linkWithPhoneNumber(auth, {\n      idToken,\n      ...this._makeVerificationRequest()\n    });\n  }\n\n  /** @internal */\n  _getReauthenticationResolver(auth: AuthInternal): Promise<IdTokenResponse> {\n    return verifyPhoneNumberForExisting(auth, this._makeVerificationRequest());\n  }\n\n  /** @internal */\n  _makeVerificationRequest(): SignInWithPhoneNumberRequest {\n    const { temporaryProof, phoneNumber, verificationId, verificationCode } =\n      this.params;\n    if (temporaryProof && phoneNumber) {\n      return { temporaryProof, phoneNumber };\n    }\n\n    return {\n      sessionInfo: verificationId,\n      code: verificationCode\n    };\n  }\n\n  /** {@inheritdoc AuthCredential.toJSON} */\n  toJSON(): object {\n    const obj: Record<string, string> = {\n      providerId: this.providerId\n    };\n    if (this.params.phoneNumber) {\n      obj.phoneNumber = this.params.phoneNumber;\n    }\n    if (this.params.temporaryProof) {\n      obj.temporaryProof = this.params.temporaryProof;\n    }\n    if (this.params.verificationCode) {\n      obj.verificationCode = this.params.verificationCode;\n    }\n    if (this.params.verificationId) {\n      obj.verificationId = this.params.verificationId;\n    }\n\n    return obj;\n  }\n\n  /** Generates a phone credential based on a plain object or a JSON string. */\n  static fromJSON(json: object | string): PhoneAuthCredential | null {\n    if (typeof json === 'string') {\n      json = JSON.parse(json);\n    }\n\n    const { verificationId, verificationCode, phoneNumber, temporaryProof } =\n      json as { [key: string]: string };\n    if (\n      !verificationCode &&\n      !verificationId &&\n      !phoneNumber &&\n      !temporaryProof\n    ) {\n      return null;\n    }\n\n    return new PhoneAuthCredential({\n      verificationId,\n      verificationCode,\n      phoneNumber,\n      temporaryProof\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { extractQuerystring, querystringDecode } from '@firebase/util';\nimport { ActionCodeOperation } from '../model/public_types';\nimport { AuthErrorCode } from './errors';\nimport { _assert } from './util/assert';\n\n/**\n * Enums for fields in URL query string.\n *\n * @enum {string}\n */\nconst enum QueryField {\n  API_KEY = 'apiKey',\n  CODE = 'oobCode',\n  CONTINUE_URL = 'continueUrl',\n  LANGUAGE_CODE = 'languageCode',\n  MODE = 'mode',\n  TENANT_ID = 'tenantId'\n}\n\n/**\n * Maps the mode string in action code URL to Action Code Info operation.\n *\n * @param mode\n */\nfunction parseMode(mode: string | null): ActionCodeOperation | null {\n  switch (mode) {\n    case 'recoverEmail':\n      return ActionCodeOperation.RECOVER_EMAIL;\n    case 'resetPassword':\n      return ActionCodeOperation.PASSWORD_RESET;\n    case 'signIn':\n      return ActionCodeOperation.EMAIL_SIGNIN;\n    case 'verifyEmail':\n      return ActionCodeOperation.VERIFY_EMAIL;\n    case 'verifyAndChangeEmail':\n      return ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL;\n    case 'revertSecondFactorAddition':\n      return ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION;\n    default:\n      return null;\n  }\n}\n\n/**\n * Helper to parse FDL links\n *\n * @param url\n */\nfunction parseDeepLink(url: string): string {\n  const link = querystringDecode(extractQuerystring(url))['link'];\n\n  // Double link case (automatic redirect).\n  const doubleDeepLink = link\n    ? querystringDecode(extractQuerystring(link))['deep_link_id']\n    : null;\n  // iOS custom scheme links.\n  const iOSDeepLink = querystringDecode(extractQuerystring(url))[\n    'deep_link_id'\n  ];\n  const iOSDoubleDeepLink = iOSDeepLink\n    ? querystringDecode(extractQuerystring(iOSDeepLink))['link']\n    : null;\n  return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;\n}\n\n/**\n * A utility class to parse email action URLs such as password reset, email verification,\n * email link sign in, etc.\n *\n * @public\n */\nexport class ActionCodeURL {\n  /**\n   * The API key of the email action link.\n   */\n  readonly apiKey: string;\n  /**\n   * The action code of the email action link.\n   */\n  readonly code: string;\n  /**\n   * The continue URL of the email action link. Null if not provided.\n   */\n  readonly continueUrl: string | null;\n  /**\n   * The language code of the email action link. Null if not provided.\n   */\n  readonly languageCode: string | null;\n  /**\n   * The action performed by the email action link. It returns from one of the types from\n   * {@link ActionCodeInfo}\n   */\n  readonly operation: string;\n  /**\n   * The tenant ID of the email action link. Null if the email action is from the parent project.\n   */\n  readonly tenantId: string | null;\n\n  /**\n   * @param actionLink - The link from which to extract the URL.\n   * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\n   *\n   * @internal\n   */\n  constructor(actionLink: string) {\n    const searchParams = querystringDecode(extractQuerystring(actionLink));\n    const apiKey = searchParams[QueryField.API_KEY] ?? null;\n    const code = searchParams[QueryField.CODE] ?? null;\n    const operation = parseMode(searchParams[QueryField.MODE] ?? null);\n    // Validate API key, code and mode.\n    _assert(apiKey && code && operation, AuthErrorCode.ARGUMENT_ERROR);\n    this.apiKey = apiKey;\n    this.operation = operation;\n    this.code = code;\n    this.continueUrl = searchParams[QueryField.CONTINUE_URL] ?? null;\n    this.languageCode = searchParams[QueryField.LANGUAGE_CODE] ?? null;\n    this.tenantId = searchParams[QueryField.TENANT_ID] ?? null;\n  }\n\n  /**\n   * Parses the email action link string and returns an {@link ActionCodeURL} if the link is valid,\n   * otherwise returns null.\n   *\n   * @param link  - The email action link string.\n   * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\n   *\n   * @public\n   */\n  static parseLink(link: string): ActionCodeURL | null {\n    const actionLink = parseDeepLink(link);\n    try {\n      return new ActionCodeURL(actionLink);\n    } catch {\n      return null;\n    }\n  }\n}\n\n/**\n * Parses the email action link string and returns an {@link ActionCodeURL} if\n * the link is valid, otherwise returns null.\n *\n * @public\n */\nexport function parseActionCodeURL(link: string): ActionCodeURL | null {\n  return ActionCodeURL.parseLink(link);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ProviderId, SignInMethod } from '../../model/enums';\nimport { AuthProvider } from '../../model/public_types';\n\nimport { ActionCodeURL } from '../action_code_url';\nimport { EmailAuthCredential } from '../credentials/email';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\n\n/**\n * Provider for generating {@link EmailAuthCredential}.\n *\n * @public\n */\nexport class EmailAuthProvider implements AuthProvider {\n  /**\n   * Always set to {@link ProviderId}.PASSWORD, even for email link.\n   */\n  static readonly PROVIDER_ID: 'password' = ProviderId.PASSWORD;\n  /**\n   * Always set to {@link SignInMethod}.EMAIL_PASSWORD.\n   */\n  static readonly EMAIL_PASSWORD_SIGN_IN_METHOD: 'password' =\n    SignInMethod.EMAIL_PASSWORD;\n  /**\n   * Always set to {@link SignInMethod}.EMAIL_LINK.\n   */\n  static readonly EMAIL_LINK_SIGN_IN_METHOD: 'emailLink' =\n    SignInMethod.EMAIL_LINK;\n  /**\n   * Always set to {@link ProviderId}.PASSWORD, even for email link.\n   */\n  readonly providerId = EmailAuthProvider.PROVIDER_ID;\n\n  /**\n   * Initialize an {@link AuthCredential} using an email and password.\n   *\n   * @example\n   * ```javascript\n   * const authCredential = EmailAuthProvider.credential(email, password);\n   * const userCredential = await signInWithCredential(auth, authCredential);\n   * ```\n   *\n   * @example\n   * ```javascript\n   * const userCredential = await signInWithEmailAndPassword(auth, email, password);\n   * ```\n   *\n   * @param email - Email address.\n   * @param password - User account password.\n   * @returns The auth provider credential.\n   */\n  static credential(email: string, password: string): EmailAuthCredential {\n    return EmailAuthCredential._fromEmailAndPassword(email, password);\n  }\n\n  /**\n   * Initialize an {@link AuthCredential} using an email and an email link after a sign in with\n   * email link operation.\n   *\n   * @example\n   * ```javascript\n   * const authCredential = EmailAuthProvider.credentialWithLink(auth, email, emailLink);\n   * const userCredential = await signInWithCredential(auth, authCredential);\n   * ```\n   *\n   * @example\n   * ```javascript\n   * await sendSignInLinkToEmail(auth, email);\n   * // Obtain emailLink from user.\n   * const userCredential = await signInWithEmailLink(auth, email, emailLink);\n   * ```\n   *\n   * @param auth - The {@link Auth} instance used to verify the link.\n   * @param email - Email address.\n   * @param emailLink - Sign-in email link.\n   * @returns - The auth provider credential.\n   */\n  static credentialWithLink(\n    email: string,\n    emailLink: string\n  ): EmailAuthCredential {\n    const actionCodeUrl = ActionCodeURL.parseLink(emailLink);\n    _assert(actionCodeUrl, AuthErrorCode.ARGUMENT_ERROR);\n\n    return EmailAuthCredential._fromEmailAndCode(\n      email,\n      actionCodeUrl.code,\n      actionCodeUrl.tenantId\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthProvider } from '../../model/public_types';\n\n/**\n * Map of OAuth Custom Parameters.\n *\n * @public\n */\nexport type CustomParameters = Record<string, string>;\n\n/**\n * The base class for all Federated providers (OAuth (including OIDC), SAML).\n *\n * This class is not meant to be instantiated directly.\n *\n * @public\n */\nexport abstract class FederatedAuthProvider implements AuthProvider {\n  /** @internal */\n  defaultLanguageCode: string | null = null;\n  /** @internal */\n  private customParameters: CustomParameters = {};\n\n  /**\n   * Constructor for generic OAuth providers.\n   *\n   * @param providerId - Provider for which credentials should be generated.\n   */\n  constructor(readonly providerId: string) {}\n\n  /**\n   * Set the language gode.\n   *\n   * @param languageCode - language code\n   */\n  setDefaultLanguage(languageCode: string | null): void {\n    this.defaultLanguageCode = languageCode;\n  }\n\n  /**\n   * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in\n   * operations.\n   *\n   * @remarks\n   * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,\n   * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.\n   *\n   * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.\n   */\n  setCustomParameters(customOAuthParameters: CustomParameters): AuthProvider {\n    this.customParameters = customOAuthParameters;\n    return this;\n  }\n\n  /**\n   * Retrieve the current list of {@link CustomParameters}.\n   */\n  getCustomParameters(): CustomParameters {\n    return this.customParameters;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthProvider, UserCredential } from '../../model/public_types';\n\nimport { _assert } from '../util/assert';\nimport { AuthErrorCode } from '../errors';\n\nimport { OAuthCredential, OAuthCredentialParams } from '../credentials/oauth';\nimport { UserCredentialInternal } from '../../model/user';\nimport { FirebaseError } from '@firebase/util';\nimport { TaggedWithTokenResponse } from '../../model/id_token';\nimport { SignInWithIdpResponse } from '../../../internal';\nimport { FederatedAuthProvider } from './federated';\n\n/**\n * Defines the options for initializing an {@link OAuthCredential}.\n *\n * @remarks\n * For ID tokens with nonce claim, the raw nonce has to also be provided.\n *\n * @public\n */\nexport interface OAuthCredentialOptions {\n  /**\n   * The OAuth ID token used to initialize the {@link OAuthCredential}.\n   */\n  idToken?: string;\n  /**\n   * The OAuth access token used to initialize the {@link OAuthCredential}.\n   */\n  accessToken?: string;\n  /**\n   * The raw nonce associated with the ID token.\n   *\n   * @remarks\n   * It is required when an ID token with a nonce field is provided. The SHA-256 hash of the\n   * raw nonce must match the nonce field in the ID token.\n   */\n  rawNonce?: string;\n}\n\n/**\n * Common code to all OAuth providers. This is separate from the\n * {@link OAuthProvider} so that child providers (like\n * {@link GoogleAuthProvider}) don't inherit the `credential` instance method.\n * Instead, they rely on a static `credential` method.\n */\nexport abstract class BaseOAuthProvider\n  extends FederatedAuthProvider\n  implements AuthProvider\n{\n  /** @internal */\n  private scopes: string[] = [];\n\n  /**\n   * Add an OAuth scope to the credential.\n   *\n   * @param scope - Provider OAuth scope to add.\n   */\n  addScope(scope: string): AuthProvider {\n    // If not already added, add scope to list.\n    if (!this.scopes.includes(scope)) {\n      this.scopes.push(scope);\n    }\n    return this;\n  }\n\n  /**\n   * Retrieve the current list of OAuth scopes.\n   */\n  getScopes(): string[] {\n    return [...this.scopes];\n  }\n}\n\n/**\n * Provider for generating generic {@link OAuthCredential}.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new OAuthProvider('google.com');\n * // Start a sign in process for an unauthenticated user.\n * provider.addScope('profile');\n * provider.addScope('email');\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a OAuth Access Token for the provider.\n *   const credential = provider.credentialFromResult(auth, result);\n *   const token = credential.accessToken;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new OAuthProvider('google.com');\n * provider.addScope('profile');\n * provider.addScope('email');\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a OAuth Access Token for the provider.\n * const credential = provider.credentialFromResult(auth, result);\n * const token = credential.accessToken;\n * ```\n * @public\n */\nexport class OAuthProvider extends BaseOAuthProvider {\n  /**\n   * Creates an {@link OAuthCredential} from a JSON string or a plain object.\n   * @param json - A plain object or a JSON string\n   */\n  static credentialFromJSON(json: object | string): OAuthCredential {\n    const obj = typeof json === 'string' ? JSON.parse(json) : json;\n    _assert(\n      'providerId' in obj && 'signInMethod' in obj,\n      AuthErrorCode.ARGUMENT_ERROR\n    );\n    return OAuthCredential._fromParams(obj);\n  }\n\n  /**\n   * Creates a {@link OAuthCredential} from a generic OAuth provider's access token or ID token.\n   *\n   * @remarks\n   * The raw nonce is required when an ID token with a nonce field is provided. The SHA-256 hash of\n   * the raw nonce must match the nonce field in the ID token.\n   *\n   * @example\n   * ```javascript\n   * // `googleUser` from the onsuccess Google Sign In callback.\n   * // Initialize a generate OAuth provider with a `google.com` providerId.\n   * const provider = new OAuthProvider('google.com');\n   * const credential = provider.credential({\n   *   idToken: googleUser.getAuthResponse().id_token,\n   * });\n   * const result = await signInWithCredential(credential);\n   * ```\n   *\n   * @param params - Either the options object containing the ID token, access token and raw nonce\n   * or the ID token string.\n   */\n  credential(params: OAuthCredentialOptions): OAuthCredential {\n    return this._credential({ ...params, nonce: params.rawNonce });\n  }\n\n  /** An internal credential method that accepts more permissive options */\n  private _credential(\n    params: Omit<OAuthCredentialParams, 'signInMethod' | 'providerId'>\n  ): OAuthCredential {\n    _assert(params.idToken || params.accessToken, AuthErrorCode.ARGUMENT_ERROR);\n    // For OAuthCredential, sign in method is same as providerId.\n    return OAuthCredential._fromParams({\n      ...params,\n      providerId: this.providerId,\n      signInMethod: this.providerId\n    });\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(\n    userCredential: UserCredential\n  ): OAuthCredential | null {\n    return OAuthProvider.oauthCredentialFromTaggedObject(\n      userCredential as UserCredentialInternal\n    );\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error: FirebaseError): OAuthCredential | null {\n    return OAuthProvider.oauthCredentialFromTaggedObject(\n      (error.customData || {}) as TaggedWithTokenResponse\n    );\n  }\n\n  private static oauthCredentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }: TaggedWithTokenResponse): OAuthCredential | null {\n    if (!tokenResponse) {\n      return null;\n    }\n\n    const {\n      oauthIdToken,\n      oauthAccessToken,\n      oauthTokenSecret,\n      pendingToken,\n      nonce,\n      providerId\n    } = tokenResponse as SignInWithIdpResponse;\n    if (\n      !oauthAccessToken &&\n      !oauthTokenSecret &&\n      !oauthIdToken &&\n      !pendingToken\n    ) {\n      return null;\n    }\n\n    if (!providerId) {\n      return null;\n    }\n\n    try {\n      return new OAuthProvider(providerId)._credential({\n        idToken: oauthIdToken,\n        accessToken: oauthAccessToken,\n        nonce,\n        pendingToken\n      });\n    } catch (e) {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserCredential } from '../../model/public_types';\nimport { FirebaseError } from '@firebase/util';\n\nimport { TaggedWithTokenResponse } from '../../model/id_token';\nimport { UserCredentialInternal } from '../../model/user';\nimport { OAuthCredential } from '../credentials/oauth';\nimport { BaseOAuthProvider } from './oauth';\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\n/**\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.FACEBOOK.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new FacebookAuthProvider();\n * // Start a sign in process for an unauthenticated user.\n * provider.addScope('user_birthday');\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Facebook Access Token.\n *   const credential = FacebookAuthProvider.credentialFromResult(result);\n *   const token = credential.accessToken;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new FacebookAuthProvider();\n * provider.addScope('user_birthday');\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a Facebook Access Token.\n * const credential = FacebookAuthProvider.credentialFromResult(result);\n * const token = credential.accessToken;\n * ```\n *\n * @public\n */\nexport class FacebookAuthProvider extends BaseOAuthProvider {\n  /** Always set to {@link SignInMethod}.FACEBOOK. */\n  static readonly FACEBOOK_SIGN_IN_METHOD: 'facebook.com' =\n    SignInMethod.FACEBOOK;\n  /** Always set to {@link ProviderId}.FACEBOOK. */\n  static readonly PROVIDER_ID: 'facebook.com' = ProviderId.FACEBOOK;\n\n  constructor() {\n    super(ProviderId.FACEBOOK);\n  }\n\n  /**\n   * Creates a credential for Facebook.\n   *\n   * @example\n   * ```javascript\n   * // `event` from the Facebook auth.authResponseChange callback.\n   * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);\n   * const result = await signInWithCredential(credential);\n   * ```\n   *\n   * @param accessToken - Facebook access token.\n   */\n  static credential(accessToken: string): OAuthCredential {\n    return OAuthCredential._fromParams({\n      providerId: FacebookAuthProvider.PROVIDER_ID,\n      signInMethod: FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD,\n      accessToken\n    });\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(\n    userCredential: UserCredential\n  ): OAuthCredential | null {\n    return FacebookAuthProvider.credentialFromTaggedObject(\n      userCredential as UserCredentialInternal\n    );\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error: FirebaseError): OAuthCredential | null {\n    return FacebookAuthProvider.credentialFromTaggedObject(\n      (error.customData || {}) as TaggedWithTokenResponse\n    );\n  }\n\n  private static credentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }: TaggedWithTokenResponse): OAuthCredential | null {\n    if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\n      return null;\n    }\n\n    if (!tokenResponse.oauthAccessToken) {\n      return null;\n    }\n\n    try {\n      return FacebookAuthProvider.credential(tokenResponse.oauthAccessToken);\n    } catch {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserCredential } from '../../model/public_types';\nimport { FirebaseError } from '@firebase/util';\n\nimport { SignInWithIdpResponse } from '../../api/authentication/idp';\nimport { TaggedWithTokenResponse } from '../../model/id_token';\nimport { UserCredentialInternal } from '../../model/user';\nimport { OAuthCredential } from '../credentials/oauth';\nimport { BaseOAuthProvider } from './oauth';\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\n/**\n * Provider for generating an an {@link OAuthCredential} for {@link ProviderId}.GOOGLE.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new GoogleAuthProvider();\n * // Start a sign in process for an unauthenticated user.\n * provider.addScope('profile');\n * provider.addScope('email');\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Google Access Token.\n *   const credential = GoogleAuthProvider.credentialFromResult(result);\n *   const token = credential.accessToken;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new GoogleAuthProvider();\n * provider.addScope('profile');\n * provider.addScope('email');\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a Google Access Token.\n * const credential = GoogleAuthProvider.credentialFromResult(result);\n * const token = credential.accessToken;\n * ```\n *\n * @public\n */\nexport class GoogleAuthProvider extends BaseOAuthProvider {\n  /** Always set to {@link SignInMethod}.GOOGLE. */\n  static readonly GOOGLE_SIGN_IN_METHOD: 'google.com' = SignInMethod.GOOGLE;\n  /** Always set to {@link ProviderId}.GOOGLE. */\n  static readonly PROVIDER_ID: 'google.com' = ProviderId.GOOGLE;\n\n  constructor() {\n    super(ProviderId.GOOGLE);\n    this.addScope('profile');\n  }\n\n  /**\n   * Creates a credential for Google. At least one of ID token and access token is required.\n   *\n   * @example\n   * ```javascript\n   * // \\`googleUser\\` from the onsuccess Google Sign In callback.\n   * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);\n   * const result = await signInWithCredential(credential);\n   * ```\n   *\n   * @param idToken - Google ID token.\n   * @param accessToken - Google access token.\n   */\n  static credential(\n    idToken?: string | null,\n    accessToken?: string | null\n  ): OAuthCredential {\n    return OAuthCredential._fromParams({\n      providerId: GoogleAuthProvider.PROVIDER_ID,\n      signInMethod: GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD,\n      idToken,\n      accessToken\n    });\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(\n    userCredential: UserCredential\n  ): OAuthCredential | null {\n    return GoogleAuthProvider.credentialFromTaggedObject(\n      userCredential as UserCredentialInternal\n    );\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error: FirebaseError): OAuthCredential | null {\n    return GoogleAuthProvider.credentialFromTaggedObject(\n      (error.customData || {}) as TaggedWithTokenResponse\n    );\n  }\n\n  private static credentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }: TaggedWithTokenResponse): OAuthCredential | null {\n    if (!tokenResponse) {\n      return null;\n    }\n\n    const { oauthIdToken, oauthAccessToken } =\n      tokenResponse as SignInWithIdpResponse;\n    if (!oauthIdToken && !oauthAccessToken) {\n      // This could be an oauth 1 credential or a phone credential\n      return null;\n    }\n\n    try {\n      return GoogleAuthProvider.credential(oauthIdToken, oauthAccessToken);\n    } catch {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserCredential } from '../../model/public_types';\nimport { FirebaseError } from '@firebase/util';\n\nimport { TaggedWithTokenResponse } from '../../model/id_token';\nimport { UserCredentialInternal } from '../../model/user';\nimport { OAuthCredential } from '../credentials/oauth';\nimport { BaseOAuthProvider } from './oauth';\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\n/**\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GITHUB.\n *\n * @remarks\n * GitHub requires an OAuth 2.0 redirect, so you can either handle the redirect directly, or use\n * the {@link signInWithPopup} handler:\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new GithubAuthProvider();\n * // Start a sign in process for an unauthenticated user.\n * provider.addScope('repo');\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Github Access Token.\n *   const credential = GithubAuthProvider.credentialFromResult(result);\n *   const token = credential.accessToken;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new GithubAuthProvider();\n * provider.addScope('repo');\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a Github Access Token.\n * const credential = GithubAuthProvider.credentialFromResult(result);\n * const token = credential.accessToken;\n * ```\n * @public\n */\nexport class GithubAuthProvider extends BaseOAuthProvider {\n  /** Always set to {@link SignInMethod}.GITHUB. */\n  static readonly GITHUB_SIGN_IN_METHOD: 'github.com' = SignInMethod.GITHUB;\n  /** Always set to {@link ProviderId}.GITHUB. */\n  static readonly PROVIDER_ID: 'github.com' = ProviderId.GITHUB;\n\n  constructor() {\n    super(ProviderId.GITHUB);\n  }\n\n  /**\n   * Creates a credential for Github.\n   *\n   * @param accessToken - Github access token.\n   */\n  static credential(accessToken: string): OAuthCredential {\n    return OAuthCredential._fromParams({\n      providerId: GithubAuthProvider.PROVIDER_ID,\n      signInMethod: GithubAuthProvider.GITHUB_SIGN_IN_METHOD,\n      accessToken\n    });\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(\n    userCredential: UserCredential\n  ): OAuthCredential | null {\n    return GithubAuthProvider.credentialFromTaggedObject(\n      userCredential as UserCredentialInternal\n    );\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error: FirebaseError): OAuthCredential | null {\n    return GithubAuthProvider.credentialFromTaggedObject(\n      (error.customData || {}) as TaggedWithTokenResponse\n    );\n  }\n\n  private static credentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }: TaggedWithTokenResponse): OAuthCredential | null {\n    if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\n      return null;\n    }\n\n    if (!tokenResponse.oauthAccessToken) {\n      return null;\n    }\n\n    try {\n      return GithubAuthProvider.credential(tokenResponse.oauthAccessToken);\n    } catch {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Represents the SAML credentials returned by an {@link SAMLAuthProvider}.\n *\n * @public\n */\n\nimport {\n  signInWithIdp,\n  SignInWithIdpRequest\n} from '../../api/authentication/idp';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { AuthCredential } from './auth_credential';\n\nconst IDP_REQUEST_URI = 'http://localhost';\n\n/**\n * @public\n */\nexport class SAMLAuthCredential extends AuthCredential {\n  /** @internal */\n  private constructor(\n    providerId: string,\n    private readonly pendingToken: string\n  ) {\n    super(providerId, providerId);\n  }\n\n  /** @internal */\n  _getIdTokenResponse(auth: AuthInternal): Promise<IdTokenResponse> {\n    const request = this.buildRequest();\n    return signInWithIdp(auth, request);\n  }\n\n  /** @internal */\n  _linkToIdToken(\n    auth: AuthInternal,\n    idToken: string\n  ): Promise<IdTokenResponse> {\n    const request = this.buildRequest();\n    request.idToken = idToken;\n    return signInWithIdp(auth, request);\n  }\n\n  /** @internal */\n  _getReauthenticationResolver(auth: AuthInternal): Promise<IdTokenResponse> {\n    const request = this.buildRequest();\n    request.autoCreate = false;\n    return signInWithIdp(auth, request);\n  }\n\n  /** {@inheritdoc AuthCredential.toJSON}  */\n  toJSON(): object {\n    return {\n      signInMethod: this.signInMethod,\n      providerId: this.providerId,\n      pendingToken: this.pendingToken\n    };\n  }\n\n  /**\n   * Static method to deserialize a JSON representation of an object into an\n   * {@link  AuthCredential}.\n   *\n   * @param json - Input can be either Object or the stringified representation of the object.\n   * When string is provided, JSON.parse would be called first.\n   *\n   * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\n   */\n  static fromJSON(json: string | object): SAMLAuthCredential | null {\n    const obj = typeof json === 'string' ? JSON.parse(json) : json;\n    const { providerId, signInMethod, pendingToken }: Record<string, string> =\n      obj;\n    if (\n      !providerId ||\n      !signInMethod ||\n      !pendingToken ||\n      providerId !== signInMethod\n    ) {\n      return null;\n    }\n\n    return new SAMLAuthCredential(providerId, pendingToken);\n  }\n\n  /**\n   * Helper static method to avoid exposing the constructor to end users.\n   *\n   * @internal\n   */\n  static _create(providerId: string, pendingToken: string): SAMLAuthCredential {\n    return new SAMLAuthCredential(providerId, pendingToken);\n  }\n\n  private buildRequest(): SignInWithIdpRequest {\n    return {\n      requestUri: IDP_REQUEST_URI,\n      returnSecureToken: true,\n      pendingToken: this.pendingToken\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { SignInWithIdpResponse } from '../../api/authentication/idp';\nimport { TaggedWithTokenResponse } from '../../model/id_token';\nimport { UserCredential } from '../../model/public_types';\nimport { UserCredentialInternal } from '../../model/user';\nimport { AuthCredential } from '../credentials';\nimport { SAMLAuthCredential } from '../credentials/saml';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\nimport { FederatedAuthProvider } from './federated';\n\nconst SAML_PROVIDER_PREFIX = 'saml.';\n\n/**\n * An {@link AuthProvider} for SAML.\n *\n * @public\n */\nexport class SAMLAuthProvider extends FederatedAuthProvider {\n  /**\n   * Constructor. The providerId must start with \"saml.\"\n   * @param providerId - SAML provider ID.\n   */\n  constructor(providerId: string) {\n    _assert(\n      providerId.startsWith(SAML_PROVIDER_PREFIX),\n      AuthErrorCode.ARGUMENT_ERROR\n    );\n    super(providerId);\n  }\n\n  /**\n   * Generates an {@link AuthCredential} from a {@link UserCredential} after a\n   * successful SAML flow completes.\n   *\n   * @remarks\n   *\n   * For example, to get an {@link AuthCredential}, you could write the\n   * following code:\n   *\n   * ```js\n   * const userCredential = await signInWithPopup(auth, samlProvider);\n   * const credential = SAMLAuthProvider.credentialFromResult(userCredential);\n   * ```\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(\n    userCredential: UserCredential\n  ): AuthCredential | null {\n    return SAMLAuthProvider.samlCredentialFromTaggedObject(\n      userCredential as UserCredentialInternal\n    );\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error: FirebaseError): AuthCredential | null {\n    return SAMLAuthProvider.samlCredentialFromTaggedObject(\n      (error.customData || {}) as TaggedWithTokenResponse\n    );\n  }\n\n  /**\n   * Creates an {@link AuthCredential} from a JSON string or a plain object.\n   * @param json - A plain object or a JSON string\n   */\n  static credentialFromJSON(json: string | object): AuthCredential {\n    const credential = SAMLAuthCredential.fromJSON(json);\n    _assert(credential, AuthErrorCode.ARGUMENT_ERROR);\n    return credential;\n  }\n\n  private static samlCredentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }: TaggedWithTokenResponse): SAMLAuthCredential | null {\n    if (!tokenResponse) {\n      return null;\n    }\n\n    const { pendingToken, providerId } = tokenResponse as SignInWithIdpResponse;\n\n    if (!pendingToken || !providerId) {\n      return null;\n    }\n\n    try {\n      return SAMLAuthCredential._create(providerId, pendingToken);\n    } catch (e) {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @license\n * Copyright 2020 Twitter LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserCredential } from '../../model/public_types';\nimport { FirebaseError } from '@firebase/util';\n\nimport { SignInWithIdpResponse } from '../../api/authentication/idp';\nimport { TaggedWithTokenResponse } from '../../model/id_token';\nimport { UserCredentialInternal } from '../../model/user';\nimport { OAuthCredential } from '../credentials/oauth';\nimport { BaseOAuthProvider } from './oauth';\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\n/**\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.TWITTER.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new TwitterAuthProvider();\n * // Start a sign in process for an unauthenticated user.\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Twitter Access Token and Secret.\n *   const credential = TwitterAuthProvider.credentialFromResult(result);\n *   const token = credential.accessToken;\n *   const secret = credential.secret;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new TwitterAuthProvider();\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a Twitter Access Token and Secret.\n * const credential = TwitterAuthProvider.credentialFromResult(result);\n * const token = credential.accessToken;\n * const secret = credential.secret;\n * ```\n *\n * @public\n */\nexport class TwitterAuthProvider extends BaseOAuthProvider {\n  /** Always set to {@link SignInMethod}.TWITTER. */\n  static readonly TWITTER_SIGN_IN_METHOD: 'twitter.com' = SignInMethod.TWITTER;\n  /** Always set to {@link ProviderId}.TWITTER. */\n  static readonly PROVIDER_ID: 'twitter.com' = ProviderId.TWITTER;\n\n  constructor() {\n    super(ProviderId.TWITTER);\n  }\n\n  /**\n   * Creates a credential for Twitter.\n   *\n   * @param token - Twitter access token.\n   * @param secret - Twitter secret.\n   */\n  static credential(token: string, secret: string): OAuthCredential {\n    return OAuthCredential._fromParams({\n      providerId: TwitterAuthProvider.PROVIDER_ID,\n      signInMethod: TwitterAuthProvider.TWITTER_SIGN_IN_METHOD,\n      oauthToken: token,\n      oauthTokenSecret: secret\n    });\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(\n    userCredential: UserCredential\n  ): OAuthCredential | null {\n    return TwitterAuthProvider.credentialFromTaggedObject(\n      userCredential as UserCredentialInternal\n    );\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error: FirebaseError): OAuthCredential | null {\n    return TwitterAuthProvider.credentialFromTaggedObject(\n      (error.customData || {}) as TaggedWithTokenResponse\n    );\n  }\n\n  private static credentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }: TaggedWithTokenResponse): OAuthCredential | null {\n    if (!tokenResponse) {\n      return null;\n    }\n    const { oauthAccessToken, oauthTokenSecret } =\n      tokenResponse as SignInWithIdpResponse;\n    if (!oauthAccessToken || !oauthTokenSecret) {\n      return null;\n    }\n\n    try {\n      return TwitterAuthProvider.credential(oauthAccessToken, oauthTokenSecret);\n    } catch {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  HttpMethod,\n  RecaptchaClientType,\n  RecaptchaVersion,\n  _addTidIfNecessary,\n  _performSignInRequest\n} from '../index';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { Auth } from '../../model/public_types';\n\nexport interface SignUpRequest {\n  returnSecureToken?: boolean;\n  email?: string;\n  password?: string;\n  tenantId?: string;\n  captchaResponse?: string;\n  clientType?: RecaptchaClientType;\n  recaptchaVersion?: RecaptchaVersion;\n}\n\nexport interface SignUpResponse extends IdTokenResponse {\n  displayName?: string;\n  email?: string;\n}\n\nexport async function signUp(\n  auth: Auth,\n  request: SignUpRequest\n): Promise<SignUpResponse> {\n  return _performSignInRequest<SignUpRequest, SignUpResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_UP,\n    _addTidIfNecessary(auth, request)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PhoneOrOauthTokenResponse } from '../../api/authentication/mfa';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { UserInternal, UserCredentialInternal } from '../../model/user';\nimport { UserImpl } from './user_impl';\nimport { AuthInternal } from '../../model/auth';\nimport { OperationType, ProviderId } from '../../model/enums';\n\ninterface UserCredentialParams {\n  readonly user: UserInternal;\n  readonly providerId: ProviderId | string | null;\n  readonly _tokenResponse?: PhoneOrOauthTokenResponse;\n  readonly operationType: OperationType;\n}\n\nexport class UserCredentialImpl\n  implements UserCredentialInternal, UserCredentialParams\n{\n  readonly user: UserInternal;\n  readonly providerId: ProviderId | string | null;\n  readonly _tokenResponse: PhoneOrOauthTokenResponse | undefined;\n  readonly operationType: OperationType;\n\n  constructor(params: UserCredentialParams) {\n    this.user = params.user;\n    this.providerId = params.providerId;\n    this._tokenResponse = params._tokenResponse;\n    this.operationType = params.operationType;\n  }\n\n  static async _fromIdTokenResponse(\n    auth: AuthInternal,\n    operationType: OperationType,\n    idTokenResponse: IdTokenResponse,\n    isAnonymous: boolean = false\n  ): Promise<UserCredentialInternal> {\n    const user = await UserImpl._fromIdTokenResponse(\n      auth,\n      idTokenResponse,\n      isAnonymous\n    );\n    const providerId = providerIdForResponse(idTokenResponse);\n    const userCred = new UserCredentialImpl({\n      user,\n      providerId,\n      _tokenResponse: idTokenResponse,\n      operationType\n    });\n    return userCred;\n  }\n\n  static async _forOperation(\n    user: UserInternal,\n    operationType: OperationType,\n    response: PhoneOrOauthTokenResponse\n  ): Promise<UserCredentialImpl> {\n    await user._updateTokensIfNecessary(response, /* reload */ true);\n    const providerId = providerIdForResponse(response);\n    return new UserCredentialImpl({\n      user,\n      providerId,\n      _tokenResponse: response,\n      operationType\n    });\n  }\n}\n\nfunction providerIdForResponse(\n  response: IdTokenResponse\n): ProviderId | string | null {\n  if (response.providerId) {\n    return response.providerId;\n  }\n\n  if ('phoneNumber' in response) {\n    return ProviderId.PHONE;\n  }\n\n  return null;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Auth, UserCredential } from '../../model/public_types';\nimport { signUp } from '../../api/authentication/sign_up';\nimport { UserInternal } from '../../model/user';\nimport { UserCredentialImpl } from '../user/user_credential_impl';\nimport { _castAuth } from '../auth/auth_impl';\nimport { OperationType } from '../../model/enums';\n\n/**\n * Asynchronously signs in as an anonymous user.\n *\n * @remarks\n * If there is already an anonymous user signed in, that user will be returned; otherwise, a\n * new anonymous user identity will be created and returned.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @public\n */\nexport async function signInAnonymously(auth: Auth): Promise<UserCredential> {\n  const authInternal = _castAuth(auth);\n  await authInternal._initializationPromise;\n  if (authInternal.currentUser?.isAnonymous) {\n    // If an anonymous user is already signed in, no need to sign them in again.\n    return new UserCredentialImpl({\n      user: authInternal.currentUser as UserInternal,\n      providerId: null,\n      operationType: OperationType.SIGN_IN\n    });\n  }\n  const response = await signUp(authInternal, {\n    returnSecureToken: true\n  });\n  const userCredential = await UserCredentialImpl._fromIdTokenResponse(\n    authInternal,\n    OperationType.SIGN_IN,\n    response,\n    true\n  );\n  await authInternal._updateCurrentUser(userCredential.user);\n  return userCredential;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MultiFactorError as MultiFactorErrorPublic } from '../model/public_types';\nimport { FirebaseError } from '@firebase/util';\nimport { AuthInternal } from '../model/auth';\nimport { IdTokenResponse } from '../model/id_token';\nimport { AuthErrorCode } from '../core/errors';\nimport { UserInternal } from '../model/user';\nimport { AuthCredential } from '../core/credentials';\nimport { IdTokenMfaResponse } from '../api/authentication/mfa';\nimport { OperationType } from '../model/enums';\n\nexport type MultiFactorErrorData = MultiFactorErrorPublic['customData'] & {\n  _serverResponse: IdTokenMfaResponse;\n};\n\nexport class MultiFactorError\n  extends FirebaseError\n  implements MultiFactorErrorPublic\n{\n  readonly customData: MultiFactorErrorData;\n\n  private constructor(\n    auth: AuthInternal,\n    error: FirebaseError,\n    readonly operationType: OperationType,\n    readonly user?: UserInternal\n  ) {\n    super(error.code, error.message);\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, MultiFactorError.prototype);\n    this.customData = {\n      appName: auth.name,\n      tenantId: auth.tenantId ?? undefined,\n      _serverResponse: error.customData!._serverResponse as IdTokenMfaResponse,\n      operationType\n    };\n  }\n\n  static _fromErrorAndOperation(\n    auth: AuthInternal,\n    error: FirebaseError,\n    operationType: OperationType,\n    user?: UserInternal\n  ): MultiFactorError {\n    return new MultiFactorError(auth, error, operationType, user);\n  }\n}\n\nexport function _processCredentialSavingMfaContextIfNecessary(\n  auth: AuthInternal,\n  operationType: OperationType,\n  credential: AuthCredential,\n  user?: UserInternal\n): Promise<IdTokenResponse> {\n  const idTokenProvider =\n    operationType === OperationType.REAUTHENTICATE\n      ? credential._getReauthenticationResolver(auth)\n      : credential._getIdTokenResponse(auth);\n\n  return idTokenProvider.catch(error => {\n    if (error.code === `auth/${AuthErrorCode.MFA_REQUIRED}`) {\n      throw MultiFactorError._fromErrorAndOperation(\n        auth,\n        error,\n        operationType,\n        user\n      );\n    }\n\n    throw error;\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface ProviderAssociatedObject {\n  providerId?: string;\n}\n\n/**\n * Takes a set of UserInfo provider data and converts it to a set of names\n */\nexport function providerDataAsNames<T extends ProviderAssociatedObject>(\n  providerData: T[]\n): Set<string> {\n  return new Set(\n    providerData\n      .map(({ providerId }) => providerId)\n      .filter(pid => !!pid) as string[]\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../../model/public_types';\n\nimport { deleteLinkedAccounts } from '../../api/account_management/account';\nimport { UserInternal, UserCredentialInternal } from '../../model/user';\nimport { AuthCredential } from '../credentials';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\nimport { providerDataAsNames } from '../util/providers';\nimport { _logoutIfInvalidated } from './invalidation';\nimport { _reloadWithoutSaving } from './reload';\nimport { UserCredentialImpl } from './user_credential_impl';\nimport { getModularInstance } from '@firebase/util';\nimport { OperationType, ProviderId } from '../../model/enums';\n\n/**\n * Unlinks a provider from a user account.\n *\n * @param user - The user.\n * @param providerId - The provider to unlink.\n *\n * @public\n */\nexport async function unlink(user: User, providerId: string): Promise<User> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  await _assertLinkedStatus(true, userInternal, providerId);\n  const { providerUserInfo } = await deleteLinkedAccounts(userInternal.auth, {\n    idToken: await userInternal.getIdToken(),\n    deleteProvider: [providerId]\n  });\n\n  const providersLeft = providerDataAsNames(providerUserInfo || []);\n\n  userInternal.providerData = userInternal.providerData.filter(pd =>\n    providersLeft.has(pd.providerId)\n  );\n  if (!providersLeft.has(ProviderId.PHONE)) {\n    userInternal.phoneNumber = null;\n  }\n\n  await userInternal.auth._persistUserIfCurrent(userInternal);\n  return userInternal;\n}\n\nexport async function _link(\n  user: UserInternal,\n  credential: AuthCredential,\n  bypassAuthState = false\n): Promise<UserCredentialInternal> {\n  const response = await _logoutIfInvalidated(\n    user,\n    credential._linkToIdToken(user.auth, await user.getIdToken()),\n    bypassAuthState\n  );\n  return UserCredentialImpl._forOperation(user, OperationType.LINK, response);\n}\n\nexport async function _assertLinkedStatus(\n  expected: boolean,\n  user: UserInternal,\n  provider: string\n): Promise<void> {\n  await _reloadWithoutSaving(user);\n  const providerIds = providerDataAsNames(user.providerData);\n\n  const code =\n    expected === false\n      ? AuthErrorCode.PROVIDER_ALREADY_LINKED\n      : AuthErrorCode.NO_SUCH_PROVIDER;\n  _assert(providerIds.has(provider) === expected, user.auth, code);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { _processCredentialSavingMfaContextIfNecessary } from '../../mfa/mfa_error';\nimport { OperationType } from '../../model/enums';\nimport { UserInternal } from '../../model/user';\nimport { AuthCredential } from '../credentials';\nimport { AuthErrorCode } from '../errors';\nimport { _assert, _fail } from '../util/assert';\nimport { _parseToken } from './id_token_result';\nimport { _logoutIfInvalidated } from './invalidation';\nimport { UserCredentialImpl } from './user_credential_impl';\n\nexport async function _reauthenticate(\n  user: UserInternal,\n  credential: AuthCredential,\n  bypassAuthState = false\n): Promise<UserCredentialImpl> {\n  const { auth } = user;\n  const operationType = OperationType.REAUTHENTICATE;\n\n  try {\n    const response = await _logoutIfInvalidated(\n      user,\n      _processCredentialSavingMfaContextIfNecessary(\n        auth,\n        operationType,\n        credential,\n        user\n      ),\n      bypassAuthState\n    );\n    _assert(response.idToken, auth, AuthErrorCode.INTERNAL_ERROR);\n    const parsed = _parseToken(response.idToken);\n    _assert(parsed, auth, AuthErrorCode.INTERNAL_ERROR);\n\n    const { sub: localId } = parsed;\n    _assert(user.uid === localId, auth, AuthErrorCode.USER_MISMATCH);\n\n    return UserCredentialImpl._forOperation(user, operationType, response);\n  } catch (e) {\n    // Convert user deleted error into user mismatch\n    if ((e as FirebaseError)?.code === `auth/${AuthErrorCode.USER_DELETED}`) {\n      _fail(auth, AuthErrorCode.USER_MISMATCH);\n    }\n    throw e;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserCredential, Auth, User } from '../../model/public_types';\n\nimport { _processCredentialSavingMfaContextIfNecessary } from '../../mfa/mfa_error';\nimport { AuthInternal } from '../../model/auth';\nimport { UserInternal } from '../../model/user';\nimport { AuthCredential } from '../credentials';\nimport { _assertLinkedStatus, _link } from '../user/link_unlink';\nimport { _reauthenticate } from '../user/reauthenticate';\nimport { UserCredentialImpl } from '../user/user_credential_impl';\nimport { _castAuth } from '../auth/auth_impl';\nimport { getModularInstance } from '@firebase/util';\nimport { OperationType } from '../../model/enums';\n\nexport async function _signInWithCredential(\n  auth: AuthInternal,\n  credential: AuthCredential,\n  bypassAuthState = false\n): Promise<UserCredential> {\n  const operationType = OperationType.SIGN_IN;\n  const response = await _processCredentialSavingMfaContextIfNecessary(\n    auth,\n    operationType,\n    credential\n  );\n  const userCredential = await UserCredentialImpl._fromIdTokenResponse(\n    auth,\n    operationType,\n    response\n  );\n\n  if (!bypassAuthState) {\n    await auth._updateCurrentUser(userCredential.user);\n  }\n  return userCredential;\n}\n\n/**\n * Asynchronously signs in with the given credentials.\n *\n * @remarks\n * An {@link AuthProvider} can be used to generate the credential.\n *\n * @param auth - The {@link Auth} instance.\n * @param credential - The auth credential.\n *\n * @public\n */\nexport async function signInWithCredential(\n  auth: Auth,\n  credential: AuthCredential\n): Promise<UserCredential> {\n  return _signInWithCredential(_castAuth(auth), credential);\n}\n\n/**\n * Links the user account with the given credentials.\n *\n * @remarks\n * An {@link AuthProvider} can be used to generate the credential.\n *\n * @param user - The user.\n * @param credential - The auth credential.\n *\n * @public\n */\nexport async function linkWithCredential(\n  user: User,\n  credential: AuthCredential\n): Promise<UserCredential> {\n  const userInternal = getModularInstance(user) as UserInternal;\n\n  await _assertLinkedStatus(false, userInternal, credential.providerId);\n\n  return _link(userInternal, credential);\n}\n\n/**\n * Re-authenticates a user using a fresh credential.\n *\n * @remarks\n * Use before operations such as {@link updatePassword} that require tokens from recent sign-in\n * attempts. This method can be used to recover from a `CREDENTIAL_TOO_OLD_LOGIN_AGAIN` error\n * or a `TOKEN_EXPIRED` error.\n *\n * @param user - The user.\n * @param credential - The auth credential.\n *\n * @public\n */\nexport async function reauthenticateWithCredential(\n  user: User,\n  credential: AuthCredential\n): Promise<UserCredential> {\n  return _reauthenticate(getModularInstance(user) as UserInternal, credential);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary,\n  _performSignInRequest\n} from '../index';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { Auth } from '../../model/public_types';\n\nexport interface SignInWithCustomTokenRequest {\n  token: string;\n  returnSecureToken: boolean;\n  tenantId?: string;\n}\n\nexport interface SignInWithCustomTokenResponse extends IdTokenResponse {}\n\nexport async function signInWithCustomToken(\n  auth: Auth,\n  request: SignInWithCustomTokenRequest\n): Promise<SignInWithCustomTokenResponse> {\n  return _performSignInRequest<\n    SignInWithCustomTokenRequest,\n    SignInWithCustomTokenResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_CUSTOM_TOKEN,\n    _addTidIfNecessary(auth, request)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Auth, UserCredential } from '../../model/public_types';\n\nimport { signInWithCustomToken as getIdTokenResponse } from '../../api/authentication/custom_token';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { UserCredentialImpl } from '../user/user_credential_impl';\nimport { _castAuth } from '../auth/auth_impl';\nimport { OperationType } from '../../model/enums';\n\n/**\n * Asynchronously signs in using a custom token.\n *\n * @remarks\n * Custom tokens are used to integrate Firebase Auth with existing auth systems, and must\n * be generated by an auth backend using the\n * {@link https://firebase.google.com/docs/reference/admin/node/admin.auth.Auth#createcustomtoken | createCustomToken}\n * method in the {@link https://firebase.google.com/docs/auth/admin | Admin SDK} .\n *\n * Fails with an error if the token is invalid, expired, or not accepted by the Firebase Auth service.\n *\n * @param auth - The {@link Auth} instance.\n * @param customToken - The custom token to sign in with.\n *\n * @public\n */\nexport async function signInWithCustomToken(\n  auth: Auth,\n  customToken: string\n): Promise<UserCredential> {\n  const authInternal = _castAuth(auth);\n  const response: IdTokenResponse = await getIdTokenResponse(authInternal, {\n    token: customToken,\n    returnSecureToken: true\n  });\n  const cred = await UserCredentialImpl._fromIdTokenResponse(\n    authInternal,\n    OperationType.SIGN_IN,\n    response\n  );\n  await authInternal._updateCurrentUser(cred.user);\n  return cred;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FactorId,\n  MultiFactorInfo,\n  PhoneMultiFactorInfo,\n  TotpMultiFactorInfo\n} from '../model/public_types';\nimport {\n  PhoneMfaEnrollment,\n  MfaEnrollment,\n  TotpMfaEnrollment\n} from '../api/account_management/mfa';\nimport { AuthErrorCode } from '../core/errors';\nimport { _fail } from '../core/util/assert';\nimport { AuthInternal } from '../model/auth';\n\nexport abstract class MultiFactorInfoImpl implements MultiFactorInfo {\n  readonly uid: string;\n  readonly displayName?: string | null;\n  readonly enrollmentTime: string;\n\n  protected constructor(readonly factorId: FactorId, response: MfaEnrollment) {\n    this.uid = response.mfaEnrollmentId;\n    this.enrollmentTime = new Date(response.enrolledAt).toUTCString();\n    this.displayName = response.displayName;\n  }\n\n  static _fromServerResponse(\n    auth: AuthInternal,\n    enrollment: MfaEnrollment\n  ): MultiFactorInfoImpl {\n    if ('phoneInfo' in enrollment) {\n      return PhoneMultiFactorInfoImpl._fromServerResponse(auth, enrollment);\n    } else if ('totpInfo' in enrollment) {\n      return TotpMultiFactorInfoImpl._fromServerResponse(auth, enrollment);\n    }\n    return _fail(auth, AuthErrorCode.INTERNAL_ERROR);\n  }\n}\n\nexport class PhoneMultiFactorInfoImpl\n  extends MultiFactorInfoImpl\n  implements PhoneMultiFactorInfo\n{\n  readonly phoneNumber: string;\n\n  private constructor(response: PhoneMfaEnrollment) {\n    super(FactorId.PHONE, response);\n    this.phoneNumber = response.phoneInfo;\n  }\n\n  static _fromServerResponse(\n    _auth: AuthInternal,\n    enrollment: MfaEnrollment\n  ): PhoneMultiFactorInfoImpl {\n    return new PhoneMultiFactorInfoImpl(enrollment as PhoneMfaEnrollment);\n  }\n}\nexport class TotpMultiFactorInfoImpl\n  extends MultiFactorInfoImpl\n  implements TotpMultiFactorInfo\n{\n  private constructor(response: TotpMfaEnrollment) {\n    super(FactorId.TOTP, response);\n  }\n\n  static _fromServerResponse(\n    _auth: AuthInternal,\n    enrollment: MfaEnrollment\n  ): TotpMultiFactorInfoImpl {\n    return new TotpMultiFactorInfoImpl(enrollment as TotpMfaEnrollment);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ActionCodeSettings, Auth } from '../../model/public_types';\n\nimport { GetOobCodeRequest } from '../../api/authentication/email_and_password';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\n\nexport function _setActionCodeSettingsOnRequest(\n  auth: Auth,\n  request: GetOobCodeRequest,\n  actionCodeSettings: ActionCodeSettings\n): void {\n  _assert(\n    actionCodeSettings.url?.length > 0,\n    auth,\n    AuthErrorCode.INVALID_CONTINUE_URI\n  );\n  _assert(\n    typeof actionCodeSettings.dynamicLinkDomain === 'undefined' ||\n      actionCodeSettings.dynamicLinkDomain.length > 0,\n    auth,\n    AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN\n  );\n\n  request.continueUrl = actionCodeSettings.url;\n  request.dynamicLinkDomain = actionCodeSettings.dynamicLinkDomain;\n  request.canHandleCodeInApp = actionCodeSettings.handleCodeInApp;\n\n  if (actionCodeSettings.iOS) {\n    _assert(\n      actionCodeSettings.iOS.bundleId.length > 0,\n      auth,\n      AuthErrorCode.MISSING_IOS_BUNDLE_ID\n    );\n    request.iOSBundleId = actionCodeSettings.iOS.bundleId;\n  }\n\n  if (actionCodeSettings.android) {\n    _assert(\n      actionCodeSettings.android.packageName.length > 0,\n      auth,\n      AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME\n    );\n    request.androidInstallApp = actionCodeSettings.android.installApp;\n    request.androidMinimumVersionCode =\n      actionCodeSettings.android.minimumVersion;\n    request.androidPackageName = actionCodeSettings.android.packageName;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ActionCodeInfo,\n  ActionCodeOperation,\n  ActionCodeSettings,\n  Auth,\n  UserCredential\n} from '../../model/public_types';\n\nimport * as account from '../../api/account_management/email_and_password';\nimport * as authentication from '../../api/authentication/email_and_password';\nimport { signUp, SignUpRequest } from '../../api/authentication/sign_up';\nimport { MultiFactorInfoImpl } from '../../mfa/mfa_info';\nimport { EmailAuthProvider } from '../providers/email';\nimport { UserCredentialImpl } from '../user/user_credential_impl';\nimport { _assert } from '../util/assert';\nimport { _setActionCodeSettingsOnRequest } from './action_code_settings';\nimport { signInWithCredential } from './credential';\nimport { _castAuth } from '../auth/auth_impl';\nimport { AuthErrorCode } from '../errors';\nimport { getModularInstance } from '@firebase/util';\nimport { OperationType } from '../../model/enums';\nimport { injectRecaptchaFields } from '../../platform_browser/recaptcha/recaptcha_enterprise_verifier';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { RecaptchaActionName, RecaptchaClientType } from '../../api';\n\n/**\n * Sends a password reset email to the given email address.\n *\n * @remarks\n * To complete the password reset, call {@link confirmPasswordReset} with the code supplied in\n * the email sent to the user, along with the new password specified by the user.\n *\n * @example\n * ```javascript\n * const actionCodeSettings = {\n *   url: 'https://www.example.com/?email=user@example.com',\n *   iOS: {\n *      bundleId: 'com.example.ios'\n *   },\n *   android: {\n *     packageName: 'com.example.android',\n *     installApp: true,\n *     minimumVersion: '12'\n *   },\n *   handleCodeInApp: true\n * };\n * await sendPasswordResetEmail(auth, 'user@example.com', actionCodeSettings);\n * // Obtain code from user.\n * await confirmPasswordReset('user@example.com', code);\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param email - The user's email address.\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\n *\n * @public\n */\nexport async function sendPasswordResetEmail(\n  auth: Auth,\n  email: string,\n  actionCodeSettings?: ActionCodeSettings\n): Promise<void> {\n  const authInternal = _castAuth(auth);\n  const request: authentication.PasswordResetRequest = {\n    requestType: ActionCodeOperation.PASSWORD_RESET,\n    email,\n    clientType: RecaptchaClientType.WEB\n  };\n  if (authInternal._getRecaptchaConfig()?.emailPasswordEnabled) {\n    const requestWithRecaptcha = await injectRecaptchaFields(\n      authInternal,\n      request,\n      RecaptchaActionName.GET_OOB_CODE,\n      true\n    );\n    if (actionCodeSettings) {\n      _setActionCodeSettingsOnRequest(\n        authInternal,\n        requestWithRecaptcha,\n        actionCodeSettings\n      );\n    }\n    await authentication.sendPasswordResetEmail(\n      authInternal,\n      requestWithRecaptcha\n    );\n  } else {\n    if (actionCodeSettings) {\n      _setActionCodeSettingsOnRequest(\n        authInternal,\n        request,\n        actionCodeSettings\n      );\n    }\n    await authentication\n      .sendPasswordResetEmail(authInternal, request)\n      .catch(async error => {\n        if (error.code === `auth/${AuthErrorCode.MISSING_RECAPTCHA_TOKEN}`) {\n          console.log(\n            'Password resets are protected by reCAPTCHA for this project. Automatically triggering the reCAPTCHA flow and restarting the password reset flow.'\n          );\n          const requestWithRecaptcha = await injectRecaptchaFields(\n            authInternal,\n            request,\n            RecaptchaActionName.GET_OOB_CODE,\n            true\n          );\n          if (actionCodeSettings) {\n            _setActionCodeSettingsOnRequest(\n              authInternal,\n              requestWithRecaptcha,\n              actionCodeSettings\n            );\n          }\n          await authentication.sendPasswordResetEmail(\n            authInternal,\n            requestWithRecaptcha\n          );\n        } else {\n          return Promise.reject(error);\n        }\n      });\n  }\n}\n\n/**\n * Completes the password reset process, given a confirmation code and new password.\n *\n * @param auth - The {@link Auth} instance.\n * @param oobCode - A confirmation code sent to the user.\n * @param newPassword - The new password.\n *\n * @public\n */\nexport async function confirmPasswordReset(\n  auth: Auth,\n  oobCode: string,\n  newPassword: string\n): Promise<void> {\n  await account.resetPassword(getModularInstance(auth), {\n    oobCode,\n    newPassword\n  });\n  // Do not return the email.\n}\n\n/**\n * Applies a verification code sent to the user by email or other out-of-band mechanism.\n *\n * @param auth - The {@link Auth} instance.\n * @param oobCode - A verification code sent to the user.\n *\n * @public\n */\nexport async function applyActionCode(\n  auth: Auth,\n  oobCode: string\n): Promise<void> {\n  await account.applyActionCode(getModularInstance(auth), { oobCode });\n}\n\n/**\n * Checks a verification code sent to the user by email or other out-of-band mechanism.\n *\n * @returns metadata about the code.\n *\n * @param auth - The {@link Auth} instance.\n * @param oobCode - A verification code sent to the user.\n *\n * @public\n */\nexport async function checkActionCode(\n  auth: Auth,\n  oobCode: string\n): Promise<ActionCodeInfo> {\n  const authModular = getModularInstance(auth);\n  const response = await account.resetPassword(authModular, { oobCode });\n\n  // Email could be empty only if the request type is EMAIL_SIGNIN or\n  // VERIFY_AND_CHANGE_EMAIL.\n  // New email should not be empty if the request type is\n  // VERIFY_AND_CHANGE_EMAIL.\n  // Multi-factor info could not be empty if the request type is\n  // REVERT_SECOND_FACTOR_ADDITION.\n  const operation = response.requestType;\n  _assert(operation, authModular, AuthErrorCode.INTERNAL_ERROR);\n  switch (operation) {\n    case ActionCodeOperation.EMAIL_SIGNIN:\n      break;\n    case ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL:\n      _assert(response.newEmail, authModular, AuthErrorCode.INTERNAL_ERROR);\n      break;\n    case ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION:\n      _assert(response.mfaInfo, authModular, AuthErrorCode.INTERNAL_ERROR);\n    // fall through\n    default:\n      _assert(response.email, authModular, AuthErrorCode.INTERNAL_ERROR);\n  }\n\n  // The multi-factor info for revert second factor addition\n  let multiFactorInfo: MultiFactorInfoImpl | null = null;\n  if (response.mfaInfo) {\n    multiFactorInfo = MultiFactorInfoImpl._fromServerResponse(\n      _castAuth(authModular),\n      response.mfaInfo\n    );\n  }\n\n  return {\n    data: {\n      email:\n        (response.requestType === ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL\n          ? response.newEmail\n          : response.email) || null,\n      previousEmail:\n        (response.requestType === ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL\n          ? response.email\n          : response.newEmail) || null,\n      multiFactorInfo\n    },\n    operation\n  };\n}\n\n/**\n * Checks a password reset code sent to the user by email or other out-of-band mechanism.\n *\n * @returns the user's email address if valid.\n *\n * @param auth - The {@link Auth} instance.\n * @param code - A verification code sent to the user.\n *\n * @public\n */\nexport async function verifyPasswordResetCode(\n  auth: Auth,\n  code: string\n): Promise<string> {\n  const { data } = await checkActionCode(getModularInstance(auth), code);\n  // Email should always be present since a code was sent to it\n  return data.email!;\n}\n\n/**\n * Creates a new user account associated with the specified email address and password.\n *\n * @remarks\n * On successful creation of the user account, this user will also be signed in to your application.\n *\n * User account creation can fail if the account already exists or the password is invalid.\n *\n * Note: The email address acts as a unique identifier for the user and enables an email-based\n * password reset. This function will create a new user account and set the initial user password.\n *\n * @param auth - The {@link Auth} instance.\n * @param email - The user's email address.\n * @param password - The user's chosen password.\n *\n * @public\n */\nexport async function createUserWithEmailAndPassword(\n  auth: Auth,\n  email: string,\n  password: string\n): Promise<UserCredential> {\n  const authInternal = _castAuth(auth);\n  const request: SignUpRequest = {\n    returnSecureToken: true,\n    email,\n    password,\n    clientType: RecaptchaClientType.WEB\n  };\n  let signUpResponse: Promise<IdTokenResponse>;\n  if (authInternal._getRecaptchaConfig()?.emailPasswordEnabled) {\n    const requestWithRecaptcha = await injectRecaptchaFields(\n      authInternal,\n      request,\n      RecaptchaActionName.SIGN_UP_PASSWORD\n    );\n    signUpResponse = signUp(authInternal, requestWithRecaptcha);\n  } else {\n    signUpResponse = signUp(authInternal, request).catch(async error => {\n      if (error.code === `auth/${AuthErrorCode.MISSING_RECAPTCHA_TOKEN}`) {\n        console.log(\n          'Sign-up is protected by reCAPTCHA for this project. Automatically triggering the reCAPTCHA flow and restarting the sign-up flow.'\n        );\n        const requestWithRecaptcha = await injectRecaptchaFields(\n          authInternal,\n          request,\n          RecaptchaActionName.SIGN_UP_PASSWORD\n        );\n        return signUp(authInternal, requestWithRecaptcha);\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  const response = await signUpResponse.catch(error => {\n    return Promise.reject(error);\n  });\n\n  const userCredential = await UserCredentialImpl._fromIdTokenResponse(\n    authInternal,\n    OperationType.SIGN_IN,\n    response\n  );\n  await authInternal._updateCurrentUser(userCredential.user);\n\n  return userCredential;\n}\n\n/**\n * Asynchronously signs in using an email and password.\n *\n * @remarks\n * Fails with an error if the email address and password do not match.\n *\n * Note: The user's password is NOT the password used to access the user's email account. The\n * email address serves as a unique identifier for the user, and the password is used to access\n * the user's account in your Firebase project. See also: {@link createUserWithEmailAndPassword}.\n *\n * @param auth - The {@link Auth} instance.\n * @param email - The users email address.\n * @param password - The users password.\n *\n * @public\n */\nexport function signInWithEmailAndPassword(\n  auth: Auth,\n  email: string,\n  password: string\n): Promise<UserCredential> {\n  return signInWithCredential(\n    getModularInstance(auth),\n    EmailAuthProvider.credential(email, password)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ActionCodeOperation,\n  ActionCodeSettings,\n  Auth,\n  UserCredential\n} from '../../model/public_types';\n\nimport * as api from '../../api/authentication/email_and_password';\nimport { ActionCodeURL } from '../action_code_url';\nimport { EmailAuthProvider } from '../providers/email';\nimport { _getCurrentUrl } from '../util/location';\nimport { _setActionCodeSettingsOnRequest } from './action_code_settings';\nimport { signInWithCredential } from './credential';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\nimport { getModularInstance } from '@firebase/util';\nimport { _castAuth } from '../auth/auth_impl';\nimport { injectRecaptchaFields } from '../../platform_browser/recaptcha/recaptcha_enterprise_verifier';\nimport { RecaptchaActionName, RecaptchaClientType } from '../../api';\n\n/**\n * Sends a sign-in email link to the user with the specified email.\n *\n * @remarks\n * The sign-in operation has to always be completed in the app unlike other out of band email\n * actions (password reset and email verifications). This is because, at the end of the flow,\n * the user is expected to be signed in and their Auth state persisted within the app.\n *\n * To complete sign in with the email link, call {@link signInWithEmailLink} with the email\n * address and the email link supplied in the email sent to the user.\n *\n * @example\n * ```javascript\n * const actionCodeSettings = {\n *   url: 'https://www.example.com/?email=user@example.com',\n *   iOS: {\n *      bundleId: 'com.example.ios'\n *   },\n *   android: {\n *     packageName: 'com.example.android',\n *     installApp: true,\n *     minimumVersion: '12'\n *   },\n *   handleCodeInApp: true\n * };\n * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\n * // Obtain emailLink from the user.\n * if(isSignInWithEmailLink(auth, emailLink)) {\n *   await signInWithEmailLink(auth, 'user@example.com', emailLink);\n * }\n * ```\n *\n * @param authInternal - The {@link Auth} instance.\n * @param email - The user's email address.\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\n *\n * @public\n */\nexport async function sendSignInLinkToEmail(\n  auth: Auth,\n  email: string,\n  actionCodeSettings: ActionCodeSettings\n): Promise<void> {\n  const authInternal = _castAuth(auth);\n  const request: api.EmailSignInRequest = {\n    requestType: ActionCodeOperation.EMAIL_SIGNIN,\n    email,\n    clientType: RecaptchaClientType.WEB\n  };\n  function setActionCodeSettings(\n    request: api.EmailSignInRequest,\n    actionCodeSettings: ActionCodeSettings\n  ): void {\n    _assert(\n      actionCodeSettings.handleCodeInApp,\n      authInternal,\n      AuthErrorCode.ARGUMENT_ERROR\n    );\n    if (actionCodeSettings) {\n      _setActionCodeSettingsOnRequest(\n        authInternal,\n        request,\n        actionCodeSettings\n      );\n    }\n  }\n  if (authInternal._getRecaptchaConfig()?.emailPasswordEnabled) {\n    const requestWithRecaptcha = await injectRecaptchaFields(\n      authInternal,\n      request,\n      RecaptchaActionName.GET_OOB_CODE,\n      true\n    );\n    setActionCodeSettings(requestWithRecaptcha, actionCodeSettings);\n    await api.sendSignInLinkToEmail(authInternal, requestWithRecaptcha);\n  } else {\n    setActionCodeSettings(request, actionCodeSettings);\n    await api\n      .sendSignInLinkToEmail(authInternal, request)\n      .catch(async error => {\n        if (error.code === `auth/${AuthErrorCode.MISSING_RECAPTCHA_TOKEN}`) {\n          console.log(\n            'Email link sign-in is protected by reCAPTCHA for this project. Automatically triggering the reCAPTCHA flow and restarting the sign-in flow.'\n          );\n          const requestWithRecaptcha = await injectRecaptchaFields(\n            authInternal,\n            request,\n            RecaptchaActionName.GET_OOB_CODE,\n            true\n          );\n          setActionCodeSettings(requestWithRecaptcha, actionCodeSettings);\n          await api.sendSignInLinkToEmail(authInternal, requestWithRecaptcha);\n        } else {\n          return Promise.reject(error);\n        }\n      });\n  }\n}\n\n/**\n * Checks if an incoming link is a sign-in with email link suitable for {@link signInWithEmailLink}.\n *\n * @param auth - The {@link Auth} instance.\n * @param emailLink - The link sent to the user's email address.\n *\n * @public\n */\nexport function isSignInWithEmailLink(auth: Auth, emailLink: string): boolean {\n  const actionCodeUrl = ActionCodeURL.parseLink(emailLink);\n  return actionCodeUrl?.operation === ActionCodeOperation.EMAIL_SIGNIN;\n}\n\n/**\n * Asynchronously signs in using an email and sign-in email link.\n *\n * @remarks\n * If no link is passed, the link is inferred from the current URL.\n *\n * Fails with an error if the email address is invalid or OTP in email link expires.\n *\n * Note: Confirm the link is a sign-in email link before calling this method firebase.auth.Auth.isSignInWithEmailLink.\n *\n * @example\n * ```javascript\n * const actionCodeSettings = {\n *   url: 'https://www.example.com/?email=user@example.com',\n *   iOS: {\n *      bundleId: 'com.example.ios'\n *   },\n *   android: {\n *     packageName: 'com.example.android',\n *     installApp: true,\n *     minimumVersion: '12'\n *   },\n *   handleCodeInApp: true\n * };\n * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\n * // Obtain emailLink from the user.\n * if(isSignInWithEmailLink(auth, emailLink)) {\n *   await signInWithEmailLink(auth, 'user@example.com', emailLink);\n * }\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param email - The user's email address.\n * @param emailLink - The link sent to the user's email address.\n *\n * @public\n */\nexport async function signInWithEmailLink(\n  auth: Auth,\n  email: string,\n  emailLink?: string\n): Promise<UserCredential> {\n  const authModular = getModularInstance(auth);\n  const credential = EmailAuthProvider.credentialWithLink(\n    email,\n    emailLink || _getCurrentUrl()\n  );\n  // Check if the tenant ID in the email link matches the tenant ID on Auth\n  // instance.\n  _assert(\n    credential._tenantId === (authModular.tenantId || null),\n    authModular,\n    AuthErrorCode.TENANT_ID_MISMATCH\n  );\n  return signInWithCredential(authModular, credential);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary,\n  _performApiRequest\n} from '../index';\nimport { Auth } from '../../model/public_types';\n\nexport interface CreateAuthUriRequest {\n  identifier: string;\n  continueUri: string;\n  tenantId?: string;\n}\n\nexport interface CreateAuthUriResponse {\n  signinMethods: string[];\n}\n\nexport async function createAuthUri(\n  auth: Auth,\n  request: CreateAuthUriRequest\n): Promise<CreateAuthUriResponse> {\n  return _performApiRequest<CreateAuthUriRequest, CreateAuthUriResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.CREATE_AUTH_URI,\n    _addTidIfNecessary(auth, request)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ActionCodeOperation,\n  ActionCodeSettings,\n  Auth,\n  User\n} from '../../model/public_types';\n\nimport {\n  createAuthUri,\n  CreateAuthUriRequest\n} from '../../api/authentication/create_auth_uri';\nimport * as api from '../../api/authentication/email_and_password';\nimport { UserInternal } from '../../model/user';\nimport { _getCurrentUrl, _isHttpOrHttps } from '../util/location';\nimport { _setActionCodeSettingsOnRequest } from './action_code_settings';\nimport { getModularInstance } from '@firebase/util';\n\n/**\n * Gets the list of possible sign in methods for the given email address.\n *\n * @remarks\n * This is useful to differentiate methods of sign-in for the same provider, eg.\n * {@link EmailAuthProvider} which has 2 methods of sign-in,\n * {@link SignInMethod}.EMAIL_PASSWORD and\n * {@link SignInMethod}.EMAIL_LINK.\n *\n * @param auth - The {@link Auth} instance.\n * @param email - The user's email address.\n *\n * @public\n */\nexport async function fetchSignInMethodsForEmail(\n  auth: Auth,\n  email: string\n): Promise<string[]> {\n  // createAuthUri returns an error if continue URI is not http or https.\n  // For environments like Cordova, Chrome extensions, native frameworks, file\n  // systems, etc, use http://localhost as continue URL.\n  const continueUri = _isHttpOrHttps() ? _getCurrentUrl() : 'http://localhost';\n  const request: CreateAuthUriRequest = {\n    identifier: email,\n    continueUri\n  };\n\n  const { signinMethods } = await createAuthUri(\n    getModularInstance(auth),\n    request\n  );\n\n  return signinMethods || [];\n}\n\n/**\n * Sends a verification email to a user.\n *\n * @remarks\n * The verification process is completed by calling {@link applyActionCode}.\n *\n * @example\n * ```javascript\n * const actionCodeSettings = {\n *   url: 'https://www.example.com/?email=user@example.com',\n *   iOS: {\n *      bundleId: 'com.example.ios'\n *   },\n *   android: {\n *     packageName: 'com.example.android',\n *     installApp: true,\n *     minimumVersion: '12'\n *   },\n *   handleCodeInApp: true\n * };\n * await sendEmailVerification(user, actionCodeSettings);\n * // Obtain code from the user.\n * await applyActionCode(auth, code);\n * ```\n *\n * @param user - The user.\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\n *\n * @public\n */\nexport async function sendEmailVerification(\n  user: User,\n  actionCodeSettings?: ActionCodeSettings | null\n): Promise<void> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  const idToken = await user.getIdToken();\n  const request: api.VerifyEmailRequest = {\n    requestType: ActionCodeOperation.VERIFY_EMAIL,\n    idToken\n  };\n  if (actionCodeSettings) {\n    _setActionCodeSettingsOnRequest(\n      userInternal.auth,\n      request,\n      actionCodeSettings\n    );\n  }\n\n  const { email } = await api.sendEmailVerification(userInternal.auth, request);\n\n  if (email !== user.email) {\n    await user.reload();\n  }\n}\n\n/**\n * Sends a verification email to a new email address.\n *\n * @remarks\n * The user's email will be updated to the new one after being verified.\n *\n * If you have a custom email action handler, you can complete the verification process by calling\n * {@link applyActionCode}.\n *\n * @example\n * ```javascript\n * const actionCodeSettings = {\n *   url: 'https://www.example.com/?email=user@example.com',\n *   iOS: {\n *      bundleId: 'com.example.ios'\n *   },\n *   android: {\n *     packageName: 'com.example.android',\n *     installApp: true,\n *     minimumVersion: '12'\n *   },\n *   handleCodeInApp: true\n * };\n * await verifyBeforeUpdateEmail(user, 'newemail@example.com', actionCodeSettings);\n * // Obtain code from the user.\n * await applyActionCode(auth, code);\n * ```\n *\n * @param user - The user.\n * @param newEmail - The new email address to be verified before update.\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\n *\n * @public\n */\nexport async function verifyBeforeUpdateEmail(\n  user: User,\n  newEmail: string,\n  actionCodeSettings?: ActionCodeSettings | null\n): Promise<void> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  const idToken = await user.getIdToken();\n  const request: api.VerifyAndChangeEmailRequest = {\n    requestType: ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL,\n    idToken,\n    newEmail\n  };\n  if (actionCodeSettings) {\n    _setActionCodeSettingsOnRequest(\n      userInternal.auth,\n      request,\n      actionCodeSettings\n    );\n  }\n\n  const { email } = await api.verifyAndChangeEmail(userInternal.auth, request);\n\n  if (email !== user.email) {\n    // If the local copy of the email on user is outdated, reload the\n    // user.\n    await user.reload();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Endpoint, HttpMethod, _performApiRequest } from '../index';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { Auth } from '../../model/public_types';\n\nexport interface UpdateProfileRequest {\n  idToken: string;\n  displayName?: string | null;\n  photoUrl?: string | null;\n  returnSecureToken: boolean;\n}\n\nexport interface UpdateProfileResponse extends IdTokenResponse {\n  displayName?: string | null;\n  photoUrl?: string | null;\n}\n\nexport async function updateProfile(\n  auth: Auth,\n  request: UpdateProfileRequest\n): Promise<UpdateProfileResponse> {\n  return _performApiRequest<UpdateProfileRequest, UpdateProfileResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SET_ACCOUNT_INFO,\n    request\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../../model/public_types';\n\nimport {\n  updateEmailPassword as apiUpdateEmailPassword,\n  UpdateEmailPasswordRequest\n} from '../../api/account_management/email_and_password';\nimport { updateProfile as apiUpdateProfile } from '../../api/account_management/profile';\nimport { UserInternal } from '../../model/user';\nimport { _logoutIfInvalidated } from './invalidation';\nimport { getModularInstance } from '@firebase/util';\nimport { ProviderId } from '../../model/enums';\n\n/**\n * Updates a user's profile data.\n *\n * @param user - The user.\n * @param profile - The profile's `displayName` and `photoURL` to update.\n *\n * @public\n */\nexport async function updateProfile(\n  user: User,\n  {\n    displayName,\n    photoURL: photoUrl\n  }: { displayName?: string | null; photoURL?: string | null }\n): Promise<void> {\n  if (displayName === undefined && photoUrl === undefined) {\n    return;\n  }\n\n  const userInternal = getModularInstance(user) as UserInternal;\n  const idToken = await userInternal.getIdToken();\n  const profileRequest = {\n    idToken,\n    displayName,\n    photoUrl,\n    returnSecureToken: true\n  };\n  const response = await _logoutIfInvalidated(\n    userInternal,\n    apiUpdateProfile(userInternal.auth, profileRequest)\n  );\n\n  userInternal.displayName = response.displayName || null;\n  userInternal.photoURL = response.photoUrl || null;\n\n  // Update the password provider as well\n  const passwordProvider = userInternal.providerData.find(\n    ({ providerId }) => providerId === ProviderId.PASSWORD\n  );\n  if (passwordProvider) {\n    passwordProvider.displayName = userInternal.displayName;\n    passwordProvider.photoURL = userInternal.photoURL;\n  }\n\n  await userInternal._updateTokensIfNecessary(response);\n}\n\n/**\n * Updates the user's email address.\n *\n * @remarks\n * An email will be sent to the original email address (if it was set) that allows to revoke the\n * email address change, in order to protect them from account hijacking.\n *\n * Important: this is a security sensitive operation that requires the user to have recently signed\n * in. If this requirement isn't met, ask the user to authenticate again and then call\n * {@link reauthenticateWithCredential}.\n *\n * @param user - The user.\n * @param newEmail - The new email address.\n *\n * @public\n */\nexport function updateEmail(user: User, newEmail: string): Promise<void> {\n  return updateEmailOrPassword(\n    getModularInstance(user) as UserInternal,\n    newEmail,\n    null\n  );\n}\n\n/**\n * Updates the user's password.\n *\n * @remarks\n * Important: this is a security sensitive operation that requires the user to have recently signed\n * in. If this requirement isn't met, ask the user to authenticate again and then call\n * {@link reauthenticateWithCredential}.\n *\n * @param user - The user.\n * @param newPassword - The new password.\n *\n * @public\n */\nexport function updatePassword(user: User, newPassword: string): Promise<void> {\n  return updateEmailOrPassword(\n    getModularInstance(user) as UserInternal,\n    null,\n    newPassword\n  );\n}\n\nasync function updateEmailOrPassword(\n  user: UserInternal,\n  email: string | null,\n  password: string | null\n): Promise<void> {\n  const { auth } = user;\n  const idToken = await user.getIdToken();\n  const request: UpdateEmailPasswordRequest = {\n    idToken,\n    returnSecureToken: true\n  };\n\n  if (email) {\n    request.email = email;\n  }\n\n  if (password) {\n    request.password = password;\n  }\n\n  const response = await _logoutIfInvalidated(\n    user,\n    apiUpdateEmailPassword(auth, request)\n  );\n  await user._updateTokensIfNecessary(response, /* reload */ true);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AdditionalUserInfo, UserCredential } from '../../model/public_types';\nimport { IdTokenResponse, IdTokenResponseKind } from '../../model/id_token';\nimport { _parseToken } from './id_token_result';\nimport { UserCredentialInternal } from '../../model/user';\nimport { ProviderId } from '../../model/enums';\n\n/**\n * Parse the `AdditionalUserInfo` from the ID token response.\n *\n */\nexport function _fromIdTokenResponse(\n  idTokenResponse?: IdTokenResponse\n): AdditionalUserInfo | null {\n  if (!idTokenResponse) {\n    return null;\n  }\n  const { providerId } = idTokenResponse;\n  const profile = idTokenResponse.rawUserInfo\n    ? JSON.parse(idTokenResponse.rawUserInfo)\n    : {};\n  const isNewUser =\n    idTokenResponse.isNewUser ||\n    idTokenResponse.kind === IdTokenResponseKind.SignupNewUser;\n  if (!providerId && idTokenResponse?.idToken) {\n    const signInProvider = _parseToken(idTokenResponse.idToken)?.firebase?.[\n      'sign_in_provider'\n    ];\n    if (signInProvider) {\n      const filteredProviderId =\n        signInProvider !== ProviderId.ANONYMOUS &&\n        signInProvider !== ProviderId.CUSTOM\n          ? (signInProvider as ProviderId)\n          : null;\n      // Uses generic class in accordance with the legacy SDK.\n      return new GenericAdditionalUserInfo(isNewUser, filteredProviderId);\n    }\n  }\n  if (!providerId) {\n    return null;\n  }\n  switch (providerId) {\n    case ProviderId.FACEBOOK:\n      return new FacebookAdditionalUserInfo(isNewUser, profile);\n    case ProviderId.GITHUB:\n      return new GithubAdditionalUserInfo(isNewUser, profile);\n    case ProviderId.GOOGLE:\n      return new GoogleAdditionalUserInfo(isNewUser, profile);\n    case ProviderId.TWITTER:\n      return new TwitterAdditionalUserInfo(\n        isNewUser,\n        profile,\n        idTokenResponse.screenName || null\n      );\n    case ProviderId.CUSTOM:\n    case ProviderId.ANONYMOUS:\n      return new GenericAdditionalUserInfo(isNewUser, null);\n    default:\n      return new GenericAdditionalUserInfo(isNewUser, providerId, profile);\n  }\n}\n\nclass GenericAdditionalUserInfo implements AdditionalUserInfo {\n  constructor(\n    readonly isNewUser: boolean,\n    readonly providerId: ProviderId | string | null,\n    readonly profile: Record<string, unknown> = {}\n  ) {}\n}\n\nclass FederatedAdditionalUserInfoWithUsername extends GenericAdditionalUserInfo {\n  constructor(\n    isNewUser: boolean,\n    providerId: ProviderId,\n    profile: Record<string, unknown>,\n    readonly username: string | null\n  ) {\n    super(isNewUser, providerId, profile);\n  }\n}\n\nclass FacebookAdditionalUserInfo extends GenericAdditionalUserInfo {\n  constructor(isNewUser: boolean, profile: Record<string, unknown>) {\n    super(isNewUser, ProviderId.FACEBOOK, profile);\n  }\n}\n\nclass GithubAdditionalUserInfo extends FederatedAdditionalUserInfoWithUsername {\n  constructor(isNewUser: boolean, profile: Record<string, unknown>) {\n    super(\n      isNewUser,\n      ProviderId.GITHUB,\n      profile,\n      typeof profile?.login === 'string' ? profile?.login : null\n    );\n  }\n}\n\nclass GoogleAdditionalUserInfo extends GenericAdditionalUserInfo {\n  constructor(isNewUser: boolean, profile: Record<string, unknown>) {\n    super(isNewUser, ProviderId.GOOGLE, profile);\n  }\n}\n\nclass TwitterAdditionalUserInfo extends FederatedAdditionalUserInfoWithUsername {\n  constructor(\n    isNewUser: boolean,\n    profile: Record<string, unknown>,\n    screenName: string | null\n  ) {\n    super(isNewUser, ProviderId.TWITTER, profile, screenName);\n  }\n}\n\n/**\n * Extracts provider specific {@link AdditionalUserInfo} for the given credential.\n *\n * @param userCredential - The user credential.\n *\n * @public\n */\nexport function getAdditionalUserInfo(\n  userCredential: UserCredential\n): AdditionalUserInfo | null {\n  const { user, _tokenResponse } = userCredential as UserCredentialInternal;\n  if (user.isAnonymous && !_tokenResponse) {\n    // Handle the special case where signInAnonymously() gets called twice.\n    // No network call is made so there's nothing to actually fill this in\n    return {\n      providerId: null,\n      isNewUser: false,\n      profile: null\n    };\n  }\n\n  return _fromIdTokenResponse(_tokenResponse);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getModularInstance } from '@firebase/util';\nimport {\n  Auth,\n  NextOrObserver,\n  Persistence,\n  User,\n  CompleteFn,\n  ErrorFn,\n  Unsubscribe\n} from '../model/public_types';\nimport { _castAuth } from '../core/auth/auth_impl';\n\nexport {\n  debugErrorMap,\n  prodErrorMap,\n  AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY as AuthErrorCodes\n} from './errors';\n\n// Non-optional auth methods.\n/**\n * Changes the type of persistence on the {@link Auth} instance for the currently saved\n * `Auth` session and applies this type of persistence for future sign-in requests, including\n * sign-in with redirect requests.\n *\n * @remarks\n * This makes it easy for a user signing in to specify whether their session should be\n * remembered or not. It also makes it easier to never persist the `Auth` state for applications\n * that are shared by other users or have sensitive data.\n *\n * @example\n * ```javascript\n * setPersistence(auth, browserSessionPersistence);\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param persistence - The {@link Persistence} to use.\n * @returns A `Promise` that resolves once the persistence change has completed\n *\n * @public\n */\nexport function setPersistence(\n  auth: Auth,\n  persistence: Persistence\n): Promise<void> {\n  return getModularInstance(auth).setPersistence(persistence);\n}\n\n/**\n * Loads the reCAPTCHA configuration into the `Auth` instance.\n *\n * @remarks\n * This will load the reCAPTCHA config, which indicates whether the reCAPTCHA\n * verification flow should be triggered for each auth provider, into the\n * current Auth session.\n *\n * If initializeRecaptchaConfig() is not invoked, the auth flow will always start\n * without reCAPTCHA verification. If the provider is configured to require reCAPTCHA\n * verification, the SDK will transparently load the reCAPTCHA config and restart the\n * auth flows.\n *\n * Thus, by calling this optional method, you will reduce the latency of future auth flows.\n * Loading the reCAPTCHA config early will also enhance the signal collected by reCAPTCHA.\n *\n * @example\n * ```javascript\n * initializeRecaptchaConfig(auth);\n * ```\n *\n * @param auth - The {@link Auth} instance.\n *\n * @public\n */\nexport function initializeRecaptchaConfig(auth: Auth): Promise<void> {\n  const authInternal = _castAuth(auth);\n  return authInternal.initializeRecaptchaConfig();\n}\n\n/**\n * Adds an observer for changes to the signed-in user's ID token.\n *\n * @remarks\n * This includes sign-in, sign-out, and token refresh events.\n * This will not be triggered automatically upon ID token expiration. Use {@link User.getIdToken} to refresh the ID token.\n *\n * @param auth - The {@link Auth} instance.\n * @param nextOrObserver - callback triggered on change.\n * @param error - Deprecated. This callback is never triggered. Errors\n * on signing in/out can be caught in promises returned from\n * sign-in/sign-out functions.\n * @param completed - Deprecated. This callback is never triggered.\n *\n * @public\n */\nexport function onIdTokenChanged(\n  auth: Auth,\n  nextOrObserver: NextOrObserver<User>,\n  error?: ErrorFn,\n  completed?: CompleteFn\n): Unsubscribe {\n  return getModularInstance(auth).onIdTokenChanged(\n    nextOrObserver,\n    error,\n    completed\n  );\n}\n/**\n * Adds a blocking callback that runs before an auth state change\n * sets a new user.\n *\n * @param auth - The {@link Auth} instance.\n * @param callback - callback triggered before new user value is set.\n *   If this throws, it blocks the user from being set.\n * @param onAbort - callback triggered if a later `beforeAuthStateChanged()`\n *   callback throws, allowing you to undo any side effects.\n */\nexport function beforeAuthStateChanged(\n  auth: Auth,\n  callback: (user: User | null) => void | Promise<void>,\n  onAbort?: () => void\n): Unsubscribe {\n  return getModularInstance(auth).beforeAuthStateChanged(callback, onAbort);\n}\n/**\n * Adds an observer for changes to the user's sign-in state.\n *\n * @remarks\n * To keep the old behavior, see {@link onIdTokenChanged}.\n *\n * @param auth - The {@link Auth} instance.\n * @param nextOrObserver - callback triggered on change.\n * @param error - Deprecated. This callback is never triggered. Errors\n * on signing in/out can be caught in promises returned from\n * sign-in/sign-out functions.\n * @param completed - Deprecated. This callback is never triggered.\n *\n * @public\n */\nexport function onAuthStateChanged(\n  auth: Auth,\n  nextOrObserver: NextOrObserver<User>,\n  error?: ErrorFn,\n  completed?: CompleteFn\n): Unsubscribe {\n  return getModularInstance(auth).onAuthStateChanged(\n    nextOrObserver,\n    error,\n    completed\n  );\n}\n/**\n * Sets the current language to the default device/browser preference.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @public\n */\nexport function useDeviceLanguage(auth: Auth): void {\n  getModularInstance(auth).useDeviceLanguage();\n}\n/**\n * Asynchronously sets the provided user as {@link Auth.currentUser} on the\n * {@link Auth} instance.\n *\n * @remarks\n * A new instance copy of the user provided will be made and set as currentUser.\n *\n * This will trigger {@link onAuthStateChanged} and {@link onIdTokenChanged} listeners\n * like other sign in methods.\n *\n * The operation fails with an error if the user to be updated belongs to a different Firebase\n * project.\n *\n * @param auth - The {@link Auth} instance.\n * @param user - The new {@link User}.\n *\n * @public\n */\nexport function updateCurrentUser(\n  auth: Auth,\n  user: User | null\n): Promise<void> {\n  return getModularInstance(auth).updateCurrentUser(user);\n}\n/**\n * Signs out the current user.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @public\n */\nexport function signOut(auth: Auth): Promise<void> {\n  return getModularInstance(auth).signOut();\n}\n\nexport { initializeAuth } from './auth/initialize';\nexport { connectAuthEmulator } from './auth/emulator';\n\n// credentials\nexport { AuthCredential } from './credentials';\nexport { EmailAuthCredential } from './credentials/email';\nexport { OAuthCredential } from './credentials/oauth';\nexport { PhoneAuthCredential } from './credentials/phone';\n\n// persistence\nexport { inMemoryPersistence } from './persistence/in_memory';\n\n// providers\nexport { EmailAuthProvider } from './providers/email';\nexport { FacebookAuthProvider } from './providers/facebook';\nexport { CustomParameters } from './providers/federated';\nexport { GoogleAuthProvider } from './providers/google';\nexport { GithubAuthProvider } from './providers/github';\nexport { OAuthProvider, OAuthCredentialOptions } from './providers/oauth';\nexport { SAMLAuthProvider } from './providers/saml';\nexport { TwitterAuthProvider } from './providers/twitter';\n\n// strategies\nexport { signInAnonymously } from './strategies/anonymous';\nexport {\n  signInWithCredential,\n  linkWithCredential,\n  reauthenticateWithCredential\n} from './strategies/credential';\nexport { signInWithCustomToken } from './strategies/custom_token';\nexport {\n  sendPasswordResetEmail,\n  confirmPasswordReset,\n  applyActionCode,\n  checkActionCode,\n  verifyPasswordResetCode,\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword\n} from './strategies/email_and_password';\nexport {\n  sendSignInLinkToEmail,\n  isSignInWithEmailLink,\n  signInWithEmailLink\n} from './strategies/email_link';\nexport {\n  fetchSignInMethodsForEmail,\n  sendEmailVerification,\n  verifyBeforeUpdateEmail\n} from './strategies/email';\n\n// core\nexport { ActionCodeURL, parseActionCodeURL } from './action_code_url';\n\n// user\nexport {\n  updateProfile,\n  updateEmail,\n  updatePassword\n} from './user/account_info';\nexport { getIdToken, getIdTokenResult } from './user/id_token_result';\nexport { unlink } from './user/link_unlink';\nexport { getAdditionalUserInfo } from './user/additional_user_info';\n\n// Non-optional user methods.\nexport { reload } from './user/reload';\n/**\n * Deletes and signs out the user.\n *\n * @remarks\n * Important: this is a security-sensitive operation that requires the user to have recently\n * signed in. If this requirement isn't met, ask the user to authenticate again and then call\n * {@link reauthenticateWithCredential}.\n *\n * @param user - The user.\n *\n * @public\n */\nexport async function deleteUser(user: User): Promise<void> {\n  return getModularInstance(user).delete();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { AuthInternal } from '../model/auth';\nimport { MultiFactorSession } from '../model/public_types';\n\nexport const enum MultiFactorSessionType {\n  ENROLL = 'enroll',\n  SIGN_IN = 'signin'\n}\n\ninterface SerializedMultiFactorSession {\n  multiFactorSession: {\n    idToken?: string;\n    pendingCredential?: string;\n  };\n}\n\nexport class MultiFactorSessionImpl implements MultiFactorSession {\n  private constructor(\n    readonly type: MultiFactorSessionType,\n    readonly credential: string,\n    readonly auth?: AuthInternal\n  ) {}\n\n  static _fromIdtoken(\n    idToken: string,\n    auth?: AuthInternal\n  ): MultiFactorSessionImpl {\n    return new MultiFactorSessionImpl(\n      MultiFactorSessionType.ENROLL,\n      idToken,\n      auth\n    );\n  }\n\n  static _fromMfaPendingCredential(\n    mfaPendingCredential: string\n  ): MultiFactorSessionImpl {\n    return new MultiFactorSessionImpl(\n      MultiFactorSessionType.SIGN_IN,\n      mfaPendingCredential\n    );\n  }\n\n  toJSON(): SerializedMultiFactorSession {\n    const key =\n      this.type === MultiFactorSessionType.ENROLL\n        ? 'idToken'\n        : 'pendingCredential';\n    return {\n      multiFactorSession: {\n        [key]: this.credential\n      }\n    };\n  }\n\n  static fromJSON(\n    obj: Partial<SerializedMultiFactorSession>\n  ): MultiFactorSessionImpl | null {\n    if (obj?.multiFactorSession) {\n      if (obj.multiFactorSession?.pendingCredential) {\n        return MultiFactorSessionImpl._fromMfaPendingCredential(\n          obj.multiFactorSession.pendingCredential\n        );\n      } else if (obj.multiFactorSession?.idToken) {\n        return MultiFactorSessionImpl._fromIdtoken(\n          obj.multiFactorSession.idToken\n        );\n      }\n    }\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Auth,\n  MultiFactorResolver,\n  UserCredential,\n  MultiFactorError\n} from '../model/public_types';\n\nimport { _castAuth } from '../core/auth/auth_impl';\nimport { AuthErrorCode } from '../core/errors';\nimport { UserCredentialImpl } from '../core/user/user_credential_impl';\nimport { _assert, _fail } from '../core/util/assert';\nimport { UserCredentialInternal } from '../model/user';\nimport { MultiFactorAssertionImpl } from './mfa_assertion';\nimport { MultiFactorError as MultiFactorErrorInternal } from './mfa_error';\nimport { MultiFactorInfoImpl } from './mfa_info';\nimport { MultiFactorSessionImpl } from './mfa_session';\nimport { getModularInstance } from '@firebase/util';\nimport { OperationType } from '../model/enums';\n\nexport class MultiFactorResolverImpl implements MultiFactorResolver {\n  private constructor(\n    readonly session: MultiFactorSessionImpl,\n    readonly hints: MultiFactorInfoImpl[],\n    private readonly signInResolver: (\n      assertion: MultiFactorAssertionImpl\n    ) => Promise<UserCredentialInternal>\n  ) {}\n\n  /** @internal */\n  static _fromError(\n    authExtern: Auth,\n    error: MultiFactorErrorInternal\n  ): MultiFactorResolverImpl {\n    const auth = _castAuth(authExtern);\n    const serverResponse = error.customData._serverResponse;\n    const hints = (serverResponse.mfaInfo || []).map(enrollment =>\n      MultiFactorInfoImpl._fromServerResponse(auth, enrollment)\n    );\n\n    _assert(\n      serverResponse.mfaPendingCredential,\n      auth,\n      AuthErrorCode.INTERNAL_ERROR\n    );\n    const session = MultiFactorSessionImpl._fromMfaPendingCredential(\n      serverResponse.mfaPendingCredential\n    );\n\n    return new MultiFactorResolverImpl(\n      session,\n      hints,\n      async (\n        assertion: MultiFactorAssertionImpl\n      ): Promise<UserCredentialInternal> => {\n        const mfaResponse = await assertion._process(auth, session);\n        // Clear out the unneeded fields from the old login response\n        delete serverResponse.mfaInfo;\n        delete serverResponse.mfaPendingCredential;\n\n        // Use in the new token & refresh token in the old response\n        const idTokenResponse = {\n          ...serverResponse,\n          idToken: mfaResponse.idToken,\n          refreshToken: mfaResponse.refreshToken\n        };\n\n        // TODO: we should collapse this switch statement into UserCredentialImpl._forOperation and have it support the SIGN_IN case\n        switch (error.operationType) {\n          case OperationType.SIGN_IN:\n            const userCredential =\n              await UserCredentialImpl._fromIdTokenResponse(\n                auth,\n                error.operationType,\n                idTokenResponse\n              );\n            await auth._updateCurrentUser(userCredential.user);\n            return userCredential;\n          case OperationType.REAUTHENTICATE:\n            _assert(error.user, auth, AuthErrorCode.INTERNAL_ERROR);\n            return UserCredentialImpl._forOperation(\n              error.user,\n              error.operationType,\n              idTokenResponse\n            );\n          default:\n            _fail(auth, AuthErrorCode.INTERNAL_ERROR);\n        }\n      }\n    );\n  }\n\n  async resolveSignIn(\n    assertionExtern: MultiFactorAssertionImpl\n  ): Promise<UserCredential> {\n    const assertion = assertionExtern as MultiFactorAssertionImpl;\n    return this.signInResolver(assertion);\n  }\n}\n\n/**\n * Provides a {@link MultiFactorResolver} suitable for completion of a\n * multi-factor flow.\n *\n * @param auth - The {@link Auth} instance.\n * @param error - The {@link MultiFactorError} raised during a sign-in, or\n * reauthentication operation.\n *\n * @public\n */\nexport function getMultiFactorResolver(\n  auth: Auth,\n  error: MultiFactorError\n): MultiFactorResolver {\n  const authModular = getModularInstance(auth);\n  const errorInternal = error as MultiFactorErrorInternal;\n  _assert(\n    error.customData.operationType,\n    authModular,\n    AuthErrorCode.ARGUMENT_ERROR\n  );\n  _assert(\n    errorInternal.customData._serverResponse?.mfaPendingCredential,\n    authModular,\n    AuthErrorCode.ARGUMENT_ERROR\n  );\n\n  return MultiFactorResolverImpl._fromError(authModular, errorInternal);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary,\n  _performApiRequest\n} from '../index';\nimport { SignInWithPhoneNumberRequest } from '../authentication/sms';\nimport { FinalizeMfaResponse } from '../authentication/mfa';\nimport { AuthInternal } from '../../model/auth';\n\n/**\n * MFA Info as returned by the API.\n */\ninterface BaseMfaEnrollment {\n  mfaEnrollmentId: string;\n  enrolledAt: number;\n  displayName?: string;\n}\n\n/**\n * An MFA provided by SMS verification.\n */\nexport interface PhoneMfaEnrollment extends BaseMfaEnrollment {\n  phoneInfo: string;\n}\n\n/**\n * An MFA provided by TOTP (Time-based One Time Password).\n */\nexport interface TotpMfaEnrollment extends BaseMfaEnrollment {}\n\n/**\n * MfaEnrollment can be any subtype of BaseMfaEnrollment, currently only PhoneMfaEnrollment and TotpMfaEnrollment are supported.\n */\nexport type MfaEnrollment = PhoneMfaEnrollment | TotpMfaEnrollment;\n\nexport interface StartPhoneMfaEnrollmentRequest {\n  idToken: string;\n  phoneEnrollmentInfo: {\n    phoneNumber: string;\n    recaptchaToken: string;\n  };\n  tenantId?: string;\n}\n\nexport interface StartPhoneMfaEnrollmentResponse {\n  phoneSessionInfo: {\n    sessionInfo: string;\n  };\n}\n\nexport function startEnrollPhoneMfa(\n  auth: AuthInternal,\n  request: StartPhoneMfaEnrollmentRequest\n): Promise<StartPhoneMfaEnrollmentResponse> {\n  return _performApiRequest<\n    StartPhoneMfaEnrollmentRequest,\n    StartPhoneMfaEnrollmentResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.START_MFA_ENROLLMENT,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport interface FinalizePhoneMfaEnrollmentRequest {\n  idToken: string;\n  phoneVerificationInfo: SignInWithPhoneNumberRequest;\n  displayName?: string | null;\n  tenantId?: string;\n}\n\nexport interface FinalizePhoneMfaEnrollmentResponse\n  extends FinalizeMfaResponse {}\n\nexport function finalizeEnrollPhoneMfa(\n  auth: AuthInternal,\n  request: FinalizePhoneMfaEnrollmentRequest\n): Promise<FinalizePhoneMfaEnrollmentResponse> {\n  return _performApiRequest<\n    FinalizePhoneMfaEnrollmentRequest,\n    FinalizePhoneMfaEnrollmentResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.FINALIZE_MFA_ENROLLMENT,\n    _addTidIfNecessary(auth, request)\n  );\n}\nexport interface StartTotpMfaEnrollmentRequest {\n  idToken: string;\n  totpEnrollmentInfo: {};\n  tenantId?: string;\n}\n\nexport interface StartTotpMfaEnrollmentResponse {\n  totpSessionInfo: {\n    sharedSecretKey: string;\n    verificationCodeLength: number;\n    hashingAlgorithm: string;\n    periodSec: number;\n    sessionInfo: string;\n    finalizeEnrollmentTime: number;\n  };\n}\n\nexport function startEnrollTotpMfa(\n  auth: AuthInternal,\n  request: StartTotpMfaEnrollmentRequest\n): Promise<StartTotpMfaEnrollmentResponse> {\n  return _performApiRequest<\n    StartTotpMfaEnrollmentRequest,\n    StartTotpMfaEnrollmentResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.START_MFA_ENROLLMENT,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport interface TotpVerificationInfo {\n  sessionInfo: string;\n  verificationCode: string;\n}\nexport interface FinalizeTotpMfaEnrollmentRequest {\n  idToken: string;\n  totpVerificationInfo: TotpVerificationInfo;\n  displayName?: string | null;\n  tenantId?: string;\n}\n\nexport interface FinalizeTotpMfaEnrollmentResponse\n  extends FinalizeMfaResponse {}\n\nexport function finalizeEnrollTotpMfa(\n  auth: AuthInternal,\n  request: FinalizeTotpMfaEnrollmentRequest\n): Promise<FinalizeTotpMfaEnrollmentResponse> {\n  return _performApiRequest<\n    FinalizeTotpMfaEnrollmentRequest,\n    FinalizeTotpMfaEnrollmentResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.FINALIZE_MFA_ENROLLMENT,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport interface WithdrawMfaRequest {\n  idToken: string;\n  mfaEnrollmentId: string;\n  tenantId?: string;\n}\n\nexport interface WithdrawMfaResponse extends FinalizeMfaResponse {}\n\nexport function withdrawMfa(\n  auth: AuthInternal,\n  request: WithdrawMfaRequest\n): Promise<WithdrawMfaResponse> {\n  return _performApiRequest<WithdrawMfaRequest, WithdrawMfaResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.WITHDRAW_MFA,\n    _addTidIfNecessary(auth, request)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  MultiFactorAssertion,\n  MultiFactorInfo,\n  MultiFactorSession,\n  MultiFactorUser,\n  User\n} from '../model/public_types';\n\nimport { withdrawMfa } from '../api/account_management/mfa';\nimport { _logoutIfInvalidated } from '../core/user/invalidation';\nimport { UserInternal } from '../model/user';\nimport { MultiFactorAssertionImpl } from './mfa_assertion';\nimport { MultiFactorInfoImpl } from './mfa_info';\nimport { MultiFactorSessionImpl } from './mfa_session';\nimport { getModularInstance } from '@firebase/util';\n\nexport class MultiFactorUserImpl implements MultiFactorUser {\n  enrolledFactors: MultiFactorInfo[] = [];\n\n  private constructor(readonly user: UserInternal) {\n    user._onReload(userInfo => {\n      if (userInfo.mfaInfo) {\n        this.enrolledFactors = userInfo.mfaInfo.map(enrollment =>\n          MultiFactorInfoImpl._fromServerResponse(user.auth, enrollment)\n        );\n      }\n    });\n  }\n\n  static _fromUser(user: UserInternal): MultiFactorUserImpl {\n    return new MultiFactorUserImpl(user);\n  }\n\n  async getSession(): Promise<MultiFactorSession> {\n    return MultiFactorSessionImpl._fromIdtoken(\n      await this.user.getIdToken(),\n      this.user.auth\n    );\n  }\n\n  async enroll(\n    assertionExtern: MultiFactorAssertion,\n    displayName?: string | null\n  ): Promise<void> {\n    const assertion = assertionExtern as MultiFactorAssertionImpl;\n    const session = (await this.getSession()) as MultiFactorSessionImpl;\n    const finalizeMfaResponse = await _logoutIfInvalidated(\n      this.user,\n      assertion._process(this.user.auth, session, displayName)\n    );\n    // New tokens will be issued after enrollment of the new second factors.\n    // They need to be updated on the user.\n    await this.user._updateTokensIfNecessary(finalizeMfaResponse);\n    // The user needs to be reloaded to get the new multi-factor information\n    // from server. USER_RELOADED event will be triggered and `enrolledFactors`\n    // will be updated.\n    return this.user.reload();\n  }\n\n  async unenroll(infoOrUid: MultiFactorInfo | string): Promise<void> {\n    const mfaEnrollmentId =\n      typeof infoOrUid === 'string' ? infoOrUid : infoOrUid.uid;\n    const idToken = await this.user.getIdToken();\n    try {\n      const idTokenResponse = await _logoutIfInvalidated(\n        this.user,\n        withdrawMfa(this.user.auth, {\n          idToken,\n          mfaEnrollmentId\n        })\n      );\n      // Remove the second factor from the user's list.\n      this.enrolledFactors = this.enrolledFactors.filter(\n        ({ uid }) => uid !== mfaEnrollmentId\n      );\n      // Depending on whether the backend decided to revoke the user's session,\n      // the tokenResponse may be empty. If the tokens were not updated (and they\n      // are now invalid), reloading the user will discover this and invalidate\n      // the user's state accordingly.\n      await this.user._updateTokensIfNecessary(idTokenResponse);\n      await this.user.reload();\n    } catch (e) {\n      throw e;\n    }\n  }\n}\n\nconst multiFactorUserCache = new WeakMap<User, MultiFactorUser>();\n\n/**\n * The {@link MultiFactorUser} corresponding to the user.\n *\n * @remarks\n * This is used to access all multi-factor properties and operations related to the user.\n *\n * @param user - The user.\n *\n * @public\n */\nexport function multiFactor(user: User): MultiFactorUser {\n  const userModular = getModularInstance(user);\n  if (!multiFactorUserCache.has(userModular)) {\n    multiFactorUserCache.set(\n      userModular,\n      MultiFactorUserImpl._fromUser(userModular as UserInternal)\n    );\n  }\n  return multiFactorUserCache.get(userModular)!;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Persistence } from '../../model/public_types';\n\nexport const enum PersistenceType {\n  SESSION = 'SESSION',\n  LOCAL = 'LOCAL',\n  NONE = 'NONE'\n}\n\nexport type PersistedBlob = Record<string, unknown>;\n\nexport interface Instantiator<T> {\n  (blob: PersistedBlob): T;\n}\n\nexport type PersistenceValue = PersistedBlob | string;\n\nexport const STORAGE_AVAILABLE_KEY = '__sak';\n\nexport interface StorageEventListener {\n  (value: PersistenceValue | null): void;\n}\n\nexport interface PersistenceInternal extends Persistence {\n  type: PersistenceType;\n  _isAvailable(): Promise<boolean>;\n  _set(key: string, value: PersistenceValue): Promise<void>;\n  _get<T extends PersistenceValue>(key: string): Promise<T | null>;\n  _remove(key: string): Promise<void>;\n  _addListener(key: string, listener: StorageEventListener): void;\n  _removeListener(key: string, listener: StorageEventListener): void;\n  // Should this persistence allow migration up the chosen hierarchy?\n  _shouldAllowMigration?: boolean;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  PersistenceValue,\n  STORAGE_AVAILABLE_KEY,\n  PersistenceType\n} from '../../core/persistence';\n\n// There are two different browser persistence types: local and session.\n// Both have the same implementation but use a different underlying storage\n// object.\n\nexport abstract class BrowserPersistenceClass {\n  protected constructor(\n    protected readonly storageRetriever: () => Storage,\n    readonly type: PersistenceType\n  ) {}\n\n  _isAvailable(): Promise<boolean> {\n    try {\n      if (!this.storage) {\n        return Promise.resolve(false);\n      }\n      this.storage.setItem(STORAGE_AVAILABLE_KEY, '1');\n      this.storage.removeItem(STORAGE_AVAILABLE_KEY);\n      return Promise.resolve(true);\n    } catch {\n      return Promise.resolve(false);\n    }\n  }\n\n  _set(key: string, value: PersistenceValue): Promise<void> {\n    this.storage.setItem(key, JSON.stringify(value));\n    return Promise.resolve();\n  }\n\n  _get<T extends PersistenceValue>(key: string): Promise<T | null> {\n    const json = this.storage.getItem(key);\n    return Promise.resolve(json ? JSON.parse(json) : null);\n  }\n\n  _remove(key: string): Promise<void> {\n    this.storage.removeItem(key);\n    return Promise.resolve();\n  }\n\n  protected get storage(): Storage {\n    return this.storageRetriever();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Persistence } from '../../model/public_types';\n\nimport { getUA } from '@firebase/util';\nimport {\n  _isSafari,\n  _isIOS,\n  _isIframe,\n  _isMobileBrowser,\n  _isIE10\n} from '../../core/util/browser';\nimport {\n  PersistenceInternal as InternalPersistence,\n  PersistenceType,\n  PersistenceValue,\n  StorageEventListener\n} from '../../core/persistence';\nimport { BrowserPersistenceClass } from './browser';\n\nfunction _iframeCannotSyncWebStorage(): boolean {\n  const ua = getUA();\n  return _isSafari(ua) || _isIOS(ua);\n}\n\n// The polling period in case events are not supported\nexport const _POLLING_INTERVAL_MS = 1000;\n\n// The IE 10 localStorage cross tab synchronization delay in milliseconds\nconst IE10_LOCAL_STORAGE_SYNC_DELAY = 10;\n\nclass BrowserLocalPersistence\n  extends BrowserPersistenceClass\n  implements InternalPersistence\n{\n  static type: 'LOCAL' = 'LOCAL';\n\n  constructor() {\n    super(() => window.localStorage, PersistenceType.LOCAL);\n  }\n\n  private readonly boundEventHandler = (\n    event: StorageEvent,\n    poll?: boolean\n  ): void => this.onStorageEvent(event, poll);\n  private readonly listeners: Record<string, Set<StorageEventListener>> = {};\n  private readonly localCache: Record<string, string | null> = {};\n  // setTimeout return value is platform specific\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private pollTimer: any | null = null;\n\n  // Safari or iOS browser and embedded in an iframe.\n  private readonly safariLocalStorageNotSynced =\n    _iframeCannotSyncWebStorage() && _isIframe();\n  // Whether to use polling instead of depending on window events\n  private readonly fallbackToPolling = _isMobileBrowser();\n  readonly _shouldAllowMigration = true;\n\n  private forAllChangedKeys(\n    cb: (key: string, oldValue: string | null, newValue: string | null) => void\n  ): void {\n    // Check all keys with listeners on them.\n    for (const key of Object.keys(this.listeners)) {\n      // Get value from localStorage.\n      const newValue = this.storage.getItem(key);\n      const oldValue = this.localCache[key];\n      // If local map value does not match, trigger listener with storage event.\n      // Differentiate this simulated event from the real storage event.\n      if (newValue !== oldValue) {\n        cb(key, oldValue, newValue);\n      }\n    }\n  }\n\n  private onStorageEvent(event: StorageEvent, poll = false): void {\n    // Key would be null in some situations, like when localStorage is cleared\n    if (!event.key) {\n      this.forAllChangedKeys(\n        (key: string, _oldValue: string | null, newValue: string | null) => {\n          this.notifyListeners(key, newValue);\n        }\n      );\n      return;\n    }\n\n    const key = event.key;\n\n    // Check the mechanism how this event was detected.\n    // The first event will dictate the mechanism to be used.\n    if (poll) {\n      // Environment detects storage changes via polling.\n      // Remove storage event listener to prevent possible event duplication.\n      this.detachListener();\n    } else {\n      // Environment detects storage changes via storage event listener.\n      // Remove polling listener to prevent possible event duplication.\n      this.stopPolling();\n    }\n\n    // Safari embedded iframe. Storage event will trigger with the delta\n    // changes but no changes will be applied to the iframe localStorage.\n    if (this.safariLocalStorageNotSynced) {\n      // Get current iframe page value.\n      const storedValue = this.storage.getItem(key);\n      // Value not synchronized, synchronize manually.\n      if (event.newValue !== storedValue) {\n        if (event.newValue !== null) {\n          // Value changed from current value.\n          this.storage.setItem(key, event.newValue);\n        } else {\n          // Current value deleted.\n          this.storage.removeItem(key);\n        }\n      } else if (this.localCache[key] === event.newValue && !poll) {\n        // Already detected and processed, do not trigger listeners again.\n        return;\n      }\n    }\n\n    const triggerListeners = (): void => {\n      // Keep local map up to date in case storage event is triggered before\n      // poll.\n      const storedValue = this.storage.getItem(key);\n      if (!poll && this.localCache[key] === storedValue) {\n        // Real storage event which has already been detected, do nothing.\n        // This seems to trigger in some IE browsers for some reason.\n        return;\n      }\n      this.notifyListeners(key, storedValue);\n    };\n\n    const storedValue = this.storage.getItem(key);\n    if (\n      _isIE10() &&\n      storedValue !== event.newValue &&\n      event.newValue !== event.oldValue\n    ) {\n      // IE 10 has this weird bug where a storage event would trigger with the\n      // correct key, oldValue and newValue but localStorage.getItem(key) does\n      // not yield the updated value until a few milliseconds. This ensures\n      // this recovers from that situation.\n      setTimeout(triggerListeners, IE10_LOCAL_STORAGE_SYNC_DELAY);\n    } else {\n      triggerListeners();\n    }\n  }\n\n  private notifyListeners(key: string, value: string | null): void {\n    this.localCache[key] = value;\n    const listeners = this.listeners[key];\n    if (listeners) {\n      for (const listener of Array.from(listeners)) {\n        listener(value ? JSON.parse(value) : value);\n      }\n    }\n  }\n\n  private startPolling(): void {\n    this.stopPolling();\n\n    this.pollTimer = setInterval(() => {\n      this.forAllChangedKeys(\n        (key: string, oldValue: string | null, newValue: string | null) => {\n          this.onStorageEvent(\n            new StorageEvent('storage', {\n              key,\n              oldValue,\n              newValue\n            }),\n            /* poll */ true\n          );\n        }\n      );\n    }, _POLLING_INTERVAL_MS);\n  }\n\n  private stopPolling(): void {\n    if (this.pollTimer) {\n      clearInterval(this.pollTimer);\n      this.pollTimer = null;\n    }\n  }\n\n  private attachListener(): void {\n    window.addEventListener('storage', this.boundEventHandler);\n  }\n\n  private detachListener(): void {\n    window.removeEventListener('storage', this.boundEventHandler);\n  }\n\n  _addListener(key: string, listener: StorageEventListener): void {\n    if (Object.keys(this.listeners).length === 0) {\n      // Whether browser can detect storage event when it had already been pushed to the background.\n      // This may happen in some mobile browsers. A localStorage change in the foreground window\n      // will not be detected in the background window via the storage event.\n      // This was detected in iOS 7.x mobile browsers\n      if (this.fallbackToPolling) {\n        this.startPolling();\n      } else {\n        this.attachListener();\n      }\n    }\n    if (!this.listeners[key]) {\n      this.listeners[key] = new Set();\n      // Populate the cache to avoid spuriously triggering on first poll.\n      this.localCache[key] = this.storage.getItem(key);\n    }\n    this.listeners[key].add(listener);\n  }\n\n  _removeListener(key: string, listener: StorageEventListener): void {\n    if (this.listeners[key]) {\n      this.listeners[key].delete(listener);\n\n      if (this.listeners[key].size === 0) {\n        delete this.listeners[key];\n      }\n    }\n\n    if (Object.keys(this.listeners).length === 0) {\n      this.detachListener();\n      this.stopPolling();\n    }\n  }\n\n  // Update local cache on base operations:\n\n  async _set(key: string, value: PersistenceValue): Promise<void> {\n    await super._set(key, value);\n    this.localCache[key] = JSON.stringify(value);\n  }\n\n  async _get<T extends PersistenceValue>(key: string): Promise<T | null> {\n    const value = await super._get<T>(key);\n    this.localCache[key] = JSON.stringify(value);\n    return value;\n  }\n\n  async _remove(key: string): Promise<void> {\n    await super._remove(key);\n    delete this.localCache[key];\n  }\n}\n\n/**\n * An implementation of {@link Persistence} of type `LOCAL` using `localStorage`\n * for the underlying storage.\n *\n * @public\n */\nexport const browserLocalPersistence: Persistence = BrowserLocalPersistence;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Persistence } from '../../model/public_types';\n\nimport {\n  PersistenceInternal as InternalPersistence,\n  PersistenceType,\n  StorageEventListener\n} from '../../core/persistence';\nimport { BrowserPersistenceClass } from './browser';\n\nclass BrowserSessionPersistence\n  extends BrowserPersistenceClass\n  implements InternalPersistence\n{\n  static type: 'SESSION' = 'SESSION';\n\n  constructor() {\n    super(() => window.sessionStorage, PersistenceType.SESSION);\n  }\n\n  _addListener(_key: string, _listener: StorageEventListener): void {\n    // Listeners are not supported for session storage since it cannot be shared across windows\n    return;\n  }\n\n  _removeListener(_key: string, _listener: StorageEventListener): void {\n    // Listeners are not supported for session storage since it cannot be shared across windows\n    return;\n  }\n}\n\n/**\n * An implementation of {@link Persistence} of `SESSION` using `sessionStorage`\n * for the underlying storage.\n *\n * @public\n */\nexport const browserSessionPersistence: Persistence = BrowserSessionPersistence;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** TODO: remove this once tslib has a polyfill for Promise.allSettled */\ninterface PromiseFulfilledResult<T> {\n  fulfilled: true;\n  value: T;\n}\n\ninterface PromiseRejectedResult {\n  fulfilled: false;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  reason: any;\n}\n\nexport type PromiseSettledResult<T> =\n  | PromiseFulfilledResult<T>\n  | PromiseRejectedResult;\n\n/**\n * Shim for Promise.allSettled, note the slightly different format of `fulfilled` vs `status`.\n *\n * @param promises - Array of promises to wait on.\n */\nexport function _allSettled<T>(\n  promises: Array<Promise<T>>\n): Promise<Array<PromiseSettledResult<T>>> {\n  return Promise.all(\n    promises.map(async promise => {\n      try {\n        const value = await promise;\n        return {\n          fulfilled: true,\n          value\n        } as PromiseFulfilledResult<T>;\n      } catch (reason) {\n        return {\n          fulfilled: false,\n          reason\n        } as PromiseRejectedResult;\n      }\n    })\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ReceiverHandler,\n  _EventType,\n  _ReceiverResponse,\n  SenderMessageEvent,\n  _Status,\n  _SenderRequest\n} from './index';\nimport { _allSettled } from './promise';\n\n/**\n * Interface class for receiving messages.\n *\n */\nexport class Receiver {\n  private static readonly receivers: Receiver[] = [];\n  private readonly boundEventHandler: EventListener;\n\n  private readonly handlersMap: {\n    // Typescript doesn't have existential types :(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [eventType: string]: Set<ReceiverHandler<any, any>>;\n  } = {};\n\n  constructor(private readonly eventTarget: EventTarget) {\n    this.boundEventHandler = this.handleEvent.bind(this);\n  }\n\n  /**\n   * Obtain an instance of a Receiver for a given event target, if none exists it will be created.\n   *\n   * @param eventTarget - An event target (such as window or self) through which the underlying\n   * messages will be received.\n   */\n  static _getInstance(eventTarget: EventTarget): Receiver {\n    // The results are stored in an array since objects can't be keys for other\n    // objects. In addition, setting a unique property on an event target as a\n    // hash map key may not be allowed due to CORS restrictions.\n    const existingInstance = this.receivers.find(receiver =>\n      receiver.isListeningto(eventTarget)\n    );\n    if (existingInstance) {\n      return existingInstance;\n    }\n    const newInstance = new Receiver(eventTarget);\n    this.receivers.push(newInstance);\n    return newInstance;\n  }\n\n  private isListeningto(eventTarget: EventTarget): boolean {\n    return this.eventTarget === eventTarget;\n  }\n\n  /**\n   * Fans out a MessageEvent to the appropriate listeners.\n   *\n   * @remarks\n   * Sends an {@link Status.ACK} upon receipt and a {@link Status.DONE} once all handlers have\n   * finished processing.\n   *\n   * @param event - The MessageEvent.\n   *\n   */\n  private async handleEvent<\n    T extends _ReceiverResponse,\n    S extends _SenderRequest\n  >(event: Event): Promise<void> {\n    const messageEvent = event as MessageEvent<SenderMessageEvent<S>>;\n    const { eventId, eventType, data } = messageEvent.data;\n\n    const handlers: Set<ReceiverHandler<T, S>> | undefined =\n      this.handlersMap[eventType];\n    if (!handlers?.size) {\n      return;\n    }\n\n    messageEvent.ports[0].postMessage({\n      status: _Status.ACK,\n      eventId,\n      eventType\n    });\n\n    const promises = Array.from(handlers).map(async handler =>\n      handler(messageEvent.origin, data)\n    );\n    const response = await _allSettled(promises);\n    messageEvent.ports[0].postMessage({\n      status: _Status.DONE,\n      eventId,\n      eventType,\n      response\n    });\n  }\n\n  /**\n   * Subscribe an event handler for a particular event.\n   *\n   * @param eventType - Event name to subscribe to.\n   * @param eventHandler - The event handler which should receive the events.\n   *\n   */\n  _subscribe<T extends _ReceiverResponse, S extends _SenderRequest>(\n    eventType: _EventType,\n    eventHandler: ReceiverHandler<T, S>\n  ): void {\n    if (Object.keys(this.handlersMap).length === 0) {\n      this.eventTarget.addEventListener('message', this.boundEventHandler);\n    }\n\n    if (!this.handlersMap[eventType]) {\n      this.handlersMap[eventType] = new Set();\n    }\n\n    this.handlersMap[eventType].add(eventHandler);\n  }\n\n  /**\n   * Unsubscribe an event handler from a particular event.\n   *\n   * @param eventType - Event name to unsubscribe from.\n   * @param eventHandler - Optinoal event handler, if none provided, unsubscribe all handlers on this event.\n   *\n   */\n  _unsubscribe<T extends _ReceiverResponse, S extends _SenderRequest>(\n    eventType: _EventType,\n    eventHandler?: ReceiverHandler<T, S>\n  ): void {\n    if (this.handlersMap[eventType] && eventHandler) {\n      this.handlersMap[eventType].delete(eventHandler);\n    }\n    if (!eventHandler || this.handlersMap[eventType].size === 0) {\n      delete this.handlersMap[eventType];\n    }\n\n    if (Object.keys(this.handlersMap).length === 0) {\n      this.eventTarget.removeEventListener('message', this.boundEventHandler);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function _generateEventId(prefix = '', digits = 10): string {\n  let random = '';\n  for (let i = 0; i < digits; i++) {\n    random += Math.floor(Math.random() * 10);\n  }\n  return prefix + random;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _generateEventId } from '../../core/util/event_id';\nimport {\n  _SenderRequest,\n  _EventType,\n  ReceiverMessageEvent,\n  _MessageError,\n  SenderMessageEvent,\n  _Status,\n  _ReceiverMessageResponse,\n  _ReceiverResponse,\n  _TimeoutDuration\n} from './index';\n\ninterface MessageHandler {\n  messageChannel: MessageChannel;\n  onMessage: EventListenerOrEventListenerObject;\n}\n\n/**\n * Interface for sending messages and waiting for a completion response.\n *\n */\nexport class Sender {\n  private readonly handlers = new Set<MessageHandler>();\n\n  constructor(private readonly target: ServiceWorker) {}\n\n  /**\n   * Unsubscribe the handler and remove it from our tracking Set.\n   *\n   * @param handler - The handler to unsubscribe.\n   */\n  private removeMessageHandler(handler: MessageHandler): void {\n    if (handler.messageChannel) {\n      handler.messageChannel.port1.removeEventListener(\n        'message',\n        handler.onMessage\n      );\n      handler.messageChannel.port1.close();\n    }\n    this.handlers.delete(handler);\n  }\n\n  /**\n   * Send a message to the Receiver located at {@link target}.\n   *\n   * @remarks\n   * We'll first wait a bit for an ACK , if we get one we will wait significantly longer until the\n   * receiver has had a chance to fully process the event.\n   *\n   * @param eventType - Type of event to send.\n   * @param data - The payload of the event.\n   * @param timeout - Timeout for waiting on an ACK from the receiver.\n   *\n   * @returns An array of settled promises from all the handlers that were listening on the receiver.\n   */\n  async _send<T extends _ReceiverResponse, S extends _SenderRequest>(\n    eventType: _EventType,\n    data: S,\n    timeout = _TimeoutDuration.ACK\n  ): Promise<_ReceiverMessageResponse<T>> {\n    const messageChannel =\n      typeof MessageChannel !== 'undefined' ? new MessageChannel() : null;\n    if (!messageChannel) {\n      throw new Error(_MessageError.CONNECTION_UNAVAILABLE);\n    }\n    // Node timers and browser timers return fundamentally different types.\n    // We don't actually care what the value is but TS won't accept unknown and\n    // we can't cast properly in both environments.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let completionTimer: any;\n    let handler: MessageHandler;\n    return new Promise<_ReceiverMessageResponse<T>>((resolve, reject) => {\n      const eventId = _generateEventId('', 20);\n      messageChannel.port1.start();\n      const ackTimer = setTimeout(() => {\n        reject(new Error(_MessageError.UNSUPPORTED_EVENT));\n      }, timeout);\n      handler = {\n        messageChannel,\n        onMessage(event: Event): void {\n          const messageEvent = event as MessageEvent<ReceiverMessageEvent<T>>;\n          if (messageEvent.data.eventId !== eventId) {\n            return;\n          }\n          switch (messageEvent.data.status) {\n            case _Status.ACK:\n              // The receiver should ACK first.\n              clearTimeout(ackTimer);\n              completionTimer = setTimeout(() => {\n                reject(new Error(_MessageError.TIMEOUT));\n              }, _TimeoutDuration.COMPLETION);\n              break;\n            case _Status.DONE:\n              // Once the receiver's handlers are finished we will get the results.\n              clearTimeout(completionTimer);\n              resolve(messageEvent.data.response);\n              break;\n            default:\n              clearTimeout(ackTimer);\n              clearTimeout(completionTimer);\n              reject(new Error(_MessageError.INVALID_RESPONSE));\n              break;\n          }\n        }\n      };\n      this.handlers.add(handler);\n      messageChannel.port1.addEventListener('message', handler.onMessage);\n      this.target.postMessage(\n        {\n          eventType,\n          eventId,\n          data\n        } as SenderMessageEvent<S>,\n        [messageChannel.port2]\n      );\n    }).finally(() => {\n      if (handler) {\n        this.removeMessageHandler(handler);\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Recaptcha, GreCAPTCHATopLevel } from './recaptcha/recaptcha';\n\n/**\n * A specialized window type that melds the normal window type plus the\n * various bits we need. The three different blocks that are &'d together\n * cant be defined in the same block together.\n */\nexport type AuthWindow = {\n  // Standard window types\n  [T in keyof Window]: Window[T];\n} & {\n  // Any known / named properties we want to add\n  grecaptcha?: Recaptcha | GreCAPTCHATopLevel;\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  ___jsl?: Record<string, any>;\n  gapi?: typeof gapi;\n} & {\n  // A final catch-all for callbacks (which will have random names) that\n  // we will stick on the window.\n  [callback: string]: (...args: unknown[]) => void;\n};\n\n/**\n * Lazy accessor for window, since the compat layer won't tree shake this out,\n * we need to make sure not to mess with window unless we have to\n */\nexport function _window(): AuthWindow {\n  return window as unknown as AuthWindow;\n}\n\nexport function _setWindowLocation(url: string): void {\n  _window().location.href = url;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _window } from '../auth_window';\n\nexport function _isWorker(): boolean {\n  return (\n    typeof _window()['WorkerGlobalScope'] !== 'undefined' &&\n    typeof _window()['importScripts'] === 'function'\n  );\n}\n\nexport async function _getActiveServiceWorker(): Promise<ServiceWorker | null> {\n  if (!navigator?.serviceWorker) {\n    return null;\n  }\n  try {\n    const registration = await navigator.serviceWorker.ready;\n    return registration.active;\n  } catch {\n    return null;\n  }\n}\n\nexport function _getServiceWorkerController(): ServiceWorker | null {\n  return navigator?.serviceWorker?.controller || null;\n}\n\nexport function _getWorkerGlobalScope(): ServiceWorker | null {\n  return _isWorker() ? (self as unknown as ServiceWorker) : null;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Persistence } from '../../model/public_types';\nimport {\n  PersistedBlob,\n  PersistenceInternal as InternalPersistence,\n  PersistenceType,\n  PersistenceValue,\n  StorageEventListener,\n  STORAGE_AVAILABLE_KEY\n} from '../../core/persistence/';\nimport {\n  _EventType,\n  _PingResponse,\n  KeyChangedResponse,\n  KeyChangedRequest,\n  PingRequest,\n  _TimeoutDuration\n} from '../messagechannel/index';\nimport { Receiver } from '../messagechannel/receiver';\nimport { Sender } from '../messagechannel/sender';\nimport {\n  _isWorker,\n  _getActiveServiceWorker,\n  _getServiceWorkerController,\n  _getWorkerGlobalScope\n} from '../util/worker';\n\nexport const DB_NAME = 'firebaseLocalStorageDb';\nconst DB_VERSION = 1;\nconst DB_OBJECTSTORE_NAME = 'firebaseLocalStorage';\nconst DB_DATA_KEYPATH = 'fbase_key';\n\ninterface DBObject {\n  [DB_DATA_KEYPATH]: string;\n  value: PersistedBlob;\n}\n\n/**\n * Promise wrapper for IDBRequest\n *\n * Unfortunately we can't cleanly extend Promise<T> since promises are not callable in ES6\n *\n */\nclass DBPromise<T> {\n  constructor(private readonly request: IDBRequest) {}\n\n  toPromise(): Promise<T> {\n    return new Promise<T>((resolve, reject) => {\n      this.request.addEventListener('success', () => {\n        resolve(this.request.result);\n      });\n      this.request.addEventListener('error', () => {\n        reject(this.request.error);\n      });\n    });\n  }\n}\n\nfunction getObjectStore(db: IDBDatabase, isReadWrite: boolean): IDBObjectStore {\n  return db\n    .transaction([DB_OBJECTSTORE_NAME], isReadWrite ? 'readwrite' : 'readonly')\n    .objectStore(DB_OBJECTSTORE_NAME);\n}\n\nexport async function _clearDatabase(db: IDBDatabase): Promise<void> {\n  const objectStore = getObjectStore(db, true);\n  return new DBPromise<void>(objectStore.clear()).toPromise();\n}\n\nexport function _deleteDatabase(): Promise<void> {\n  const request = indexedDB.deleteDatabase(DB_NAME);\n  return new DBPromise<void>(request).toPromise();\n}\n\nexport function _openDatabase(): Promise<IDBDatabase> {\n  const request = indexedDB.open(DB_NAME, DB_VERSION);\n  return new Promise((resolve, reject) => {\n    request.addEventListener('error', () => {\n      reject(request.error);\n    });\n\n    request.addEventListener('upgradeneeded', () => {\n      const db = request.result;\n\n      try {\n        db.createObjectStore(DB_OBJECTSTORE_NAME, { keyPath: DB_DATA_KEYPATH });\n      } catch (e) {\n        reject(e);\n      }\n    });\n\n    request.addEventListener('success', async () => {\n      const db: IDBDatabase = request.result;\n      // Strange bug that occurs in Firefox when multiple tabs are opened at the\n      // same time. The only way to recover seems to be deleting the database\n      // and re-initializing it.\n      // https://github.com/firebase/firebase-js-sdk/issues/634\n\n      if (!db.objectStoreNames.contains(DB_OBJECTSTORE_NAME)) {\n        // Need to close the database or else you get a `blocked` event\n        db.close();\n        await _deleteDatabase();\n        resolve(await _openDatabase());\n      } else {\n        resolve(db);\n      }\n    });\n  });\n}\n\nexport async function _putObject(\n  db: IDBDatabase,\n  key: string,\n  value: PersistenceValue | string\n): Promise<void> {\n  const request = getObjectStore(db, true).put({\n    [DB_DATA_KEYPATH]: key,\n    value\n  });\n  return new DBPromise<void>(request).toPromise();\n}\n\nasync function getObject(\n  db: IDBDatabase,\n  key: string\n): Promise<PersistedBlob | null> {\n  const request = getObjectStore(db, false).get(key);\n  const data = await new DBPromise<DBObject | undefined>(request).toPromise();\n  return data === undefined ? null : data.value;\n}\n\nexport function _deleteObject(db: IDBDatabase, key: string): Promise<void> {\n  const request = getObjectStore(db, true).delete(key);\n  return new DBPromise<void>(request).toPromise();\n}\n\nexport const _POLLING_INTERVAL_MS = 800;\nexport const _TRANSACTION_RETRY_COUNT = 3;\n\nclass IndexedDBLocalPersistence implements InternalPersistence {\n  static type: 'LOCAL' = 'LOCAL';\n\n  type = PersistenceType.LOCAL;\n  db?: IDBDatabase;\n  readonly _shouldAllowMigration = true;\n\n  private readonly listeners: Record<string, Set<StorageEventListener>> = {};\n  private readonly localCache: Record<string, PersistenceValue | null> = {};\n  // setTimeout return value is platform specific\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private pollTimer: any | null = null;\n  private pendingWrites = 0;\n\n  private receiver: Receiver | null = null;\n  private sender: Sender | null = null;\n  private serviceWorkerReceiverAvailable = false;\n  private activeServiceWorker: ServiceWorker | null = null;\n  // Visible for testing only\n  readonly _workerInitializationPromise: Promise<void>;\n\n  constructor() {\n    // Fire & forget the service worker registration as it may never resolve\n    this._workerInitializationPromise =\n      this.initializeServiceWorkerMessaging().then(\n        () => {},\n        () => {}\n      );\n  }\n\n  async _openDb(): Promise<IDBDatabase> {\n    if (this.db) {\n      return this.db;\n    }\n    this.db = await _openDatabase();\n    return this.db;\n  }\n\n  async _withRetries<T>(op: (db: IDBDatabase) => Promise<T>): Promise<T> {\n    let numAttempts = 0;\n\n    while (true) {\n      try {\n        const db = await this._openDb();\n        return await op(db);\n      } catch (e) {\n        if (numAttempts++ > _TRANSACTION_RETRY_COUNT) {\n          throw e;\n        }\n        if (this.db) {\n          this.db.close();\n          this.db = undefined;\n        }\n        // TODO: consider adding exponential backoff\n      }\n    }\n  }\n\n  /**\n   * IndexedDB events do not propagate from the main window to the worker context.  We rely on a\n   * postMessage interface to send these events to the worker ourselves.\n   */\n  private async initializeServiceWorkerMessaging(): Promise<void> {\n    return _isWorker() ? this.initializeReceiver() : this.initializeSender();\n  }\n\n  /**\n   * As the worker we should listen to events from the main window.\n   */\n  private async initializeReceiver(): Promise<void> {\n    this.receiver = Receiver._getInstance(_getWorkerGlobalScope()!);\n    // Refresh from persistence if we receive a KeyChanged message.\n    this.receiver._subscribe(\n      _EventType.KEY_CHANGED,\n      async (_origin: string, data: KeyChangedRequest) => {\n        const keys = await this._poll();\n        return {\n          keyProcessed: keys.includes(data.key)\n        };\n      }\n    );\n    // Let the sender know that we are listening so they give us more timeout.\n    this.receiver._subscribe(\n      _EventType.PING,\n      async (_origin: string, _data: PingRequest) => {\n        return [_EventType.KEY_CHANGED];\n      }\n    );\n  }\n\n  /**\n   * As the main window, we should let the worker know when keys change (set and remove).\n   *\n   * @remarks\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready | ServiceWorkerContainer.ready}\n   * may not resolve.\n   */\n  private async initializeSender(): Promise<void> {\n    // Check to see if there's an active service worker.\n    this.activeServiceWorker = await _getActiveServiceWorker();\n    if (!this.activeServiceWorker) {\n      return;\n    }\n    this.sender = new Sender(this.activeServiceWorker);\n    // Ping the service worker to check what events they can handle.\n    const results = await this.sender._send<_PingResponse, PingRequest>(\n      _EventType.PING,\n      {},\n      _TimeoutDuration.LONG_ACK\n    );\n    if (!results) {\n      return;\n    }\n    if (\n      results[0]?.fulfilled &&\n      results[0]?.value.includes(_EventType.KEY_CHANGED)\n    ) {\n      this.serviceWorkerReceiverAvailable = true;\n    }\n  }\n\n  /**\n   * Let the worker know about a changed key, the exact key doesn't technically matter since the\n   * worker will just trigger a full sync anyway.\n   *\n   * @remarks\n   * For now, we only support one service worker per page.\n   *\n   * @param key - Storage key which changed.\n   */\n  private async notifyServiceWorker(key: string): Promise<void> {\n    if (\n      !this.sender ||\n      !this.activeServiceWorker ||\n      _getServiceWorkerController() !== this.activeServiceWorker\n    ) {\n      return;\n    }\n    try {\n      await this.sender._send<KeyChangedResponse, KeyChangedRequest>(\n        _EventType.KEY_CHANGED,\n        { key },\n        // Use long timeout if receiver has previously responded to a ping from us.\n        this.serviceWorkerReceiverAvailable\n          ? _TimeoutDuration.LONG_ACK\n          : _TimeoutDuration.ACK\n      );\n    } catch {\n      // This is a best effort approach. Ignore errors.\n    }\n  }\n\n  async _isAvailable(): Promise<boolean> {\n    try {\n      if (!indexedDB) {\n        return false;\n      }\n      const db = await _openDatabase();\n      await _putObject(db, STORAGE_AVAILABLE_KEY, '1');\n      await _deleteObject(db, STORAGE_AVAILABLE_KEY);\n      return true;\n    } catch {}\n    return false;\n  }\n\n  private async _withPendingWrite(write: () => Promise<void>): Promise<void> {\n    this.pendingWrites++;\n    try {\n      await write();\n    } finally {\n      this.pendingWrites--;\n    }\n  }\n\n  async _set(key: string, value: PersistenceValue): Promise<void> {\n    return this._withPendingWrite(async () => {\n      await this._withRetries((db: IDBDatabase) => _putObject(db, key, value));\n      this.localCache[key] = value;\n      return this.notifyServiceWorker(key);\n    });\n  }\n\n  async _get<T extends PersistenceValue>(key: string): Promise<T | null> {\n    const obj = (await this._withRetries((db: IDBDatabase) =>\n      getObject(db, key)\n    )) as T;\n    this.localCache[key] = obj;\n    return obj;\n  }\n\n  async _remove(key: string): Promise<void> {\n    return this._withPendingWrite(async () => {\n      await this._withRetries((db: IDBDatabase) => _deleteObject(db, key));\n      delete this.localCache[key];\n      return this.notifyServiceWorker(key);\n    });\n  }\n\n  private async _poll(): Promise<string[]> {\n    // TODO: check if we need to fallback if getAll is not supported\n    const result = await this._withRetries((db: IDBDatabase) => {\n      const getAllRequest = getObjectStore(db, false).getAll();\n      return new DBPromise<DBObject[] | null>(getAllRequest).toPromise();\n    });\n\n    if (!result) {\n      return [];\n    }\n\n    // If we have pending writes in progress abort, we'll get picked up on the next poll\n    if (this.pendingWrites !== 0) {\n      return [];\n    }\n\n    const keys = [];\n    const keysInResult = new Set();\n    for (const { fbase_key: key, value } of result) {\n      keysInResult.add(key);\n      if (JSON.stringify(this.localCache[key]) !== JSON.stringify(value)) {\n        this.notifyListeners(key, value as PersistenceValue);\n        keys.push(key);\n      }\n    }\n    for (const localKey of Object.keys(this.localCache)) {\n      if (this.localCache[localKey] && !keysInResult.has(localKey)) {\n        // Deleted\n        this.notifyListeners(localKey, null);\n        keys.push(localKey);\n      }\n    }\n    return keys;\n  }\n\n  private notifyListeners(\n    key: string,\n    newValue: PersistenceValue | null\n  ): void {\n    this.localCache[key] = newValue;\n    const listeners = this.listeners[key];\n    if (listeners) {\n      for (const listener of Array.from(listeners)) {\n        listener(newValue);\n      }\n    }\n  }\n\n  private startPolling(): void {\n    this.stopPolling();\n\n    this.pollTimer = setInterval(\n      async () => this._poll(),\n      _POLLING_INTERVAL_MS\n    );\n  }\n\n  private stopPolling(): void {\n    if (this.pollTimer) {\n      clearInterval(this.pollTimer);\n      this.pollTimer = null;\n    }\n  }\n\n  _addListener(key: string, listener: StorageEventListener): void {\n    if (Object.keys(this.listeners).length === 0) {\n      this.startPolling();\n    }\n    if (!this.listeners[key]) {\n      this.listeners[key] = new Set();\n      // Populate the cache to avoid spuriously triggering on first poll.\n      void this._get(key); // This can happen in the background async and we can return immediately.\n    }\n    this.listeners[key].add(listener);\n  }\n\n  _removeListener(key: string, listener: StorageEventListener): void {\n    if (this.listeners[key]) {\n      this.listeners[key].delete(listener);\n\n      if (this.listeners[key].size === 0) {\n        delete this.listeners[key];\n      }\n    }\n\n    if (Object.keys(this.listeners).length === 0) {\n      this.stopPolling();\n    }\n  }\n}\n\n/**\n * An implementation of {@link Persistence} of type `LOCAL` using `indexedDB`\n * for the underlying storage.\n *\n * @public\n */\nexport const indexedDBLocalPersistence: Persistence = IndexedDBLocalPersistence;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  _performApiRequest,\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary\n} from '../index';\nimport { Auth } from '../../model/public_types';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { MfaEnrollment } from '../account_management/mfa';\nimport { SignInWithIdpResponse } from './idp';\nimport {\n  SignInWithPhoneNumberRequest,\n  SignInWithPhoneNumberResponse\n} from './sms';\n\nexport interface FinalizeMfaResponse {\n  idToken: string;\n  refreshToken: string;\n}\n\n/**\n * @internal\n */\nexport interface IdTokenMfaResponse extends IdTokenResponse {\n  mfaPendingCredential?: string;\n  mfaInfo?: MfaEnrollment[];\n}\n\nexport interface StartPhoneMfaSignInRequest {\n  mfaPendingCredential: string;\n  mfaEnrollmentId: string;\n  phoneSignInInfo: {\n    recaptchaToken: string;\n  };\n  tenantId?: string;\n}\n\nexport interface StartPhoneMfaSignInResponse {\n  phoneResponseInfo: {\n    sessionInfo: string;\n  };\n}\n\nexport function startSignInPhoneMfa(\n  auth: Auth,\n  request: StartPhoneMfaSignInRequest\n): Promise<StartPhoneMfaSignInResponse> {\n  return _performApiRequest<\n    StartPhoneMfaSignInRequest,\n    StartPhoneMfaSignInResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.START_MFA_SIGN_IN,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport interface FinalizePhoneMfaSignInRequest {\n  mfaPendingCredential: string;\n  phoneVerificationInfo: SignInWithPhoneNumberRequest;\n  tenantId?: string;\n}\n\n// TOTP MFA Sign in only has a finalize phase. Phone MFA has a start phase to initiate sending an\n// SMS and a finalize phase to complete sign in. With TOTP, the user already has the OTP in the\n// TOTP/Authenticator app.\nexport interface FinalizeTotpMfaSignInRequest {\n  mfaPendingCredential: string;\n  totpVerificationInfo: { verificationCode: string };\n  tenantId?: string;\n  mfaEnrollmentId: string;\n}\n\nexport interface FinalizePhoneMfaSignInResponse extends FinalizeMfaResponse {}\n\nexport interface FinalizeTotpMfaSignInResponse extends FinalizeMfaResponse {}\n\nexport function finalizeSignInPhoneMfa(\n  auth: Auth,\n  request: FinalizePhoneMfaSignInRequest\n): Promise<FinalizePhoneMfaSignInResponse> {\n  return _performApiRequest<\n    FinalizePhoneMfaSignInRequest,\n    FinalizePhoneMfaSignInResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.FINALIZE_MFA_SIGN_IN,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport function finalizeSignInTotpMfa(\n  auth: Auth,\n  request: FinalizeTotpMfaSignInRequest\n): Promise<FinalizeTotpMfaSignInResponse> {\n  return _performApiRequest<\n    FinalizeTotpMfaSignInRequest,\n    FinalizeTotpMfaSignInResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.FINALIZE_MFA_SIGN_IN,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\n/**\n * @internal\n */\nexport type PhoneOrOauthTokenResponse =\n  | SignInWithPhoneNumberResponse\n  | SignInWithIdpResponse\n  | IdTokenResponse;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthErrorCode } from '../../core/errors';\nimport { _assert } from '../../core/util/assert';\nimport { AuthInternal } from '../../model/auth';\nimport { RecaptchaParameters } from '../../model/public_types';\nimport {\n  Recaptcha,\n  GreCAPTCHATopLevel,\n  GreCAPTCHARenderOption,\n  GreCAPTCHA\n} from './recaptcha';\n\nexport const _SOLVE_TIME_MS = 500;\nexport const _EXPIRATION_TIME_MS = 60_000;\nexport const _WIDGET_ID_START = 1_000_000_000_000;\n\nexport interface Widget {\n  getResponse: () => string | null;\n  delete: () => void;\n  execute: () => void;\n}\n\nexport class MockReCaptcha implements Recaptcha {\n  private counter = _WIDGET_ID_START;\n  _widgets = new Map<number, Widget>();\n\n  constructor(private readonly auth: AuthInternal) {}\n\n  render(\n    container: string | HTMLElement,\n    parameters?: RecaptchaParameters\n  ): number {\n    const id = this.counter;\n    this._widgets.set(\n      id,\n      new MockWidget(container, this.auth.name, parameters || {})\n    );\n    this.counter++;\n    return id;\n  }\n\n  reset(optWidgetId?: number): void {\n    const id = optWidgetId || _WIDGET_ID_START;\n    void this._widgets.get(id)?.delete();\n    this._widgets.delete(id);\n  }\n\n  getResponse(optWidgetId?: number): string {\n    const id = optWidgetId || _WIDGET_ID_START;\n    return this._widgets.get(id)?.getResponse() || '';\n  }\n\n  async execute(optWidgetId?: number | string): Promise<string> {\n    const id: number = (optWidgetId as number) || _WIDGET_ID_START;\n    void this._widgets.get(id)?.execute();\n    return '';\n  }\n}\n\nexport class MockGreCAPTCHATopLevel implements GreCAPTCHATopLevel {\n  enterprise: GreCAPTCHA = new MockGreCAPTCHA();\n  ready(callback: () => void): void {\n    callback();\n  }\n\n  execute(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _siteKey: string,\n    _options: { action: string }\n  ): Promise<string> {\n    return Promise.resolve('token');\n  }\n  render(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _container: string | HTMLElement,\n    _parameters: GreCAPTCHARenderOption\n  ): string {\n    return '';\n  }\n}\n\nexport class MockGreCAPTCHA implements GreCAPTCHA {\n  ready(callback: () => void): void {\n    callback();\n  }\n\n  execute(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _siteKey: string,\n    _options: { action: string }\n  ): Promise<string> {\n    return Promise.resolve('token');\n  }\n  render(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _container: string | HTMLElement,\n    _parameters: GreCAPTCHARenderOption\n  ): string {\n    return '';\n  }\n}\n\nexport class MockWidget {\n  private readonly container: HTMLElement;\n  private readonly isVisible: boolean;\n  private timerId: number | null = null;\n  private deleted = false;\n  private responseToken: string | null = null;\n  private readonly clickHandler = (): void => {\n    this.execute();\n  };\n\n  constructor(\n    containerOrId: string | HTMLElement,\n    appName: string,\n    private readonly params: RecaptchaParameters\n  ) {\n    const container =\n      typeof containerOrId === 'string'\n        ? document.getElementById(containerOrId)\n        : containerOrId;\n    _assert(container, AuthErrorCode.ARGUMENT_ERROR, { appName });\n\n    this.container = container;\n    this.isVisible = this.params.size !== 'invisible';\n    if (this.isVisible) {\n      this.execute();\n    } else {\n      this.container.addEventListener('click', this.clickHandler);\n    }\n  }\n\n  getResponse(): string | null {\n    this.checkIfDeleted();\n    return this.responseToken;\n  }\n\n  delete(): void {\n    this.checkIfDeleted();\n    this.deleted = true;\n    if (this.timerId) {\n      clearTimeout(this.timerId);\n      this.timerId = null;\n    }\n    this.container.removeEventListener('click', this.clickHandler);\n  }\n\n  execute(): void {\n    this.checkIfDeleted();\n    if (this.timerId) {\n      return;\n    }\n\n    this.timerId = window.setTimeout(() => {\n      this.responseToken = generateRandomAlphaNumericString(50);\n      const { callback, 'expired-callback': expiredCallback } = this.params;\n      if (callback) {\n        try {\n          callback(this.responseToken);\n        } catch (e) {}\n      }\n\n      this.timerId = window.setTimeout(() => {\n        this.timerId = null;\n        this.responseToken = null;\n        if (expiredCallback) {\n          try {\n            expiredCallback();\n          } catch (e) {}\n        }\n\n        if (this.isVisible) {\n          this.execute();\n        }\n      }, _EXPIRATION_TIME_MS);\n    }, _SOLVE_TIME_MS);\n  }\n\n  private checkIfDeleted(): void {\n    if (this.deleted) {\n      throw new Error('reCAPTCHA mock was already deleted!');\n    }\n  }\n}\n\nfunction generateRandomAlphaNumericString(len: number): string {\n  const chars = [];\n  const allowedChars =\n    '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  for (let i = 0; i < len; i++) {\n    chars.push(\n      allowedChars.charAt(Math.floor(Math.random() * allowedChars.length))\n    );\n  }\n  return chars.join('');\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { querystring } from '@firebase/util';\n\nimport { AuthErrorCode } from '../../core/errors';\nimport { _assert, _createError } from '../../core/util/assert';\nimport { Delay } from '../../core/util/delay';\nimport { AuthInternal } from '../../model/auth';\nimport { _window } from '../auth_window';\nimport * as jsHelpers from '../load_js';\nimport { Recaptcha, isV2 } from './recaptcha';\nimport { MockReCaptcha } from './recaptcha_mock';\n\n// ReCaptcha will load using the same callback, so the callback function needs\n// to be kept around\nexport const _JSLOAD_CALLBACK = jsHelpers._generateCallbackName('rcb');\nconst NETWORK_TIMEOUT_DELAY = new Delay(30000, 60000);\nconst RECAPTCHA_BASE = 'https://www.google.com/recaptcha/api.js?';\n\n/**\n * We need to mark this interface as internal explicitly to exclude it in the public typings, because\n * it references AuthInternal which has a circular dependency with UserInternal.\n *\n * @internal\n */\nexport interface ReCaptchaLoader {\n  load(auth: AuthInternal, hl?: string): Promise<Recaptcha>;\n  clearedOneInstance(): void;\n}\n\n/**\n * Loader for the GReCaptcha library. There should only ever be one of this.\n */\nexport class ReCaptchaLoaderImpl implements ReCaptchaLoader {\n  private hostLanguage = '';\n  private counter = 0;\n  /**\n   * Check for `render()` method. `window.grecaptcha` will exist if the Enterprise\n   * version of the ReCAPTCHA script was loaded by someone else (e.g. App Check) but\n   * `window.grecaptcha.render()` will not. Another load will add it.\n   */\n  private readonly librarySeparatelyLoaded = !!_window().grecaptcha?.render;\n\n  load(auth: AuthInternal, hl = ''): Promise<Recaptcha> {\n    _assert(isHostLanguageValid(hl), auth, AuthErrorCode.ARGUMENT_ERROR);\n\n    if (this.shouldResolveImmediately(hl) && isV2(_window().grecaptcha)) {\n      return Promise.resolve(_window().grecaptcha! as Recaptcha);\n    }\n    return new Promise<Recaptcha>((resolve, reject) => {\n      const networkTimeout = _window().setTimeout(() => {\n        reject(_createError(auth, AuthErrorCode.NETWORK_REQUEST_FAILED));\n      }, NETWORK_TIMEOUT_DELAY.get());\n\n      _window()[_JSLOAD_CALLBACK] = () => {\n        _window().clearTimeout(networkTimeout);\n        delete _window()[_JSLOAD_CALLBACK];\n\n        const recaptcha = _window().grecaptcha as Recaptcha;\n\n        if (!recaptcha || !isV2(recaptcha)) {\n          reject(_createError(auth, AuthErrorCode.INTERNAL_ERROR));\n          return;\n        }\n\n        // Wrap the greptcha render function so that we know if the developer has\n        // called it separately\n        const render = recaptcha.render;\n        recaptcha.render = (container, params) => {\n          const widgetId = render(container, params);\n          this.counter++;\n          return widgetId;\n        };\n\n        this.hostLanguage = hl;\n        resolve(recaptcha);\n      };\n\n      const url = `${RECAPTCHA_BASE}?${querystring({\n        onload: _JSLOAD_CALLBACK,\n        render: 'explicit',\n        hl\n      })}`;\n\n      jsHelpers._loadJS(url).catch(() => {\n        clearTimeout(networkTimeout);\n        reject(_createError(auth, AuthErrorCode.INTERNAL_ERROR));\n      });\n    });\n  }\n\n  clearedOneInstance(): void {\n    this.counter--;\n  }\n\n  private shouldResolveImmediately(hl: string): boolean {\n    // We can resolve immediately if:\n    //   • grecaptcha is already defined AND (\n    //     1. the requested language codes are the same OR\n    //     2. there exists already a ReCaptcha on the page\n    //     3. the library was already loaded by the app\n    // In cases (2) and (3), we _can't_ reload as it would break the recaptchas\n    // that are already in the page\n    return (\n      !!_window().grecaptcha?.render &&\n      (hl === this.hostLanguage ||\n        this.counter > 0 ||\n        this.librarySeparatelyLoaded)\n    );\n  }\n}\n\nfunction isHostLanguageValid(hl: string): boolean {\n  return hl.length <= 6 && /^\\s*[a-zA-Z0-9\\-]*\\s*$/.test(hl);\n}\n\nexport class MockReCaptchaLoaderImpl implements ReCaptchaLoader {\n  async load(auth: AuthInternal): Promise<Recaptcha> {\n    return new MockReCaptcha(auth);\n  }\n\n  clearedOneInstance(): void {}\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Auth, RecaptchaParameters } from '../../model/public_types';\nimport { getRecaptchaParams } from '../../api/authentication/recaptcha';\nimport { _castAuth } from '../../core/auth/auth_impl';\nimport { AuthErrorCode } from '../../core/errors';\nimport { _assert } from '../../core/util/assert';\nimport { _isHttpOrHttps } from '../../core/util/location';\nimport { ApplicationVerifierInternal } from '../../model/application_verifier';\nimport { AuthInternal } from '../../model/auth';\nimport { _window } from '../auth_window';\nimport { _isWorker } from '../util/worker';\nimport { Recaptcha } from './recaptcha';\nimport {\n  MockReCaptchaLoaderImpl,\n  ReCaptchaLoader,\n  ReCaptchaLoaderImpl\n} from './recaptcha_loader';\n\nexport const RECAPTCHA_VERIFIER_TYPE = 'recaptcha';\n\nconst DEFAULT_PARAMS: RecaptchaParameters = {\n  theme: 'light',\n  type: 'image'\n};\n\ntype TokenCallback = (token: string) => void;\n\n/**\n * An {@link https://www.google.com/recaptcha/ | reCAPTCHA}-based application verifier.\n *\n * @public\n */\nexport class RecaptchaVerifier implements ApplicationVerifierInternal {\n  /**\n   * The application verifier type.\n   *\n   * @remarks\n   * For a reCAPTCHA verifier, this is 'recaptcha'.\n   */\n  readonly type = RECAPTCHA_VERIFIER_TYPE;\n  private destroyed = false;\n  private widgetId: number | null = null;\n  private readonly container: HTMLElement;\n  private readonly isInvisible: boolean;\n  private readonly tokenChangeListeners = new Set<TokenCallback>();\n  private renderPromise: Promise<number> | null = null;\n  private readonly auth: AuthInternal;\n\n  /** @internal */\n  readonly _recaptchaLoader: ReCaptchaLoader;\n  private recaptcha: Recaptcha | null = null;\n\n  /**\n   *\n   * @param containerOrId - The reCAPTCHA container parameter.\n   *\n   * @remarks\n   * This has different meaning depending on whether the reCAPTCHA is hidden or visible. For a\n   * visible reCAPTCHA the container must be empty. If a string is used, it has to correspond to\n   * an element ID. The corresponding element must also must be in the DOM at the time of\n   * initialization.\n   *\n   * @param parameters - The optional reCAPTCHA parameters.\n   *\n   * @remarks\n   * Check the reCAPTCHA docs for a comprehensive list. All parameters are accepted except for\n   * the sitekey. Firebase Auth backend provisions a reCAPTCHA for each project and will\n   * configure this upon rendering. For an invisible reCAPTCHA, a size key must have the value\n   * 'invisible'.\n   *\n   * @param authExtern - The corresponding Firebase {@link Auth} instance.\n   */\n  constructor(\n    containerOrId: HTMLElement | string,\n    private readonly parameters: RecaptchaParameters = {\n      ...DEFAULT_PARAMS\n    },\n    authExtern: Auth\n  ) {\n    this.auth = _castAuth(authExtern);\n    this.isInvisible = this.parameters.size === 'invisible';\n    _assert(\n      typeof document !== 'undefined',\n      this.auth,\n      AuthErrorCode.OPERATION_NOT_SUPPORTED\n    );\n    const container =\n      typeof containerOrId === 'string'\n        ? document.getElementById(containerOrId)\n        : containerOrId;\n    _assert(container, this.auth, AuthErrorCode.ARGUMENT_ERROR);\n\n    this.container = container;\n    this.parameters.callback = this.makeTokenCallback(this.parameters.callback);\n\n    this._recaptchaLoader = this.auth.settings.appVerificationDisabledForTesting\n      ? new MockReCaptchaLoaderImpl()\n      : new ReCaptchaLoaderImpl();\n\n    this.validateStartingState();\n    // TODO: Figure out if sdk version is needed\n  }\n\n  /**\n   * Waits for the user to solve the reCAPTCHA and resolves with the reCAPTCHA token.\n   *\n   * @returns A Promise for the reCAPTCHA token.\n   */\n  async verify(): Promise<string> {\n    this.assertNotDestroyed();\n    const id = await this.render();\n    const recaptcha = this.getAssertedRecaptcha();\n\n    const response = recaptcha.getResponse(id);\n    if (response) {\n      return response;\n    }\n\n    return new Promise<string>(resolve => {\n      const tokenChange = (token: string): void => {\n        if (!token) {\n          return; // Ignore token expirations.\n        }\n        this.tokenChangeListeners.delete(tokenChange);\n        resolve(token);\n      };\n\n      this.tokenChangeListeners.add(tokenChange);\n      if (this.isInvisible) {\n        recaptcha.execute(id);\n      }\n    });\n  }\n\n  /**\n   * Renders the reCAPTCHA widget on the page.\n   *\n   * @returns A Promise that resolves with the reCAPTCHA widget ID.\n   */\n  render(): Promise<number> {\n    try {\n      this.assertNotDestroyed();\n    } catch (e) {\n      // This method returns a promise. Since it's not async (we want to return the\n      // _same_ promise if rendering is still occurring), the API surface should\n      // reject with the error rather than just throw\n      return Promise.reject(e);\n    }\n\n    if (this.renderPromise) {\n      return this.renderPromise;\n    }\n\n    this.renderPromise = this.makeRenderPromise().catch(e => {\n      this.renderPromise = null;\n      throw e;\n    });\n\n    return this.renderPromise;\n  }\n\n  /** @internal */\n  _reset(): void {\n    this.assertNotDestroyed();\n    if (this.widgetId !== null) {\n      this.getAssertedRecaptcha().reset(this.widgetId);\n    }\n  }\n\n  /**\n   * Clears the reCAPTCHA widget from the page and destroys the instance.\n   */\n  clear(): void {\n    this.assertNotDestroyed();\n    this.destroyed = true;\n    this._recaptchaLoader.clearedOneInstance();\n    if (!this.isInvisible) {\n      this.container.childNodes.forEach(node => {\n        this.container.removeChild(node);\n      });\n    }\n  }\n\n  private validateStartingState(): void {\n    _assert(!this.parameters.sitekey, this.auth, AuthErrorCode.ARGUMENT_ERROR);\n    _assert(\n      this.isInvisible || !this.container.hasChildNodes(),\n      this.auth,\n      AuthErrorCode.ARGUMENT_ERROR\n    );\n    _assert(\n      typeof document !== 'undefined',\n      this.auth,\n      AuthErrorCode.OPERATION_NOT_SUPPORTED\n    );\n  }\n\n  private makeTokenCallback(\n    existing: TokenCallback | string | undefined\n  ): TokenCallback {\n    return token => {\n      this.tokenChangeListeners.forEach(listener => listener(token));\n      if (typeof existing === 'function') {\n        existing(token);\n      } else if (typeof existing === 'string') {\n        const globalFunc = _window()[existing];\n        if (typeof globalFunc === 'function') {\n          globalFunc(token);\n        }\n      }\n    };\n  }\n\n  private assertNotDestroyed(): void {\n    _assert(!this.destroyed, this.auth, AuthErrorCode.INTERNAL_ERROR);\n  }\n\n  private async makeRenderPromise(): Promise<number> {\n    await this.init();\n    if (!this.widgetId) {\n      let container = this.container;\n      if (!this.isInvisible) {\n        const guaranteedEmpty = document.createElement('div');\n        container.appendChild(guaranteedEmpty);\n        container = guaranteedEmpty;\n      }\n\n      this.widgetId = this.getAssertedRecaptcha().render(\n        container,\n        this.parameters\n      );\n    }\n\n    return this.widgetId;\n  }\n\n  private async init(): Promise<void> {\n    _assert(\n      _isHttpOrHttps() && !_isWorker(),\n      this.auth,\n      AuthErrorCode.INTERNAL_ERROR\n    );\n\n    await domReady();\n    this.recaptcha = await this._recaptchaLoader.load(\n      this.auth,\n      this.auth.languageCode || undefined\n    );\n\n    const siteKey = await getRecaptchaParams(this.auth);\n    _assert(siteKey, this.auth, AuthErrorCode.INTERNAL_ERROR);\n    this.parameters.sitekey = siteKey;\n  }\n\n  private getAssertedRecaptcha(): Recaptcha {\n    _assert(this.recaptcha, this.auth, AuthErrorCode.INTERNAL_ERROR);\n    return this.recaptcha;\n  }\n}\n\nfunction domReady(): Promise<void> {\n  let resolver: (() => void) | null = null;\n  return new Promise<void>(resolve => {\n    if (document.readyState === 'complete') {\n      resolve();\n      return;\n    }\n\n    // Document not ready, wait for load before resolving.\n    // Save resolver, so we can remove listener in case it was externally\n    // cancelled.\n    resolver = () => resolve();\n    window.addEventListener('load', resolver);\n  }).catch(e => {\n    if (resolver) {\n      window.removeEventListener('load', resolver);\n    }\n\n    throw e;\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ApplicationVerifier,\n  Auth,\n  ConfirmationResult,\n  PhoneInfoOptions,\n  User,\n  UserCredential\n} from '../../model/public_types';\n\nimport { startEnrollPhoneMfa } from '../../api/account_management/mfa';\nimport { startSignInPhoneMfa } from '../../api/authentication/mfa';\nimport { sendPhoneVerificationCode } from '../../api/authentication/sms';\nimport { ApplicationVerifierInternal } from '../../model/application_verifier';\nimport { PhoneAuthCredential } from '../../core/credentials/phone';\nimport { AuthErrorCode } from '../../core/errors';\nimport { _assertLinkedStatus, _link } from '../../core/user/link_unlink';\nimport { _assert } from '../../core/util/assert';\nimport { AuthInternal } from '../../model/auth';\nimport {\n  linkWithCredential,\n  reauthenticateWithCredential,\n  signInWithCredential\n} from '../../core/strategies/credential';\nimport {\n  MultiFactorSessionImpl,\n  MultiFactorSessionType\n} from '../../mfa/mfa_session';\nimport { UserInternal } from '../../model/user';\nimport { RECAPTCHA_VERIFIER_TYPE } from '../recaptcha/recaptcha_verifier';\nimport { _castAuth } from '../../core/auth/auth_impl';\nimport { getModularInstance } from '@firebase/util';\nimport { ProviderId } from '../../model/enums';\n\ninterface OnConfirmationCallback {\n  (credential: PhoneAuthCredential): Promise<UserCredential>;\n}\n\nclass ConfirmationResultImpl implements ConfirmationResult {\n  constructor(\n    readonly verificationId: string,\n    private readonly onConfirmation: OnConfirmationCallback\n  ) {}\n\n  confirm(verificationCode: string): Promise<UserCredential> {\n    const authCredential = PhoneAuthCredential._fromVerification(\n      this.verificationId,\n      verificationCode\n    );\n    return this.onConfirmation(authCredential);\n  }\n}\n\n/**\n * Asynchronously signs in using a phone number.\n *\n * @remarks\n * This method sends a code via SMS to the given\n * phone number, and returns a {@link ConfirmationResult}. After the user\n * provides the code sent to their phone, call {@link ConfirmationResult.confirm}\n * with the code to sign the user in.\n *\n * For abuse prevention, this method also requires a {@link ApplicationVerifier}.\n * This SDK includes a reCAPTCHA-based implementation, {@link RecaptchaVerifier}.\n * This function can work on other platforms that do not support the\n * {@link RecaptchaVerifier} (like React Native), but you need to use a\n * third-party {@link ApplicationVerifier} implementation.\n *\n * @example\n * ```javascript\n * // 'recaptcha-container' is the ID of an element in the DOM.\n * const applicationVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container');\n * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n * // Obtain a verificationCode from the user.\n * const credential = await confirmationResult.confirm(verificationCode);\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\n * @param appVerifier - The {@link ApplicationVerifier}.\n *\n * @public\n */\nexport async function signInWithPhoneNumber(\n  auth: Auth,\n  phoneNumber: string,\n  appVerifier: ApplicationVerifier\n): Promise<ConfirmationResult> {\n  const authInternal = _castAuth(auth);\n  const verificationId = await _verifyPhoneNumber(\n    authInternal,\n    phoneNumber,\n    getModularInstance(appVerifier as ApplicationVerifierInternal)\n  );\n  return new ConfirmationResultImpl(verificationId, cred =>\n    signInWithCredential(authInternal, cred)\n  );\n}\n\n/**\n * Links the user account with the given phone number.\n *\n * @param user - The user.\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\n * @param appVerifier - The {@link ApplicationVerifier}.\n *\n * @public\n */\nexport async function linkWithPhoneNumber(\n  user: User,\n  phoneNumber: string,\n  appVerifier: ApplicationVerifier\n): Promise<ConfirmationResult> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  await _assertLinkedStatus(false, userInternal, ProviderId.PHONE);\n  const verificationId = await _verifyPhoneNumber(\n    userInternal.auth,\n    phoneNumber,\n    getModularInstance(appVerifier as ApplicationVerifierInternal)\n  );\n  return new ConfirmationResultImpl(verificationId, cred =>\n    linkWithCredential(userInternal, cred)\n  );\n}\n\n/**\n * Re-authenticates a user using a fresh phone credential.\n *\n * @remarks Use before operations such as {@link updatePassword} that require tokens from recent sign-in attempts.\n *\n * @param user - The user.\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\n * @param appVerifier - The {@link ApplicationVerifier}.\n *\n * @public\n */\nexport async function reauthenticateWithPhoneNumber(\n  user: User,\n  phoneNumber: string,\n  appVerifier: ApplicationVerifier\n): Promise<ConfirmationResult> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  const verificationId = await _verifyPhoneNumber(\n    userInternal.auth,\n    phoneNumber,\n    getModularInstance(appVerifier as ApplicationVerifierInternal)\n  );\n  return new ConfirmationResultImpl(verificationId, cred =>\n    reauthenticateWithCredential(userInternal, cred)\n  );\n}\n\n/**\n * Returns a verification ID to be used in conjunction with the SMS code that is sent.\n *\n */\nexport async function _verifyPhoneNumber(\n  auth: AuthInternal,\n  options: PhoneInfoOptions | string,\n  verifier: ApplicationVerifierInternal\n): Promise<string> {\n  const recaptchaToken = await verifier.verify();\n\n  try {\n    _assert(\n      typeof recaptchaToken === 'string',\n      auth,\n      AuthErrorCode.ARGUMENT_ERROR\n    );\n    _assert(\n      verifier.type === RECAPTCHA_VERIFIER_TYPE,\n      auth,\n      AuthErrorCode.ARGUMENT_ERROR\n    );\n\n    let phoneInfoOptions: PhoneInfoOptions;\n\n    if (typeof options === 'string') {\n      phoneInfoOptions = {\n        phoneNumber: options\n      };\n    } else {\n      phoneInfoOptions = options;\n    }\n\n    if ('session' in phoneInfoOptions) {\n      const session = phoneInfoOptions.session as MultiFactorSessionImpl;\n\n      if ('phoneNumber' in phoneInfoOptions) {\n        _assert(\n          session.type === MultiFactorSessionType.ENROLL,\n          auth,\n          AuthErrorCode.INTERNAL_ERROR\n        );\n        const response = await startEnrollPhoneMfa(auth, {\n          idToken: session.credential,\n          phoneEnrollmentInfo: {\n            phoneNumber: phoneInfoOptions.phoneNumber,\n            recaptchaToken\n          }\n        });\n        return response.phoneSessionInfo.sessionInfo;\n      } else {\n        _assert(\n          session.type === MultiFactorSessionType.SIGN_IN,\n          auth,\n          AuthErrorCode.INTERNAL_ERROR\n        );\n        const mfaEnrollmentId =\n          phoneInfoOptions.multiFactorHint?.uid ||\n          phoneInfoOptions.multiFactorUid;\n        _assert(mfaEnrollmentId, auth, AuthErrorCode.MISSING_MFA_INFO);\n        const response = await startSignInPhoneMfa(auth, {\n          mfaPendingCredential: session.credential,\n          mfaEnrollmentId,\n          phoneSignInInfo: {\n            recaptchaToken\n          }\n        });\n        return response.phoneResponseInfo.sessionInfo;\n      }\n    } else {\n      const { sessionInfo } = await sendPhoneVerificationCode(auth, {\n        phoneNumber: phoneInfoOptions.phoneNumber,\n        recaptchaToken\n      });\n      return sessionInfo;\n    }\n  } finally {\n    verifier._reset();\n  }\n}\n\n/**\n * Updates the user's phone number.\n *\n * @example\n * ```\n * // 'recaptcha-container' is the ID of an element in the DOM.\n * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');\n * const provider = new PhoneAuthProvider(auth);\n * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);\n * // Obtain the verificationCode from the user.\n * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n * await updatePhoneNumber(user, phoneCredential);\n * ```\n *\n * @param user - The user.\n * @param credential - A credential authenticating the new phone number.\n *\n * @public\n */\nexport async function updatePhoneNumber(\n  user: User,\n  credential: PhoneAuthCredential\n): Promise<void> {\n  await _link(getModularInstance(user) as UserInternal, credential);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Auth,\n  PhoneInfoOptions,\n  ApplicationVerifier,\n  UserCredential\n} from '../../model/public_types';\n\nimport { SignInWithPhoneNumberResponse } from '../../api/authentication/sms';\nimport { ApplicationVerifierInternal as ApplicationVerifierInternal } from '../../model/application_verifier';\nimport { AuthInternal as AuthInternal } from '../../model/auth';\nimport { UserCredentialInternal as UserCredentialInternal } from '../../model/user';\nimport { PhoneAuthCredential } from '../../core/credentials/phone';\nimport { _verifyPhoneNumber } from '../strategies/phone';\nimport { _castAuth } from '../../core/auth/auth_impl';\nimport { AuthCredential } from '../../core';\nimport { FirebaseError, getModularInstance } from '@firebase/util';\nimport { TaggedWithTokenResponse } from '../../model/id_token';\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\n/**\n * Provider for generating an {@link PhoneAuthCredential}.\n *\n * @example\n * ```javascript\n * // 'recaptcha-container' is the ID of an element in the DOM.\n * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');\n * const provider = new PhoneAuthProvider(auth);\n * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);\n * // Obtain the verificationCode from the user.\n * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n * const userCredential = await signInWithCredential(auth, phoneCredential);\n * ```\n *\n * @public\n */\nexport class PhoneAuthProvider {\n  /** Always set to {@link ProviderId}.PHONE. */\n  static readonly PROVIDER_ID: 'phone' = ProviderId.PHONE;\n  /** Always set to {@link SignInMethod}.PHONE. */\n  static readonly PHONE_SIGN_IN_METHOD: 'phone' = SignInMethod.PHONE;\n\n  /** Always set to {@link ProviderId}.PHONE. */\n  readonly providerId = PhoneAuthProvider.PROVIDER_ID;\n  private readonly auth: AuthInternal;\n\n  /**\n   * @param auth - The Firebase {@link Auth} instance in which sign-ins should occur.\n   *\n   */\n  constructor(auth: Auth) {\n    this.auth = _castAuth(auth);\n  }\n\n  /**\n   *\n   * Starts a phone number authentication flow by sending a verification code to the given phone\n   * number.\n   *\n   * @example\n   * ```javascript\n   * const provider = new PhoneAuthProvider(auth);\n   * const verificationId = await provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\n   * // Obtain verificationCode from the user.\n   * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n   * const userCredential = await signInWithCredential(auth, authCredential);\n   * ```\n   *\n   * @example\n   * An alternative flow is provided using the `signInWithPhoneNumber` method.\n   * ```javascript\n   * const confirmationResult = signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n   * // Obtain verificationCode from the user.\n   * const userCredential = confirmationResult.confirm(verificationCode);\n   * ```\n   *\n   * @param phoneInfoOptions - The user's {@link PhoneInfoOptions}. The phone number should be in\n   * E.164 format (e.g. +16505550101).\n   * @param applicationVerifier - For abuse prevention, this method also requires a\n   * {@link ApplicationVerifier}. This SDK includes a reCAPTCHA-based implementation,\n   * {@link RecaptchaVerifier}.\n   *\n   * @returns A Promise for a verification ID that can be passed to\n   * {@link PhoneAuthProvider.credential} to identify this flow..\n   */\n  verifyPhoneNumber(\n    phoneOptions: PhoneInfoOptions | string,\n    applicationVerifier: ApplicationVerifier\n  ): Promise<string> {\n    return _verifyPhoneNumber(\n      this.auth,\n      phoneOptions,\n      getModularInstance(applicationVerifier as ApplicationVerifierInternal)\n    );\n  }\n\n  /**\n   * Creates a phone auth credential, given the verification ID from\n   * {@link PhoneAuthProvider.verifyPhoneNumber} and the code that was sent to the user's\n   * mobile device.\n   *\n   * @example\n   * ```javascript\n   * const provider = new PhoneAuthProvider(auth);\n   * const verificationId = provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\n   * // Obtain verificationCode from the user.\n   * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n   * const userCredential = signInWithCredential(auth, authCredential);\n   * ```\n   *\n   * @example\n   * An alternative flow is provided using the `signInWithPhoneNumber` method.\n   * ```javascript\n   * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n   * // Obtain verificationCode from the user.\n   * const userCredential = await confirmationResult.confirm(verificationCode);\n   * ```\n   *\n   * @param verificationId - The verification ID returned from {@link PhoneAuthProvider.verifyPhoneNumber}.\n   * @param verificationCode - The verification code sent to the user's mobile device.\n   *\n   * @returns The auth provider credential.\n   */\n  static credential(\n    verificationId: string,\n    verificationCode: string\n  ): PhoneAuthCredential {\n    return PhoneAuthCredential._fromVerification(\n      verificationId,\n      verificationCode\n    );\n  }\n\n  /**\n   * Generates an {@link AuthCredential} from a {@link UserCredential}.\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(\n    userCredential: UserCredential\n  ): AuthCredential | null {\n    const credential = userCredential as UserCredentialInternal;\n    return PhoneAuthProvider.credentialFromTaggedObject(credential);\n  }\n\n  /**\n   * Returns an {@link AuthCredential} when passed an error.\n   *\n   * @remarks\n   *\n   * This method works for errors like\n   * `auth/account-exists-with-different-credentials`. This is useful for\n   * recovering when attempting to set a user's phone number but the number\n   * in question is already tied to another account. For example, the following\n   * code tries to update the current user's phone number, and if that\n   * fails, links the user with the account associated with that number:\n   *\n   * ```js\n   * const provider = new PhoneAuthProvider(auth);\n   * const verificationId = await provider.verifyPhoneNumber(number, verifier);\n   * try {\n   *   const code = ''; // Prompt the user for the verification code\n   *   await updatePhoneNumber(\n   *       auth.currentUser,\n   *       PhoneAuthProvider.credential(verificationId, code));\n   * } catch (e) {\n   *   if ((e as FirebaseError)?.code === 'auth/account-exists-with-different-credential') {\n   *     const cred = PhoneAuthProvider.credentialFromError(e);\n   *     await linkWithCredential(auth.currentUser, cred);\n   *   }\n   * }\n   *\n   * // At this point, auth.currentUser.phoneNumber === number.\n   * ```\n   *\n   * @param error - The error to generate a credential from.\n   */\n  static credentialFromError(error: FirebaseError): AuthCredential | null {\n    return PhoneAuthProvider.credentialFromTaggedObject(\n      (error.customData || {}) as TaggedWithTokenResponse\n    );\n  }\n\n  private static credentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }: TaggedWithTokenResponse): AuthCredential | null {\n    if (!tokenResponse) {\n      return null;\n    }\n    const { phoneNumber, temporaryProof } =\n      tokenResponse as SignInWithPhoneNumberResponse;\n    if (phoneNumber && temporaryProof) {\n      return PhoneAuthCredential._fromTokenResponse(\n        phoneNumber,\n        temporaryProof\n      );\n    }\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PopupRedirectResolver } from '../../model/public_types';\nimport { AuthInternal } from '../../model/auth';\nimport { PopupRedirectResolverInternal } from '../../model/popup_redirect';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from './assert';\nimport { _getInstance } from './instantiator';\n\n/**\n * Chooses a popup/redirect resolver to use. This prefers the override (which\n * is directly passed in), and falls back to the property set on the auth\n * object. If neither are available, this function errors w/ an argument error.\n */\nexport function _withDefaultResolver(\n  auth: AuthInternal,\n  resolverOverride: PopupRedirectResolver | undefined\n): PopupRedirectResolverInternal {\n  if (resolverOverride) {\n    return _getInstance(resolverOverride);\n  }\n\n  _assert(auth._popupRedirectResolver, auth, AuthErrorCode.ARGUMENT_ERROR);\n\n  return auth._popupRedirectResolver;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  signInWithIdp,\n  SignInWithIdpRequest\n} from '../../api/authentication/idp';\nimport { PhoneOrOauthTokenResponse } from '../../api/authentication/mfa';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { UserInternal, UserCredentialInternal } from '../../model/user';\nimport { AuthCredential } from '../credentials';\nimport { _link as _linkUser } from '../user/link_unlink';\nimport { _reauthenticate } from '../user/reauthenticate';\nimport { _assert } from '../util/assert';\nimport { _signInWithCredential } from './credential';\nimport { AuthErrorCode } from '../errors';\nimport { ProviderId } from '../../model/enums';\n\nexport interface IdpTaskParams {\n  auth: AuthInternal;\n  requestUri: string;\n  sessionId?: string;\n  tenantId?: string;\n  postBody?: string;\n  pendingToken?: string;\n  user?: UserInternal;\n  bypassAuthState?: boolean;\n}\n\nexport type IdpTask = (\n  params: IdpTaskParams\n) => Promise<UserCredentialInternal>;\n\nclass IdpCredential extends AuthCredential {\n  constructor(readonly params: IdpTaskParams) {\n    super(ProviderId.CUSTOM, ProviderId.CUSTOM);\n  }\n\n  _getIdTokenResponse(auth: AuthInternal): Promise<PhoneOrOauthTokenResponse> {\n    return signInWithIdp(auth, this._buildIdpRequest());\n  }\n\n  _linkToIdToken(\n    auth: AuthInternal,\n    idToken: string\n  ): Promise<IdTokenResponse> {\n    return signInWithIdp(auth, this._buildIdpRequest(idToken));\n  }\n\n  _getReauthenticationResolver(auth: AuthInternal): Promise<IdTokenResponse> {\n    return signInWithIdp(auth, this._buildIdpRequest());\n  }\n\n  private _buildIdpRequest(idToken?: string): SignInWithIdpRequest {\n    const request: SignInWithIdpRequest = {\n      requestUri: this.params.requestUri,\n      sessionId: this.params.sessionId,\n      postBody: this.params.postBody,\n      tenantId: this.params.tenantId,\n      pendingToken: this.params.pendingToken,\n      returnSecureToken: true,\n      returnIdpCredential: true\n    };\n\n    if (idToken) {\n      request.idToken = idToken;\n    }\n\n    return request;\n  }\n}\n\nexport function _signIn(\n  params: IdpTaskParams\n): Promise<UserCredentialInternal> {\n  return _signInWithCredential(\n    params.auth,\n    new IdpCredential(params),\n    params.bypassAuthState\n  ) as Promise<UserCredentialInternal>;\n}\n\nexport function _reauth(\n  params: IdpTaskParams\n): Promise<UserCredentialInternal> {\n  const { auth, user } = params;\n  _assert(user, auth, AuthErrorCode.INTERNAL_ERROR);\n  return _reauthenticate(\n    user,\n    new IdpCredential(params),\n    params.bypassAuthState\n  );\n}\n\nexport async function _link(\n  params: IdpTaskParams\n): Promise<UserCredentialInternal> {\n  const { auth, user } = params;\n  _assert(user, auth, AuthErrorCode.INTERNAL_ERROR);\n  return _linkUser(user, new IdpCredential(params), params.bypassAuthState);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\n\nimport {\n  AuthEvent,\n  AuthEventConsumer,\n  AuthEventType,\n  EventManager,\n  PopupRedirectResolverInternal\n} from '../../model/popup_redirect';\nimport { UserInternal, UserCredentialInternal } from '../../model/user';\nimport { AuthErrorCode } from '../errors';\nimport { debugAssert, _fail } from '../util/assert';\nimport {\n  _link,\n  _reauth,\n  _signIn,\n  IdpTask,\n  IdpTaskParams\n} from '../strategies/idp';\nimport { AuthInternal } from '../../model/auth';\n\ninterface PendingPromise {\n  resolve: (cred: UserCredentialInternal | null) => void;\n  reject: (error: Error) => void;\n}\n\n/**\n * Popup event manager. Handles the popup's entire lifecycle; listens to auth\n * events\n */\nexport abstract class AbstractPopupRedirectOperation\n  implements AuthEventConsumer\n{\n  private pendingPromise: PendingPromise | null = null;\n  private eventManager: EventManager | null = null;\n  readonly filter: AuthEventType[];\n\n  abstract eventId: string | null;\n\n  constructor(\n    protected readonly auth: AuthInternal,\n    filter: AuthEventType | AuthEventType[],\n    protected readonly resolver: PopupRedirectResolverInternal,\n    protected user?: UserInternal,\n    protected readonly bypassAuthState = false\n  ) {\n    this.filter = Array.isArray(filter) ? filter : [filter];\n  }\n\n  abstract onExecution(): Promise<void>;\n\n  execute(): Promise<UserCredentialInternal | null> {\n    return new Promise<UserCredentialInternal | null>(\n      async (resolve, reject) => {\n        this.pendingPromise = { resolve, reject };\n\n        try {\n          this.eventManager = await this.resolver._initialize(this.auth);\n          await this.onExecution();\n          this.eventManager.registerConsumer(this);\n        } catch (e) {\n          this.reject(e as Error);\n        }\n      }\n    );\n  }\n\n  async onAuthEvent(event: AuthEvent): Promise<void> {\n    const { urlResponse, sessionId, postBody, tenantId, error, type } = event;\n    if (error) {\n      this.reject(error);\n      return;\n    }\n\n    const params: IdpTaskParams = {\n      auth: this.auth,\n      requestUri: urlResponse!,\n      sessionId: sessionId!,\n      tenantId: tenantId || undefined,\n      postBody: postBody || undefined,\n      user: this.user,\n      bypassAuthState: this.bypassAuthState\n    };\n\n    try {\n      this.resolve(await this.getIdpTask(type)(params));\n    } catch (e) {\n      this.reject(e as Error);\n    }\n  }\n\n  onError(error: FirebaseError): void {\n    this.reject(error);\n  }\n\n  private getIdpTask(type: AuthEventType): IdpTask {\n    switch (type) {\n      case AuthEventType.SIGN_IN_VIA_POPUP:\n      case AuthEventType.SIGN_IN_VIA_REDIRECT:\n        return _signIn;\n      case AuthEventType.LINK_VIA_POPUP:\n      case AuthEventType.LINK_VIA_REDIRECT:\n        return _link;\n      case AuthEventType.REAUTH_VIA_POPUP:\n      case AuthEventType.REAUTH_VIA_REDIRECT:\n        return _reauth;\n      default:\n        _fail(this.auth, AuthErrorCode.INTERNAL_ERROR);\n    }\n  }\n\n  protected resolve(cred: UserCredentialInternal | null): void {\n    debugAssert(this.pendingPromise, 'Pending promise was never set');\n    this.pendingPromise.resolve(cred);\n    this.unregisterAndCleanUp();\n  }\n\n  protected reject(error: Error): void {\n    debugAssert(this.pendingPromise, 'Pending promise was never set');\n    this.pendingPromise.reject(error);\n    this.unregisterAndCleanUp();\n  }\n\n  private unregisterAndCleanUp(): void {\n    if (this.eventManager) {\n      this.eventManager.unregisterConsumer(this);\n    }\n\n    this.pendingPromise = null;\n    this.cleanUp();\n  }\n\n  abstract cleanUp(): void;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Auth,\n  AuthProvider,\n  PopupRedirectResolver,\n  User,\n  UserCredential\n} from '../../model/public_types';\n\nimport { _castAuth } from '../../core/auth/auth_impl';\nimport { AuthErrorCode } from '../../core/errors';\nimport {\n  _assert,\n  debugAssert,\n  _createError,\n  _assertInstanceOf\n} from '../../core/util/assert';\nimport { Delay } from '../../core/util/delay';\nimport { _generateEventId } from '../../core/util/event_id';\nimport { AuthInternal } from '../../model/auth';\nimport {\n  AuthEventType,\n  PopupRedirectResolverInternal\n} from '../../model/popup_redirect';\nimport { UserInternal } from '../../model/user';\nimport { _withDefaultResolver } from '../../core/util/resolver';\nimport { AuthPopup } from '../util/popup';\nimport { AbstractPopupRedirectOperation } from '../../core/strategies/abstract_popup_redirect_operation';\nimport { FederatedAuthProvider } from '../../core/providers/federated';\nimport { getModularInstance } from '@firebase/util';\n\n/*\n * The event timeout is the same on mobile and desktop, no need for Delay. Set this to 8s since\n * blocking functions can take upto 7s to complete sign in, as documented in:\n * https://cloud.google.com/identity-platform/docs/blocking-functions#understanding_blocking_functions\n * https://firebase.google.com/docs/auth/extend-with-blocking-functions#understanding_blocking_functions\n */\nexport const enum _Timeout {\n  AUTH_EVENT = 8000\n}\nexport const _POLL_WINDOW_CLOSE_TIMEOUT = new Delay(2000, 10000);\n\n/**\n * Authenticates a Firebase client using a popup-based OAuth authentication flow.\n *\n * @remarks\n * If succeeds, returns the signed in user along with the provider's credential. If sign in was\n * unsuccessful, returns an error object containing additional information about the error.\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new FacebookAuthProvider();\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a Facebook Access Token.\n * const credential = provider.credentialFromResult(auth, result);\n * const token = credential.accessToken;\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n *\n * @public\n */\nexport async function signInWithPopup(\n  auth: Auth,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<UserCredential> {\n  const authInternal = _castAuth(auth);\n  _assertInstanceOf(auth, provider, FederatedAuthProvider);\n  const resolverInternal = _withDefaultResolver(authInternal, resolver);\n  const action = new PopupOperation(\n    authInternal,\n    AuthEventType.SIGN_IN_VIA_POPUP,\n    provider,\n    resolverInternal\n  );\n  return action.executeNotNull();\n}\n\n/**\n * Reauthenticates the current user with the specified {@link OAuthProvider} using a pop-up based\n * OAuth flow.\n *\n * @remarks\n * If the reauthentication is successful, the returned result will contain the user and the\n * provider's credential.\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new FacebookAuthProvider();\n * const result = await signInWithPopup(auth, provider);\n * // Reauthenticate using a popup.\n * await reauthenticateWithPopup(result.user, provider);\n * ```\n *\n * @param user - The user.\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nexport async function reauthenticateWithPopup(\n  user: User,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<UserCredential> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n  const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n  const action = new PopupOperation(\n    userInternal.auth,\n    AuthEventType.REAUTH_VIA_POPUP,\n    provider,\n    resolverInternal,\n    userInternal\n  );\n  return action.executeNotNull();\n}\n\n/**\n * Links the authenticated provider to the user account using a pop-up based OAuth flow.\n *\n * @remarks\n * If the linking is successful, the returned result will contain the user and the provider's credential.\n *\n *\n * @example\n * ```javascript\n * // Sign in using some other provider.\n * const result = await signInWithEmailAndPassword(auth, email, password);\n * // Link using a popup.\n * const provider = new FacebookAuthProvider();\n * await linkWithPopup(result.user, provider);\n * ```\n *\n * @param user - The user.\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nexport async function linkWithPopup(\n  user: User,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<UserCredential> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n  const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n\n  const action = new PopupOperation(\n    userInternal.auth,\n    AuthEventType.LINK_VIA_POPUP,\n    provider,\n    resolverInternal,\n    userInternal\n  );\n  return action.executeNotNull();\n}\n\n/**\n * Popup event manager. Handles the popup's entire lifecycle; listens to auth\n * events\n *\n */\nclass PopupOperation extends AbstractPopupRedirectOperation {\n  // Only one popup is ever shown at once. The lifecycle of the current popup\n  // can be managed / cancelled by the constructor.\n  private static currentPopupAction: PopupOperation | null = null;\n  private authWindow: AuthPopup | null = null;\n  private pollId: number | null = null;\n\n  constructor(\n    auth: AuthInternal,\n    filter: AuthEventType,\n    private readonly provider: AuthProvider,\n    resolver: PopupRedirectResolverInternal,\n    user?: UserInternal\n  ) {\n    super(auth, filter, resolver, user);\n    if (PopupOperation.currentPopupAction) {\n      PopupOperation.currentPopupAction.cancel();\n    }\n\n    PopupOperation.currentPopupAction = this;\n  }\n\n  async executeNotNull(): Promise<UserCredential> {\n    const result = await this.execute();\n    _assert(result, this.auth, AuthErrorCode.INTERNAL_ERROR);\n    return result;\n  }\n\n  async onExecution(): Promise<void> {\n    debugAssert(\n      this.filter.length === 1,\n      'Popup operations only handle one event'\n    );\n    const eventId = _generateEventId();\n    this.authWindow = await this.resolver._openPopup(\n      this.auth,\n      this.provider,\n      this.filter[0], // There's always one, see constructor\n      eventId\n    );\n    this.authWindow.associatedEvent = eventId;\n\n    // Check for web storage support and origin validation _after_ the popup is\n    // loaded. These operations are slow (~1 second or so) Rather than\n    // waiting on them before opening the window, optimistically open the popup\n    // and check for storage support at the same time. If storage support is\n    // not available, this will cause the whole thing to reject properly. It\n    // will also close the popup, but since the promise has already rejected,\n    // the popup closed by user poll will reject into the void.\n    this.resolver._originValidation(this.auth).catch(e => {\n      this.reject(e);\n    });\n\n    this.resolver._isIframeWebStorageSupported(this.auth, isSupported => {\n      if (!isSupported) {\n        this.reject(\n          _createError(this.auth, AuthErrorCode.WEB_STORAGE_UNSUPPORTED)\n        );\n      }\n    });\n\n    // Handle user closure. Notice this does *not* use await\n    this.pollUserCancellation();\n  }\n\n  get eventId(): string | null {\n    return this.authWindow?.associatedEvent || null;\n  }\n\n  cancel(): void {\n    this.reject(_createError(this.auth, AuthErrorCode.EXPIRED_POPUP_REQUEST));\n  }\n\n  cleanUp(): void {\n    if (this.authWindow) {\n      this.authWindow.close();\n    }\n\n    if (this.pollId) {\n      window.clearTimeout(this.pollId);\n    }\n\n    this.authWindow = null;\n    this.pollId = null;\n    PopupOperation.currentPopupAction = null;\n  }\n\n  private pollUserCancellation(): void {\n    const poll = (): void => {\n      if (this.authWindow?.window?.closed) {\n        // Make sure that there is sufficient time for whatever action to\n        // complete. The window could have closed but the sign in network\n        // call could still be in flight. This is specifically true for\n        // Firefox or if the opener is in an iframe, in which case the oauth\n        // helper closes the popup.\n        this.pollId = window.setTimeout(() => {\n          this.pollId = null;\n          this.reject(\n            _createError(this.auth, AuthErrorCode.POPUP_CLOSED_BY_USER)\n          );\n        }, _Timeout.AUTH_EVENT);\n        return;\n      }\n\n      this.pollId = window.setTimeout(poll, _POLL_WINDOW_CLOSE_TIMEOUT.get());\n    };\n\n    poll();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthInternal } from '../../model/auth';\nimport {\n  AuthEvent,\n  AuthEventType,\n  PopupRedirectResolverInternal\n} from '../../model/popup_redirect';\nimport { UserCredentialInternal } from '../../model/user';\nimport { PersistenceInternal } from '../persistence';\nimport { _persistenceKeyName } from '../persistence/persistence_user_manager';\nimport { _getInstance } from '../util/instantiator';\nimport { AbstractPopupRedirectOperation } from './abstract_popup_redirect_operation';\n\nconst PENDING_REDIRECT_KEY = 'pendingRedirect';\n\n// We only get one redirect outcome for any one auth, so just store it\n// in here.\nconst redirectOutcomeMap: Map<\n  string,\n  () => Promise<UserCredentialInternal | null>\n> = new Map();\n\nexport class RedirectAction extends AbstractPopupRedirectOperation {\n  eventId = null;\n\n  constructor(\n    auth: AuthInternal,\n    resolver: PopupRedirectResolverInternal,\n    bypassAuthState = false\n  ) {\n    super(\n      auth,\n      [\n        AuthEventType.SIGN_IN_VIA_REDIRECT,\n        AuthEventType.LINK_VIA_REDIRECT,\n        AuthEventType.REAUTH_VIA_REDIRECT,\n        AuthEventType.UNKNOWN\n      ],\n      resolver,\n      undefined,\n      bypassAuthState\n    );\n  }\n\n  /**\n   * Override the execute function; if we already have a redirect result, then\n   * just return it.\n   */\n  async execute(): Promise<UserCredentialInternal | null> {\n    let readyOutcome = redirectOutcomeMap.get(this.auth._key());\n    if (!readyOutcome) {\n      try {\n        const hasPendingRedirect = await _getAndClearPendingRedirectStatus(\n          this.resolver,\n          this.auth\n        );\n        const result = hasPendingRedirect ? await super.execute() : null;\n        readyOutcome = () => Promise.resolve(result);\n      } catch (e) {\n        readyOutcome = () => Promise.reject(e);\n      }\n\n      redirectOutcomeMap.set(this.auth._key(), readyOutcome);\n    }\n\n    // If we're not bypassing auth state, the ready outcome should be set to\n    // null.\n    if (!this.bypassAuthState) {\n      redirectOutcomeMap.set(this.auth._key(), () => Promise.resolve(null));\n    }\n\n    return readyOutcome();\n  }\n\n  async onAuthEvent(event: AuthEvent): Promise<void> {\n    if (event.type === AuthEventType.SIGN_IN_VIA_REDIRECT) {\n      return super.onAuthEvent(event);\n    } else if (event.type === AuthEventType.UNKNOWN) {\n      // This is a sentinel value indicating there's no pending redirect\n      this.resolve(null);\n      return;\n    }\n\n    if (event.eventId) {\n      const user = await this.auth._redirectUserForId(event.eventId);\n      if (user) {\n        this.user = user;\n        return super.onAuthEvent(event);\n      } else {\n        this.resolve(null);\n      }\n    }\n  }\n\n  async onExecution(): Promise<void> {}\n\n  cleanUp(): void {}\n}\n\nexport async function _getAndClearPendingRedirectStatus(\n  resolver: PopupRedirectResolverInternal,\n  auth: AuthInternal\n): Promise<boolean> {\n  const key = pendingRedirectKey(auth);\n  const persistence = resolverPersistence(resolver);\n  if (!(await persistence._isAvailable())) {\n    return false;\n  }\n  const hasPendingRedirect = (await persistence._get(key)) === 'true';\n  await persistence._remove(key);\n  return hasPendingRedirect;\n}\n\nexport async function _setPendingRedirectStatus(\n  resolver: PopupRedirectResolverInternal,\n  auth: AuthInternal\n): Promise<void> {\n  return resolverPersistence(resolver)._set(pendingRedirectKey(auth), 'true');\n}\n\nexport function _clearRedirectOutcomes(): void {\n  redirectOutcomeMap.clear();\n}\n\nexport function _overrideRedirectResult(\n  auth: AuthInternal,\n  result: () => Promise<UserCredentialInternal | null>\n): void {\n  redirectOutcomeMap.set(auth._key(), result);\n}\n\nfunction resolverPersistence(\n  resolver: PopupRedirectResolverInternal\n): PersistenceInternal {\n  return _getInstance(resolver._redirectPersistence);\n}\n\nfunction pendingRedirectKey(auth: AuthInternal): string {\n  return _persistenceKeyName(\n    PENDING_REDIRECT_KEY,\n    auth.config.apiKey,\n    auth.name\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Auth,\n  AuthProvider,\n  PopupRedirectResolver,\n  User,\n  UserCredential\n} from '../../model/public_types';\n\nimport { _castAuth } from '../../core/auth/auth_impl';\nimport { _assertLinkedStatus } from '../../core/user/link_unlink';\nimport { _assertInstanceOf } from '../../core/util/assert';\nimport { _generateEventId } from '../../core/util/event_id';\nimport { AuthEventType } from '../../model/popup_redirect';\nimport { UserInternal } from '../../model/user';\nimport { _withDefaultResolver } from '../../core/util/resolver';\nimport {\n  RedirectAction,\n  _setPendingRedirectStatus\n} from '../../core/strategies/redirect';\nimport { FederatedAuthProvider } from '../../core/providers/federated';\nimport { getModularInstance } from '@firebase/util';\n\n/**\n * Authenticates a Firebase client using a full-page redirect flow.\n *\n * @remarks\n * To handle the results and errors for this operation, refer to {@link getRedirectResult}.\n * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices\n * | best practices} when using {@link signInWithRedirect}.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new FacebookAuthProvider();\n * // You can add additional scopes to the provider:\n * provider.addScope('user_birthday');\n * // Start a sign in process for an unauthenticated user.\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Facebook Access Token.\n *   const credential = provider.credentialFromResult(auth, result);\n *   const token = credential.accessToken;\n * }\n * // As this API can be used for sign-in, linking and reauthentication,\n * // check the operationType to determine what triggered this redirect\n * // operation.\n * const operationType = result.operationType;\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nexport function signInWithRedirect(\n  auth: Auth,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<never> {\n  return _signInWithRedirect(auth, provider, resolver) as Promise<never>;\n}\n\nexport async function _signInWithRedirect(\n  auth: Auth,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<void | never> {\n  const authInternal = _castAuth(auth);\n  _assertInstanceOf(auth, provider, FederatedAuthProvider);\n  // Wait for auth initialization to complete, this will process pending redirects and clear the\n  // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new\n  // redirect and creating a PENDING_REDIRECT_KEY entry.\n  await authInternal._initializationPromise;\n  const resolverInternal = _withDefaultResolver(authInternal, resolver);\n  await _setPendingRedirectStatus(resolverInternal, authInternal);\n\n  return resolverInternal._openRedirect(\n    authInternal,\n    provider,\n    AuthEventType.SIGN_IN_VIA_REDIRECT\n  );\n}\n\n/**\n * Reauthenticates the current user with the specified {@link OAuthProvider} using a full-page redirect flow.\n * @remarks\n * To handle the results and errors for this operation, refer to {@link getRedirectResult}.\n * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices\n * | best practices} when using {@link reauthenticateWithRedirect}.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new FacebookAuthProvider();\n * const result = await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * // Reauthenticate using a redirect.\n * await reauthenticateWithRedirect(result.user, provider);\n * // This will again trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * ```\n *\n * @param user - The user.\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nexport function reauthenticateWithRedirect(\n  user: User,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<never> {\n  return _reauthenticateWithRedirect(\n    user,\n    provider,\n    resolver\n  ) as Promise<never>;\n}\nexport async function _reauthenticateWithRedirect(\n  user: User,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<void | never> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n  // Wait for auth initialization to complete, this will process pending redirects and clear the\n  // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new\n  // redirect and creating a PENDING_REDIRECT_KEY entry.\n  await userInternal.auth._initializationPromise;\n  // Allow the resolver to error before persisting the redirect user\n  const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n  await _setPendingRedirectStatus(resolverInternal, userInternal.auth);\n\n  const eventId = await prepareUserForRedirect(userInternal);\n  return resolverInternal._openRedirect(\n    userInternal.auth,\n    provider,\n    AuthEventType.REAUTH_VIA_REDIRECT,\n    eventId\n  );\n}\n\n/**\n * Links the {@link OAuthProvider} to the user account using a full-page redirect flow.\n * @remarks\n * To handle the results and errors for this operation, refer to {@link getRedirectResult}.\n * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices\n * | best practices} when using {@link linkWithRedirect}.\n *\n * @example\n * ```javascript\n * // Sign in using some other provider.\n * const result = await signInWithEmailAndPassword(auth, email, password);\n * // Link using a redirect.\n * const provider = new FacebookAuthProvider();\n * await linkWithRedirect(result.user, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * ```\n *\n * @param user - The user.\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n *\n * @public\n */\nexport function linkWithRedirect(\n  user: User,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<never> {\n  return _linkWithRedirect(user, provider, resolver) as Promise<never>;\n}\nexport async function _linkWithRedirect(\n  user: User,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<void | never> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n  // Wait for auth initialization to complete, this will process pending redirects and clear the\n  // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new\n  // redirect and creating a PENDING_REDIRECT_KEY entry.\n  await userInternal.auth._initializationPromise;\n  // Allow the resolver to error before persisting the redirect user\n  const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n  await _assertLinkedStatus(false, userInternal, provider.providerId);\n  await _setPendingRedirectStatus(resolverInternal, userInternal.auth);\n\n  const eventId = await prepareUserForRedirect(userInternal);\n  return resolverInternal._openRedirect(\n    userInternal.auth,\n    provider,\n    AuthEventType.LINK_VIA_REDIRECT,\n    eventId\n  );\n}\n\n/**\n * Returns a {@link UserCredential} from the redirect-based sign-in flow.\n *\n * @remarks\n * If sign-in succeeded, returns the signed in user. If sign-in was unsuccessful, fails with an\n * error. If no redirect operation was called, returns `null`.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new FacebookAuthProvider();\n * // You can add additional scopes to the provider:\n * provider.addScope('user_birthday');\n * // Start a sign in process for an unauthenticated user.\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Facebook Access Token.\n *   const credential = provider.credentialFromResult(auth, result);\n *   const token = credential.accessToken;\n * }\n * // As this API can be used for sign-in, linking and reauthentication,\n * // check the operationType to determine what triggered this redirect\n * // operation.\n * const operationType = result.operationType;\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nexport async function getRedirectResult(\n  auth: Auth,\n  resolver?: PopupRedirectResolver\n): Promise<UserCredential | null> {\n  await _castAuth(auth)._initializationPromise;\n  return _getRedirectResult(auth, resolver, false);\n}\n\nexport async function _getRedirectResult(\n  auth: Auth,\n  resolverExtern?: PopupRedirectResolver,\n  bypassAuthState = false\n): Promise<UserCredential | null> {\n  const authInternal = _castAuth(auth);\n  const resolver = _withDefaultResolver(authInternal, resolverExtern);\n  const action = new RedirectAction(authInternal, resolver, bypassAuthState);\n  const result = await action.execute();\n\n  if (result && !bypassAuthState) {\n    delete result.user._redirectEventId;\n    await authInternal._persistUserIfCurrent(result.user as UserInternal);\n    await authInternal._setRedirectUser(null, resolverExtern);\n  }\n\n  return result;\n}\n\nasync function prepareUserForRedirect(user: UserInternal): Promise<string> {\n  const eventId = _generateEventId(`${user.uid}:::`);\n  user._redirectEventId = eventId;\n  await user.auth._setRedirectUser(user);\n  await user.auth._persistUserIfCurrent(user);\n  return eventId;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AuthEvent,\n  AuthEventConsumer,\n  AuthEventType,\n  EventManager\n} from '../../model/popup_redirect';\nimport { AuthErrorCode } from '../errors';\nimport { AuthInternal } from '../../model/auth';\nimport { _createError } from '../util/assert';\n\n// The amount of time to store the UIDs of seen events; this is\n// set to 10 min by default\nconst EVENT_DUPLICATION_CACHE_DURATION_MS = 10 * 60 * 1000;\n\nexport class AuthEventManager implements EventManager {\n  private readonly cachedEventUids: Set<string> = new Set();\n  private readonly consumers: Set<AuthEventConsumer> = new Set();\n  protected queuedRedirectEvent: AuthEvent | null = null;\n  protected hasHandledPotentialRedirect = false;\n  private lastProcessedEventTime = Date.now();\n\n  constructor(private readonly auth: AuthInternal) {}\n\n  registerConsumer(authEventConsumer: AuthEventConsumer): void {\n    this.consumers.add(authEventConsumer);\n\n    if (\n      this.queuedRedirectEvent &&\n      this.isEventForConsumer(this.queuedRedirectEvent, authEventConsumer)\n    ) {\n      this.sendToConsumer(this.queuedRedirectEvent, authEventConsumer);\n      this.saveEventToCache(this.queuedRedirectEvent);\n      this.queuedRedirectEvent = null;\n    }\n  }\n\n  unregisterConsumer(authEventConsumer: AuthEventConsumer): void {\n    this.consumers.delete(authEventConsumer);\n  }\n\n  onEvent(event: AuthEvent): boolean {\n    // Check if the event has already been handled\n    if (this.hasEventBeenHandled(event)) {\n      return false;\n    }\n\n    let handled = false;\n    this.consumers.forEach(consumer => {\n      if (this.isEventForConsumer(event, consumer)) {\n        handled = true;\n        this.sendToConsumer(event, consumer);\n        this.saveEventToCache(event);\n      }\n    });\n\n    if (this.hasHandledPotentialRedirect || !isRedirectEvent(event)) {\n      // If we've already seen a redirect before, or this is a popup event,\n      // bail now\n      return handled;\n    }\n\n    this.hasHandledPotentialRedirect = true;\n\n    // If the redirect wasn't handled, hang on to it\n    if (!handled) {\n      this.queuedRedirectEvent = event;\n      handled = true;\n    }\n\n    return handled;\n  }\n\n  private sendToConsumer(event: AuthEvent, consumer: AuthEventConsumer): void {\n    if (event.error && !isNullRedirectEvent(event)) {\n      const code =\n        (event.error.code?.split('auth/')[1] as AuthErrorCode) ||\n        AuthErrorCode.INTERNAL_ERROR;\n      consumer.onError(_createError(this.auth, code));\n    } else {\n      consumer.onAuthEvent(event);\n    }\n  }\n\n  private isEventForConsumer(\n    event: AuthEvent,\n    consumer: AuthEventConsumer\n  ): boolean {\n    const eventIdMatches =\n      consumer.eventId === null ||\n      (!!event.eventId && event.eventId === consumer.eventId);\n    return consumer.filter.includes(event.type) && eventIdMatches;\n  }\n\n  private hasEventBeenHandled(event: AuthEvent): boolean {\n    if (\n      Date.now() - this.lastProcessedEventTime >=\n      EVENT_DUPLICATION_CACHE_DURATION_MS\n    ) {\n      this.cachedEventUids.clear();\n    }\n\n    return this.cachedEventUids.has(eventUid(event));\n  }\n\n  private saveEventToCache(event: AuthEvent): void {\n    this.cachedEventUids.add(eventUid(event));\n    this.lastProcessedEventTime = Date.now();\n  }\n}\n\nfunction eventUid(e: AuthEvent): string {\n  return [e.type, e.eventId, e.sessionId, e.tenantId].filter(v => v).join('-');\n}\n\nfunction isNullRedirectEvent({ type, error }: AuthEvent): boolean {\n  return (\n    type === AuthEventType.UNKNOWN &&\n    error?.code === `auth/${AuthErrorCode.NO_AUTH_EVENT}`\n  );\n}\n\nfunction isRedirectEvent(event: AuthEvent): boolean {\n  switch (event.type) {\n    case AuthEventType.SIGN_IN_VIA_REDIRECT:\n    case AuthEventType.LINK_VIA_REDIRECT:\n    case AuthEventType.REAUTH_VIA_REDIRECT:\n      return true;\n    case AuthEventType.UNKNOWN:\n      return isNullRedirectEvent(event);\n    default:\n      return false;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _performApiRequest, Endpoint, HttpMethod } from '../index';\nimport { Auth } from '../../model/public_types';\n\nexport interface GetProjectConfigRequest {\n  androidPackageName?: string;\n  iosBundleId?: string;\n}\n\nexport interface GetProjectConfigResponse {\n  authorizedDomains: string[];\n}\n\nexport async function _getProjectConfig(\n  auth: Auth,\n  request: GetProjectConfigRequest = {}\n): Promise<GetProjectConfigResponse> {\n  return _performApiRequest<GetProjectConfigRequest, GetProjectConfigResponse>(\n    auth,\n    HttpMethod.GET,\n    Endpoint.GET_PROJECT_CONFIG,\n    request\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _getProjectConfig } from '../../api/project_config/get_project_config';\nimport { AuthInternal } from '../../model/auth';\nimport { AuthErrorCode } from '../errors';\nimport { _fail } from './assert';\nimport { _getCurrentUrl } from './location';\n\nconst IP_ADDRESS_REGEX = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/;\nconst HTTP_REGEX = /^https?/;\n\nexport async function _validateOrigin(auth: AuthInternal): Promise<void> {\n  // Skip origin validation if we are in an emulated environment\n  if (auth.config.emulator) {\n    return;\n  }\n\n  const { authorizedDomains } = await _getProjectConfig(auth);\n\n  for (const domain of authorizedDomains) {\n    try {\n      if (matchDomain(domain)) {\n        return;\n      }\n    } catch {\n      // Do nothing if there's a URL error; just continue searching\n    }\n  }\n\n  // In the old SDK, this error also provides helpful messages.\n  _fail(auth, AuthErrorCode.INVALID_ORIGIN);\n}\n\nfunction matchDomain(expected: string): boolean {\n  const currentUrl = _getCurrentUrl();\n  const { protocol, hostname } = new URL(currentUrl);\n  if (expected.startsWith('chrome-extension://')) {\n    const ceUrl = new URL(expected);\n\n    if (ceUrl.hostname === '' && hostname === '') {\n      // For some reason we're not parsing chrome URLs properly\n      return (\n        protocol === 'chrome-extension:' &&\n        expected.replace('chrome-extension://', '') ===\n          currentUrl.replace('chrome-extension://', '')\n      );\n    }\n\n    return protocol === 'chrome-extension:' && ceUrl.hostname === hostname;\n  }\n\n  if (!HTTP_REGEX.test(protocol)) {\n    return false;\n  }\n\n  if (IP_ADDRESS_REGEX.test(expected)) {\n    // The domain has to be exactly equal to the pattern, as an IP domain will\n    // only contain the IP, no extra character.\n    return hostname === expected;\n  }\n\n  // Dots in pattern should be escaped.\n  const escapedDomainPattern = expected.replace(/\\./g, '\\\\.');\n  // Non ip address domains.\n  // domain.com = *.domain.com OR domain.com\n  const re = new RegExp(\n    '^(.+\\\\.' + escapedDomainPattern + '|' + escapedDomainPattern + ')$',\n    'i'\n  );\n  return re.test(hostname);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthErrorCode } from '../../core/errors';\nimport { _createError } from '../../core/util/assert';\nimport { Delay } from '../../core/util/delay';\nimport { AuthInternal } from '../../model/auth';\nimport { _window } from '../auth_window';\nimport * as js from '../load_js';\n\nconst NETWORK_TIMEOUT = new Delay(30000, 60000);\n\n/**\n * Reset unlaoded GApi modules. If gapi.load fails due to a network error,\n * it will stop working after a retrial. This is a hack to fix this issue.\n */\nfunction resetUnloadedGapiModules(): void {\n  // Clear last failed gapi.load state to force next gapi.load to first\n  // load the failed gapi.iframes module.\n  // Get gapix.beacon context.\n  const beacon = _window().___jsl;\n  // Get current hint.\n  if (beacon?.H) {\n    // Get gapi hint.\n    for (const hint of Object.keys(beacon.H)) {\n      // Requested modules.\n      beacon.H[hint].r = beacon.H[hint].r || [];\n      // Loaded modules.\n      beacon.H[hint].L = beacon.H[hint].L || [];\n      // Set requested modules to a copy of the loaded modules.\n      beacon.H[hint].r = [...beacon.H[hint].L];\n      // Clear pending callbacks.\n      if (beacon.CP) {\n        for (let i = 0; i < beacon.CP.length; i++) {\n          // Remove all failed pending callbacks.\n          beacon.CP[i] = null;\n        }\n      }\n    }\n  }\n}\n\nfunction loadGapi(auth: AuthInternal): Promise<gapi.iframes.Context> {\n  return new Promise<gapi.iframes.Context>((resolve, reject) => {\n    // Function to run when gapi.load is ready.\n    function loadGapiIframe(): void {\n      // The developer may have tried to previously run gapi.load and failed.\n      // Run this to fix that.\n      resetUnloadedGapiModules();\n      gapi.load('gapi.iframes', {\n        callback: () => {\n          resolve(gapi.iframes.getContext());\n        },\n        ontimeout: () => {\n          // The above reset may be sufficient, but having this reset after\n          // failure ensures that if the developer calls gapi.load after the\n          // connection is re-established and before another attempt to embed\n          // the iframe, it would work and would not be broken because of our\n          // failed attempt.\n          // Timeout when gapi.iframes.Iframe not loaded.\n          resetUnloadedGapiModules();\n          reject(_createError(auth, AuthErrorCode.NETWORK_REQUEST_FAILED));\n        },\n        timeout: NETWORK_TIMEOUT.get()\n      });\n    }\n\n    if (_window().gapi?.iframes?.Iframe) {\n      // If gapi.iframes.Iframe available, resolve.\n      resolve(gapi.iframes.getContext());\n    } else if (!!_window().gapi?.load) {\n      // Gapi loader ready, load gapi.iframes.\n      loadGapiIframe();\n    } else {\n      // Create a new iframe callback when this is called so as not to overwrite\n      // any previous defined callback. This happens if this method is called\n      // multiple times in parallel and could result in the later callback\n      // overwriting the previous one. This would end up with a iframe\n      // timeout.\n      const cbName = js._generateCallbackName('iframefcb');\n      // GApi loader not available, dynamically load platform.js.\n      _window()[cbName] = () => {\n        // GApi loader should be ready.\n        if (!!gapi.load) {\n          loadGapiIframe();\n        } else {\n          // Gapi loader failed, throw error.\n          reject(_createError(auth, AuthErrorCode.NETWORK_REQUEST_FAILED));\n        }\n      };\n      // Load GApi loader.\n      return js\n        ._loadJS(`https://apis.google.com/js/api.js?onload=${cbName}`)\n        .catch(e => reject(e));\n    }\n  }).catch(error => {\n    // Reset cached promise to allow for retrial.\n    cachedGApiLoader = null;\n    throw error;\n  });\n}\n\nlet cachedGApiLoader: Promise<gapi.iframes.Context> | null = null;\nexport function _loadGapi(auth: AuthInternal): Promise<gapi.iframes.Context> {\n  cachedGApiLoader = cachedGApiLoader || loadGapi(auth);\n  return cachedGApiLoader;\n}\n\nexport function _resetLoader(): void {\n  cachedGApiLoader = null;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SDK_VERSION } from '@firebase/app';\nimport { querystring } from '@firebase/util';\nimport { DefaultConfig } from '../../../internal';\n\nimport { AuthErrorCode } from '../../core/errors';\nimport { _assert, _createError } from '../../core/util/assert';\nimport { Delay } from '../../core/util/delay';\nimport { _emulatorUrl } from '../../core/util/emulator';\nimport { AuthInternal } from '../../model/auth';\nimport { _window } from '../auth_window';\nimport * as gapiLoader from './gapi';\n\nconst PING_TIMEOUT = new Delay(5000, 15000);\nconst IFRAME_PATH = '__/auth/iframe';\nconst EMULATED_IFRAME_PATH = 'emulator/auth/iframe';\n\nconst IFRAME_ATTRIBUTES = {\n  style: {\n    position: 'absolute',\n    top: '-100px',\n    width: '1px',\n    height: '1px'\n  },\n  'aria-hidden': 'true',\n  tabindex: '-1'\n};\n\n// Map from apiHost to endpoint ID for passing into iframe. In current SDK, apiHost can be set to\n// anything (not from a list of endpoints with IDs as in legacy), so this is the closest we can get.\nconst EID_FROM_APIHOST = new Map([\n  [DefaultConfig.API_HOST, 'p'], // production\n  ['staging-identitytoolkit.sandbox.googleapis.com', 's'], // staging\n  ['test-identitytoolkit.sandbox.googleapis.com', 't'] // test\n]);\n\nfunction getIframeUrl(auth: AuthInternal): string {\n  const config = auth.config;\n  _assert(config.authDomain, auth, AuthErrorCode.MISSING_AUTH_DOMAIN);\n  const url = config.emulator\n    ? _emulatorUrl(config, EMULATED_IFRAME_PATH)\n    : `https://${auth.config.authDomain}/${IFRAME_PATH}`;\n\n  const params: Record<string, string> = {\n    apiKey: config.apiKey,\n    appName: auth.name,\n    v: SDK_VERSION\n  };\n  const eid = EID_FROM_APIHOST.get(auth.config.apiHost);\n  if (eid) {\n    params.eid = eid;\n  }\n  const frameworks = auth._getFrameworks();\n  if (frameworks.length) {\n    params.fw = frameworks.join(',');\n  }\n  return `${url}?${querystring(params).slice(1)}`;\n}\n\nexport async function _openIframe(\n  auth: AuthInternal\n): Promise<gapi.iframes.Iframe> {\n  const context = await gapiLoader._loadGapi(auth);\n  const gapi = _window().gapi;\n  _assert(gapi, auth, AuthErrorCode.INTERNAL_ERROR);\n  return context.open(\n    {\n      where: document.body,\n      url: getIframeUrl(auth),\n      messageHandlersFilter: gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER,\n      attributes: IFRAME_ATTRIBUTES,\n      dontclear: true\n    },\n    (iframe: gapi.iframes.Iframe) =>\n      new Promise(async (resolve, reject) => {\n        await iframe.restyle({\n          // Prevent iframe from closing on mouse out.\n          setHideOnLeave: false\n        });\n\n        const networkError = _createError(\n          auth,\n          AuthErrorCode.NETWORK_REQUEST_FAILED\n        );\n        // Confirm iframe is correctly loaded.\n        // To fallback on failure, set a timeout.\n        const networkErrorTimer = _window().setTimeout(() => {\n          reject(networkError);\n        }, PING_TIMEOUT.get());\n        // Clear timer and resolve pending iframe ready promise.\n        function clearTimerAndResolve(): void {\n          _window().clearTimeout(networkErrorTimer);\n          resolve(iframe);\n        }\n        // This returns an IThenable. However the reject part does not call\n        // when the iframe is not loaded.\n        iframe.ping(clearTimerAndResolve).then(clearTimerAndResolve, () => {\n          reject(networkError);\n        });\n      })\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getUA } from '@firebase/util';\n\nimport { AuthErrorCode } from '../../core/errors';\nimport { _assert } from '../../core/util/assert';\nimport {\n  _isChromeIOS,\n  _isFirefox,\n  _isIOSStandalone\n} from '../../core/util/browser';\nimport { AuthInternal } from '../../model/auth';\n\nconst BASE_POPUP_OPTIONS = {\n  location: 'yes',\n  resizable: 'yes',\n  statusbar: 'yes',\n  toolbar: 'no'\n};\n\nconst DEFAULT_WIDTH = 500;\nconst DEFAULT_HEIGHT = 600;\nconst TARGET_BLANK = '_blank';\n\nconst FIREFOX_EMPTY_URL = 'http://localhost';\n\nexport class AuthPopup {\n  associatedEvent: string | null = null;\n\n  constructor(readonly window: Window | null) {}\n\n  close(): void {\n    if (this.window) {\n      try {\n        this.window.close();\n      } catch (e) {}\n    }\n  }\n}\n\nexport function _open(\n  auth: AuthInternal,\n  url?: string,\n  name?: string,\n  width = DEFAULT_WIDTH,\n  height = DEFAULT_HEIGHT\n): AuthPopup {\n  const top = Math.max((window.screen.availHeight - height) / 2, 0).toString();\n  const left = Math.max((window.screen.availWidth - width) / 2, 0).toString();\n  let target = '';\n\n  const options: { [key: string]: string } = {\n    ...BASE_POPUP_OPTIONS,\n    width: width.toString(),\n    height: height.toString(),\n    top,\n    left\n  };\n\n  // Chrome iOS 7 and 8 is returning an undefined popup win when target is\n  // specified, even though the popup is not necessarily blocked.\n  const ua = getUA().toLowerCase();\n\n  if (name) {\n    target = _isChromeIOS(ua) ? TARGET_BLANK : name;\n  }\n\n  if (_isFirefox(ua)) {\n    // Firefox complains when invalid URLs are popped out. Hacky way to bypass.\n    url = url || FIREFOX_EMPTY_URL;\n    // Firefox disables by default scrolling on popup windows, which can create\n    // issues when the user has many Google accounts, for instance.\n    options.scrollbars = 'yes';\n  }\n\n  const optionsString = Object.entries(options).reduce(\n    (accum, [key, value]) => `${accum}${key}=${value},`,\n    ''\n  );\n\n  if (_isIOSStandalone(ua) && target !== '_self') {\n    openAsNewWindowIOS(url || '', target);\n    return new AuthPopup(null);\n  }\n\n  // about:blank getting sanitized causing browsers like IE/Edge to display\n  // brief error message before redirecting to handler.\n  const newWin = window.open(url || '', target, optionsString);\n  _assert(newWin, auth, AuthErrorCode.POPUP_BLOCKED);\n\n  // Flaky on IE edge, encapsulate with a try and catch.\n  try {\n    newWin.focus();\n  } catch (e) {}\n\n  return new AuthPopup(newWin);\n}\n\nfunction openAsNewWindowIOS(url: string, target: string): void {\n  const el = document.createElement('a');\n  el.href = url;\n  el.target = target;\n  const click = document.createEvent('MouseEvent');\n  click.initMouseEvent(\n    'click',\n    true,\n    true,\n    window,\n    1,\n    0,\n    0,\n    0,\n    0,\n    false,\n    false,\n    false,\n    false,\n    1,\n    null\n  );\n  el.dispatchEvent(click);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SDK_VERSION } from '@firebase/app';\nimport { AuthProvider } from '../../model/public_types';\nimport { ApiKey, AppName, AuthInternal } from '../../model/auth';\nimport { AuthEventType } from '../../model/popup_redirect';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from './assert';\nimport { isEmpty, querystring } from '@firebase/util';\nimport { _emulatorUrl } from './emulator';\nimport { FederatedAuthProvider } from '../providers/federated';\nimport { BaseOAuthProvider } from '../providers/oauth';\n\n/**\n * URL for Authentication widget which will initiate the OAuth handshake\n *\n * @internal\n */\nconst WIDGET_PATH = '__/auth/handler';\n\n/**\n * URL for emulated environment\n *\n * @internal\n */\nconst EMULATOR_WIDGET_PATH = 'emulator/auth/handler';\n\n/**\n * Fragment name for the App Check token that gets passed to the widget\n *\n * @internal\n */\nconst FIREBASE_APP_CHECK_FRAGMENT_ID = encodeURIComponent('fac');\n\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\ntype WidgetParams = {\n  apiKey: ApiKey;\n  appName: AppName;\n  authType: AuthEventType;\n  redirectUrl?: string;\n  v: string;\n  providerId?: string;\n  scopes?: string;\n  customParameters?: string;\n  eventId?: string;\n  tid?: string;\n} & { [key: string]: string | undefined };\n\nexport async function _getRedirectUrl(\n  auth: AuthInternal,\n  provider: AuthProvider,\n  authType: AuthEventType,\n  redirectUrl?: string,\n  eventId?: string,\n  additionalParams?: Record<string, string>\n): Promise<string> {\n  _assert(auth.config.authDomain, auth, AuthErrorCode.MISSING_AUTH_DOMAIN);\n  _assert(auth.config.apiKey, auth, AuthErrorCode.INVALID_API_KEY);\n\n  const params: WidgetParams = {\n    apiKey: auth.config.apiKey,\n    appName: auth.name,\n    authType,\n    redirectUrl,\n    v: SDK_VERSION,\n    eventId\n  };\n\n  if (provider instanceof FederatedAuthProvider) {\n    provider.setDefaultLanguage(auth.languageCode);\n    params.providerId = provider.providerId || '';\n    if (!isEmpty(provider.getCustomParameters())) {\n      params.customParameters = JSON.stringify(provider.getCustomParameters());\n    }\n\n    // TODO set additionalParams from the provider as well?\n    for (const [key, value] of Object.entries(additionalParams || {})) {\n      params[key] = value;\n    }\n  }\n\n  if (provider instanceof BaseOAuthProvider) {\n    const scopes = provider.getScopes().filter(scope => scope !== '');\n    if (scopes.length > 0) {\n      params.scopes = scopes.join(',');\n    }\n  }\n\n  if (auth.tenantId) {\n    params.tid = auth.tenantId;\n  }\n\n  // TODO: maybe set eid as endipointId\n  // TODO: maybe set fw as Frameworks.join(\",\")\n\n  const paramsDict = params as Record<string, string | number>;\n  for (const key of Object.keys(paramsDict)) {\n    if (paramsDict[key] === undefined) {\n      delete paramsDict[key];\n    }\n  }\n\n  // Sets the App Check token to pass to the widget\n  const appCheckToken = await auth._getAppCheckToken();\n  const appCheckTokenFragment = appCheckToken\n    ? `#${FIREBASE_APP_CHECK_FRAGMENT_ID}=${encodeURIComponent(appCheckToken)}`\n    : '';\n\n  // Start at index 1 to skip the leading '&' in the query string\n  return `${getHandlerBase(auth)}?${querystring(paramsDict).slice(\n    1\n  )}${appCheckTokenFragment}`;\n}\n\nfunction getHandlerBase({ config }: AuthInternal): string {\n  if (!config.emulator) {\n    return `https://${config.authDomain}/${WIDGET_PATH}`;\n  }\n\n  return _emulatorUrl(config, EMULATOR_WIDGET_PATH);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthProvider, PopupRedirectResolver } from '../model/public_types';\n\nimport { AuthEventManager } from '../core/auth/auth_event_manager';\nimport { AuthErrorCode } from '../core/errors';\nimport { _assert, debugAssert, _fail } from '../core/util/assert';\nimport { _generateEventId } from '../core/util/event_id';\nimport { _getCurrentUrl } from '../core/util/location';\nimport { _validateOrigin } from '../core/util/validate_origin';\nimport { AuthInternal } from '../model/auth';\nimport {\n  AuthEventType,\n  EventManager,\n  GapiAuthEvent,\n  GapiOutcome,\n  PopupRedirectResolverInternal\n} from '../model/popup_redirect';\nimport { _setWindowLocation } from './auth_window';\nimport { _openIframe } from './iframe/iframe';\nimport { browserSessionPersistence } from './persistence/session_storage';\nimport { _open, AuthPopup } from './util/popup';\nimport { _getRedirectResult } from './strategies/redirect';\nimport { _getRedirectUrl } from '../core/util/handler';\nimport { _isIOS, _isMobileBrowser, _isSafari } from '../core/util/browser';\nimport { _overrideRedirectResult } from '../core/strategies/redirect';\n\n/**\n * The special web storage event\n *\n */\nconst WEB_STORAGE_SUPPORT_KEY = 'webStorageSupport';\n\ninterface WebStorageSupportMessage extends gapi.iframes.Message {\n  [index: number]: Record<string, boolean>;\n}\n\ninterface ManagerOrPromise {\n  manager?: EventManager;\n  promise?: Promise<EventManager>;\n}\n\nclass BrowserPopupRedirectResolver implements PopupRedirectResolverInternal {\n  private readonly eventManagers: Record<string, ManagerOrPromise> = {};\n  private readonly iframes: Record<string, gapi.iframes.Iframe> = {};\n  private readonly originValidationPromises: Record<string, Promise<void>> = {};\n\n  readonly _redirectPersistence = browserSessionPersistence;\n\n  // Wrapping in async even though we don't await anywhere in order\n  // to make sure errors are raised as promise rejections\n  async _openPopup(\n    auth: AuthInternal,\n    provider: AuthProvider,\n    authType: AuthEventType,\n    eventId?: string\n  ): Promise<AuthPopup> {\n    debugAssert(\n      this.eventManagers[auth._key()]?.manager,\n      '_initialize() not called before _openPopup()'\n    );\n\n    const url = await _getRedirectUrl(\n      auth,\n      provider,\n      authType,\n      _getCurrentUrl(),\n      eventId\n    );\n    return _open(auth, url, _generateEventId());\n  }\n\n  async _openRedirect(\n    auth: AuthInternal,\n    provider: AuthProvider,\n    authType: AuthEventType,\n    eventId?: string\n  ): Promise<never> {\n    await this._originValidation(auth);\n    const url = await _getRedirectUrl(\n      auth,\n      provider,\n      authType,\n      _getCurrentUrl(),\n      eventId\n    );\n    _setWindowLocation(url);\n    return new Promise(() => {});\n  }\n\n  _initialize(auth: AuthInternal): Promise<EventManager> {\n    const key = auth._key();\n    if (this.eventManagers[key]) {\n      const { manager, promise } = this.eventManagers[key];\n      if (manager) {\n        return Promise.resolve(manager);\n      } else {\n        debugAssert(promise, 'If manager is not set, promise should be');\n        return promise;\n      }\n    }\n\n    const promise = this.initAndGetManager(auth);\n    this.eventManagers[key] = { promise };\n\n    // If the promise is rejected, the key should be removed so that the\n    // operation can be retried later.\n    promise.catch(() => {\n      delete this.eventManagers[key];\n    });\n\n    return promise;\n  }\n\n  private async initAndGetManager(auth: AuthInternal): Promise<EventManager> {\n    const iframe = await _openIframe(auth);\n    const manager = new AuthEventManager(auth);\n    iframe.register<GapiAuthEvent>(\n      'authEvent',\n      (iframeEvent: GapiAuthEvent | null) => {\n        _assert(iframeEvent?.authEvent, auth, AuthErrorCode.INVALID_AUTH_EVENT);\n        // TODO: Consider splitting redirect and popup events earlier on\n\n        const handled = manager.onEvent(iframeEvent.authEvent);\n        return { status: handled ? GapiOutcome.ACK : GapiOutcome.ERROR };\n      },\n      gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER\n    );\n\n    this.eventManagers[auth._key()] = { manager };\n    this.iframes[auth._key()] = iframe;\n    return manager;\n  }\n\n  _isIframeWebStorageSupported(\n    auth: AuthInternal,\n    cb: (supported: boolean) => unknown\n  ): void {\n    const iframe = this.iframes[auth._key()];\n    iframe.send<gapi.iframes.Message, WebStorageSupportMessage>(\n      WEB_STORAGE_SUPPORT_KEY,\n      { type: WEB_STORAGE_SUPPORT_KEY },\n      result => {\n        const isSupported = result?.[0]?.[WEB_STORAGE_SUPPORT_KEY];\n        if (isSupported !== undefined) {\n          cb(!!isSupported);\n        }\n\n        _fail(auth, AuthErrorCode.INTERNAL_ERROR);\n      },\n      gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER\n    );\n  }\n\n  _originValidation(auth: AuthInternal): Promise<void> {\n    const key = auth._key();\n    if (!this.originValidationPromises[key]) {\n      this.originValidationPromises[key] = _validateOrigin(auth);\n    }\n\n    return this.originValidationPromises[key];\n  }\n\n  get _shouldInitProactively(): boolean {\n    // Mobile browsers and Safari need to optimistically initialize\n    return _isMobileBrowser() || _isSafari() || _isIOS();\n  }\n\n  _completeRedirectFn = _getRedirectResult;\n\n  _overrideRedirectResult = _overrideRedirectResult;\n}\n\n/**\n * An implementation of {@link PopupRedirectResolver} suitable for browser\n * based applications.\n *\n * @public\n */\nexport const browserPopupRedirectResolver: PopupRedirectResolver =\n  BrowserPopupRedirectResolver;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FactorId, MultiFactorAssertion } from '../model/public_types';\nimport { debugFail } from '../core/util/assert';\nimport { MultiFactorSessionImpl, MultiFactorSessionType } from './mfa_session';\nimport { FinalizeMfaResponse } from '../api/authentication/mfa';\nimport { AuthInternal } from '../model/auth';\n\nexport abstract class MultiFactorAssertionImpl implements MultiFactorAssertion {\n  protected constructor(readonly factorId: FactorId) {}\n\n  _process(\n    auth: AuthInternal,\n    session: MultiFactorSessionImpl,\n    displayName?: string | null\n  ): Promise<FinalizeMfaResponse> {\n    switch (session.type) {\n      case MultiFactorSessionType.ENROLL:\n        return this._finalizeEnroll(auth, session.credential, displayName);\n      case MultiFactorSessionType.SIGN_IN:\n        return this._finalizeSignIn(auth, session.credential);\n      default:\n        return debugFail('unexpected MultiFactorSessionType');\n    }\n  }\n\n  abstract _finalizeEnroll(\n    auth: AuthInternal,\n    idToken: string,\n    displayName?: string | null\n  ): Promise<FinalizeMfaResponse>;\n  abstract _finalizeSignIn(\n    auth: AuthInternal,\n    mfaPendingCredential: string\n  ): Promise<FinalizeMfaResponse>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  FactorId,\n  PhoneMultiFactorAssertion\n} from '../../../model/public_types';\n\nimport { MultiFactorAssertionImpl } from '../../../mfa/mfa_assertion';\nimport { AuthInternal } from '../../../model/auth';\nimport { finalizeEnrollPhoneMfa } from '../../../api/account_management/mfa';\nimport { PhoneAuthCredential } from '../../../core/credentials/phone';\nimport {\n  finalizeSignInPhoneMfa,\n  FinalizeMfaResponse\n} from '../../../api/authentication/mfa';\n\n/**\n * {@inheritdoc PhoneMultiFactorAssertion}\n *\n * @public\n */\nexport class PhoneMultiFactorAssertionImpl\n  extends MultiFactorAssertionImpl\n  implements PhoneMultiFactorAssertion\n{\n  private constructor(private readonly credential: PhoneAuthCredential) {\n    super(FactorId.PHONE);\n  }\n\n  /** @internal */\n  static _fromCredential(\n    credential: PhoneAuthCredential\n  ): PhoneMultiFactorAssertionImpl {\n    return new PhoneMultiFactorAssertionImpl(credential);\n  }\n\n  /** @internal */\n  _finalizeEnroll(\n    auth: AuthInternal,\n    idToken: string,\n    displayName?: string | null\n  ): Promise<FinalizeMfaResponse> {\n    return finalizeEnrollPhoneMfa(auth, {\n      idToken,\n      displayName,\n      phoneVerificationInfo: this.credential._makeVerificationRequest()\n    });\n  }\n\n  /** @internal */\n  _finalizeSignIn(\n    auth: AuthInternal,\n    mfaPendingCredential: string\n  ): Promise<FinalizeMfaResponse> {\n    return finalizeSignInPhoneMfa(auth, {\n      mfaPendingCredential,\n      phoneVerificationInfo: this.credential._makeVerificationRequest()\n    });\n  }\n}\n\n/**\n * Provider for generating a {@link PhoneMultiFactorAssertion}.\n *\n * @public\n */\nexport class PhoneMultiFactorGenerator {\n  private constructor() {}\n\n  /**\n   * Provides a {@link PhoneMultiFactorAssertion} to confirm ownership of the phone second factor.\n   *\n   * @param phoneAuthCredential - A credential provided by {@link PhoneAuthProvider.credential}.\n   * @returns A {@link PhoneMultiFactorAssertion} which can be used with\n   * {@link MultiFactorResolver.resolveSignIn}\n   */\n  static assertion(credential: PhoneAuthCredential): PhoneMultiFactorAssertion {\n    return PhoneMultiFactorAssertionImpl._fromCredential(credential);\n  }\n\n  /**\n   * The identifier of the phone second factor: `phone`.\n   */\n  static FACTOR_ID = 'phone';\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  TotpMultiFactorAssertion,\n  MultiFactorSession,\n  FactorId\n} from '../../model/public_types';\nimport { AuthInternal } from '../../model/auth';\nimport {\n  finalizeEnrollTotpMfa,\n  startEnrollTotpMfa,\n  StartTotpMfaEnrollmentResponse,\n  TotpVerificationInfo\n} from '../../api/account_management/mfa';\nimport {\n  FinalizeMfaResponse,\n  finalizeSignInTotpMfa\n} from '../../api/authentication/mfa';\nimport { MultiFactorAssertionImpl } from '../../mfa/mfa_assertion';\nimport { MultiFactorSessionImpl } from '../mfa_session';\nimport { AuthErrorCode } from '../../core/errors';\nimport { _assert } from '../../core/util/assert';\n\n/**\n * Provider for generating a {@link TotpMultiFactorAssertion}.\n *\n * @public\n */\nexport class TotpMultiFactorGenerator {\n  /**\n   * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of\n   * the TOTP (time-based one-time password) second factor.\n   * This assertion is used to complete enrollment in TOTP second factor.\n   *\n   * @param secret A {@link TotpSecret} containing the shared secret key and other TOTP parameters.\n   * @param oneTimePassword One-time password from TOTP App.\n   * @returns A {@link TotpMultiFactorAssertion} which can be used with\n   * {@link MultiFactorUser.enroll}.\n   */\n  static assertionForEnrollment(\n    secret: TotpSecret,\n    oneTimePassword: string\n  ): TotpMultiFactorAssertion {\n    return TotpMultiFactorAssertionImpl._fromSecret(secret, oneTimePassword);\n  }\n\n  /**\n   * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of the TOTP second factor.\n   * This assertion is used to complete signIn with TOTP as the second factor.\n   *\n   * @param enrollmentId identifies the enrolled TOTP second factor.\n   * @param oneTimePassword One-time password from TOTP App.\n   * @returns A {@link TotpMultiFactorAssertion} which can be used with\n   * {@link MultiFactorResolver.resolveSignIn}.\n   */\n  static assertionForSignIn(\n    enrollmentId: string,\n    oneTimePassword: string\n  ): TotpMultiFactorAssertion {\n    return TotpMultiFactorAssertionImpl._fromEnrollmentId(\n      enrollmentId,\n      oneTimePassword\n    );\n  }\n\n  /**\n   * Returns a promise to {@link TotpSecret} which contains the TOTP shared secret key and other parameters.\n   * Creates a TOTP secret as part of enrolling a TOTP second factor.\n   * Used for generating a QR code URL or inputting into a TOTP app.\n   * This method uses the auth instance corresponding to the user in the multiFactorSession.\n   *\n   * @param session The {@link MultiFactorSession} that the user is part of.\n   * @returns A promise to {@link TotpSecret}.\n   */\n  static async generateSecret(\n    session: MultiFactorSession\n  ): Promise<TotpSecret> {\n    const mfaSession = session as MultiFactorSessionImpl;\n    _assert(\n      typeof mfaSession.auth !== 'undefined',\n      AuthErrorCode.INTERNAL_ERROR\n    );\n    const response = await startEnrollTotpMfa(mfaSession.auth, {\n      idToken: mfaSession.credential,\n      totpEnrollmentInfo: {}\n    });\n    return TotpSecret._fromStartTotpMfaEnrollmentResponse(\n      response,\n      mfaSession.auth\n    );\n  }\n\n  /**\n   * The identifier of the TOTP second factor: `totp`.\n   */\n  static FACTOR_ID: 'totp' = FactorId.TOTP;\n}\n\nexport class TotpMultiFactorAssertionImpl\n  extends MultiFactorAssertionImpl\n  implements TotpMultiFactorAssertion\n{\n  constructor(\n    readonly otp: string,\n    readonly enrollmentId?: string,\n    readonly secret?: TotpSecret\n  ) {\n    super(FactorId.TOTP);\n  }\n\n  /** @internal */\n  static _fromSecret(\n    secret: TotpSecret,\n    otp: string\n  ): TotpMultiFactorAssertionImpl {\n    return new TotpMultiFactorAssertionImpl(otp, undefined, secret);\n  }\n\n  /** @internal */\n  static _fromEnrollmentId(\n    enrollmentId: string,\n    otp: string\n  ): TotpMultiFactorAssertionImpl {\n    return new TotpMultiFactorAssertionImpl(otp, enrollmentId);\n  }\n\n  /** @internal */\n  async _finalizeEnroll(\n    auth: AuthInternal,\n    idToken: string,\n    displayName?: string | null\n  ): Promise<FinalizeMfaResponse> {\n    _assert(\n      typeof this.secret !== 'undefined',\n      auth,\n      AuthErrorCode.ARGUMENT_ERROR\n    );\n    return finalizeEnrollTotpMfa(auth, {\n      idToken,\n      displayName,\n      totpVerificationInfo: this.secret._makeTotpVerificationInfo(this.otp)\n    });\n  }\n\n  /** @internal */\n  async _finalizeSignIn(\n    auth: AuthInternal,\n    mfaPendingCredential: string\n  ): Promise<FinalizeMfaResponse> {\n    _assert(\n      this.enrollmentId !== undefined && this.otp !== undefined,\n      auth,\n      AuthErrorCode.ARGUMENT_ERROR\n    );\n    const totpVerificationInfo = { verificationCode: this.otp };\n    return finalizeSignInTotpMfa(auth, {\n      mfaPendingCredential,\n      mfaEnrollmentId: this.enrollmentId,\n      totpVerificationInfo\n    });\n  }\n}\n\n/**\n * Provider for generating a {@link TotpMultiFactorAssertion}.\n *\n * Stores the shared secret key and other parameters to generate time-based OTPs.\n * Implements methods to retrieve the shared secret key and generate a QR code URL.\n * @public\n */\nexport class TotpSecret {\n  /**\n   * Shared secret key/seed used for enrolling in TOTP MFA and generating OTPs.\n   */\n  readonly secretKey: string;\n  /**\n   * Hashing algorithm used.\n   */\n  readonly hashingAlgorithm: string;\n  /**\n   * Length of the one-time passwords to be generated.\n   */\n  readonly codeLength: number;\n  /**\n   * The interval (in seconds) when the OTP codes should change.\n   */\n  readonly codeIntervalSeconds: number;\n  /**\n   * The timestamp (UTC string) by which TOTP enrollment should be completed.\n   */\n  // This can be used by callers to show a countdown of when to enter OTP code by.\n  readonly enrollmentCompletionDeadline: string;\n\n  // The public members are declared outside the constructor so the docs can be generated.\n  private constructor(\n    secretKey: string,\n    hashingAlgorithm: string,\n    codeLength: number,\n    codeIntervalSeconds: number,\n    enrollmentCompletionDeadline: string,\n    private readonly sessionInfo: string,\n    private readonly auth: AuthInternal\n  ) {\n    this.secretKey = secretKey;\n    this.hashingAlgorithm = hashingAlgorithm;\n    this.codeLength = codeLength;\n    this.codeIntervalSeconds = codeIntervalSeconds;\n    this.enrollmentCompletionDeadline = enrollmentCompletionDeadline;\n  }\n\n  /** @internal */\n  static _fromStartTotpMfaEnrollmentResponse(\n    response: StartTotpMfaEnrollmentResponse,\n    auth: AuthInternal\n  ): TotpSecret {\n    return new TotpSecret(\n      response.totpSessionInfo.sharedSecretKey,\n      response.totpSessionInfo.hashingAlgorithm,\n      response.totpSessionInfo.verificationCodeLength,\n      response.totpSessionInfo.periodSec,\n      new Date(response.totpSessionInfo.finalizeEnrollmentTime).toUTCString(),\n      response.totpSessionInfo.sessionInfo,\n      auth\n    );\n  }\n\n  /** @internal */\n  _makeTotpVerificationInfo(otp: string): TotpVerificationInfo {\n    return { sessionInfo: this.sessionInfo, verificationCode: otp };\n  }\n\n  /**\n   * Returns a QR code URL as described in\n   * https://github.com/google/google-authenticator/wiki/Key-Uri-Format\n   * This can be displayed to the user as a QR code to be scanned into a TOTP app like Google Authenticator.\n   * If the optional parameters are unspecified, an accountName of <userEmail> and issuer of <firebaseAppName> are used.\n   *\n   * @param accountName the name of the account/app along with a user identifier.\n   * @param issuer issuer of the TOTP (likely the app name).\n   * @returns A QR code URL string.\n   */\n  generateQrCodeUrl(accountName?: string, issuer?: string): string {\n    let useDefaults = false;\n    if (_isEmptyString(accountName) || _isEmptyString(issuer)) {\n      useDefaults = true;\n    }\n    if (useDefaults) {\n      if (_isEmptyString(accountName)) {\n        accountName = this.auth.currentUser?.email || 'unknownuser';\n      }\n      if (_isEmptyString(issuer)) {\n        issuer = this.auth.name;\n      }\n    }\n    return `otpauth://totp/${issuer}:${accountName}?secret=${this.secretKey}&issuer=${issuer}&algorithm=${this.hashingAlgorithm}&digits=${this.codeLength}`;\n  }\n}\n\n/** @internal */\nfunction _isEmptyString(input?: string): boolean {\n  return typeof input === 'undefined' || input?.length === 0;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Unsubscribe } from '@firebase/util';\nimport { FirebaseAuthInternal } from '@firebase/auth-interop-types';\n\nimport { AuthInternal } from '../../model/auth';\nimport { UserInternal } from '../../model/user';\nimport { _assert } from '../util/assert';\nimport { AuthErrorCode } from '../errors';\n\ninterface TokenListener {\n  (tok: string | null): unknown;\n}\n\nexport class AuthInterop implements FirebaseAuthInternal {\n  private readonly internalListeners: Map<TokenListener, Unsubscribe> =\n    new Map();\n\n  constructor(private readonly auth: AuthInternal) {}\n\n  getUid(): string | null {\n    this.assertAuthConfigured();\n    return this.auth.currentUser?.uid || null;\n  }\n\n  async getToken(\n    forceRefresh?: boolean\n  ): Promise<{ accessToken: string } | null> {\n    this.assertAuthConfigured();\n    await this.auth._initializationPromise;\n    if (!this.auth.currentUser) {\n      return null;\n    }\n\n    const accessToken = await this.auth.currentUser.getIdToken(forceRefresh);\n    return { accessToken };\n  }\n\n  addAuthTokenListener(listener: TokenListener): void {\n    this.assertAuthConfigured();\n    if (this.internalListeners.has(listener)) {\n      return;\n    }\n\n    const unsubscribe = this.auth.onIdTokenChanged(user => {\n      listener(\n        (user as UserInternal | null)?.stsTokenManager.accessToken || null\n      );\n    });\n    this.internalListeners.set(listener, unsubscribe);\n    this.updateProactiveRefresh();\n  }\n\n  removeAuthTokenListener(listener: TokenListener): void {\n    this.assertAuthConfigured();\n    const unsubscribe = this.internalListeners.get(listener);\n    if (!unsubscribe) {\n      return;\n    }\n\n    this.internalListeners.delete(listener);\n    unsubscribe();\n    this.updateProactiveRefresh();\n  }\n\n  private assertAuthConfigured(): void {\n    _assert(\n      this.auth._initializationPromise,\n      AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH\n    );\n  }\n\n  private updateProactiveRefresh(): void {\n    if (this.internalListeners.size > 0) {\n      this.auth._startProactiveRefresh();\n    } else {\n      this.auth._stopProactiveRefresh();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _registerComponent, registerVersion } from '@firebase/app';\nimport {\n  Component,\n  ComponentType,\n  InstantiationMode\n} from '@firebase/component';\n\nimport { name, version } from '../../../package.json';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\nimport { _getClientVersion, ClientPlatform } from '../util/version';\nimport { _castAuth, AuthImpl, DefaultConfig } from './auth_impl';\nimport { AuthInterop } from './firebase_internal';\nimport { ConfigInternal } from '../../model/auth';\nimport { Dependencies } from '../../model/public_types';\nimport { _initializeAuthInstance } from './initialize';\n\nexport const enum _ComponentName {\n  AUTH = 'auth',\n  AUTH_INTERNAL = 'auth-internal'\n}\n\nfunction getVersionForPlatform(\n  clientPlatform: ClientPlatform\n): string | undefined {\n  switch (clientPlatform) {\n    case ClientPlatform.NODE:\n      return 'node';\n    case ClientPlatform.REACT_NATIVE:\n      return 'rn';\n    case ClientPlatform.WORKER:\n      return 'webworker';\n    case ClientPlatform.CORDOVA:\n      return 'cordova';\n    default:\n      return undefined;\n  }\n}\n\n/** @internal */\nexport function registerAuth(clientPlatform: ClientPlatform): void {\n  _registerComponent(\n    new Component(\n      _ComponentName.AUTH,\n      (container, { options: deps }: { options?: Dependencies }) => {\n        const app = container.getProvider('app').getImmediate()!;\n        const heartbeatServiceProvider =\n          container.getProvider<'heartbeat'>('heartbeat');\n        const appCheckServiceProvider =\n          container.getProvider<'app-check-internal'>('app-check-internal');\n        const { apiKey, authDomain } = app.options;\n\n        _assert(\n          apiKey && !apiKey.includes(':'),\n          AuthErrorCode.INVALID_API_KEY,\n          { appName: app.name }\n        );\n\n        const config: ConfigInternal = {\n          apiKey,\n          authDomain,\n          clientPlatform,\n          apiHost: DefaultConfig.API_HOST,\n          tokenApiHost: DefaultConfig.TOKEN_API_HOST,\n          apiScheme: DefaultConfig.API_SCHEME,\n          sdkClientVersion: _getClientVersion(clientPlatform)\n        };\n\n        const authInstance = new AuthImpl(\n          app,\n          heartbeatServiceProvider,\n          appCheckServiceProvider,\n          config\n        );\n        _initializeAuthInstance(authInstance, deps);\n\n        return authInstance;\n      },\n      ComponentType.PUBLIC\n    )\n      /**\n       * Auth can only be initialized by explicitly calling getAuth() or initializeAuth()\n       * For why we do this, See go/firebase-next-auth-init\n       */\n      .setInstantiationMode(InstantiationMode.EXPLICIT)\n      /**\n       * Because all firebase products that depend on auth depend on auth-internal directly,\n       * we need to initialize auth-internal after auth is initialized to make it available to other firebase products.\n       */\n      .setInstanceCreatedCallback(\n        (container, _instanceIdentifier, _instance) => {\n          const authInternalProvider = container.getProvider(\n            _ComponentName.AUTH_INTERNAL\n          );\n          authInternalProvider.initialize();\n        }\n      )\n  );\n\n  _registerComponent(\n    new Component(\n      _ComponentName.AUTH_INTERNAL,\n      container => {\n        const auth = _castAuth(\n          container.getProvider(_ComponentName.AUTH).getImmediate()!\n        );\n        return (auth => new AuthInterop(auth))(auth);\n      },\n      ComponentType.PRIVATE\n    ).setInstantiationMode(InstantiationMode.EXPLICIT)\n  );\n\n  registerVersion(name, version, getVersionForPlatform(clientPlatform));\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, getApp, _getProvider } from '@firebase/app';\n\nimport {\n  initializeAuth,\n  beforeAuthStateChanged,\n  onIdTokenChanged,\n  connectAuthEmulator\n} from '..';\nimport { registerAuth } from '../core/auth/register';\nimport { ClientPlatform } from '../core/util/version';\nimport { browserLocalPersistence } from './persistence/local_storage';\nimport { browserSessionPersistence } from './persistence/session_storage';\nimport { indexedDBLocalPersistence } from './persistence/indexed_db';\nimport { browserPopupRedirectResolver } from './popup_redirect';\nimport { Auth, User } from '../model/public_types';\nimport { getDefaultEmulatorHost, getExperimentalSetting } from '@firebase/util';\n\nconst DEFAULT_ID_TOKEN_MAX_AGE = 5 * 60;\nconst authIdTokenMaxAge =\n  getExperimentalSetting('authIdTokenMaxAge') || DEFAULT_ID_TOKEN_MAX_AGE;\n\nlet lastPostedIdToken: string | undefined | null = null;\n\nconst mintCookieFactory = (url: string) => async (user: User | null) => {\n  const idTokenResult = user && (await user.getIdTokenResult());\n  const idTokenAge =\n    idTokenResult &&\n    (new Date().getTime() - Date.parse(idTokenResult.issuedAtTime)) / 1_000;\n  if (idTokenAge && idTokenAge > authIdTokenMaxAge) {\n    return;\n  }\n  // Specifically trip null => undefined when logged out, to delete any existing cookie\n  const idToken = idTokenResult?.token;\n  if (lastPostedIdToken === idToken) {\n    return;\n  }\n  lastPostedIdToken = idToken;\n  await fetch(url, {\n    method: idToken ? 'POST' : 'DELETE',\n    headers: idToken\n      ? {\n          'Authorization': `Bearer ${idToken}`\n        }\n      : {}\n  });\n};\n\n/**\n * Returns the Auth instance associated with the provided {@link @firebase/app#FirebaseApp}.\n * If no instance exists, initializes an Auth instance with platform-specific default dependencies.\n *\n * @param app - The Firebase App.\n *\n * @public\n */\nexport function getAuth(app: FirebaseApp = getApp()): Auth {\n  const provider = _getProvider(app, 'auth');\n\n  if (provider.isInitialized()) {\n    return provider.getImmediate();\n  }\n\n  const auth = initializeAuth(app, {\n    popupRedirectResolver: browserPopupRedirectResolver,\n    persistence: [\n      indexedDBLocalPersistence,\n      browserLocalPersistence,\n      browserSessionPersistence\n    ]\n  });\n\n  const authTokenSyncUrl = getExperimentalSetting('authTokenSyncURL');\n  if (authTokenSyncUrl) {\n    const mintCookie = mintCookieFactory(authTokenSyncUrl);\n    beforeAuthStateChanged(auth, mintCookie, () =>\n      mintCookie(auth.currentUser)\n    );\n    onIdTokenChanged(auth, user => mintCookie(user));\n  }\n\n  const authEmulatorHost = getDefaultEmulatorHost('auth');\n  if (authEmulatorHost) {\n    connectAuthEmulator(auth, `http://${authEmulatorHost}`);\n  }\n\n  return auth;\n}\n\nregisterAuth(ClientPlatform.BROWSER);\n","import { _super_prop_base } from \"./_super_prop_base.js\";\n\nexport function _get(target, property, receiver) {\n    if (typeof Reflect !== \"undefined\" && Reflect.get) _get = Reflect.get;\n    else {\n        _get = function get(target, property, receiver) {\n            var base = _super_prop_base(target, property);\n\n            if (!base) return;\n\n            var desc = Object.getOwnPropertyDescriptor(base, property);\n\n            if (desc.get) return desc.get.call(receiver || target);\n\n            return desc.value;\n        };\n    }\n\n    return _get(target, property, receiver || target);\n}\nexport { _get as _ };\n","import { _get_prototype_of } from \"./_get_prototype_of.js\";\n\nexport function _super_prop_base(object, property) {\n    while (!Object.prototype.hasOwnProperty.call(object, property)) {\n        object = _get_prototype_of(object);\n        if (object === null) break;\n    }\n\n    return object;\n}\nexport { _super_prop_base as _ };\n","export const startSession = (user) => {\n  sessionStorage.setItem(\"email\", user.email);\n  sessionStorage.setItem(\"accessToken\", user.accessToken);\n}\n\nexport const getSession = () => {\n  return {\n    email: sessionStorage.getItem(\"email\"),\n    accessToken: sessionStorage.getItem(\"accessToken\"),\n  }\n}\n\nexport const endSession = () => {\n  sessionStorage.clear();\n}\n\nexport const isLoggedIn = () => {\n  return getSession().accessToken;\n}"],"names":["oldTraps","target","source","LogLevel","clientPlatform","_ref","$4acf49f6c3e67aec$var$cachedSetTimeout","$4acf49f6c3e67aec$var$cachedClearTimeout","$4acf49f6c3e67aec$var$currentQueue","$f4758df7279d6c6a$export$243e62d78d3b544d","$f4758df7279d6c6a$var$_obj","$f1bf9542bc9ee5ed$var$idbProxyableTypes","$f1bf9542bc9ee5ed$var$cursorAdvanceMethods","$0913f93b5b3c9bac$var$_obj","$0913f93b5b3c9bac$var$_obj1","$07e48e70fcf53a6e$var$_obj","$parcel$global","globalThis","self","window","global","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$i7mVp","$4tSb9","$ccCAN","$aYXpI","$3941a62c5600c9b7$var$sideCategoriesList","document","querySelector","$3941a62c5600c9b7$var$loader","$3941a62c5600c9b7$var$categoriesTitle","$3941a62c5600c9b7$var$addLoader","classList","remove","add","$3941a62c5600c9b7$var$removeLoader","$3941a62c5600c9b7$export$e48a6d30edcb68e4","$3941a62c5600c9b7$var$_createMarckUpSideCategories","_","mark","__generator","_state","label","marckUpSideCategories","sent","insertAdjacentHTML","apply","arguments","$3941a62c5600c9b7$var$createMarckAllCategories","$3941a62c5600c9b7$var$_createMarckAllCategories","innerHTML","marckAllCategories","$3941a62c5600c9b7$var$_createMarckCategorieItem","marckCategorieItem","$3941a62c5600c9b7$var$_onClick","e","preventDefault","textContent","tagName","$3941a62c5600c9b7$var$createMarckCategorieItem","currentTarget","children","map","el","parentNode","$3941a62c5600c9b7$var$_onSeeMore","contains","$3941a62c5600c9b7$var$createMarckCategorieItemMore","$3941a62c5600c9b7$var$_createMarckCategorieItemMore","closest","firstChild","previousSibling","listBooks","a","querySelectorAll","filter","dataset","category","marckCategorieItemMore","$3941a62c5600c9b7$var$createMarckUpSideCategories","addEventListener","$cBnKf","$df97da459fafe592$var$modalCardBtn","$df97da459fafe592$var$overlay","$df97da459fafe592$var$closeButton","$df97da459fafe592$var$modal","$df97da459fafe592$var$modalContent","$df97da459fafe592$var$bookId","$df97da459fafe592$var$closeModal","body","style","overflow","removeEventListener","$df97da459fafe592$var$handleKeyPress","event","key","$df97da459fafe592$var$_createMarckModal","bookId","marckModal","$df97da459fafe592$var$onBook","$df97da459fafe592$var$_onBook","_addClass","error","$df97da459fafe592$var$createMarckModal","addClass","booksId","getAttribute","fetchBook","then","param","bookCard","all","book_image","title","author","description","_id","list_name","buy_links","JSON","parse","localStorage","getItem","push","setItem","stringify","$juqrk","$bNI6E","$a568c0d5880c90ba$export$1e71eb4bef00f6b0","obj","value","Object","defineProperty","enumerable","configurable","writable","$fGQt0","$cquyX","$jqfyu","$8ZYwq","$3A6Ss","$2537243cab6b0016$export$2d841144c5f8c4ab","Parent","args","Class","_is_native_reflect_construct","Reflect","construct","instance","Function","bind","_set_prototype_of","prototype","$5yT7U","$c96ca6cb05cc1798$export$2466d533fda16e33","_cache","Map","undefined","toString","indexOf","TypeError","has","get","set","Wrapper","_get_prototype_of","constructor","create","$50zho","$4acf49f6c3e67aec$exports","$4acf49f6c3e67aec$var$process","$4acf49f6c3e67aec$var$defaultSetTimout","$4acf49f6c3e67aec$var$defaultClearTimeout","$4acf49f6c3e67aec$var$runTimeout","fun","setTimeout","clearTimeout","$4acf49f6c3e67aec$var$queue","$4acf49f6c3e67aec$var$draining","$4acf49f6c3e67aec$var$queueIndex","$4acf49f6c3e67aec$var$cleanUpNextTick","length","concat","$4acf49f6c3e67aec$var$drainQueue","timeout","len","run","$4acf49f6c3e67aec$var$runClearTimeout","marker","$4acf49f6c3e67aec$var$Item","array","$4acf49f6c3e67aec$var$noop","nextTick","Array","i","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","name","binding","cwd","chdir","dir","umask","$1d9d263a787f8021$var$stringToByteArray$1","str","out","p","c","charCodeAt","$1d9d263a787f8021$var$byteArrayToString","bytes","pos","c1","String","fromCharCode","c2","u","c21","c3","c4","c22","c31","join","$1d9d263a787f8021$export$b3b2de96497acc47","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","ENCODED_VALS","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","input","webSafe","isArray","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","encodeString","btoa","decodeString","decodeStringToByteArray","charToByteMap","charAt","byte4","haveByte4","$1d9d263a787f8021$export$55ca9d4bee46aeb3","Error1","DecodeBase64StringError","_super","_this","slice","$1d9d263a787f8021$export$e510a73ee562749","utf8Bytes","$1d9d263a787f8021$export$4b5284a3025a455","replace","$1d9d263a787f8021$export$c62426fdd000a97e","console","$1d9d263a787f8021$var$getDefaultsFromEnvVariable","defaultsJsonString","$1d9d263a787f8021$var$getDefaultsFromCookie","match","cookie","decoded","$1d9d263a787f8021$export$212bb2fc580a90a8","$1d9d263a787f8021$var$getDefaultsFromGlobal","$1d9d263a787f8021$export$a4e55266d2135a7f","__FIREBASE_DEFAULTS__","info","$1d9d263a787f8021$export$9c11895284c8adad","productName","_a","_b","emulatorHosts","$1d9d263a787f8021$export$3dfb6827a9f89756","config","$1d9d263a787f8021$export$5539a1a3afe87d6","$1d9d263a787f8021$export$85f6557964517f1a","Deferred","reject","resolve","promise","Promise","callback","catch","$1d9d263a787f8021$export$c36915b22ce77c19","navigator","$1d9d263a787f8021$export$dd24e9cd51226c56","FirebaseError","message","customData","setPrototypeOf","captureStackTrace","$1d9d263a787f8021$export$3fa6e1b18a3b2d40","ErrorFactory","service","serviceName","errors","_len","data","_key","fullCode","template","$1d9d263a787f8021$var$PATTERN","fullMessage","$1d9d263a787f8021$export$9cb4719e2e525b7a","b","aKeys","keys","bKeys","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","k","includes","aProp","bProp","$1d9d263a787f8021$var$isObject","return","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","k1","thing","$1d9d263a787f8021$export$ac4103b836844853","querystringParams","params","entries","_loop","_step_value","forEach","arrayVal","encodeURIComponent","$1d9d263a787f8021$export$c1271ca4c8a70741","querystring","tokens","split","token","_token_split","decodeURIComponent","$1d9d263a787f8021$export$1a8408415472d8ed","url","queryStart","fragmentStart","substring","$1d9d263a787f8021$var$ObserverProxy","ObserverProxy","executor","onNoObservers","observers","unsubscribes","observerCount","task","finalized","forEachObserver","observer","close","complete","nextOrObserver","$1d9d263a787f8021$var$implementsAnyMethods","methods","method","$1d9d263a787f8021$var$noop","unsub","unsubscribeOne","finalError","fn","sendOne","$1d9d263a787f8021$export$4befe9b5fa509a1b","_delegate","$4d80d01579d5bd6a$export$16fa2f45be04daa8","Component","instanceFactory","type","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","mode","props","$4d80d01579d5bd6a$var$DEFAULT_ENTRY_NAME","$4d80d01579d5bd6a$export$2881499e37b75b9a","Provider","container","component","instances","instancesDeferred","instancesOptions","onInitCallbacks","identifier","normalizedIdentifier","normalizeInstanceIdentifier","deferred","isInitialized","shouldAutoInitialize","getOrInitializeService","instanceIdentifier","options","optional","instanceDeferred","delete","services","from","values","INTERNAL","_delete","opts","_opts_options","isComponentSet","normalizedDeferredIdentifier","existingCallbacks","Set","existingInstance","callbacks","_param_options","invokeOnInitCallbacks","$4d80d01579d5bd6a$export$436a80eea5d5c0c5","ComponentContainer","providers","provider","getProvider","setComponent","addComponent","$f4758df7279d6c6a$var$instances","$f4758df7279d6c6a$var$levelStringToEnum","DEBUG","VERBOSE","INFO","WARN","ERROR","SILENT","$f4758df7279d6c6a$var$defaultLogLevel","$f4758df7279d6c6a$var$ConsoleMethod","$f4758df7279d6c6a$var$defaultLogHandler","logType","_console","logLevel","now","Date","toISOString","$f4758df7279d6c6a$export$efa9a398d6368992","Logger","_logLevel","_logHandler","_userLogHandler","val","$f1bf9542bc9ee5ed$var$cursorRequestMap","WeakMap","$f1bf9542bc9ee5ed$var$transactionDoneMap","$f1bf9542bc9ee5ed$var$transactionStoreNamesMap","$f1bf9542bc9ee5ed$var$transformCache","$f1bf9542bc9ee5ed$export$407448d2b89b1813","$f1bf9542bc9ee5ed$var$idbProxyTraps","prop","receiver","IDBTransaction","objectStoreNames","objectStore","$f1bf9542bc9ee5ed$export$efccba1c4a2ef57b","IDBRequest","unlisten","request","success","result","IDBCursor","newValue","func","IDBDatabase","transaction","$f1bf9542bc9ee5ed$var$getCursorAdvanceMethods","advance","continue","continuePrimaryKey","$f1bf9542bc9ee5ed$export$3b14a55fb2447963","storeNames","tx","sort","$f1bf9542bc9ee5ed$var$cacheDonePromiseForTransaction","DOMException","constructors","IDBObjectStore","IDBIndex","some","object","Proxy","$7818c326be87ea84$var$readMethods","$7818c326be87ea84$var$writeMethods","$7818c326be87ea84$var$cachedMethods","$7818c326be87ea84$var$getMethod","targetFuncName","useIndex","isWrite","storeName","_target","_$target","_arguments","store","index","shift","ownKeys","getOwnPropertySymbols","sym","getOwnPropertyDescriptor","getOwnPropertyDescriptors","defineProperties","$e9c86d2b5cf5c1d2$var$ownKeys","enumerableOnly","symbols","$0913f93b5b3c9bac$var$PlatformLoggerServiceImpl","PlatformLoggerServiceImpl","getProviders","getComponent","getImmediate","library","logString","$0913f93b5b3c9bac$var$name$o","$0913f93b5b3c9bac$var$version$1","$0913f93b5b3c9bac$var$logger","$0913f93b5b3c9bac$export$9f30fa0c10967f7f","$0913f93b5b3c9bac$var$PLATFORM_LOG_STRING","$0913f93b5b3c9bac$export$b4e3c36c855b14b5","$0913f93b5b3c9bac$export$9566bce3835c0f28","$0913f93b5b3c9bac$export$c930050e7bb63965","componentName","debug","app","$0913f93b5b3c9bac$export$fa5244b94c62d36a","$0913f93b5b3c9bac$export$fa0d6da0f5838f50","heartbeatController","triggerHeartbeat","$0913f93b5b3c9bac$var$ERRORS","$0913f93b5b3c9bac$var$ERROR_FACTORY","$0913f93b5b3c9bac$var$FirebaseAppImpl","FirebaseAppImpl","_isDeleted","_options","assign","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","checkDestroyed","isDeleted","appName","$0913f93b5b3c9bac$export$31499a9cd224b78c","$0913f93b5b3c9bac$export$c55cfd413944906d","rawConfig","name1","existingApp","newApp","$0913f93b5b3c9bac$export$d29d5299a7137abc","libraryKeyOrName","variant","libraryMismatch","versionMismatch","warning","warn","$0913f93b5b3c9bac$var$STORE_NAME","$0913f93b5b3c9bac$var$dbPromise","$0913f93b5b3c9bac$var$getDbPromise","blocked","upgrade","blocking","terminated","indexedDB","open","openPromise","oldVersion","newVersion","db","createObjectStore","originalErrorMessage","$0913f93b5b3c9bac$var$_readHeartbeatsFromIndexedDB","idbGetError","trys","$0913f93b5b3c9bac$var$computeKey","$0913f93b5b3c9bac$var$writeHeartbeatsToIndexedDB","heartbeatObject","$0913f93b5b3c9bac$var$_writeHeartbeatsToIndexedDB","put","appId","$0913f93b5b3c9bac$var$HeartbeatServiceImpl","HeartbeatServiceImpl","_heartbeatsCache","_storage","$0913f93b5b3c9bac$var$HeartbeatStorageImpl","_heartbeatsCachePromise","read","agent","date","platformLogger","getPlatformInfoString","$0913f93b5b3c9bac$var$getUTCDateString","lastSentHeartbeatDate","heartbeats","singleDateHeartbeat","hbTimestamp","valueOf","overwrite","_extractHeartbeatsForHeader","heartbeatsToSend","unsentEntries","headerString","$0913f93b5b3c9bac$var$extractHeartbeatsForHeader","heartbeatsCache","maxSize","_ret","heartbeatEntry","find","hb","dates","$0913f93b5b3c9bac$var$countBytes","pop","today","HeartbeatStorageImpl","_canUseIndexedDBPromise","runIndexedDBEnvironmentCheck","preExist","DB_CHECK_NAME","onsuccess","deleteDatabase","onupgradeneeded","onerror","$0913f93b5b3c9bac$var$readHeartbeatsFromIndexedDB","idbHeartbeatObject","heartbeatsObject","existingHeartbeatsObject","$e6962c1d2fca547a$export$afb3516d9d608401","property","base","hasOwnProperty","desc","$07e48e70fcf53a6e$var$_prodErrorMap","$07e48e70fcf53a6e$var$_DEFAULT_AUTH_ERROR_FACTORY","$07e48e70fcf53a6e$var$logClient","$07e48e70fcf53a6e$var$_logError","msg","$07e48e70fcf53a6e$export$d66dc83d8cfc8dd","authOrCode","rest","$07e48e70fcf53a6e$var$createErrorInternal","$07e48e70fcf53a6e$export$3d12bd131bb975d1","_authOrCode__errorFactory","fullParams","_errorFactory","$07e48e70fcf53a6e$export$91c6e00c14e7e6fd","assertion","$07e48e70fcf53a6e$var$debugFail","failure","$07e48e70fcf53a6e$var$_getCurrentUrl","location","href","$07e48e70fcf53a6e$var$_getCurrentScheme","protocol","$07e48e70fcf53a6e$var$Delay","Delay","shortDelay","longDelay","isMobile","test","runtime","onLine","$07e48e70fcf53a6e$var$_isHttpOrHttps","chrome","Math","min","$07e48e70fcf53a6e$var$_emulatorUrl","path","emulator","startsWith","$07e48e70fcf53a6e$export$faec65b429be379","FetchProvider","fetchImpl","headersImpl","responseImpl","fetch","Headers","Response","$07e48e70fcf53a6e$var$SERVER_ERROR_MAP","$07e48e70fcf53a6e$var$DEFAULT_API_TIMEOUT_MS","$07e48e70fcf53a6e$var$_addTidIfNecessary","auth","tenantId","$07e48e70fcf53a6e$var$_performApiRequest","$07e48e70fcf53a6e$var$__performApiRequest","$07e48e70fcf53a6e$var$_performFetchWithErrorHandling","query","headers","apiKey","_getAdditionalHeaders","languageCode","$07e48e70fcf53a6e$var$_getFinalTarget","apiHost","referrerPolicy","customErrorMap","fetchFn","$07e48e70fcf53a6e$var$__performFetchWithErrorHandling","errorMap","networkTimeout","response","json","errorMessage","_errorMessage_split","serverErrorCode","serverErrorMessage","authError","_canInitEmulator","$07e48e70fcf53a6e$var$NetworkTimeout","race","clearNetworkTimeout","$07e48e70fcf53a6e$var$_makeTaggedError","ok","toLowerCase","$07e48e70fcf53a6e$export$a9c23c6ac3fc3eca","factory","$07e48e70fcf53a6e$var$_performSignInRequest","$07e48e70fcf53a6e$var$__performSignInRequest","serverResponse","_serverResponse","host","apiScheme","NetworkTimeout","timer","errorParams","email","phoneNumber","_tokenResponse","$07e48e70fcf53a6e$var$_deleteAccount","$07e48e70fcf53a6e$var$_getAccountInfo","$07e48e70fcf53a6e$var$utcTimestampToDateString","utcTimestamp","Number","isNaN","getTime","toUTCString","$07e48e70fcf53a6e$var$_getIdTokenResult","user","forceRefresh","userInternal","claims","firebase","signInProvider","getIdToken","$07e48e70fcf53a6e$var$_parseToken","exp","auth_time","iat","authTime","$07e48e70fcf53a6e$var$secondsStringToMilliseconds","issuedAtTime","expirationTime","signInSecondFactor","seconds","algorithm","payload","signature","$07e48e70fcf53a6e$var$_logoutIfInvalidated","$07e48e70fcf53a6e$var$__logoutIfInvalidated","currentUser","signOut","$07e48e70fcf53a6e$var$ProactiveRefresh","ProactiveRefresh","isRunning","timerId","errorBackoff","schedule","wasError","max","expTime","stsTokenManager","interval","getInterval","iteration","$07e48e70fcf53a6e$var$UserMetadata","UserMetadata","createdAt","lastLoginAt","_initializeTime","lastSignInTime","creationTime","metadata","$07e48e70fcf53a6e$var$_reloadWithoutSaving","$07e48e70fcf53a6e$var$__reloadWithoutSaving","coreAccount","newProviderData","providerData","oldIsAnonymous","newIsAnonymous","isAnonymous","$07e48e70fcf53a6e$var$getAccountInfo","idToken","deduped","users","_notifyReloadListener","providerUserInfo","providerId","__rest","uid","rawId","displayName","photoURL","photoUrl","original","o","newData","n","passwordHash","localId","emailVerified","$07e48e70fcf53a6e$var$_reload","_persistUserIfCurrent","_notifyListenersIfCurrent","$07e48e70fcf53a6e$var$_requestStsToken","refreshToken","_auth_config","tokenApiHost","accessToken","access_token","expiresIn","expires_in","refresh_token","$07e48e70fcf53a6e$var$StsTokenManager","StsTokenManager","parsedToken","updateTokensAndExpiration","isExpired","refresh","oldToken","$07e48e70fcf53a6e$var$requestStsToken","expiresInSec","toJSON","manager","$07e48e70fcf53a6e$var$assertStringOrUndefined","$07e48e70fcf53a6e$export$b9a6b53f9be3734","UserImpl","opt","proactiveRefresh","reloadUserInfo","reloadListener","getToken","$07e48e70fcf53a6e$export$1a82df3d29112e01","$07e48e70fcf53a6e$export$2f6ca3d3b1f80bf5","userInfo","_copy","_assign","newUser","_clone","_start","_stop","reload","tokensRefreshed","updateFromServerResponse","$07e48e70fcf53a6e$var$deleteAccount","clearRefreshToken","_redirectEventId","_c","_d","_e","_f","_g","_h","plainObjectTokenManager","fromJSON","idTokenResponse","$07e48e70fcf53a6e$var$instanceCache","$07e48e70fcf53a6e$export$890c4ad488842ce7","cls","$07e48e70fcf53a6e$var$InMemoryPersistence","InMemoryPersistence","storage","_listener","$07e48e70fcf53a6e$export$24baa2b76016ce0e","$07e48e70fcf53a6e$var$PersistenceUserManager","PersistenceUserManager","persistence","userKey","_this_auth","fullUserKey","fullPersistenceKey","boundEventHandler","_onStorageEvent","_addListener","_set","blob","_get","_fromJSON","_remove","newPersistence","getCurrentUser","removeCurrentUser","setCurrentUser","_removeListener","persistenceHierarchy","availablePersistences","selectedPersistence","userToMigrate","migrationHierarchy","_isAvailable","_shouldAllowMigration","$07e48e70fcf53a6e$var$_getBrowserName","userAgent","ua","$07e48e70fcf53a6e$var$_isIEMobile","$07e48e70fcf53a6e$var$_isFirefox","$07e48e70fcf53a6e$var$_isBlackBerry","$07e48e70fcf53a6e$var$_isWebOS","$07e48e70fcf53a6e$var$_isSafari","$07e48e70fcf53a6e$var$_isChromeIOS","$07e48e70fcf53a6e$export$1fbe638ecf81657e","matches","$07e48e70fcf53a6e$export$493d36ec626b6698","$07e48e70fcf53a6e$var$_isMobileBrowser","$07e48e70fcf53a6e$export$23ebac1979863676","reportedPlatform","frameworks","reportedFrameworks","$07e48e70fcf53a6e$var$getRecaptchaConfig","$07e48e70fcf53a6e$var$_getRecaptchaConfig","$07e48e70fcf53a6e$var$isEnterprise","grecaptcha","enterprise","$07e48e70fcf53a6e$var$RecaptchaConfig","RecaptchaConfig","siteKey","emailPasswordEnabled","recaptchaKey","recaptchaEnforcementState","enforcementState","$07e48e70fcf53a6e$var$_loadJS","createElement","setAttribute","onload","charset","$07e48e70fcf53a6e$var$getScriptParentElement","getElementsByTagName","appendChild","$07e48e70fcf53a6e$var$_generateCallbackName","prefix","floor","random","$07e48e70fcf53a6e$var$RecaptchaEnterpriseVerifier","RecaptchaEnterpriseVerifier","authExtern","action","_retrieveSiteKey","_agentRecaptchaConfig","_tenantRecaptchaConfigs","clientType","retrieveRecaptchaToken","ready","execute","retrieveSiteKey","$07e48e70fcf53a6e$var$RECAPTCHA_ENTERPRISE_URL","$07e48e70fcf53a6e$var$injectRecaptchaFields","$07e48e70fcf53a6e$var$_injectRecaptchaFields","captchaResp","verifier","captchaResponse","newRequest","verify","$07e48e70fcf53a6e$var$AuthMiddlewareQueue","AuthMiddlewareQueue","queue","onAbort","wrappedCallback","nextUser","onAbortStack","beforeStateCallback","reverse","originalMessage","$07e48e70fcf53a6e$export$a05254e7c3aeba6e","AuthImpl","heartbeatServiceProvider","appCheckServiceProvider","emulatorConfig","operations","authStateSubscription","$07e48e70fcf53a6e$var$Subscription","idTokenSubscription","beforeStateQueue","redirectUser","isProactiveRefreshEnabled","_isInitialized","_deleted","_initializationPromise","_popupRedirectResolver","lastNotifiedUid","settings","appVerificationDisabledForTesting","clientVersion","sdkClientVersion","popupRedirectResolver","persistenceManager","_shouldInitProactively","_initialize","initializeCurrentUser","assertedPersistence","_currentUser","_updateCurrentUser","previouslyStoredUser","futureCurrentUser","needsTocheckMiddleware","redirectUserEventId","storedUserEventId","authDomain","getOrInitRedirectPersistenceManager","tryRedirectSignIn","directlySetCurrentUser","runMiddleware","_overrideRedirectResult","reloadAndSetCurrentUserOrClear","redirectResolver","_completeRedirectFn","_setRedirectUser","$07e48e70fcf53a6e$var$_getUserLanguage","navigatorLanguage","languages","language","userExtern","skipBeforeStateCallbacks","notifyAuthListeners","redirectPersistenceManager","setPersistence","completed","registerStateListener","pushCallback","redirectManager","resolver","_redirectPersistence","_startProactiveRefresh","_stopProactiveRefresh","currentUid","subscription","cb","addObserver","framework","_getFrameworks","heartbeatsHeader","appCheckToken","getHeartbeatsHeader","_getAppCheckToken","appCheckTokenResult","$07e48e70fcf53a6e$var$_logWarn","Subscription","proxy","subscribe","$07e48e70fcf53a6e$var$extractProtocol","protocolEnd","substr","$07e48e70fcf53a6e$var$parsePort","portStr","port","$07e48e70fcf53a6e$export$b4171a6734a65d42","AuthCredential","signInMethod","_auth","_idToken","$07e48e70fcf53a6e$var$_updateEmailPassword","$07e48e70fcf53a6e$var$signInWithPassword","$07e48e70fcf53a6e$var$_signInWithPassword","$07e48e70fcf53a6e$var$_signInWithEmailLink$1","$07e48e70fcf53a6e$var$_signInWithEmailLinkForLinking","$07e48e70fcf53a6e$export$3466f893ebf79586","EmailAuthCredential","_email","_password","_tenantId","password","returnSecureToken","_getRecaptchaConfig","log","$07e48e70fcf53a6e$var$signInWithEmailLink$1","oobCode","$07e48e70fcf53a6e$var$updateEmailPassword","$07e48e70fcf53a6e$var$signInWithEmailLinkForLinking","_getIdTokenResponse","_fromEmailAndPassword","_fromEmailAndCode","$07e48e70fcf53a6e$var$signInWithIdp","$07e48e70fcf53a6e$var$_signInWithIdp","$07e48e70fcf53a6e$export$61196ced6d74a310","OAuthCredential","pendingToken","secret","nonce","buildRequest","autoCreate","requestUri","postBody","cred","oauthToken","oauthTokenSecret","$07e48e70fcf53a6e$var$_sendPhoneVerificationCode","$07e48e70fcf53a6e$var$_signInWithPhoneNumber$1","$07e48e70fcf53a6e$var$_linkWithPhoneNumber$1","temporaryProof","$07e48e70fcf53a6e$var$VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_","$07e48e70fcf53a6e$var$_verifyPhoneNumberForExisting","operation","$07e48e70fcf53a6e$export$3a1a48c8f6ef640e","PhoneAuthCredential","$07e48e70fcf53a6e$var$signInWithPhoneNumber$1","_makeVerificationRequest","$07e48e70fcf53a6e$var$linkWithPhoneNumber$1","$07e48e70fcf53a6e$var$verifyPhoneNumberForExisting","_this_params","verificationId","verificationCode","sessionInfo","$07e48e70fcf53a6e$export$ee7c8ad385a60b7b","ActionCodeURL","actionLink","searchParams","$07e48e70fcf53a6e$var$parseMode","continueUrl","link","doubleDeepLink","iOSDeepLink","iOSDoubleDeepLink","$07e48e70fcf53a6e$export$3722cfe417b6ed86","EmailAuthProvider","PROVIDER_ID","emailLink","actionCodeUrl","parseLink","EMAIL_PASSWORD_SIGN_IN_METHOD","EMAIL_LINK_SIGN_IN_METHOD","$07e48e70fcf53a6e$var$FederatedAuthProvider","FederatedAuthProvider","defaultLanguageCode","customParameters","customOAuthParameters","$07e48e70fcf53a6e$var$BaseOAuthProvider","BaseOAuthProvider","scopes","scope","$07e48e70fcf53a6e$export$3a6d5c9ae78a2c08","FacebookAuthProvider","_fromParams","FACEBOOK_SIGN_IN_METHOD","userCredential","credentialFromTaggedObject","tokenResponse","oauthAccessToken","credential","$07e48e70fcf53a6e$export$e7c866399fa523f5","GoogleAuthProvider","addScope","GOOGLE_SIGN_IN_METHOD","oauthIdToken","$07e48e70fcf53a6e$export$71cec2538cb2c617","GithubAuthProvider","GITHUB_SIGN_IN_METHOD","$07e48e70fcf53a6e$export$dc98b0b04f4c7758","TwitterAuthProvider","TWITTER_SIGN_IN_METHOD","$07e48e70fcf53a6e$var$signUp","$07e48e70fcf53a6e$var$_signUp","$07e48e70fcf53a6e$var$UserCredentialImpl","UserCredentialImpl","operationType","_fromIdTokenResponse","$07e48e70fcf53a6e$var$providerIdForResponse","_updateTokensIfNecessary","$07e48e70fcf53a6e$var$MultiFactorError","MultiFactorError","$07e48e70fcf53a6e$var$_processCredentialSavingMfaContextIfNecessary","idTokenProvider","_getReauthenticationResolver","_fromErrorAndOperation","$07e48e70fcf53a6e$var$__link$1","bypassAuthState","_tmp","_tmp1","_linkToIdToken","_forOperation","$07e48e70fcf53a6e$var$__reauthenticate","parsed","sub","$07e48e70fcf53a6e$var$_signInWithCredential","$07e48e70fcf53a6e$var$__signInWithCredential","$07e48e70fcf53a6e$var$_signInWithCredential1","$07e48e70fcf53a6e$var$MultiFactorInfoImpl","MultiFactorInfoImpl","factorId","mfaEnrollmentId","enrollmentTime","enrolledAt","enrollment","$07e48e70fcf53a6e$var$PhoneMultiFactorInfoImpl","_fromServerResponse","$07e48e70fcf53a6e$var$TotpMultiFactorInfoImpl","PhoneMultiFactorInfoImpl","phoneInfo","TotpMultiFactorInfoImpl","$07e48e70fcf53a6e$var$_createUserWithEmailAndPassword","authInternal","signUpResponse","$07e48e70fcf53a6e$var$STORAGE_AVAILABLE_KEY","$07e48e70fcf53a6e$var$BrowserPersistenceClass","BrowserPersistenceClass","storageRetriever","removeItem","$07e48e70fcf53a6e$var$BrowserLocalPersistence","BrowserLocalPersistence","poll","onStorageEvent","localCache","pollTimer","safariLocalStorageNotSynced","$07e48e70fcf53a6e$var$_isIframe","top","fallbackToPolling","oldValue","forAllChangedKeys","_oldValue","notifyListeners","detachListener","stopPolling","storedValue","triggerListeners","storedValue1","$07e48e70fcf53a6e$var$_isIE10","documentMode","listener","setInterval","StorageEvent","clearInterval","startPolling","attachListener","size","_this1","_superprop_get__set","_superprop_get__get","_superprop_get__remove","$07e48e70fcf53a6e$var$BrowserSessionPersistence","BrowserSessionPersistence","sessionStorage","$07e48e70fcf53a6e$var$Receiver","Receiver","eventTarget","handlersMap","handleEvent","messageEvent","_messageEvent_data","eventId","eventType","handlers","ports","postMessage","status","promises","handler","origin","fulfilled","reason","eventHandler","receivers","isListeningto","newInstance","$07e48e70fcf53a6e$export$91477dc880baac21","digits","$07e48e70fcf53a6e$var$Sender","Sender","messageChannel","port1","onMessage","completionTimer","MessageChannel","start","ackTimer","port2","finally","removeMessageHandler","$07e48e70fcf53a6e$var$_window","$07e48e70fcf53a6e$var$_isWorker","$07e48e70fcf53a6e$var$__getActiveServiceWorker","serviceWorker","registration","active","$07e48e70fcf53a6e$var$DB_NAME","$07e48e70fcf53a6e$var$DB_OBJECTSTORE_NAME","$07e48e70fcf53a6e$var$DB_DATA_KEYPATH","$07e48e70fcf53a6e$var$DBPromise","DBPromise","$07e48e70fcf53a6e$var$getObjectStore","isReadWrite","$07e48e70fcf53a6e$var$_openDatabase","keyPath","toPromise","$07e48e70fcf53a6e$var$_putObject","$07e48e70fcf53a6e$var$__putObject","_obj","$07e48e70fcf53a6e$var$_getObject","$07e48e70fcf53a6e$var$_deleteObject","$07e48e70fcf53a6e$var$IndexedDBLocalPersistence","IndexedDBLocalPersistence","pendingWrites","sender","serviceWorkerReceiverAvailable","activeServiceWorker","_workerInitializationPromise","initializeServiceWorkerMessaging","op","numAttempts","_openDb","initializeReceiver","initializeSender","_getInstance","_subscribe","_origin","_poll","keyProcessed","_data","results","$07e48e70fcf53a6e$var$_getActiveServiceWorker","_send","$07e48e70fcf53a6e$var$_getServiceWorkerController","controller","write","_withPendingWrite","_withRetries","notifyServiceWorker","$07e48e70fcf53a6e$var$getObject","keysInResult","localKey","getAllRequest","getAll","fbase_key","$07e48e70fcf53a6e$var$__verifyPhoneNumber","recaptchaToken","phoneInfoOptions","session","phoneEnrollmentInfo","phoneSessionInfo","multiFactorHint","multiFactorUid","mfaPendingCredential","phoneSignInInfo","response1","phoneResponseInfo","$07e48e70fcf53a6e$var$sendPhoneVerificationCode","_reset","$07e48e70fcf53a6e$export$56c0d5a1e737357d","PhoneAuthProvider","phoneOptions","applicationVerifier","$07e48e70fcf53a6e$var$_verifyPhoneNumber","_fromVerification","_fromTokenResponse","PHONE_SIGN_IN_METHOD","$07e48e70fcf53a6e$var$IdpCredential","IdpCredential","_buildIdpRequest","sessionId","returnIdpCredential","$07e48e70fcf53a6e$var$_signIn","$07e48e70fcf53a6e$var$_reauth","$07e48e70fcf53a6e$var$_reauthenticate","$07e48e70fcf53a6e$var$_link","$07e48e70fcf53a6e$var$__link","$07e48e70fcf53a6e$var$_link$1","$07e48e70fcf53a6e$var$AbstractPopupRedirectOperation","AbstractPopupRedirectOperation","pendingPromise","eventManager","onExecution","registerConsumer","urlResponse","getIdpTask","unregisterAndCleanUp","unregisterConsumer","cleanUp","$07e48e70fcf53a6e$var$_POLL_WINDOW_CLOSE_TIMEOUT","$07e48e70fcf53a6e$var$PopupOperation","PopupOperation","authWindow","pollId","currentPopupAction","cancel","_openPopup","associatedEvent","_originValidation","_isIframeWebStorageSupported","isSupported","pollUserCancellation","closed","$07e48e70fcf53a6e$var$redirectOutcomeMap","$07e48e70fcf53a6e$var$RedirectAction","RedirectAction","readyOutcome","$07e48e70fcf53a6e$var$_getAndClearPendingRedirectStatus","$07e48e70fcf53a6e$var$__getAndClearPendingRedirectStatus","_superprop_get_execute","_superprop_get_onAuthEvent","_redirectUserForId","hasPendingRedirect","$07e48e70fcf53a6e$export$cf2f7c5792f80b46","$07e48e70fcf53a6e$export$158acd800e1ef08b","resolverExtern","$07e48e70fcf53a6e$var$__getRedirectResult","$07e48e70fcf53a6e$export$9d398bebfec1c039","AuthEventManager","cachedEventUids","consumers","queuedRedirectEvent","hasHandledPotentialRedirect","lastProcessedEventTime","authEventConsumer","isEventForConsumer","sendToConsumer","saveEventToCache","hasEventBeenHandled","handled","consumer","$07e48e70fcf53a6e$var$isRedirectEvent","$07e48e70fcf53a6e$var$isNullRedirectEvent","onError","onAuthEvent","eventIdMatches","clear","$07e48e70fcf53a6e$var$eventUid","v","$07e48e70fcf53a6e$var$__getProjectConfig","$07e48e70fcf53a6e$var$IP_ADDRESS_REGEX","$07e48e70fcf53a6e$var$HTTP_REGEX","$07e48e70fcf53a6e$var$__validateOrigin","authorizedDomains","domain","$07e48e70fcf53a6e$export$9fa96a7d116ea3ce","$07e48e70fcf53a6e$var$matchDomain","expected","currentUrl","URL","hostname","ceUrl","escapedDomainPattern","re","RegExp","$07e48e70fcf53a6e$var$NETWORK_TIMEOUT","$07e48e70fcf53a6e$var$resetUnloadedGapiModules","beacon","___jsl","H","hint","r","L","CP","$07e48e70fcf53a6e$var$cachedGApiLoader","$07e48e70fcf53a6e$var$PING_TIMEOUT","$07e48e70fcf53a6e$var$IFRAME_ATTRIBUTES","position","width","height","tabindex","$07e48e70fcf53a6e$var$EID_FROM_APIHOST","$07e48e70fcf53a6e$var$__openIframe","context","gapi1","eid","loadGapiIframe","gapi","load","iframes","getContext","ontimeout","Iframe","cbName","where","fw","messageHandlersFilter","CROSS_ORIGIN_IFRAMES_FILTER","attributes","dontclear","iframe","networkError","networkErrorTimer","clearTimerAndResolve","restyle","setHideOnLeave","ping","$07e48e70fcf53a6e$var$BASE_POPUP_OPTIONS","resizable","statusbar","toolbar","$07e48e70fcf53a6e$export$9f4f30ee63539e24","AuthPopup","window1","$07e48e70fcf53a6e$var$FIREBASE_APP_CHECK_FRAGMENT_ID","$07e48e70fcf53a6e$export$92108d983e8ee699","authType","redirectUrl","additionalParams","$07e48e70fcf53a6e$var$__getRedirectUrl","paramsDict","key1","appCheckTokenFragment","setDefaultLanguage","getCustomParameters","getScopes","tid","$07e48e70fcf53a6e$var$WEB_STORAGE_SUPPORT_KEY","$07e48e70fcf53a6e$var$BrowserPopupRedirectResolver","BrowserPopupRedirectResolver","eventManagers","originValidationPromises","$07e48e70fcf53a6e$var$_open","click","screen","availHeight","left","availWidth","scrollbars","optionsString","reduce","accum","_param","$07e48e70fcf53a6e$var$_isIOSStandalone","standalone","createEvent","initMouseEvent","dispatchEvent","newWin","focus","_this_eventManagers_key","promise1","initAndGetManager","$07e48e70fcf53a6e$var$_openIframe","iframeEvent","authEvent","onEvent","send","$07e48e70fcf53a6e$var$_validateOrigin","$07e48e70fcf53a6e$var$MultiFactorAssertionImpl","MultiFactorAssertionImpl","_finalizeEnroll","_finalizeSignIn","$07e48e70fcf53a6e$var$PhoneMultiFactorAssertionImpl","PhoneMultiFactorAssertionImpl","phoneVerificationInfo","$07e48e70fcf53a6e$export$953cecd6e717a553","PhoneMultiFactorGenerator","_fromCredential","FACTOR_ID","$07e48e70fcf53a6e$export$971d5caa766a69d7","TotpMultiFactorGenerator","oneTimePassword","$07e48e70fcf53a6e$var$TotpMultiFactorAssertionImpl","_fromSecret","enrollmentId","_fromEnrollmentId","mfaSession","totpEnrollmentInfo","$07e48e70fcf53a6e$export$7ccc53e8f1e7dfc5","_fromStartTotpMfaEnrollmentResponse","TotpMultiFactorAssertionImpl","otp","totpVerificationInfo","_makeTotpVerificationInfo","TotpSecret","secretKey","hashingAlgorithm","codeLength","codeIntervalSeconds","enrollmentCompletionDeadline","accountName","issuer","useDefaults","$07e48e70fcf53a6e$var$_isEmptyString","totpSessionInfo","sharedSecretKey","verificationCodeLength","periodSec","finalizeEnrollmentTime","$07e48e70fcf53a6e$var$name","$07e48e70fcf53a6e$var$version","$07e48e70fcf53a6e$var$AuthInterop","AuthInterop","internalListeners","assertAuthConfigured","unsubscribe","onIdTokenChanged","updateProactiveRefresh","$07e48e70fcf53a6e$var$authIdTokenMaxAge","$07e48e70fcf53a6e$var$lastPostedIdToken","$07e48e70fcf53a6e$var$mintCookieFactory","idTokenResult","idTokenAge","getIdTokenResult","$07e48e70fcf53a6e$export$ae1af26003f05816","disableWarnings","_extractHostAndPort","$07e48e70fcf53a6e$export$7f8ddf7c7c20b3cd","deps","getOptions","initialize","authTokenSyncUrl","mintCookie","beforeAuthStateChanged","authEmulatorHost","$07e48e70fcf53a6e$var$extractHostAndPort","authority","exec","hostAndPort","bracketedIPv6","_hostAndPort_split","freeze","$07e48e70fcf53a6e$var$emitEmulatorWarning","attachBanner","sty","innerText","backgroundColor","border","color","bottom","margin","zIndex","textAlign","readyState","hierarchy","_app_options","authInstance","_updateErrorMap","_initializeWithPersistence","setInstantiationMode","setInstanceCreatedCallback","_instanceIdentifier","_instance","authInternalProvider","$07e48e70fcf53a6e$var$getVersionForPlatform","$45c499f577ee3690$var$app","projectId","storageBucket","messagingSenderId","$45c499f577ee3690$export$745b26d8c003724a","$07e48e70fcf53a6e$export$3d8c2f653ac9d0b9","$43867dc939e5f558$export$c0d84948cecf78d8","$59736801ee551fe7$var$loginBtn","$59736801ee551fe7$var$backdropModalLogin","$59736801ee551fe7$var$closeloginModalBtn","$59736801ee551fe7$var$formLogin","$59736801ee551fe7$var$onClickBtnlogin","$59736801ee551fe7$var$onCloseModalEsc","$59736801ee551fe7$var$onToggleModal","toggle","$59736801ee551fe7$var$_onSubmit","loginResponse","setError","appCompatName","analyticsName","analyticsCompatName","appCheckName","appCheckCompatName","authName","authCompatName","databaseName","databaseCompatName","functionsName","functionsCompatName","installationsName","installationsCompatName","messagingName","messagingCompatName","performanceName","performanceCompatName","remoteConfigName","remoteConfigCompatName","storageName","storageCompatName","firestoreName","firestoreCompatName","packageName","setLogLevelImpl","stringToByteArray","jsHelpers\r\n                        ._loadJS","applyActionCode","sendEmailVerification","sendPasswordResetEmail","sendSignInLinkToEmail","signInWithEmailLink","IDP_REQUEST_URI","signInWithPhoneNumber","linkWithPhoneNumber","_link","signInWithCustomToken","getIdTokenResponse","authentication.sendPasswordResetEmail","authentication\r\n            .sendPasswordResetEmail","account.resetPassword","account.applyActionCode","api.sendSignInLinkToEmail","api\r\n            .sendSignInLinkToEmail","api.sendEmailVerification","api.verifyAndChangeEmail","updateProfile","apiUpdateProfile","apiUpdateEmailPassword","_POLLING_INTERVAL_MS","jsHelpers._generateCallbackName","jsHelpers._loadJS","_linkUser","js._generateCallbackName","js\r\n                ._loadJS","gapiLoader._loadGapi"],"version":3,"file":"index.e39e4eab.js.map"}